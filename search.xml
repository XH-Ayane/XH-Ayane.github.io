<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>个人整理面试大宝典</title>
      <link href="/2025/08/08/%E4%B8%AA%E4%BA%BA%E6%95%B4%E7%90%86%E9%9D%A2%E8%AF%95%E5%A4%A7%E5%AE%9D%E5%85%B8/"/>
      <url>/2025/08/08/%E4%B8%AA%E4%BA%BA%E6%95%B4%E7%90%86%E9%9D%A2%E8%AF%95%E5%A4%A7%E5%AE%9D%E5%85%B8/</url>
      
        <content type="html"><![CDATA[<h1 id="个人整理面试超级大宝典"><a href="#个人整理面试超级大宝典" class="headerlink" title="个人整理面试超级大宝典"></a>个人整理面试超级大宝典</h1><blockquote><p>源自于JAVA面试宝典，个人学习笔记等，整合出来的用于面试使用的终极面试大纲，希望可以通过面试</p><blockquote><p>经过再三考虑，考虑到时间成本等关系，所以我打算采用难点补充来完善这份笔记，所以简单的，或者我认为没有什么必要去归纳在这个文章里面的我就不做进来了</p></blockquote></blockquote><p><strong>重点会集中放在集合，反射，序列化，多线程&amp;并发，JVM，String，spring boot，Mybatis</strong></p><p>==这个里面的内容必须！必须！必须！全部背记熟练，而且可以做出延伸和联系==</p><h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><h4 id="面向对象的设计原则"><a href="#面向对象的设计原则" class="headerlink" title="面向对象的设计原则"></a>面向对象的设计原则</h4><p>类的设计原则有七个，包括：<strong>开闭原则</strong>、<strong>里氏代换原则</strong>、<strong>迪米特原则（最少知道原则）</strong>、<strong>单一职责原则</strong>、<strong>接口分隔原则</strong>、<strong>依赖倒置原则</strong>、<strong>组合/聚合复用原则</strong>。</p><h3 id="JVM-JDK-JRE的区别"><a href="#JVM-JDK-JRE的区别" class="headerlink" title="JVM,JDK,JRE的区别"></a>JVM,JDK,JRE的区别</h3><p><strong>JDK（Java Development Kit）是开发工具包（含编译器），JRE（Java Runtime Environment）是运行环境（含JVM），JVM（Java Virtual Machine）是执行字节码的虚拟机。</strong></p><ul><li><strong>JDK</strong> = 开发工具（javac等） + <strong>JRE</strong></li><li><strong>JRE</strong> = 运行库 + <strong>JVM</strong></li><li><strong>JVM</strong> = 执行Java程序的虚拟引擎</li></ul><h3 id="面向对象和面向过程的区别"><a href="#面向对象和面向过程的区别" class="headerlink" title="面向对象和面向过程的区别"></a>面向对象和面向过程的区别</h3><p>面向对象（OOP）以对象为核心，封装数据和方法，强调复用和扩展；面向过程（POP）以函数为核心，按步骤执行，强调流程控制。**</p><ul><li><strong>OOP</strong>：类与对象、继承/多态/封装（如Java、Python）</li><li><strong>POP</strong>：函数调用、线性逻辑（如C、早期编程）</li></ul><h3 id="java中常见的数据结构"><a href="#java中常见的数据结构" class="headerlink" title="java中常见的数据结构"></a>java中常见的数据结构</h3><blockquote><p>什么是数据结构，数据结构是指，计算机保存，组织数据的方式</p></blockquote><p><strong>在java中的数据结构有以下几种：</strong></p><p>1.线性表（ArrayList）<br>2.链表（LinkedList）<br>3.栈（Stack）<br>4.队列（Queue）<br>5.图（Map）<br>6.树（Tree</p><h3 id="java中的几种数据类型"><a href="#java中的几种数据类型" class="headerlink" title="java中的几种数据类型"></a>java中的几种数据类型</h3><p>整形：byte,short,int,long<br>浮点型：float,double<br>字符型：char<br>布尔型：boolean</p><h3 id="讲讲什么是显示转换，什么是隐式转换"><a href="#讲讲什么是显示转换，什么是隐式转换" class="headerlink" title="讲讲什么是显示转换，什么是隐式转换"></a>讲讲什么是显示转换，什么是隐式转换</h3><p>显示转换就是类型强转，把一个大类型的数据强制赋值给小类型的数据；隐式转换就是大范围的变量能够接受小范围的数据；隐式转换和显式转换其实就是自动类型转换和强制类型转换。</p><h3 id="什么是拆装箱机制？什么是包装类？为什么要使用包装类"><a href="#什么是拆装箱机制？什么是包装类？为什么要使用包装类" class="headerlink" title="什么是拆装箱机制？什么是包装类？为什么要使用包装类"></a>什么是拆装箱机制？什么是包装类？为什么要使用包装类</h3><p>装箱就是自动将基本数据类型转换为包装器类型，通过调用方法integer的<code>valueOf</code>方法，拆箱就是自动将包装器类型转换为基本数据类型，与装箱相反</p><p><strong>java中的包装类都是哪些</strong></p><p>byte：Byte，short：Short，int：Integer，long：Long，float：Float，double：Double，char：Character ，boolean：Boolean</p><p><strong>一个java类中包含哪些内容</strong></p><p>属性、方法、内部类、构造方法、代码块。</p><h3 id="面向对象的特征有哪些方面？"><a href="#面向对象的特征有哪些方面？" class="headerlink" title="面向对象的特征有哪些方面？"></a>面向对象的特征有哪些方面？</h3><h4 id="1-抽象-Abstraction"><a href="#1-抽象-Abstraction" class="headerlink" title="1. 抽象 (Abstraction)"></a>1. 抽象 (Abstraction)</h4><p>抽象是将一类对象的共同特征提取出来构造类的过程，包括：</p><ul><li><strong>数据抽象</strong>：提取对象的属性</li><li><strong>行为抽象</strong>：提取对象的方法</li></ul><p>特点：</p><ul><li>只关注对象”有什么”属性和行为，不关注”如何实现”</li><li>例如：定义”汽车”类时，只关心它有”颜色”、”品牌”等属性和”启动”、”加速”等方法，不关心这些方法的具体实现</li></ul><h4 id="2-封装-Encapsulation"><a href="#2-封装-Encapsulation" class="headerlink" title="2. 封装 (Encapsulation)"></a>2. 封装 (Encapsulation)</h4><p>封装是将数据和操作数据的方法绑定在一起，并隐藏内部实现细节：</p><ul><li>对数据的访问只能通过定义好的接口</li><li>隐藏一切可隐藏的实现细节，只暴露必要的接口</li></ul><p>特点：</p><ul><li>提高了安全性和易用性</li><li>例如：全自动洗衣机封装了所有洗衣流程，用户只需按几个按钮</li></ul><h4 id="3-继承-Inheritance"><a href="#3-继承-Inheritance" class="headerlink" title="3. 继承 (Inheritance)"></a>3. 继承 (Inheritance)</h4><p>继承是从已有类派生出新类的机制：</p><ul><li>被继承的类称为父类/超类/基类</li><li>新类称为子类/派生类</li></ul><p>特点：</p><ul><li>子类继承父类的属性和方法</li><li>可以实现代码复用和扩展</li><li>是封装程序中可变因素的重要手段</li></ul><h4 id="4-多态-Polymorphism"><a href="#4-多态-Polymorphism" class="headerlink" title="4. 多态 (Polymorphism)"></a>4. 多态 (Polymorphism)</h4><p>多态是指同一操作作用于不同对象可以有不同的行为表现：</p><h4 id="多态类型"><a href="#多态类型" class="headerlink" title="多态类型"></a>多态类型</h4><ol><li><strong>编译时多态（静态多态）</strong>：<ul><li>通过方法重载(overload)实现</li><li>在编译时确定调用哪个方法</li></ul></li><li><strong>运行时多态（动态多态）</strong>：<ul><li>通过方法重写(override)实现</li><li>在运行时根据对象类型确定调用哪个方法</li></ul></li></ol><h4 id="实现多态的条件"><a href="#实现多态的条件" class="headerlink" title="实现多态的条件"></a>实现多态的条件</h4><ol><li>方法重写（子类重写父类方法）</li><li>对象造型（父类引用指向子类对象）</li></ol><h4 id="多态示例"><a href="#多态示例" class="headerlink" title="多态示例"></a>多态示例</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">// 父类</span><br><span class="line">class Animal &#123;</span><br><span class="line">    void sound() &#123;</span><br><span class="line">        System.out.println(&quot;动物发出声音&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 子类</span><br><span class="line">class Dog extends Animal &#123;</span><br><span class="line">    @Override</span><br><span class="line">    void sound() &#123;</span><br><span class="line">        System.out.println(&quot;汪汪汪&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Cat extends Animal &#123;</span><br><span class="line">    @Override</span><br><span class="line">    void sound() &#123;</span><br><span class="line">        System.out.println(&quot;喵喵喵&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class Test &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Animal a1 = new Dog();  // 父类引用指向子类对象</span><br><span class="line">        Animal a2 = new Cat();  // 父类引用指向子类对象</span><br><span class="line">        </span><br><span class="line">        a1.sound();  // 输出&quot;汪汪汪&quot;</span><br><span class="line">        a2.sound();  // 输出&quot;喵喵喵&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="访问修饰符public，private-protected-以及不写时的区别？"><a href="#访问修饰符public，private-protected-以及不写时的区别？" class="headerlink" title="访问修饰符public，private,protected,以及不写时的区别？"></a>访问修饰符public，private,protected,以及不写时的区别？</h3><div class="table-container"><table><thead><tr><th>修饰符</th><th>当前类</th><th>同包</th><th>子类</th><th>其他包</th></tr></thead><tbody><tr><td>public</td><td>✓</td><td>✓</td><td>✓</td><td>✓</td></tr><tr><td>protected</td><td>✓</td><td>✓</td><td>✓</td><td>✗</td></tr><tr><td>default</td><td>✓</td><td>✓</td><td>✗</td><td>✗</td></tr><tr><td>private</td><td>✓</td><td>✗</td><td>✗</td><td>✗</td></tr></tbody></table></div><p>类的成员不写访问修饰时默认为 default。默认对于同一个包中的其他类相当于公 开（public），对于不是同一个包中的其他类相当于私有（private）。受保护 （protected）对子类相当于公开，对不是同一包中的没有父子关系的类相当于私 有。Java 中，外部类的修饰符只能是 public 或默认，类的成员（包括内部类）的 修饰符可以是以上四种。</p><h3 id="String是最基本的数据类型吗？"><a href="#String是最基本的数据类型吗？" class="headerlink" title="String是最基本的数据类型吗？"></a>String是最基本的数据类型吗？</h3><p>不是。Java 中的基本数据类型只有 8 个：byte、short、int、long、float、double、 char，boolean；除了基本类型（primitie type），剩下的都是引用类型（reference type），Java 5 以后引入的枚举类型也算是一种比较特殊的引用型。</p><h3 id="方法重写-Override-与方法重载-Overload-的区别"><a href="#方法重写-Override-与方法重载-Overload-的区别" class="headerlink" title="方法重写(Override)与方法重载(Overload)的区别"></a>方法重写(Override)与方法重载(Overload)的区别</h3><h4 id="方法重写-Override"><a href="#方法重写-Override" class="headerlink" title="方法重写(Override)"></a>方法重写(Override)</h4><p><strong>定义</strong></p><p>在子类中重新定义父类已有的方法，方法签名完全相同但实现不同。</p><p><strong>特点</strong></p><ol><li><strong>作用范围</strong>：发生在父类与子类之间（继承关系）</li><li><strong>方法签名：</strong><ul><li>方法名必须相同</li><li>参数列表必须相同</li><li>返回类型相同或为父类方法返回类型的子类（协变返回类型）</li></ul></li><li><strong>访问权限：</strong><ul><li>子类方法的访问修饰符不能比父类更严格</li><li>即访问权限要≥父类方法（public &gt; protected &gt; default &gt; private）</li></ul></li><li><strong>异常处理：</strong><ul><li>不能抛出比父类方法更宽泛的检查异常</li><li>可以抛出相同、更具体或不抛出检查异常</li></ul></li><li><strong>其他限制：</strong><ul><li>不能重写被final、static或private修饰的方法</li></ul></li></ol><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">class Animal &#123;</span><br><span class="line">    protected void makeSound() &#123;</span><br><span class="line">        System.out.println(&quot;动物发出声音&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Dog extends Animal &#123;</span><br><span class="line">    @Override  // 使用@Override注解可帮助编译器检查是否正确重写</span><br><span class="line">    public void makeSound() &#123;  // 访问权限扩大(protected→public)</span><br><span class="line">        System.out.println(&quot;汪汪汪&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="方法重载-Overload"><a href="#方法重载-Overload" class="headerlink" title="方法重载(Overload)"></a>方法重载(Overload)</h4><p><strong>定义</strong></p><p>在同一个类中，多个方法使用相同名称但参数列表不同。</p><p><strong>特点</strong></p><ol><li><strong>作用范围</strong>：发生在同一个类中（或父子类之间）</li><li><strong>方法签名</strong>：<ul><li>方法名相同</li><li>参数列表必须不同（类型、数量或顺序不同）</li></ul></li><li><strong>返回类型</strong>：<ul><li>可以相同也可以不同</li><li>不能仅通过返回类型不同来区分重载方法</li></ul></li><li><strong>访问权限</strong>：可以任意修改，没有限制</li><li><strong>异常处理</strong>：可以抛出任意异常，没有限制</li></ol><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">class Calculator &#123;</span><br><span class="line">    // 参数数量不同</span><br><span class="line">    public int add(int a, int b) &#123;</span><br><span class="line">        return a + b;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public int add(int a, int b, int c) &#123;</span><br><span class="line">        return a + b + c;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    // 参数类型不同</span><br><span class="line">    public double add(double a, double b) &#123;</span><br><span class="line">        return a + b;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    // 参数顺序不同</span><br><span class="line">    public String concat(String a, int b) &#123;</span><br><span class="line">        return a + b;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public String concat(int a, String b) &#123;</span><br><span class="line">        return a + b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="重写与重载的关键区别"><a href="#重写与重载的关键区别" class="headerlink" title="重写与重载的关键区别"></a>重写与重载的关键区别</h4><div class="table-container"><table><thead><tr><th>特性</th><th>重写(Override)</th><th>重载(Overload)</th></tr></thead><tbody><tr><td><strong>作用范围</strong></td><td>不同类（父子类）</td><td>同一个类</td></tr><tr><td><strong>方法签名</strong></td><td>必须完全相同</td><td>必须参数列表不同</td></tr><tr><td><strong>返回类型</strong></td><td>相同或子类</td><td>可以不同</td></tr><tr><td><strong>访问权限</strong></td><td>不能比父类更严格</td><td>可以任意修改</td></tr><tr><td><strong>异常处理</strong></td><td>不能抛出更宽泛的检查异常</td><td>可以抛出任意异常</td></tr><tr><td><strong>多态类型</strong></td><td>运行时多态（动态绑定）</td><td>编译时多态（静态绑定）</td></tr><tr><td><strong>目的</strong></td><td>改变已有方法的行为</td><td>提供同一功能的不同实现方式</td></tr></tbody></table></div><h4 id="记忆技巧"><a href="#记忆技巧" class="headerlink" title="记忆技巧"></a>记忆技巧</h4><ul><li><strong>重写</strong>：垂直关系（父子类），”覆盖”父类方法</li><li><strong>重载</strong>：水平关系（同类中），”扩展”方法功能</li></ul><h3 id="equals与-的区别"><a href="#equals与-的区别" class="headerlink" title="equals与==的区别"></a>equals与==的区别</h3><h4 id="（运算符）"><a href="#（运算符）" class="headerlink" title="==（运算符）"></a>==（运算符）</h4><ul><li><strong>比较什么</strong>：内存地址（引用类型）或原始值（基本类型）</li><li><strong>特点：</strong><ul><li>引用类型：判断是否同一个对象</li><li>基本类型：直接比较数值</li><li>对Integer等包装类：-128~127有缓存，之外是新对象</li></ul></li></ul><h4 id="equals-（方法）"><a href="#equals-（方法）" class="headerlink" title="equals()（方法）"></a>equals()（方法）</h4><ul><li><strong>比较什么</strong>：对象内容（需重写）</li><li><strong>特点：</strong><ul><li>默认行为同==（比较地址）</li><li>通常需要重写（如String、Integer已重写）</li><li>必须与hashCode()一起重写</li></ul></li></ul><h4 id="✅-黄金法则"><a href="#✅-黄金法则" class="headerlink" title="✅ 黄金法则"></a>✅ 黄金法则</h4><ol><li><strong>永远用equals()比较对象内容</strong></li><li><strong>常量放前面防NPE</strong>：<code>&quot;abc&quot;.equals(str)</code></li><li><strong>基本类型用==，对象用equals()</strong></li><li><strong>阿里规范禁止用==比较对象</strong></li></ol><h4 id="⚠️-典型陷阱"><a href="#⚠️-典型陷阱" class="headerlink" title="⚠️ 典型陷阱"></a>⚠️ 典型陷阱</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Integer a = 100, b = 100; </span><br><span class="line">a == b; // true（缓存）</span><br><span class="line"></span><br><span class="line">Integer c = 200, d = 200;  </span><br><span class="line">c == d; // false（非缓存）</span><br><span class="line">c.equals(d); // true ✅</span><br></pre></td></tr></table></figure><h3 id="java的各种数据默认值"><a href="#java的各种数据默认值" class="headerlink" title="java的各种数据默认值"></a>java的各种数据默认值</h3><ul><li>Byte,short,int,long默认是都是0</li><li>Boolean默认值是false</li><li>Char类型的默认值是’’</li><li>Float与double类型的默认是0.0</li><li>对象类型的默认值是null</li></ul><h3 id="java常用包有哪些"><a href="#java常用包有哪些" class="headerlink" title="java常用包有哪些"></a>java常用包有哪些</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Java.lang</span><br><span class="line">Java.io</span><br><span class="line">Java.sql</span><br><span class="line">Java.util</span><br><span class="line">Java.awt</span><br><span class="line">Java.net</span><br><span class="line">Java.math</span><br></pre></td></tr></table></figure><h3 id="java中的是值传递还是引用传递"><a href="#java中的是值传递还是引用传递" class="headerlink" title="java中的是值传递还是引用传递"></a>java中的是值传递还是引用传递</h3><p>理论上说，java都是引用传递，对于基本数据类型，传递是值的副本，而不是值本身。对于对象类型，传递是对象的引用，当在一个方法操作操作参数的时候，其实操作的是引用所指向的对象。</p><h3 id="形参与实参的区别"><a href="#形参与实参的区别" class="headerlink" title="形参与实参的区别"></a>形参与实参的区别</h3><h4 id="本质区别"><a href="#本质区别" class="headerlink" title="本质区别"></a>本质区别</h4><ul><li><strong>形参(parameter)</strong>：函数定义时声明的虚拟变量，用于接收传入值</li><li><strong>实参(argument)</strong>：函数调用时传入的具体值或表达式</li></ul><h4 id="五大核心区别"><a href="#五大核心区别" class="headerlink" title="五大核心区别"></a>五大核心区别</h4><ol><li><strong>生命周期不同</strong><ul><li>形参：函数调用时创建，调用结束销毁</li><li>实参：在调用前必须已存在且有确定值</li></ul></li><li><strong>内存关系</strong><ul><li>基本类型：形参是实参的副本（值传递）</li><li>引用类型：形参复制实参的引用地址（共享对象）</li></ul></li><li><strong>数据流向</strong><ul><li>单向传递：只能实参→形参</li><li>形参修改不影响实参（除非操作引用对象的属性）</li></ul></li><li><strong>匹配规则</strong><ul><li>数量、类型、顺序必须严格一致</li><li>自动类型转换仅适用于基本类型</li></ul></li><li><strong>使用场景</strong><ul><li>形参：只能在函数体内使用</li><li>实参：可以是常量/变量/表达式/函数返回值</li></ul></li></ol><h3 id="Java关键方法（Object类）"><a href="#Java关键方法（Object类）" class="headerlink" title="Java关键方法（Object类）"></a>Java关键方法（Object类）</h3><ul><li><code>equals()</code>：对象相等比较</li><li><code>hashCode()</code>：哈希值生成</li><li><code>toString()</code>：对象字符串表示</li><li><code>wait()/notify()</code>：线程通信</li><li><code>clone()</code>：对象复制</li><li><code>getClass()</code>：获取运行时类</li></ul><h3 id="值传递-vs-引用传递"><a href="#值传递-vs-引用传递" class="headerlink" title="值传递 vs 引用传递"></a>值传递 vs 引用传递</h3><ul><li><p><strong>基本类型</strong>：值传递（形参修改不影响实参）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">void change(int a) &#123; a = 100; &#125;</span><br><span class="line">int x = 1;</span><br><span class="line">change(x); // x仍为1</span><br></pre></td></tr></table></figure></li><li><p><strong>引用类型</strong>：传递引用地址（可修改对象属性）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">void changeName(Person p) &#123; p.name = &quot;Tom&quot;; &#125;</span><br><span class="line">Person obj = new Person();</span><br><span class="line">changeName(obj); // obj.name变为&quot;Tom&quot;</span><br></pre></td></tr></table></figure></li></ul><h3 id="Stetic关键字有什么作用？"><a href="#Stetic关键字有什么作用？" class="headerlink" title="Stetic关键字有什么作用？"></a>Stetic关键字有什么作用？</h3><ul><li>Static可以修饰内部类、方法、变量、代码块</li><li>Static修饰的类是静态内部类</li><li>Static修饰的方法是静态方法，表示该方法属于当前类的，而不属于某个对象的，静态方法也不被重写，可以直接使用类名来调用。</li><li>在static方法中不能使用this或者super关键字。</li><li>Static修饰变量是静态变量或者叫类变量，静态变量被所有实例所共享，不会依赖于对象。静态变量在内存中只有一份拷贝，在JVM加载类的时候，只为静态分配一次内存。</li><li>Static修饰的代码块叫静态代码块，通常用来做程序优化的。静态代码块中的代码在整个类加载的时候只会执行一次。静态代码块可以有多个，如果有多个，按照先后顺序依次执行。</li></ul><h3 id="final在java中的作用，有哪些用法？"><a href="#final在java中的作用，有哪些用法？" class="headerlink" title="final在java中的作用，有哪些用法？"></a>final在java中的作用，有哪些用法？</h3><ol><li>被fifinal修饰的类不可以被继承</li><li>被fifinal修饰的方法不可以被重写</li><li>被fifinal修饰的变量不可以被改变.如果修饰引用,那么表示引用不可变,引用指向的内容可变.</li><li>被fifinal修饰的方法,JVM会尝试将其内联,以提高运行效率</li><li>被fifinal修饰的常量,在编译阶段会存入常量池中.</li></ol><h3 id="StringString-StringBuffffer-和-StringBuilder-的区别是什么？"><a href="#StringString-StringBuffffer-和-StringBuilder-的区别是什么？" class="headerlink" title="StringString StringBuffffer 和 StringBuilder 的区别是什么？"></a>StringString StringBuffffer 和 StringBuilder 的区别是什么？</h3><p>在 Java 中，<strong>StringBuilder</strong> 和 <strong>StringBuffer</strong> 都是用于修改字符串的类，与 <strong>String</strong> 类不同，它们的对象可以被多次修改，而不会生成新的未使用对象。</p><p><strong>线程安全性</strong></p><p><strong>StringBuffer</strong> 是线程安全的，因为它的所有公开方法都使用了 <em>synchronized</em> 关键字进行同步。这意味着多个线程可以安全地访问同一个 <strong>StringBuffer</strong> 实例。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public synchronized StringBuffer append(String str) &#123;</span><br><span class="line"></span><br><span class="line">// 代码实现</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">而 **StringBuilder** 则不是线程安全的，它的公开方法没有使用 *synchronized* 关键字。例如：</span><br><span class="line"></span><br><span class="line">public StringBuilder append(String str) &#123;</span><br><span class="line"></span><br><span class="line">// 代码实现</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因此，在单线程环境下，建议使用 <strong>StringBuilder</strong>，因为它的性能比 <strong>StringBuffer</strong> 更高。</p><p><strong>性能</strong></p><p>由于 <strong>StringBuilder</strong> 没有同步机制，所以它的性能优于 <strong>StringBuffer</strong>。在需要高性能且不涉及多线程的情况下，<strong>StringBuilder</strong> 是更好的选择。</p><p><strong>缓冲区</strong></p><p><strong>StringBuffer</strong> 在每次调用 <em>toString</em> 方法时，会直接使用缓存区的 <em>toStringCache</em> 值来构造一个字符串。而 <strong>StringBuilder</strong> 每次都需要复制一次字符数组，再构造一个字符串。</p><h3 id="String类的常用方法有哪些？"><a href="#String类的常用方法有哪些？" class="headerlink" title="String类的常用方法有哪些？"></a>String类的常用方法有哪些？</h3><ul><li>charAt：返回指定索引处的字符</li><li>indexOf()：返回指定字符的索引</li><li>replace()：字符串替换</li><li>trim()：去除字符串两端空白</li><li>split()：分割字符串，返回一个分割后的字符串数组</li><li>getBytes()：返回字符串的byte类型数组</li><li>length()：返回字符串长度</li><li>toLowerCase()：将字符串转成小写字母</li><li>toUpperCase()：将字符串转成大写字符</li><li>substring()：截取字符串</li><li>format()：格式化字符串</li><li>equals()：字符串比较</li></ul><h3 id="java中的继承是单继承还是多继承"><a href="#java中的继承是单继承还是多继承" class="headerlink" title="java中的继承是单继承还是多继承"></a>java中的继承是单继承还是多继承</h3><p>Java中既有单继承，又有多继承。对于java类来说只能有一个父类，对于接口来说可以同时继承多个接口</p><h3 id="Super与this表示什么？"><a href="#Super与this表示什么？" class="headerlink" title="Super与this表示什么？"></a>Super与this表示什么？</h3><p>Super表示当前类的父类对象</p><p>This表示当前类的对象</p><h3 id="抽象类和接口的区别"><a href="#抽象类和接口的区别" class="headerlink" title="抽象类和接口的区别?"></a>抽象类和接口的区别?</h3><p><strong>抽象类：</strong></p><ol><li>抽象方法，只有行为的概念，没有具体的行为实现。使用abstract关键字修饰，没有方法体。子类必须重写这些抽象方法。</li><li>包含抽象方法的类，一定是抽象类。</li><li>抽象类只能被继承，一个类只能继承一个抽象类。</li></ol><p><strong>接口：</strong></p><ol><li>全部的方法都是抽象方法，属性都是常量</li><li>不能实例化，可以定义变量。</li><li>接口变量可以引用具体实现类的实例</li><li>接口只能被实现，一个具体类实现接口，必须实现全部的抽象方法</li><li>接口之间可以多实现</li><li>一个具体类可以实现多个接口，实现多继承现象</li></ol><h3 id="Hashcode的作用"><a href="#Hashcode的作用" class="headerlink" title="Hashcode的作用"></a>Hashcode的作用</h3><p>hashCode() 是一个Java中的方法，它返回对象的哈希码（hash code）。hashCode是由对象根据其特征属性计算得出的一个整数值。它用于快速识别对象并在哈希表等数据结构中进行高效的存储和检索。</p><ul><li><h3 id="hashcode的实现机制"><a href="#hashcode的实现机制" class="headerlink" title="hashcode的实现机制"></a>hashcode的实现机制</h3><p>hashCode方法可以这样理解：它返回的就是根据对象的内存地址换算出的一个值。这样一来，当集合要添加新的元素时，先调用这个元素的hashCode方法，就一下子能定位到它应该放置的物理位置上。如果这个位置上没有元素，它就可以直接存储在这个位置上，不用再进行任何比较了；如果这个位置上已经有元素了，就调用它的equals方法与新元素进行比较，相同的话就不存了，不相同就散列其它的地址。这样一来实际调用equals方法的次数就大大降低了，几乎只需要一两次。</p></li><li><h3 id="HashMap的扩容机制"><a href="#HashMap的扩容机制" class="headerlink" title="HashMap的扩容机制"></a>HashMap的扩容机制</h3><p>HashMap 的<strong>底层用的是数组</strong>。向 HashMap 里不停地添加元素，当数组无法装载更多元素时，就需要对数组进行扩容，以便装入更多的元素；除此之外，容量的提升也会相应地提高查询效率，因为”桶（坑）”更多了嘛，原来需要通过链表存储的（查询的时候需要遍历），扩容后可能就有自己专属的”坑位”了（直接就能查出来）。</p><p>数组是<strong>无法自动扩容</strong> 的，所以如果要扩容的话，就需要新建一个大的数组，然后把之前小的数组的元素复制过去，并且要<strong>重新计算哈希值和重新分配桶（重新散列</strong>），这个过程也是挺耗时的。</p><p><strong>HashMap 的扩容是通过resize 方法 来实现的，JDK 8 中融入了红黑树</strong></p><blockquote><p>一句话总结出来就是，当我们往 HashMap 中不断添加元素时，HashMap 会自动进行扩容操作（条件是元素数量达到负载因子（load factor）乘以数组长度时），以保证其存储的元素数量不会超出其容量限制。</p><p>在进行扩容操作时，HashMap 会先将数组的长度扩大一倍，然后将原来的元素重新散列到新的数组中。</p><p>由于元素的位置是通过 key 的 hash 和数组长度进行与运算得到的，因此在数组长度扩大后，元素的位置也会发生一些改变。一部分索引不变，另一部分索引为”原索引+旧容量”。</p></blockquote></li></ul><h3 id="java创建对象的方式有？"><a href="#java创建对象的方式有？" class="headerlink" title="java创建对象的方式有？"></a>java创建对象的方式有？</h3><ol><li><p>new创建新对象</p></li><li><p>通过反射机制</p></li><li><p>采用clone机制</p></li><li><p>通过序列化机制</p></li></ol><h3 id="拷贝和浅拷贝的区别是什么"><a href="#拷贝和浅拷贝的区别是什么" class="headerlink" title="拷贝和浅拷贝的区别是什么"></a>拷贝和浅拷贝的区别是什么</h3><blockquote><p>我的记忆方法是，一个诛九族，一个杀自己</p></blockquote><p><strong>浅拷贝:</strong><br>被复制对象的所有变量都含有与原来的对象相同的值,而所有的对其他对象的引用仍然指向原来的对象.换言之,浅拷贝仅仅复制所考虑的对象,而不复制它所引用的对象.<br><strong>深拷贝:</strong><br>被复制对象的所有变量都含有与原来的对象相同的值.而那些引用其他对象的变量将指向被复制过的新对象.而不再是原有的那些被引用的对象.换言之.深拷贝把要复制的对象所引用的对象都复制了一遍.</p><h3 id="final、finalize-、finally"><a href="#final、finalize-、finally" class="headerlink" title="final、finalize()、finally"></a>final、finalize()、finally</h3><p>这三个长的挺像的吧……</p><p><strong>性质不同</strong></p><ol><li>final为关键字；</li><li>finalize()为方法；</li><li>finally为区块标志，用于try语句中；</li></ol><p><strong>作用</strong></p><ol><li>final为用于标识常量的关键字，final标识的关键字存储在常量池中（在这里final常量的具体用法将在下面进行介绍）；</li><li>finalize()方法在Object中进行了定义，用于在对象“消失”时，由JVM进行调用用于对对象进行垃圾回收，类似于C++中的析构函数；用<br> 户自定义时，用于释放对象占用的资源（比如进行I/0操作）；</li><li>finally{}用于标识代码块，与try{}进行配合，不论try中的代码执行完或没有执行完（这里指有异常），该代码块之中的程序必定会进<br> 行；</li></ol><p>==注意在回答的时候请务必展开到final的具体用法上==</p><h3 id="JDBC操作的步骤"><a href="#JDBC操作的步骤" class="headerlink" title="JDBC操作的步骤"></a>JDBC操作的步骤</h3><p>加载数据库驱动类<br>打开数据库连接<br>执行sql语句<br>处理返回结果<br>关闭资源</p><h3 id="在使用jdbc的时候，如何防止出现sql注入的问题。"><a href="#在使用jdbc的时候，如何防止出现sql注入的问题。" class="headerlink" title="在使用jdbc的时候，如何防止出现sql注入的问题。"></a>在使用jdbc的时候，如何防止出现sql注入的问题。</h3><blockquote><p>这个问题在项目面试的时候大概率会问到</p></blockquote><p>使用PreparedStatement类，而不是使用Statement类即可</p><h3 id="是否了解连接池，使用连接池的好处"><a href="#是否了解连接池，使用连接池的好处" class="headerlink" title="是否了解连接池，使用连接池的好处"></a>是否了解连接池，使用连接池的好处</h3><blockquote><p>所有的池子作用基本上都差不多，所以一定要公式化记忆，并答出具体的内容</p></blockquote><p>数据库连接是非常消耗资源的，影响到程序的性能指标。连接池是用来分配、管理、释放数据库连接的，可以使应用程序重复使用同一个数据库连接，而不是每次都创建一个新的数据库连接。通过释放空闲时间较长的数据库连接避免数据库因为创建太多的连接而造成的连接遗漏问题，提高了程序性能。</p><h3 id="TCP和DUP的区别"><a href="#TCP和DUP的区别" class="headerlink" title="TCP和DUP的区别"></a>TCP和DUP的区别</h3><p>TCP：传输控制协议，他是一种面向连接的传输层协议，能够提供高可靠性的通信。</p><p>能够保证数据无误，无丢失，无失序，无重复。</p><p>适用情况：</p><p>1、适合于对传输质量要求较高，以及传输大量数据的通信。</p><p>2、在需要可靠数据传输的场合，通常使用TCP协议</p><p>3、MSN/QQ等即时通讯软件的用户登录账户管理相关的功能通常采用TCP协议</p><p>UDP：用户数据报协议，提供的是非面向连接的、不可靠的数据流传输。</p><p>在TCP/IP协议中，TCP协议提供可靠的连接服务，采用三次握手建立一个连接。</p><p>UDP不提供可靠性，也不提供报文到达确认、排序以及流量控制等功能。他只是把应用程序传给IP层的数据报发送出去，但是不能保证他们能到达目的地。因此报文可能会丢失、重复以及乱序等。在数据发送前不需要连接，所以可以进行高效率通信，适合于广播/组播式通信中。</p><h3 id="TCP的三次握手"><a href="#TCP的三次握手" class="headerlink" title="TCP的三次握手"></a>TCP的三次握手</h3><p>第一次握手：客户通过调用connect进行主动打开(active open)。这引起客户TCP发送一个SYN（表示同步）分节（SYN=J），它告诉服务器客户将在连接中发送到数据的初始序列号。并进入SYN_SEND状态，等待服务器的确认。</p><p>第二次握手：服务器必须确认客户的SYN，同时自己也得发送一个SYN分节，它含有服务器将在同一连接中发送的数据的初始序列号。服务器以单个字节向客户发送SYN和对客户SYN的ACK（表示确认），此时服务器进入SYN_RECV状态。</p><p>第三次握手：客户收到服务器的SYN+ACK。向服务器发送确认分节，此分节发送完毕，客户服务器进入ESTABLISHED状态，完成三次握手。</p><h3 id="GET请求和POST请求区别"><a href="#GET请求和POST请求区别" class="headerlink" title="GET请求和POST请求区别"></a>GET请求和POST请求区别</h3><ul><li><strong>Post和Get的共同点：</strong><br>①都是HTTP协议中的两个发送请求的方法，底层都是 <strong>基于TCP/IP协议</strong> 。</li><li><strong>post</strong><ul><li>①post传递数据，不需要在url中显式出来，而get方法需要在 url中显式 。<br>②post传输的 数据量大，可以达到2M ，而get传参受url长度限制， 最多传递1024字节 。<br>③post请求是 将数据传输到服务器端 ，而get请求是为了 从服务器端取数据（为什么get也能传参？为了告诉服务端需要什么数据）<br>④post在真正接受数据之前会 先将请求头发送给服务器进行确认，然后才真正发送数据 。</li></ul></li><li><strong>Get</strong><ul><li>①get传递的参数在页面可以看见，安全性低。（post更安全，不会作为url的一部分，不会被缓存、保存在服务器日志、以及浏览器浏览记录中）<br>②GET请求请求 参数在请求行中，没有请求体 。POST请求请求 参数在请求体中 。<br>③get传参 速度更快 。<br>④get不能 传递中文，会乱码 ，而post不会出现乱码问题。</li></ul></li></ul><h3 id="什么是TomCat"><a href="#什么是TomCat" class="headerlink" title="什么是TomCat?"></a>什么是TomCat?</h3><p>Tomcat是一个开源免费的轻量级Web服务器，支持Servlet/JSP少量JavaEE规范。Tomcat也被称为Web容器、Servlet容器。Servlet需要依赖于Tomcat才能运行。</p><h3 id="什么是Servlet？Servlet由谁来创建？Servlet方法由谁调用？"><a href="#什么是Servlet？Servlet由谁来创建？Servlet方法由谁调用？" class="headerlink" title="什么是Servlet？Servlet由谁来创建？Servlet方法由谁调用？"></a>什么是Servlet？Servlet由谁来创建？Servlet方法由谁调用？</h3><p>Servlet是Java提供的一门 动态web 资源开发技术，Servlet由web服务器创建，Servlet方法由web服务器调用。</p><h3 id="Servlet的生命周期"><a href="#Servlet的生命周期" class="headerlink" title="Servlet的生命周期"></a>Servlet的生命周期</h3><p>对象的生命周期指一个对象从被创建到被销毁的整个过程。<br>Servlet运行在Servlet容器（web服务器）中，其生命周期由容器来管理，分为4个阶段：<br>① 加载和实例化：默认情况下，当servlet第一次被访问时，由容器创建servlet对象。<br>② 初始化：在Servlet实例化之后，容器将调用servlet的init()方法初始化这个对象，完成一些如加载配置文件、创建连接等初始化的工作。该方法只调用一次。<br>③ 请求处理：每次请求servlet时，Servlet容器都会调用Servlet的service()方法对请求进行处理。<br>④ 服务终止：当需要释放内存或者容器关闭时，容器就会调用Servlet实例的destroy()方法完成资源的释放。在destroy()方法调用之后，容器会释放这个Servlet实例，该实例随后会被Java的垃圾收集器所回收</p><h3 id="什么是请求转发"><a href="#什么是请求转发" class="headerlink" title="什么是请求转发"></a>什么是请求转发</h3><p>请求转发（forward）：一种在 服务器内部的资源跳转方式。<br>实现方式req.getRequestDispatcher(“资源B路径”).forward(req,resp)；<br>请求转发资源间共享数据：使用Request对象 void setAttribute(String name,Object o)：存储数据到request域中。 Object getAttribute(String name)：根据key，获取值。 void removeAttribute(String name)：根据key，删除该键值对。</p><h3 id="请求转发的特点"><a href="#请求转发的特点" class="headerlink" title="请求转发的特点"></a>请求转发的特点</h3><p>① 浏览器地址栏路径不发生变化。<br>② 只能转发到当前服务器的内部资源。<br>③ 一次请求，可以在转发的资源间使用request共享数据。</p><h3 id="请求重定向的特点"><a href="#请求重定向的特点" class="headerlink" title="请求重定向的特点"></a>请求重定向的特点</h3><p>① 浏览器地址栏路径发生变化。<br>② 可以重定向到任意位置的资源（服务器内部、外部均可）。<br>③ 两次请求，不能在多个资源使用request共享数据。</p><h3 id="Cookie-amp-Session的用途和区别"><a href="#Cookie-amp-Session的用途和区别" class="headerlink" title="Cookie &amp; Session的用途和区别"></a>Cookie &amp; Session的用途和区别</h3><p>Cookie和Session都是来完成一次会话内多次请求间 数据共享 的。<br>区别：</p><p>存储位置：Cookie是将数据存储在客户端，Session 将数据存储在服务端。<br>安全性：Cookie 不安全，Session安全。<br>数据大小：Cookie最大3KB，Session无大小限制。<br>存储时间：Cookie可以长期存储，Session 默认30分钟。<br>服务器性能：Cookie不占服务器资源，Session占用服务器资源。</p><h3 id="Filter是什么，什么作用？"><a href="#Filter是什么，什么作用？" class="headerlink" title="Filter是什么，什么作用？"></a>Filter是什么，什么作用？</h3><ul><li>概念：Filter表示过滤器，是JavaWeb三大组件（Servlet、Filter、Listener）之一。</li><li>过滤器可以把对资源的请求 拦截 下来，从而实现一些特殊的功能。</li><li>过滤器一般完成一些 通用的操作 ，比如：权限控制、统一编码处理、敏感字符处理等等。</li></ul><h3 id="Listener是什么？有什么作用？"><a href="#Listener是什么？有什么作用？" class="headerlink" title="Listener是什么？有什么作用？"></a>Listener是什么？有什么作用？</h3><ul><li>概念：Listener表示监听器，是JavaWeb三大组件（Servlet、Filter、Listener）之一。</li><li>监听器可以监听就是在application、session、request三个对象创建、销毁或者往其中添加修改删除属性时自动执行代码的功能组件。</li></ul><h3 id="AJAX是什么？有什么作用？"><a href="#AJAX是什么？有什么作用？" class="headerlink" title="AJAX是什么？有什么作用？"></a>AJAX是什么？有什么作用？</h3><p>AJAX（Asynchronous JavaScript And XML）：<strong>异步</strong> 的JavaScript和XML。</p><p>AJAX作用：<br>① 与服务器进行数据交换：通过AJAX可以给服务器发送请求，并获取服务器响应的数据。（使用了AJAX和服务器进行通信，就可以使用HTML+AJAX来替换JSP页面了）<br>② 异步交互：可以在 不重新加载整个页面 的情况下，与服务器交换数据并 更新部分网页 的技术，如：搜索联想、用户名是否可用校验等。</p><h3 id="静态内部类如何定义，什么叫成员内部类"><a href="#静态内部类如何定义，什么叫成员内部类" class="headerlink" title="静态内部类如何定义，什么叫成员内部类"></a>静态内部类如何定义，什么叫成员内部类</h3><p><strong>定义在类内部的静态类，就是静态内部类。</strong></p><ol><li>静态内部类可以访问外部类所有的静态变量和方法，即使是 private 的也一样。</li><li>静态内部类和一般类一致，可以定义静态变量、方法，构造方法等。</li><li>其它类使用静态内部类需要使用“外部类.静态内部类”方式，如下所示：Out.Inner inner = new Out.Inner();inner.print();</li><li>Java集合类HashMap内部就有一个静态内部类Entry。Entry是HashMap存放元素的抽象，HashMap 内部维护 Entry 数组用了存放元素，但是 Entry 对使用者是透明的。像这种和外部类关系密切的，且不依赖外部类实例的，都可以使用静态内部类。</li></ol><p><strong>定义在类内部的非静态类，就是成员内部类。</strong></p><p>成员内部类不能定义静态方法和变量（final修饰的除外）。这是因为成员内部类是非静态的，<br>类初始化的时候先初始化静态成员，如果允许成员内部类定义静态变量，那么成员内部类的静态变量初始化顺序是有歧义的。</p><h3 id="排序都有哪几种方法？请列举"><a href="#排序都有哪几种方法？请列举" class="headerlink" title="排序都有哪几种方法？请列举"></a>排序都有哪几种方法？请列举</h3><p>排序的方法有：插入排序（直接插入排序、希尔排序），交换排序（冒泡排序、快速排序），选择排序（直接选择排序、堆排序），归并排序，分配排序（箱排序、基数排序）快速排序的伪代码。/ /使用快速排序方法对a[ 0 :n- 1 ]排序从a[ 0 :n- 1 ]中选择一个元素作为m i d d le，该元素为支点把余下的元素分割为两段left 和r i g h t，使得l e f t中的元素都小于等于支点，而right 中的元素都大于等于支点递归地使用快速排序方法对left 进行排序递归地使用快速排序方法对right 进行排序所得结果为l e f t + m i d d l e + r i g h t</p><h3 id="说出一些常用的类，包，接口，请各举5个"><a href="#说出一些常用的类，包，接口，请各举5个" class="headerlink" title="说出一些常用的类，包，接口，请各举5个"></a>说出一些常用的类，包，接口，请各举5个</h3><ul><li>常用的类：BufferedReader BufferedWriter FileReader FileWirter String Integer常用的包：java.lang java.awt java.io java.util java.sql</li><li>常用的接口：Remote List Map Document NodeList</li></ul><h3 id="Java-中会存在内存泄漏吗，请简单描述。"><a href="#Java-中会存在内存泄漏吗，请简单描述。" class="headerlink" title="Java 中会存在内存泄漏吗，请简单描述。"></a>Java 中会存在内存泄漏吗，请简单描述。</h3><p>理论上 Java 因为有垃圾回收机制（ GC）不会存在内存泄露问 题（ 这也是 Java 被广泛使用于服务器端编程的一个重要 原因 ）；然而在实际开发中 ，可能会存在无用但可达的对象，这些对象不能被 GC 回收 ，因此也会导致内存 泄露的发生 。</p><h3 id="如何实现对象克隆？"><a href="#如何实现对象克隆？" class="headerlink" title="如何实现对象克隆？"></a><strong>如何实现对象克隆？</strong></h3><p><strong>有两种方式：</strong></p><p>1). 实现 Cloneable 接口并重写 Object 类中的 clone()方法；<br>2). 实现 Serializable 接口，通过对象的序列化和反序列化实现克隆，可以实现真正的深度克隆</p><h3 id="一个”-java”源文件中是否可以包含多个类（不是内部类）？有什么限制？"><a href="#一个”-java”源文件中是否可以包含多个类（不是内部类）？有什么限制？" class="headerlink" title="一个”.java”源文件中是否可以包含多个类（不是内部类）？有什么限制？"></a>一个”.java”源文件中是否可以包含多个类（不是内部类）？有什么限制？</h3><p>可以，但一个源文件中最多只能有一个公开类（public class）而且文件名必须和公开类的类名完全保持一致。</p><h2 id="集合、泛型"><a href="#集合、泛型" class="headerlink" title="集合、泛型"></a>集合、泛型</h2><h3 id="ArrayList和linkedList的区别"><a href="#ArrayList和linkedList的区别" class="headerlink" title="ArrayList和linkedList的区别"></a>ArrayList和linkedList的区别</h3><p>Array(数组）是基于索引(index)的数据结构，它使用索引在数组中搜索和读取数据是很快的。<br>Array获取数据的时间复杂度是O(1),但是要删除数据却是开销很大，因为这需要重排数组中的所有数据,(因为删除数据以后, 需要把后面所有的数据前移)</p><p><strong>缺点:</strong> 数组初始化必须指定初始化的长度, 否则报错</p><ul><li>List—是一个有序的集合，可以包含重复的元素，提供了按索引访问的方式，它继承Collection。</li><li>List有两个重要的实现类：ArrayList和LinkedList<br>ArrayList: 可以看作是能够自动增长容量的数组</li><li>ArrayList的toArray方法返回一个数组</li><li>ArrayList的asList方法返回一个列表</li><li>ArrayList底层的实现是Array, 数组扩容实现</li><li><strong>LinkList是一个双链表,在添加和删除元素时具有比ArrayList更好的性能.但在get与set方面弱于ArrayList.当然,这些对比都是指数据量很大或者操作很频繁。</strong>【相对而言】</li></ul><h3 id="HashMap和HashTable的区别"><a href="#HashMap和HashTable的区别" class="headerlink" title="HashMap和HashTable的区别"></a>HashMap和HashTable的区别</h3><blockquote><p>这个部分的引申部分可以很多，抓到什么部分就拐进去多讲点，但是自己不要硬撑，讲慢点过过脑子</p></blockquote><p><strong>1、两者父类不同</strong><br>HashMap是继承自AbstractMap类，而Hashtable是继承自Dictionary类。不过它们都实现了同时实现<br>了map、Cloneable（可复制）、Serializable（可序列化）这三个接口。<br><strong>2、对外提供的接口不同</strong><br>Hashtable比HashMap多提供了elments() 和contains() 两个方法。<br>elments() 方法继承自Hashtable的父类Dictionnary。elements() 方法用于返回此Hashtable中的<br>value的枚举。<br>contains()方法判断该Hashtable是否包含传入的value。它的作用与containsValue()一致。事实上，<br>contansValue() 就只是调用了一下contains() 方法。<br><strong>3、对null的支持不同</strong></p><p> Hashtable：key和value都不能为null。</p><p>HashMap：key可以为null，但是这样的key只能有一个，因为必须保证key的唯一性；可以有多个key<br>值对应的value为null。</p><p><strong>4、安全性不同</strong><br>HashMap是线程不安全的，在多线程并发的环境下，可能会产生死锁等问题，因此需要开发人员自己<br>处理多线程的安全问题。<br>Hashtable是线程安全的，它的每个方法上都有synchronized 关键字，因此可直接用于多线程中。<br>虽然HashMap是线程不安全的，但是它的效率远远高于Hashtable，这样设计是合理的，因为大部分的使用场景都是单线程。当需要多线程操作的时候可以使用线程安全的ConcurrentHashMap。<br>ConcurrentHashMap虽然也是线程安全的，但是它的效率比Hashtable要高好多倍。因为<br>ConcurrentHashMap使用了分段锁，并不对整个数据进行锁定。<br><strong>5、初始容量大小和每次扩充容量大小不同</strong></p><p><strong>6、计算hash值的方法不同</strong></p><h3 id="Collection包结构，与Collections的区别"><a href="#Collection包结构，与Collections的区别" class="headerlink" title="Collection包结构，与Collections的区别"></a>Collection包结构，与Collections的区别</h3><ul><li>Collection是集合类的上级接口，子接口有 Set、List、LinkedList、ArrayList、Vector、Stack、Set；</li><li>Collections是集合类的一个帮助类， 它包含有各种有关集合操作的静态多态方法，用于实现对各种集合的搜索、排序、线程安全化等操作。此类不能实例化，就像一个工具类，服务于Java的Collection框架。</li></ul><h3 id="简单的说一下List，Set-Map三者的区别"><a href="#简单的说一下List，Set-Map三者的区别" class="headerlink" title="简单的说一下List，Set,Map三者的区别"></a>简单的说一下List，Set,Map三者的区别</h3><ul><li><strong>List(对付顺序的好帮手)：</strong> List接口存储一组不唯一（可以有多个元素引用相同的对象），有序的对象</li><li><strong>Set(注重独一无二的性质):</strong>不允许重复的集合。不会有多个元素引用相同的对象。</li><li><strong>Map(用Key来搜索的专一):</strong> 使用键值对存储。Map会维护与Key有关联的值。两个Key可以引用相同的对象，但Key不能重复，典型的Key是String类型，但也可以是任何对象。</li></ul><h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><h3 id="Java中异常分为哪两种？"><a href="#Java中异常分为哪两种？" class="headerlink" title="Java中异常分为哪两种？"></a>Java中异常分为哪两种？</h3><p>可以分为编译时异常和运行时异常这两种大类</p><h3 id="异常的处理机制有几种"><a href="#异常的处理机制有几种" class="headerlink" title="异常的处理机制有几种"></a>异常的处理机制有几种</h3><p>异常捕捉：try…catch…finally，异常抛出：throws。</p><blockquote><p>他们一个在代码块中，排除特定部分，一个在方法体处抛出</p></blockquote><ul><li><h3 id="关于异常而言try-catch-fifinally，try里有return，finally还执行么？"><a href="#关于异常而言try-catch-fifinally，try里有return，finally还执行么？" class="headerlink" title="关于异常而言try catch fifinally，try里有return，finally还执行么？"></a>关于异常而言try catch fifinally，try里有return，finally还执行么？</h3><p><strong>执行</strong>，并且finally的执行早于try里面的return<br><strong>结论：</strong><br>1、不管有木有出现异常，finally块中代码都会执行；<br>2、当try和catch中有return时，finally仍然会执行；<br>3、finally是在return后面的表达式运算后执行的（此时并没有返回运算后的值，而是先把要返回的值保存起来，管finally中的代码怎么样，<br>返回的值都不会改变，任然是之前保存的值），所以函数返回值是在finally执行前确定的；<br>4、finally中最好不要包含return，否则程序会提前退出，返回值不是try或catch中保存的返回值。</p></li></ul><h3 id="Thow与thorws区别"><a href="#Thow与thorws区别" class="headerlink" title="Thow与thorws区别"></a>Thow与thorws区别</h3><p><strong>位置不同</strong></p><ol><li>throws 用在函数上，后面跟的是异常类，可以跟多个；而 throw 用在函数内，后面跟的<br>是异常对象。</li></ol><p><strong>功能不同：</strong></p><ol><li>throws 用来声明异常，让调用者只知道该功能可能出现的问题，可以给出预先的处理方<br> 式；throw 抛出具体的问题对象，执行到 throw，功能就已经结束了，跳转到调用者，并<br> 将具体的问题对象抛给调用者。也就是说 throw 语句独立存在时，下面不要定义其他语<br> 句，因为执行不到。</li><li>throws 表示出现异常的一种可能性，并不一定会发生这些异常；throw 则是抛出了异常，<br> 执行 throw 则一定抛出了某种异常对象。</li><li>两者都是消极处理异常的方式，只是抛出或者可能抛出异常，但是不会由函数去处理异<br> 常，真正的处理异常由函数的上层调用处理。</li></ol><h3 id="error和exception有什么区别"><a href="#error和exception有什么区别" class="headerlink" title="error和exception有什么区别"></a>error和exception有什么区别</h3><p>error 表示恢复不是不可能但很困难的情况下的一种严重问题。比如说内存溢出。不可能指望程序能处理这样的况 exception 表示一种设计或实现问题。也就是说，它表示如果程序运行正常，从不会发生的情况</p><h2 id="IO-amp-amp-NIO"><a href="#IO-amp-amp-NIO" class="headerlink" title="IO&amp;&amp; NIO"></a>IO&amp;&amp; NIO</h2><h3 id="java中的IO流"><a href="#java中的IO流" class="headerlink" title="java中的IO流"></a>java中的IO流</h3><p><strong>Java 中 IO 流分为几种</strong><br><strong>Java 中 IO 流？</strong></p><ol><li>按照流的向分，可以分为输入流和输出流；</li><li>按照操作单元划分，可以划分为字节流和字符流；</li><li>按照流的角色划分为节点流和处理流。</li></ol><p><strong>典型基类</strong></p><ol><li>InputStream/Reader: 所有的输入流的基类，前者是字节输入流，后者是字符输入流。</li><li>OutputStream/Writer: 所有输出流的基类，前者是字节输出流，后者是字符输出流。</li></ol><h3 id="java中的IO和NIO的区别"><a href="#java中的IO和NIO的区别" class="headerlink" title="java中的IO和NIO的区别"></a>java中的IO和NIO的区别</h3><p><strong>一句话总结</strong>：<br> 传统I/O是面向流的阻塞式IO（BIO），而NIO是面向通道的非阻塞IO，采用选择器实现多路复用，显著提升高并发性能。</p><ul><li><p><strong>(拓展问题)阻塞式模型和非阻塞式模型</strong></p></li><li><p><strong>多路复用模型和信号驱动模型</strong></p><blockquote><p>这玩意说人话就是</p><p><strong>多路复用模型（如select/poll/epoll）</strong>：<br>就像一个高效的餐厅领班，同时监听多个餐桌的需求。程序通过一个系统调用（如select）告诉内核要监听的多个socket，内核会持续检查这些socket的状态，当任何一个socket准备好读写时，就通知应用程序。这样单个线程就能处理大量连接，避免了为每个连接创建线程的开销。</p><p><strong>信号驱动模型（如SIGIO）</strong>：<br>类似于订餐提醒服务。程序先向内核注册一个信号处理函数，然后当socket有数据到达时，内核会发送SIGIO信号通知应用程序。这种方式是非阻塞的，应用程序可以在信号到来前做其他事情。</p></blockquote><p><strong>主要区别</strong>：</p><ol><li>通知方式：多路复用是主动查询，信号驱动是被动通知</li><li>实时性：信号驱动通常响应更快</li><li>扩展性：多路复用能处理更多连接（特别是epoll）</li><li>兼容性：信号驱动在某些系统上行为不一致</li></ol><p><strong>实际应用</strong>：</p><ul><li>高并发服务器多用多路复用（如Nginx用epoll）</li><li>信号驱动更适合低延迟场景（如某些实时系统）</li><li>现代系统通常将两者结合使用（如Linux的eventfd）</li></ul></li></ul><p><strong>核心对比（面试要点）</strong></p><div class="table-container"><table><thead><tr><th>特性</th><th>I/O (BIO)</th><th>NIO (New I/O)</th></tr></thead><tbody><tr><td><strong>工作模式</strong></td><td>阻塞式（线程等待IO完成）</td><td>非阻塞式（立即返回状态）</td></tr><tr><td><strong>数据结构</strong></td><td>面向流（Stream）</td><td>面向通道（Channel）和缓冲区</td></tr><tr><td><strong>传输方式</strong></td><td>单向传输（输入/输出流分开）</td><td>双向传输（通道可读可写）</td></tr><tr><td><strong>多路复用</strong></td><td>不支持（每个连接需独立线程）</td><td>通过Selector监控多个通道事件</td></tr><tr><td><strong>性能表现</strong></td><td>低并发下稳定，高并发资源消耗大</td><td>高并发优势明显（单线程处理多连接）</td></tr><tr><td><strong>典型场景</strong></td><td>连接数少且稳定的场景</td><td>高并发、短连接的服务器场景</td></tr></tbody></table></div><p><strong>补充说明</strong>：<br> NIO的核心三件套：<code>Channel</code>（通道）、<code>Buffer</code>（缓冲区）、<code>Selector</code>（选择器），其中<code>Selector</code>通过事件驱动机制实现单线程管理数千连接。</p><blockquote><p>Java IO和NIO的区别其实很简单。传统IO是阻塞式的，每个连接都要一个线程来处理，线程多了性能就扛不住。NIO是非阻塞的，一个线程可以同时处理多个连接，靠的是Selector这个”多路复用器”来轮询哪些连接有数据到达，这样就能用很少的线程服务大量连接，特别适合高并发场景。</p><p>NIO用Channel替代了Stream，用Buffer来装数据，可以双向读写。传统IO的流是单向的，读和写要分开。NIO的性能更好，但编程也更复杂，不像IO那么简单直接。所以现在一般用Netty这种框架来简化NIO的开发。</p></blockquote><h3 id="字节流和字符流的区别"><a href="#字节流和字符流的区别" class="headerlink" title="字节流和字符流的区别"></a>字节流和字符流的区别</h3><p>以字节为单位输入输出数据，字节流按照8位传输<br>以字符为单位输入输出数据，字符流按照16位传输</p><h3 id="javaNIO"><a href="#javaNIO" class="headerlink" title="javaNIO"></a>javaNIO</h3><p>NIO 主要有三大核心部分： Channel(通道)， Buffer(缓冲区), Selector。传统 IO 基于字节流和字符流进行操作， 而 NIO 基于 Channel 和Buffer(缓冲区)进行操作，数据总是从通道读取到缓冲区中，或者从缓冲区写入到通道中。 Selector(选择区)用于监听多个通道的事件（比如：连接打开，数据到达）。因此，单个线程可以监听多个数据通道。 NIO 和传统 IO 之间第一个最大的区别是， IO 是面向流的， NIO 是面向缓冲区的。</p><ul><li><h3 id="NIO的缓冲区"><a href="#NIO的缓冲区" class="headerlink" title="NIO的缓冲区"></a>NIO的缓冲区</h3><p>Java IO 面向流意味着每次从流中读一个或多个字节，直至读取所有字节，它们没有被缓存在任何地方。此外，它不能前后移动流中的数据。如果需要前后移动从流中读取的数据， 需要先将它缓存到一个缓冲区。 NIO 的缓冲导向方法不同。数据读取到一个它稍后处理的缓冲区，需要时可在缓冲区中前后移动。这就增加了处理过程中的灵活性。但是，还需要检查是否该缓冲区中包含所有您需要处理的数据。而且，需确保当更多的数据读入缓冲区时，不要覆盖缓冲区里尚未处理的数据。</p></li></ul><h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><blockquote><p>Q:除开使用new来创建一个对象，还可以通过那些方法来创建一个对象</p><p>A：可以使用反射机制来创建一个对象</p></blockquote><p>通过new创建对象的效率比较高。通过反射时，先找查找类资源，使用类加载器创建，过程比较繁琐，所以效率较低</p><h3 id="java反射的作用"><a href="#java反射的作用" class="headerlink" title="java反射的作用"></a>java反射的作用</h3><p>反射机制是在运行时，对于任意一个类，都能够知道这个类的所有属性和方法，对于任意个对象，都能够调用其任意一个方法，在java中，只要给定一个类的名字，就可以通过反射机制来获得类的所有信息</p><h4 id="反射的实现方式"><a href="#反射的实现方式" class="headerlink" title="反射的实现方式"></a>反射的实现方式</h4><p>可以通过四种方式来进行获得一个反射对象</p><p>1）Class.forName(“类的路径”)；</p><p>2）类名.class</p><p>3）对象名.getClass()</p><p>4）基本类型的包装类，可以调用包装类的Type属性来获得该包装类的Class对象</p><h4 id="可以实现java反射的类为："><a href="#可以实现java反射的类为：" class="headerlink" title="可以实现java反射的类为："></a>可以实现java反射的类为：</h4><p>1）Class：表示正在运行的Java应用程序中的类和接口</p><p>注意： 所有获取对象的信息都需要Class类来实现。</p><p>2）Field：提供有关类和接口的属性信息，以及对它的动态访问权限。</p><p>3）Constructor：提供关于类的单个构造方法的信息以及它的访问权限</p><p>4）Method：提供类或接口中某个方法的信息</p><h4 id="如何通过反射机制来创建对象实例呢"><a href="#如何通过反射机制来创建对象实例呢" class="headerlink" title="如何通过反射机制来创建对象实例呢"></a>如何通过反射机制来创建对象实例呢</h4><p><strong>Class 对象的newInstance()</strong></p><p>使用 Class 对象的 newInstance()方法来创建该 Class 对象对应类的实例，但是这种方法要求<br>该 Class 对象对应的类有默认的空构造器。</p><p><strong>调用 Constructor 对象的 newInstance()</strong></p><p>先使用 Class 对象获取指定的 Constructor 对象，再调用 Constructor 对象的 newInstance()<br>方法来创建 Class 对象对应类的实例,通过这种方法可以选定构造方法创建实例。</p><h2 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h2><h3 id="什么是Java序列化，如何实现Java序列化？"><a href="#什么是Java序列化，如何实现Java序列化？" class="headerlink" title="什么是Java序列化，如何实现Java序列化？"></a>什么是Java序列化，如何实现Java序列化？</h3><p>序列化就是一种用来处理对象流的机制，所谓对象流也就是将对象的内容进行流化。可以对流化后的对象进行读写操作，也可将流化后的对象传输于网络之间。序列化是为了解决在对对象流进行读写操作时所引发的问题。</p><p><strong>实现序列化的步骤</strong></p><ul><li><strong>标记可序列化</strong>：让类实现<code>Serializable</code>接口</li><li><strong>序列化对象</strong>：使用<code>ObjectOutputStream</code></li><li><strong>反序列化</strong>：使用<code>ObjectInputStream</code></li></ul><p>Java序列化是指将Java对象转换为字节流的过程，以便存储或网络传输。其本质是把对象的内存状态转化为可重建的二进制格式，就像把立体模型拆解成平面图纸。</p><h3 id="实现序列化的关键步骤："><a href="#实现序列化的关键步骤：" class="headerlink" title="实现序列化的关键步骤："></a>实现序列化的关键步骤：</h3><ol><li><strong>标记可序列化</strong>：让类实现<code>Serializable</code>接口（这是个标记接口，没有方法）</li></ol><p>java</p><p>运行</p><p>复制</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> String password; <span class="comment">// transient修饰的字段不会被序列化</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><strong>序列化对象</strong>：使用<code>ObjectOutputStream</code></li></ol><p>java</p><p>运行</p><p>复制</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;Alice&quot;</span>, <span class="string">&quot;123456&quot;</span>);</span><br><span class="line"><span class="keyword">try</span> (<span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;user.dat&quot;</span>))) &#123;</span><br><span class="line">    oos.writeObject(user); <span class="comment">// 将对象转为字节流写入文件</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><strong>反序列化</strong>：使用<code>ObjectInputStream</code></li></ol><p>java</p><p>运行</p><p>复制</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> (<span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;user.dat&quot;</span>))) &#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">restoredUser</span> <span class="operator">=</span> (User) ois.readObject(); <span class="comment">// 从字节流重建对象</span></span><br><span class="line">    System.out.println(restoredUser.getName()); <span class="comment">// 输出&quot;Alice&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注意事项（额外注意点）："><a href="#注意事项（额外注意点）：" class="headerlink" title="注意事项（额外注意点）："></a>注意事项（额外注意点）：</h3><ul><li><code>transient</code>关键字可以阻止字段被序列化（如敏感信息）</li><li>序列化ID（serialVersionUID）用于版本控制，未显式声明时JVM会自动生成，可能导致不兼容</li><li>静态字段不会被序列化（属于类而非对象）</li><li>反序列化不会调用构造方法，而是直接从字节流重建对象状态</li><li>深度克隆常用序列化实现（先将对象序列化再反序列化）</li></ul><blockquote><p><strong>替代方案</strong>：JSON（如Jackson/Gson）、Protocol Buffers等跨语言序列化方案现在更常用，但Java原生序列化在RPC等场景仍有应用。</p></blockquote><h3 id="保存-持久化-对象及其状态到内存或者磁盘"><a href="#保存-持久化-对象及其状态到内存或者磁盘" class="headerlink" title="保存(持久化)对象及其状态到内存或者磁盘"></a>保存(持久化)对象及其状态到内存或者磁盘</h3><p>Java 平台允许我们在内存中创建可复用的 Java 对象，但一般情况下，只有当 JVM 处于运行时，这些对象才可能存在，即，这些对象的生命周期不会比 JVM 的生命周期更长。 但在现实应用中，就可能要求在JVM停止运行之后能够保存(持久化)指定的对象，并在将来重新读取被保存的对象。Java 对象序列化就能够帮助我们实现该功能。</p><h3 id="序列化对象以字节数组保持-静态成员不保存"><a href="#序列化对象以字节数组保持-静态成员不保存" class="headerlink" title="序列化对象以字节数组保持-静态成员不保存"></a>序列化对象以字节数组保持-静态成员不保存</h3><p>使用 Java 对象序列化， 在保存对象时，会把其状态保存为一组字节，在未来， 再将这些字节组装成对象。必须注意地是， 对象序列化保存的是对象的”状态”，即它的成员变量。由此可知，对象序列化不会关注类中的静态变量。</p><h3 id="序列化用户远程对象传输"><a href="#序列化用户远程对象传输" class="headerlink" title="序列化用户远程对象传输"></a>序列化用户远程对象传输</h3><p>除了在持久化对象时会用到对象序列化之外，当使用 RMI(远程方法调用)，或在网络中传递对象时，都会用到对象序列化。 Java序列化API为处理对象序列化提供了一个标准机制，该API简单易用。</p><h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><blockquote><p>注解是什么，Annotation（注解）是 Java 提供的一种对元程序中元素关联信息和元数据（metadata）的途径和方法。 Annatation(注解)是一个接口，程<br>序可以通过反射来获取指定程序中元素的 Annotation对象，然后通过该 Annotation 对象来获取注解中的元数据信息。</p></blockquote><h3 id="Java中的四种标准元注解（用于注解其他注解的注解）包括："><a href="#Java中的四种标准元注解（用于注解其他注解的注解）包括：" class="headerlink" title="Java中的四种标准元注解（用于注解其他注解的注解）包括："></a>Java中的四种标准元注解（用于注解其他注解的注解）包括：</h3><ol><li><strong>@Target</strong> - 指定注解可以应用的目标元素类型（如类、方法、字段等）</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@Target(ElementType.METHOD) // 只能用在方法上</span><br><span class="line">public @interface MyAnnotation &#123;&#125;</span><br></pre></td></tr></table></figure><ol><li><strong>@Retention</strong> - 定义注解的保留策略（源码/编译时/运行时）</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@Retention(RetentionPolicy.RUNTIME) // 运行时保留</span><br><span class="line">public @interface MyAnnotation &#123;&#125;</span><br></pre></td></tr></table></figure><ol><li><strong>@Documented</strong> - 标记注解是否包含在Javadoc中</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@Documented // 生成文档时会包含此注解</span><br><span class="line">public @interface MyAnnotation &#123;&#125;</span><br></pre></td></tr></table></figure><ol><li><strong>@Inherited</strong> - 允许子类继承父类的注解</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@Inherited // 子类会自动继承此注解</span><br><span class="line">public @interface MyAnnotation &#123;&#125;</span><br></pre></td></tr></table></figure><p>这些元注解都位于<code>java.lang.annotation</code>包中，是定义自定义注解的基础构件。</p><h2 id="多线程并发"><a href="#多线程并发" class="headerlink" title="多线程并发"></a>多线程并发</h2><h3 id="多线程的实现方式"><a href="#多线程的实现方式" class="headerlink" title="多线程的实现方式"></a>多线程的实现方式</h3><ul><li>继承Thread类；</li><li>实现Runnable接口；</li><li>实现Callable接口通过FutureTask包装器来创建Thread线程；</li><li>使用ExecutorService<code>伊克斯科一欧的</code>、Callable、Future实现有返回结果的多线程（也就是使用了ExecutorService来管理前面的三种方式）。</li><li>基于线程池的方式</li></ul><h3 id="如何停止一个正在运行的线程"><a href="#如何停止一个正在运行的线程" class="headerlink" title="如何停止一个正在运行的线程"></a><strong>如何停止一个正在运行的线程</strong></h3><ol><li>使用退出标志，使线程正常退出，也就是当run方法完成后线程终止。</li><li>使用stop方法强行终止，但是不推荐这个方法，因为stop和suspend及resume一样都是过期作废的方法。</li><li>使用interrupt方法中断线程。</li></ol><h3 id="线程基本方法"><a href="#线程基本方法" class="headerlink" title="线程基本方法"></a>线程基本方法</h3><p>线程相关的基本方法有 wait（线程等待）， notify（线程唤醒）， notifyAll（线程全唤醒）， sleep（线程睡眠）， join（等待线程终止）， yield（线程让步） 等。</p><p><strong>线程等待（wait）：</strong>调用该方法的线程进入 WAITING 状态，只有等待另外线程的通知或被中断才会返回，需要注意的是调用 wait()方法后， 会释放对象的锁。因此， wait 方法一般用在同步方法或同步代码块中。</p><p><strong>线程睡眠（sleep）</strong>：sleep 导致当前线程休眠，与 wait 方法不同的是 sleep 不会释放当前占有锁,sleep(long)会导致线程进入 TIMED-WATING 状态，而 wait()方法会导致当前线程进入 WATING 状态</p><p><strong>线程让步（yield）</strong>：</p><p>yield 会使当前线程让出 CPU 执行时间片，与其他线程一起重新竞争 CPU 时间片。一般情况下，优先级高的线程有更大的可能性成功竞争得到 CPU 时间片， 但这又不是绝对的，有的操作系统对线程优先级并不敏感。</p><p><strong>等待线程终止（join）:</strong>join() 方法，等待其他线程终止，在当前线程中调用一个线程的 join() 方法，则当前线程转为阻塞状态，回到另一个线程结束，当前线程再由阻塞状态变为就绪状态，等待 cpu 的宠幸。</p><p><strong>线程唤醒（notify）</strong>:Object 类中的 notify() 方法， 唤醒在此对象监视器上等待的单个线程，如果所有线程都在此对象上等待，则会选择唤醒其中一个线程，选择是任意的，并在对实现做出决定时发生，线程通过调用其中一个 wait() 方法，在对象的监视器上等待， 直到当前的线程放弃此对象上的锁定，才能继续执行被唤醒的线程，被唤醒的线程将以常规方式与在该对象上主动同步的其他所有线程进行竞争。类似的方法还有 notifyAll() ，唤醒再次监视器上等待的所有线程。</p><blockquote><p>说人话理解版本：</p><p><strong>1. wait()、notify()、notifyAll() —— 餐厅等位系统</strong></p><ul><li><strong>wait()</strong>：就像在餐厅取号后去休息区等待，把座位（锁）让给别人</li><li><strong>notify()</strong>：服务员叫一个号（随机唤醒一个等待线程）</li><li><strong>notifyAll()</strong>：服务员大喊”现在有空位了”（唤醒所有等待线程）</li></ul><p>关键点：必须先在收银台登记（synchronized块内）才能使用这些方法</p><p><strong>2. sleep() —— 手机定时勿扰模式</strong></p><ul><li>设定闹钟睡1小时（Thread.sleep(1000)）</li><li>睡着时手机还在你手里（不释放锁）</li><li>闹钟响了才会醒（时间到自动恢复）</li></ul><p><strong>3. yield() —— 公交车让座</strong></p><ul><li>主动站起来说”您坐这儿吧”（让出CPU）</li><li>实际是否有人来坐不确定（JVM决定是否切换线程）</li><li>让座后自己还站在车上（线程仍处于可运行状态）</li></ul><p><strong>4. join() —— 等同事下班拼车</strong></p><ul><li>给同事发微信”下班叫我”（t.join()）</li><li>一直等到同事忙完（目标线程终止）</li><li>最多等30分钟，不来我就自己走（join(1800000)）</li></ul><p><strong>5. 对比总结</strong></p><div class="table-container"><table><thead><tr><th>方法</th><th>类比场景</th><th>关键特点</th><th>注意事项</th></tr></thead><tbody><tr><td>wait()</td><td>餐厅等位</td><td>让出座位+等待通知</td><td>必须提前拿到号牌(synchronized)</td></tr><tr><td>sleep()</td><td>定时午睡</td><td>睡着但手机不借人</td><td>别睡太久影响效率</td></tr><tr><td>yield()</td><td>公交车让座</td><td>客气一下未必真让</td><td>不能指望一定有效</td></tr><tr><td>join()</td><td>等同事一起走</td><td>死等或定时等待</td><td>别让同事等太久（避免无限阻塞）</td></tr></tbody></table></div></blockquote><h3 id="sleep-和wait-有什么异同点"><a href="#sleep-和wait-有什么异同点" class="headerlink" title="sleep()和wait()有什么异同点"></a>sleep()和wait()有什么异同点</h3><blockquote><p>说人话就是，sleep()是让线程睡一会儿，不释放锁；wait()是让线程等着，会释放锁，等别人叫醒它。一个是小憩一下，到点自然醒，一个是睡美人，得有人亲一下</p></blockquote><ol><li>sleep() 是 Thread 类的静态本地方法；wait() 是Object类的成员本地方法；</li><li>JDK1.8 sleep() wait() 均需要捕获 InterruptedException 异常；</li><li>sleep() 方法可以在任何地方使用；wait() 方法则只能在同步方法或同步代码块中使用；</li><li>sleep() 会休眠当前线程指定时间，释放 CPU 资源，不释放对象锁，休眠时间到自动苏醒继续执行；wait() 方法放弃持有的对象锁，进入等待队列，当该对象被调用 notify() / notifyAll() 方法后才有机会竞争获取对象锁，进入运行状态。</li></ol><h3 id="sleep-与yield-的区别？"><a href="#sleep-与yield-的区别？" class="headerlink" title="sleep()与yield()的区别？"></a><strong>sleep()与yield()的区别？</strong></h3><blockquote><p>sleep()是强制让线程睡指定时间；yield()是礼貌性让出CPU，但可能马上又被调度回来。</p></blockquote><ol><li>sleep() 方法给其他线程运行机会时不考虑线程的优先级；yield() 方法只会给相同优先级或更高优先级的线程运行的机会；</li><li>sleep() 方法声明抛出 InterruptedException；yield() 方法没有声明抛出异常；</li><li>线程执行 sleep() 方法后进入超时等待状态；线程执行 yield() 方法转入就绪状态，可能马上又得得到执行；</li><li>sleep() 方法需要指定时间参数；yield() 方法出让 CPU 的执行权时间由 JVM 控制。</li></ol><h3 id="Theard类中的Yield方法有什么作用？"><a href="#Theard类中的Yield方法有什么作用？" class="headerlink" title="Theard类中的Yield方法有什么作用？"></a>Theard类中的Yield方法有什么作用？</h3><p>Yield方法可以暂停当前正在执行的线程对象，让其它有相同优先级的线程执行。它是一个静态方法而且只保证当前线程放弃CPU占用而不能保证使其它线程一定能占用CPU，执行yield()的线程有可能在进入到暂停状态后马上又被执行。</p><h3 id="sleep-与join-的区别？"><a href="#sleep-与join-的区别？" class="headerlink" title="sleep()与join()的区别？"></a><strong>sleep()与join()的区别？</strong></h3><blockquote><p>sleep()是单纯睡觉不释放锁；join()是等另一个线程干完活再继续，期间会释放锁。</p></blockquote><ol><li>JDK1.8 sleep() join() 均需要捕获 InterruptedException 异常；</li><li>sleep()是Thread的静态本地方法，join()是Thread的普通方法；</li><li>sleep()不会释放锁资源，join()底层是wait方法，会释放锁。</li></ol><h3 id="notify-和notifyAll有什么区别？"><a href="#notify-和notifyAll有什么区别？" class="headerlink" title="notify()和notifyAll有什么区别？"></a>notify()和notifyAll有什么区别？</h3><blockquote><p>这两个都是宿管，一个叫醒全部人，一个只叫醒一个，所以全部叫醒不会抢饭，但是只叫醒一个大概率会抢饭</p></blockquote><ul><li>notify可能会导致死锁，而notifyAll则不会</li><li>任何时候只有一个线程可以获得锁，也就是说只有一个线程可以运行synchronized 的代码使用notifyall,可以唤醒</li><li>所有处于wait状态的线程，使其重新进入锁的争夺队列中，而notify只能唤醒一个</li><li>wait() 应配合while循环使用，不应使用if，务必在wait()调用前后都检查条件，如果不满足，必须调用notify()唤醒另外的线程来处理，自己继续wait()直至条件满足再往下执行。</li><li>notify() 是对notifyAll()的一个优化，但它有很精确的应用场景，并且要求正确使用。不然可能导致死锁。正确的场景应该是 WaitSet中等待的是相同的条件，唤醒任一个都能正确处理接下来的事项，如果唤醒的线程无法正确处理，务必确保继续notify()下一个线程，并且自身需要重新回到WaitSet中.</li></ul><h3 id="什么是线程安全"><a href="#什么是线程安全" class="headerlink" title="什么是线程安全"></a>什么是线程安全</h3><p>线程安全就是说多线程访问同一代码，不会产生不确定的结果。</p><p>在多线程环境中，当各线程不共享数据的时候，即都是私有（private）成员，那么一定是线程安全的。但这种情况并不多见，在多数情况下需要共享数据，这时就需要进行适当的同步控制了。</p><p>线程安全一般都涉及到synchronized， 就是一段代码同时只能有一个线程来操作 不然中间过程可能会产生不可预知的结果。</p><p>如果你的代码所在的进程中有多个线程在同时运行，而这些线程可能会同时运行这段代码。如果每次运行结果和单线程运行的结果是一样的，而且其他的变量的值也和预期的是一样的，就是线程安全的。</p><p><strong>引申问题</strong></p><ul><li><p><strong>什么是线程安全？Vector是一个线程安全类吗？</strong></p><p>如果你的代码所在的进程中有多个线程在同时运行，而这些线程可能会同时运行这段代码。如果每次运行结果和单线程运行的结果是一样的，而且其他的变量 的值也和预期的是一样的，就是线程安全的。一个线程安全的计数器类的同一个实例对象在被多个线程使用的情况下也不会出现计算失误。很显然你可以将集合类分 成两组，线程安全和非线程安全的。Vector 是用同步方法来实现线程安全的, 而和它相似 的ArrayList不是线程安全的。</p></li></ul><h3 id="什么是线程池，线程池的优点，线程池的工作流程"><a href="#什么是线程池，线程池的优点，线程池的工作流程" class="headerlink" title="什么是线程池，线程池的优点，线程池的工作流程"></a>什么是线程池，线程池的优点，线程池的工作流程</h3><p><strong>什么是线程池</strong><br>线程池是一种基于池化技术的线程使用模式。它预先创建一定数量的线程，将这些线程放在一个池子中，当有任务需要执行时，从池中取出空闲线程来执行任务，任务执行完毕后，线程不会被销毁，而是重新放回池中等待下一个任务。</p><p><strong>为什么需要线程池</strong></p><p><strong>降低资源消耗：</strong>通过重复利用已创建的线程，减少线程创建和销毁造成的消耗<br><strong>提高响应速度：</strong>当任务到达时，任务可以不需要等到线程创建就能立即执行<br><strong>提高线程的可管理性：</strong>统一管理线程，避免系统中线程数量失控<br><strong>提供更多功能：</strong>线程池具备可拓展性，提供定时执行、定期执行等功能</p><p><strong>线程池的核心优势</strong></p><p><strong>资源控制：</strong>限制并发线程数，避免系统资源耗尽<br><strong>任务管理：</strong>提供任务队列，支持任务的缓存和调度<br><strong>监控统计：</strong>提供线程池运行状态的监控和统计信息<br><strong>灵活配置：</strong>支持多种配置参数，适应不同的业务场景</p><p><strong>线程池的工作流程可以用以下步骤描述：</strong></p><p><strong>任务提交：</strong>客户端提交任务到线程池<br><strong>核心线程检查：</strong>如果运行线程数少于核心线程数，创建新线程执行任务<br><strong>队列缓存：</strong>如果核心线程都在忙碌，任务被放入工作队列<br><strong>扩容处理：</strong>如果队列满了且线程数未达到最大值，创建新的非核心线程<br><strong>拒绝策略：</strong>如果队列满了且线程数已达最大值，执行拒绝策略</p><p><strong>核心线程 vs 非核心线程</strong></p><p><strong>核心线程（Core Threads）：</strong>线程池中始终保持活跃的线程，即使它们处于空闲状态<br><strong>非核心线程（Non-Core Threads）：</strong>当核心线程不足以处理任务时创建的额外线程，空闲时会被回收</p><p><strong>任务队列的作用</strong><br>任务队列用于保存等待执行的任务，它是连接任务提交和任务执行的桥梁。不同类型的队列会影响线程池的行为：</p><p><strong>有界队列：</strong>防止内存溢出，但可能导致任务被拒绝<br><strong>无界队列：</strong>可以接受大量任务，但可能导致内存问题<br><strong>同步队列：</strong>不存储任务，直接传递给线程</p><p><strong>线程池的生命周期</strong></p><p>线程池具有以下几种状态：</p><p><strong>RUNNING：</strong>接受新任务，处理队列中的任务<br><strong>SHUTDOWN：</strong>不接受新任务，但会处理队列中的任务<br><strong>STOP：</strong>不接受新任务，不处理队列中的任务，中断正在执行的任务<br><strong>TIDYING：</strong>所有任务已终止，workerCount为0<br><strong>TERMINATED：</strong>terminated()方法执行完成</p><blockquote><p>通常我们常说的是，<code>新建状态</code>，<code>就绪状态</code>，<code>运行状态</code>，<code>阻塞状态</code>，<code>线程死亡</code></p><p>其中，阻塞状态还有三个状态</p><p><strong>等待阻塞</strong>（o.wait-&gt;等待对列） ：</p><p>运行(running)的线程执行 o.wait()方法， JVM 会把该线程放入等待队列(waitting queue)中。</p><p><strong>同步阻塞</strong>(lock-&gt;锁池)</p><p>运行(running)的线程在获取对象的同步锁时，若该同步锁被别的线程占用，则 JVM 会把该线程放入锁池(lock pool)中。</p><p><strong>其他阻塞</strong>(sleep/join)</p><p>运行(running)的线程执行 Thread.sleep(long ms)或 t.join()方法，或者发出了 I/O 请求时，JVM 会把该线程置为阻塞状态。当 sleep()状态超时、 join()等待线程终止或者超时、或者 I/O处理完毕时，线程重新转入可运行(runnable)状态。</p></blockquote><h3 id="终止线程的四种方式"><a href="#终止线程的四种方式" class="headerlink" title="终止线程的四种方式"></a>终止线程的四种方式</h3><ul><li><p><strong>正常运行结束</strong></p><p>线程自动结束的方式，最健康了</p></li><li><p><strong>使用退出标志退出线程</strong></p><p>一般 run()方法执行完，线程就会正常结束，然而，常常有些线程是伺服线程。它们需要长时间的运行，只有在外部某些条件满足的情况下，才能关闭这些线程。</p></li><li><p><strong>interrupt方法结束线程</strong></p><p>使用 interrupt()方法来中断线程有两种情况：</p><p>1.线程处于阻塞状态： 如使用了 sleep,同步锁的 wait,socket 中的 receiver,accept 等方法时，会使线程处于阻塞状态。当调用线程的interrupt()方法时，会抛出 InterruptException 异常。阻塞中的那个方法抛出这个异常，通过代码捕获该异常，然后 break 跳出循环状态，从而让我们有机会结束这个线程的执行。 通常很多人认为只要调用 interrupt 方法线程就会结束，实际上是错的， 一定要先捕获InterruptedException 异常之后通过 break 来跳出循环，才能正常结束 run 方法。</p><p>2.线程未处于阻塞状态： 使用 isInterrupted()判断线程的中断标志来退出循环。当使用interrupt()方法时，中断标志就会置 true，和使用自定义的标志来控制循环是一样的道理。</p></li><li><p><strong>stop方法终止线程（线程不安全）</strong></p></li></ul><h3 id="实现线程同步的三个方式"><a href="#实现线程同步的三个方式" class="headerlink" title="实现线程同步的三个方式"></a>实现线程同步的三个方式</h3><h4 id="采用同步代码块"><a href="#采用同步代码块" class="headerlink" title="采用同步代码块"></a>采用同步代码块</h4><p><strong>特点</strong>：</p><ul><li>只锁定代码块而不是整个方法</li><li>需要显式指定锁对象</li><li>锁对象可以是任意对象，但通常使用专门的对象或this</li><li>进入同步块前必须获得锁，否则线程会阻塞</li></ul><h4 id="采用同步方法"><a href="#采用同步方法" class="headerlink" title="采用同步方法"></a>采用同步方法</h4><p><strong>特点</strong>：</p><ul><li>整个方法都是同步的</li><li>对于实例方法，锁是当前实例对象(this)</li><li>对于静态方法，锁是当前类的Class对象</li><li>实现简单，但粒度较粗可能影响性能</li></ul><h4 id="采用-Lock-锁对象实例"><a href="#采用-Lock-锁对象实例" class="headerlink" title="采用 Lock 锁对象实例"></a>采用 Lock 锁对象实例</h4><p><strong>特点</strong>：</p><ul><li>比synchronized更灵活，可以尝试获取锁、定时获取锁等</li><li>需要显式地获取和释放锁</li><li>必须在finally块中释放锁以防止死锁</li><li>提供了更多高级功能如公平锁、读写锁等</li><li>性能通常优于synchronized</li></ul><h3 id="start-和run-的区别"><a href="#start-和run-的区别" class="headerlink" title="start()和run()的区别"></a>start()和run()的区别</h3><blockquote><p>start中包含了run的方法部分，这一点请一定要描述出来</p></blockquote><ol><li><p>start（） 方法来启动线程，真正实现了多线程运行。这时无需等待 run 方法体代码执行完毕，可以直接继续执行下面的代码。</p></li><li><p>通过调用 Thread 类的 start()方法来启动一个线程， 这时此线程是处于就绪状态， 并没有运行。</p></li><li><p>方法 run()称为线程体，它包含了要执行的这个线程的内容，线程就进入了运行状态，开始运行 run 函数当中的代码。 Run 方法运行结束， 此线程终止。然后 CPU 再调度其它线程。</p></li></ol><h3 id="java后台线程"><a href="#java后台线程" class="headerlink" title="java后台线程"></a>java后台线程</h3><p>后台线程也称为守护线程 (比如JVM处理垃圾回收 使用的就是后台线程)，  我们创建的线程一般用于处理我们自己的某些任务，而后台线程主要用于一些公共的任务以提供服务。</p><p>我们创建的线程可以在start()启动前使用  thread.setDaemon(true); 来将其设置为后台线程，使用isDaemon()来判断线程是否为后台线程。</p><p><del>要是你说什么是非后台线程，这纯属废话，除了后台线程外其他线程都属于非后台线程</del></p><h3 id="常用线程池"><a href="#常用线程池" class="headerlink" title="常用线程池"></a>常用线程池</h3><h4 id="FixedThreadPool（固定大小线程池）"><a href="#FixedThreadPool（固定大小线程池）" class="headerlink" title="FixedThreadPool（固定大小线程池）"></a>FixedThreadPool（固定大小线程池）</h4><p><strong>特点</strong>：</p><ul><li>核心线程数和最大线程数相等</li><li>使用无界队列LinkedBlockingQueue</li><li>适合负载比较重的服务器</li></ul><p><strong>使用场景</strong>：已知并发量，需要控制线程数的场景</p><h4 id="CachedThreadPool（缓存线程池）"><a href="#CachedThreadPool（缓存线程池）" class="headerlink" title="CachedThreadPool（缓存线程池）"></a>CachedThreadPool（缓存线程池）</h4><p><strong>特点</strong>：</p><ul><li>核心线程数为0，最大线程数为Integer.MAX_VALUE</li><li>使用SynchronousQueue</li><li>线程空闲60秒后被回收</li><li>适合执行很多短期异步任务</li></ul><p><strong>使用场景</strong>：任务量变化较大，任务执行时间较短的场景</p><h4 id="SingleThreadExecutor（单线程池）"><a href="#SingleThreadExecutor（单线程池）" class="headerlink" title="SingleThreadExecutor（单线程池）"></a>SingleThreadExecutor（单线程池）</h4><p><strong>特点</strong>：</p><ul><li>只有一个线程的线程池</li><li>保证任务按提交顺序执行</li><li>适合需要保证顺序执行的场景</li></ul><h4 id="ScheduledThreadPool（定时任务线程池）"><a href="#ScheduledThreadPool（定时任务线程池）" class="headerlink" title="ScheduledThreadPool（定时任务线程池）"></a>ScheduledThreadPool（定时任务线程池）</h4><p><strong>特点</strong>：</p><ul><li>支持定时和周期性任务执行</li><li>使用DelayedWorkQueue</li><li>适合需要定时执行任务的场景</li></ul><h3 id="java中线程池框架"><a href="#java中线程池框架" class="headerlink" title="java中线程池框架"></a>java中线程池框架</h3><p><strong>Executor框架概述</strong><br>Java的Executor框架为线程池提供了统一的接口和实现。该框架的核心组件包括：</p><ul><li>Executor：最基础的接口，只定义了execute方法</li><li>ExecutorService：扩展了Executor，提供了更丰富的线程池管理功能</li><li>ThreadPoolExecutor：ExecutorService的具体实现类</li><li>Executors：提供静态工厂方法创建各种类型的线程池</li></ul><p><strong>ExecutorService接口</strong></p><ul><li>ExecutorService提供了线程池的核心功能：</li></ul><p><strong>ThreadPoolExecutor类详解</strong></p><ul><li>ThreadPoolExecutor是线程池的核心实现类，提供了完整的线程池功能。它的构造函数参数决定了线程池的行为特征。</li></ul><p><strong>Executors工具类</strong></p><ul><li>Executors类提供了创建常用线程池的静态方法，简化了线程池的创建过程。但在生产环境中，建议直接使用ThreadPoolExecutor构造函数，以获得更好的控制力</li></ul><h3 id="线程池七大核心参数"><a href="#线程池七大核心参数" class="headerlink" title="线程池七大核心参数"></a>线程池七大核心参数</h3><blockquote><p>在Java开发中，线程池是一个常用的技术。创建线程池时需要指定七个参数，分别是核心线程数（corePoolSize）、最大线程数（maximumPoolSize）、空闲线程存活时间（keepAliveTime）、时间单位（unit）、工作队列（workQueue）、线程工厂（threadFactory）和拒绝策略（handler）。</p></blockquote><p><strong>核心线程数（corePoolSize）</strong></p><p>核心线程数是线程池中维护的最小线程数量，即使这些线程处于空闲状态，它们也不会被销毁，除非设置了<em>allowCoreThreadTimeOut</em>。当任务提交到线程池时，如果当前线程数小于核心线程数，则会创建一个新线程来处理任务。</p><p><strong>最大线程数（maximumPoolSize）</strong></p><p>最大线程数是线程池允许创建的最大线程数量。当核心线程数已满且工作队列也已满时，线程池会创建新线程来处理任务，但不会超过最大线程数。</p><p><strong>空闲线程存活时间（keepAliveTime）</strong></p><p>空闲线程存活时间是指当线程处于空闲状态且当前线程数大于核心线程数时，线程在指定时间后会被销毁。这个时间由<em>keepAliveTime</em>参数设定。</p><p><strong>时间单位（unit）</strong></p><p>时间单位是指<em>keepAliveTime</em>的计量单位，可以是纳秒、微秒、毫秒、秒、分钟、小时或天。</p><p><strong>工作队列（workQueue）</strong></p><p>工作队列用于存放待执行的任务。Java提供了四种工作队列：</p><ul><li><strong>ArrayBlockingQueue：</strong>基于数组的有界阻塞队列，按FIFO排序。</li><li><strong>LinkedBlockingQueue</strong>：基于链表的无界阻塞队列，按FIFO排序。</li><li><strong>SynchronousQueue</strong>：不缓存任务的阻塞队列，生产者放入任务必须等待消费者取出任务。</li><li><strong>PriorityBlockingQueue</strong>：具有优先级的无界阻塞队列，优先级通过Comparator实现。</li></ul><p><strong>线程工厂（threadFactory）</strong></p><p>线程工厂用于创建新线程，可以设定线程名、是否为守护线程等。默认的线程工厂会为每个线程池创建一个新的线程组，并为每个线程分配一个唯一的名称。</p><p><strong>拒绝策略（handler）</strong></p><p>当工作队列已满且线程池中的线程数量达到最大限制时，新任务会被拒绝。Java提供了四种拒绝策略：</p><ul><li><strong>CallerRunsPolicy</strong>：在调用者线程中直接执行被拒绝的任务。</li><li><strong>AbortPolicy</strong>：丢弃任务并抛出<em>RejectedExecutionException</em>异常。</li><li><strong>DiscardPolicy</strong>：丢弃任务但不抛出异常。</li><li><strong>DiscardOldestPolicy</strong>：丢弃队列中最早的任务，然后尝试重新提交被拒绝的任务。</li></ul><h3 id="工作队列类型详解"><a href="#工作队列类型详解" class="headerlink" title="工作队列类型详解"></a>工作队列类型详解</h3><blockquote><p>工作队列主要有ArrayBlockingQueue（有界队列），LinkedBlockingQueue（无界队列），SynchronousQueue（同步队列），PriorityBlockingQueue（优先级队列），DelayedWorkQueue（延迟队列）</p></blockquote><p>有界，无界，同步队列，优先，延迟，拒绝策略——小口诀</p><h4 id="ArrayBlockingQueue（有界队列）"><a href="#ArrayBlockingQueue（有界队列）" class="headerlink" title="ArrayBlockingQueue（有界队列）"></a>ArrayBlockingQueue（有界队列）</h4><p>基于数组实现的有界阻塞队列，按FIFO原则对任务进行排序。</p><p><strong>特点</strong>：</p><ul><li>队列容量固定，防止内存溢出</li><li>当队列满时，新任务会触发拒绝策略</li><li>适合对内存使用有严格要求的场景</li></ul><h4 id="LinkedBlockingQueue（无界队列）"><a href="#LinkedBlockingQueue（无界队列）" class="headerlink" title="LinkedBlockingQueue（无界队列）"></a>LinkedBlockingQueue（无界队列）</h4><p>基于链表实现的阻塞队列，理论上可以无限存储任务。</p><p><strong>特点：</strong></p><ul><li>默认容量为Integer.MAX_VALUE，实际上是无界的</li><li>maximumPoolSize参数失效</li><li>可能导致内存溢出</li><li>适合任务量不可预测的场景</li></ul><h4 id="SynchronousQueue（同步队列）"><a href="#SynchronousQueue（同步队列）" class="headerlink" title="SynchronousQueue（同步队列）"></a>SynchronousQueue（同步队列）</h4><p>一个不存储元素的阻塞队列，每个插入操作必须等待对应的删除操作。</p><p><strong>特点：</strong></p><ul><li>没有容量，不存储任务</li><li>每个任务都会直接传递给线程</li><li>适合任务量变化较大的场景</li><li>CachedThreadPool使用此队列</li></ul><h4 id="PriorityBlockingQueue（优先级队列）"><a href="#PriorityBlockingQueue（优先级队列）" class="headerlink" title="PriorityBlockingQueue（优先级队列）"></a>PriorityBlockingQueue（优先级队列）</h4><p>基于优先级的无界阻塞队列，支持任务按优先级执行。</p><p><strong>特点：</strong></p><ul><li>任务必须实现Comparable接口或提供Comparator</li><li>高优先级任务会优先执行</li><li>适合有明确优先级要求的场景</li></ul><h4 id="DelayedWorkQueue（延迟队列）"><a href="#DelayedWorkQueue（延迟队列）" class="headerlink" title="DelayedWorkQueue（延迟队列）"></a>DelayedWorkQueue（延迟队列）</h4><ul><li>ScheduledThreadPoolExecutor内部使用的延迟队列，支持定时任务。</li></ul><h3 id="拒绝策略"><a href="#拒绝策略" class="headerlink" title="拒绝策略"></a>拒绝策略</h3><h4 id="AbortPolicy（抛出异常）"><a href="#AbortPolicy（抛出异常）" class="headerlink" title="AbortPolicy（抛出异常）"></a>AbortPolicy（抛出异常）</h4><p>默认的拒绝策略，直接抛出RejectedExecutionException异常。</p><h4 id="CallerRunsPolicy（调用者执行）"><a href="#CallerRunsPolicy（调用者执行）" class="headerlink" title="CallerRunsPolicy（调用者执行）"></a>CallerRunsPolicy（调用者执行）</h4><p>由调用线程执行被拒绝的任务，这是一种负反馈机制。</p><h4 id="DiscardPolicy（丢弃任务）"><a href="#DiscardPolicy（丢弃任务）" class="headerlink" title="DiscardPolicy（丢弃任务）"></a>DiscardPolicy（丢弃任务）</h4><p>静默丢弃被拒绝的任务，不做任何处理。</p><h4 id="DiscardOldestPolicy（丢弃最老任务）"><a href="#DiscardOldestPolicy（丢弃最老任务）" class="headerlink" title="DiscardOldestPolicy（丢弃最老任务）"></a>DiscardOldestPolicy（丢弃最老任务）</h4><p>丢弃队列中最老的任务，然后重新提交当前任务。</p><h4 id="自定义拒绝策略"><a href="#自定义拒绝策略" class="headerlink" title="自定义拒绝策略"></a>自定义拒绝策略</h4><p>自行定义的，可以根据实际业务需求的拒绝策略</p><h3 id="如何选择合适的线程池大小"><a href="#如何选择合适的线程池大小" class="headerlink" title="如何选择合适的线程池大小"></a>如何选择合适的线程池大小</h3><blockquote><p>这个题目相对灵活的多，但是一般性遵照某些基本原则</p></blockquote><p><strong>基本原则</strong>：</p><ul><li>线程数过少：无法充分利用系统资源，吞吐量低</li><li>线程数过多：增加上下文切换开销，可能导致系统资源耗尽</li></ul><h3 id="线程池调优技巧"><a href="#线程池调优技巧" class="headerlink" title="线程池调优技巧"></a>线程池调优技巧</h3><ol><li><p><strong>动态调整线程池参数</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 运行时调整核心线程数</span></span><br><span class="line">executor.setCorePoolSize(newCoreSize);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 运行时调整最大线程数</span></span><br><span class="line">executor.setMaximumPoolSize(newMaxSize);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 运行时调整拒绝策略</span></span><br><span class="line">executor.setRejectedExecutionHandler(newHandler);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p><strong>预热线程池</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 预创建所有核心线程</span></span><br><span class="line">executor.prestartAllCoreThreads();</span><br></pre></td></tr></table></figure></li><li><p><strong>合理设置队列容量</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据内存和响应时间要求设置合适的队列大小</span></span><br><span class="line"><span class="type">int</span> <span class="variable">queueCapacity</span> <span class="operator">=</span> calculateOptimalQueueSize();</span><br><span class="line">BlockingQueue&lt;Runnable&gt; workQueue = <span class="keyword">new</span> <span class="title class_">ArrayBlockingQueue</span>&lt;&gt;(queueCapacity);</span><br></pre></td></tr></table></figure></li></ol><h3 id="什么是乐观锁，什么是悲观锁"><a href="#什么是乐观锁，什么是悲观锁" class="headerlink" title="什么是乐观锁，什么是悲观锁"></a>什么是乐观锁，什么是悲观锁</h3><p>乐观锁是一种乐观思想，<strong>即认为读多写少</strong>，遇到并发写的可能性低，每次去拿数据的时候都认为别人不会修改，所以不会上锁，但是在更新的时候<strong>会判断一下在此期间别人有没有去更新这个数据</strong>，采取在写时先读出当前版本号，然后加锁操作（比较跟上一次的版本号，如果一样则更新），如果失败则要重复读-比较-写的操作。</p><blockquote><p>说人话就是先放着给你，纯看自觉，你没动就无所谓，你动了被他发现他就给你锁上了</p></blockquote><p>悲观锁是就是悲观思想，<strong>即认为写多</strong>，遇到并发写的可能性高，每次去拿数据的时候都认为别人会修改，所以<strong>每次在读写数据的时候都会上锁</strong>，这样别人想读写这个数据就会 block 直到拿到锁。java中的悲观锁就是Synchronized,AQS框架下的锁则是先尝试cas乐观锁去获取锁，获取不到，才会转换为悲观锁，如 RetreenLock。</p><blockquote><p>说人话就是疑心太重，不管你感不感兴趣都会把资源给锁上</p></blockquote><hr><p>此处提前占位，是锁相关的部分</p><hr><h3 id="线程与进程的区别？"><a href="#线程与进程的区别？" class="headerlink" title="线程与进程的区别？"></a>线程与进程的区别？</h3><p>进程是操作系统分配资源的最小单元，线程是操作系统调度的最小单元。</p><p>一个程序至少有一个进程,一个进程至少有一个线程。</p><h3 id="什么是多线程中的上下文切换？"><a href="#什么是多线程中的上下文切换？" class="headerlink" title="什么是多线程中的上下文切换？"></a>什么是多线程中的上下文切换？</h3><p>多线程会共同使用一组计算机上的 CPU，而线程数大于给程序分配的 CPU 数量时，为了让各个线程都有执行的机会，就需要轮转使用 CPU。不同的线程切换使用 CPU发生的切换数据等就是上下文切换。</p><h3 id="Java-中用到的线程调度算法是什么？"><a href="#Java-中用到的线程调度算法是什么？" class="headerlink" title="Java 中用到的线程调度算法是什么？"></a>Java 中用到的线程调度算法是什么？</h3><p>采用时间片轮转的方式。可以设置线程的优先级，会映射到下层的系统上面的优先级上，如非特别需要，尽量不要用，防止线程饥饿。</p><h2 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h2><p>此处是内存相关占位</p><hr><h3 id="GC-是什么？为什么要有-GC？"><a href="#GC-是什么？为什么要有-GC？" class="headerlink" title="GC 是什么？为什么要有 GC？"></a>GC 是什么？为什么要有 GC？</h3><p>GC是JVM的自动内存管理系统，通过标记-清除、复制、分代回收等算法，自动回收程序不再使用的对象内存。它的存在让开发者摆脱手动管理内存的负担，避免内存泄漏和野指针等问题，同时通过智能回收策略（如分代收集）平衡了内存回收效率和程序运行性能。</p><h3 id="JVM-类加载机制"><a href="#JVM-类加载机制" class="headerlink" title="JVM 类加载机制"></a>JVM 类加载机制</h3><p>JVM的类加载器分五个部分：</p><p><code>加载</code>，<code>验证</code>,<code>准备</code>，<code>解析</code>，<code>初始化</code></p><p>以下是详细解析部分：</p><p><strong>1. 加载（Loading）——“搬箱子”</strong></p><ul><li><p><strong>做什么</strong>：把.class文件搬进内存</p><p>关键动作：</p><ul><li>找文件（通过类名找二进制数据）</li><li>拆包装（把字节流转成内存结构）</li><li>建目录（生成Class对象作为访问入口）</li></ul></li><li><p><strong>负责人</strong>：类加载器（ClassLoader）</p></li></ul><p><strong>2. 验证（Verification）——“安检”</strong></p><ul><li><p><strong>为什么</strong>：防止病毒代码搞破坏</p><p><strong>检查项目</strong>：</p><ul><li>文件格式（是不是合法.class文件）</li><li>代码逻辑（方法会不会栈溢出）</li><li>引用关系（调用的类/方法存不存在）</li></ul></li><li><p><strong>重要性</strong>：保障JVM安全的第一道防线</p></li></ul><p><strong>3. 准备（Preparation）——“铺地板”</strong></p><ul><li><p><strong>核心任务</strong>：给静态变量腾地方</p><p><strong>重要细节：</strong></p><ul><li>先赋”零值”（int=0，boolean=false等）</li><li>final静态变量直接赋真实值</li><li>实例变量不管（还没到对象创建阶段）</li></ul></li></ul><p><strong>4. 解析（Resolution）——“查通讯录”</strong></p><ul><li><p><strong>本质工作：</strong>把模糊描述转成具体地址</p><ul><li>符号引用 → 直接引用</li></ul><p><strong>类比：</strong></p><ul><li>符号引用：”找市场部张经理”</li><li>直接引用：”3楼305室的张三”</li></ul></li></ul><p><strong>5. 初始化（Initialization）——“装修”</strong></p><ul><li><p><strong>关键动作</strong>：执行静态代码块和静态赋值</p><p><strong>特点：</strong></p><ul><li>按代码顺序执行</li><li>保证父类先装修完</li><li>线程安全（加锁执行）</li></ul></li><li><p><strong>偷懒情况</strong>：没有静态代码/赋值就不执行</p></li></ul><p><strong>快速记忆口诀</strong></p><p>“<strong>装检备解始</strong>“五步走：</p><ol><li>装：加载二进制</li><li>检：验证保安全</li><li>备：静态变量铺零值</li><li>解：符号转直接引用</li><li>始：静态代码搞装修</li></ol><blockquote><p>特殊提示：final static常量在准备阶段就赋值，是唯一例外</p></blockquote><h3 id="堆内存和栈内存的区别"><a href="#堆内存和栈内存的区别" class="headerlink" title="堆内存和栈内存的区别"></a>堆内存和栈内存的区别</h3><p><strong>栈</strong>是运行时单位，代表着逻辑，内含基本数据类型和堆中对象引用，所在区域连续，没有碎片；</p><p><strong>堆</strong>是存储单位，代表着数据，可被多个栈共享（包括成员中基本数据类型、引用和引用对象），所在区域不连<br>续，会有碎片。</p><p><strong>1、功能不同</strong><br>栈内存用来存储局部变量和方法调用，而堆内存用来存储Java中的对象。无论是成员变量，局部变量，还是类变量，它们指向的对象都存储在堆内存中。<br><strong>2、共享性不同</strong><br>栈内存是线程私有的。</p><p>堆内存是所有线程共有的。<br><strong>3、异常错误不同</strong></p><p>如果栈内存或者堆内存不足都会抛出异常。</p><ul><li>栈空间不足：java.lang.StackOverFlowError。</li><li>堆空间不足：java.lang.OutOfMemoryError。</li></ul><p><strong>4、空间大小</strong><br>栈的空间大小远远小于堆的</p><h3 id="双亲委派机制"><a href="#双亲委派机制" class="headerlink" title="双亲委派机制"></a>双亲委派机制</h3><p>双亲委派模型（Parent Delegation Model）是Java类加载器的工作原则，要求<strong>除顶层启动类加载器外，所有类加载器都必须先委派父加载器尝试加载</strong>，只有当父加载器无法完成加载时，子加载器才会自己处理。</p><h2 id="MyBatis"><a href="#MyBatis" class="headerlink" title="MyBatis"></a>MyBatis</h2><h3 id="什么是-Mybatis？"><a href="#什么是-Mybatis？" class="headerlink" title="什么是 Mybatis？"></a>什么是 Mybatis？</h3><p>1、<u>Mybatis 是一个<em>半 ORM（对象关系映射）框架</em>，它内部封装了 <code>JDBC</code>，开发时只需要关注 SQL 语句本身，不需要花费精力去处理加载驱动、创建连接、创建statement 等繁杂的过程</u>。程序员直接编写原生态 sql，可以严格控制 sql 执行性能，灵活度高。</p><p>2、MyBatis 可以<strong>使用 XML 或注解来配置和映射原生信息</strong>，将 <code>POJO</code> 映射成数据库中的记录，避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集。</p><p>3、通过 xml 文件或注解的方式将要执行的各种 <code>statement</code>配置起来，并通过java 对象和 statement 中 sql 的动态参数进行映射生成最终执行的 sql 语句，最后由 mybatis 框架执行 sql 并将结果映射为 java 对象并返回。（从执行 sql 到返回 result 的过程）。</p><blockquote><p>半 ORM（对象关系映射）框架，指的是它不完全是一个 ORM 框架，因为 MyBatis 需要程序员自己编写 Sql 语句。</p></blockquote><h3 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h3><p><strong>单例模式</strong>是一种创建型设计模式，它确保一个类只有一个实例，并提供一个全局访问点。我理解单例模式的核心在于控制实例化过程，防止外部随意创建对象。</p><p><strong>工厂模式</strong>是一种创建型设计模式，它将对象的创建逻辑封装起来，客户端不需要关心具体的实现类。我认为它的主要优势有：</p><ol><li>解耦 - 将对象创建与使用分离</li><li>扩展性好 - 新增产品类不影响现有代码</li><li>统一管理 - 集中控制对象的创建过程</li></ol><p><strong>代理模式</strong>是一种结构型设计模式，它为其他对象提供一种代理以控制对这个对象的访问。我认为代理模式主要有以下作用：</p><ol><li>访问控制 - 控制对真实对象的访问权限</li><li>功能增强 - 在不修改原对象的情况下添加额外功能</li><li>延迟加载 - 只在需要时才创建开销大的对象</li></ol><h3 id="和-的区别是什么？"><a href="#和-的区别是什么？" class="headerlink" title="#{}和${}的区别是什么？"></a>#{}和${}的区别是什么？</h3><h1 id="是预编译处理，-是字符串替换。"><a href="#是预编译处理，-是字符串替换。" class="headerlink" title="{}是预编译处理，${}是字符串替换。"></a>{}是预编译处理，${}是字符串替换。</h1><p>Mybatis 在处理#{}时，会将 sql 中的#{}替换为?号，调用 PreparedStatement 的set 方法来赋值；</p><p>Mybatis 在处理${}时，就是把${}替换成变量的值。</p><p>使用#{}可以有效的防止 SQL 注入，提高系统安全性</p><blockquote><p>他们都是在sql语句中进行赋值操作的部分的语法格式，至于他们两个的区别，#{}就像是在平台上下单，而${}是直接给店家打电话叫人送，前者的安全性和保密性明显更好</p></blockquote><ul><li>用#{}防黑客（用户输入）</li><li>用${}拼SQL（结构部分）</li></ul><h3 id="Mybatis-动态-sql-有什么用？执行原理？有哪些动态-sql？"><a href="#Mybatis-动态-sql-有什么用？执行原理？有哪些动态-sql？" class="headerlink" title="Mybatis 动态 sql 有什么用？执行原理？有哪些动态 sql？"></a>Mybatis 动态 sql 有什么用？执行原理？有哪些动态 sql？</h3><p>Mybatis 动态 sql可在Xml映射文件内，以标签的形式编写动态 sql，执行原理是根据表达式的值完成逻辑判断并动态拼接 sql 的功能。<br>Mybatis 提供了9 种动态 sql 标签 ：trim | where | set | foreach | if | choose| when | otherwise | bind。</p><h3 id="MyBatis-实现一对一有几种方式-具体怎么操作的？"><a href="#MyBatis-实现一对一有几种方式-具体怎么操作的？" class="headerlink" title="MyBatis 实现一对一有几种方式?具体怎么操作的？"></a>MyBatis 实现一对一有几种方式?具体怎么操作的？</h3><p>有联合查询和嵌套查询,联合查询是几个表联合查询,只查询一次, 通过在resultMap 里面配置 association 节点配置一对一的类就可以完成；<br>嵌套查询是先查一个表，根据这个表里面的结果的 外键 id，去再另外一个表里面查询数据,也是通过 association 配置，但另外一个表的查询通过 select 属性配置</p><h3 id="MyBatis-实现一对多有几种方式-怎么操作的？"><a href="#MyBatis-实现一对多有几种方式-怎么操作的？" class="headerlink" title="MyBatis 实现一对多有几种方式,怎么操作的？"></a>MyBatis 实现一对多有几种方式,怎么操作的？</h3><p>有联合查询和嵌套查询。联合查询是几个表联合查询,只查询一次,通过在resultMap 里面的 collection 节点配置一对多的类就可以完成；嵌套查询是先查一个表,根据这个表里面的<br>结果的外键 id,去再另外一个表里面查询数据,也是通过配置 collection,但另外一个表的查询通过 select 节点配置。</p><h3 id="Mybatis-的一级、二级缓存"><a href="#Mybatis-的一级、二级缓存" class="headerlink" title="Mybatis 的一级、二级缓存"></a>Mybatis 的一级、二级缓存</h3><p>）一级缓存: 基于 PerpetualCache <code>珀佩楚尔凯奇</code>的 HashMap 本地缓存，其存储作用域为Session，当 Session flush 或 close 之后，该 Session 中的所有缓存就将清空，默认打开一级缓存。</p><p>2）二级缓存与一级缓存其机制相同，默认也是采用 PerpetualCache，HashMap存储，不同在于其存储作用域为 Mapper(Namespace)，并且可自定义存储源，如 Ehcache。默认不打开二级缓存，要开启二级缓存，使用二级缓存属性类需要实现 Serializable <code>瑟里艾利泽布尔</code>序列化接口(可用来保存对象的状态),可在它的映射文件中配置 ； </p><p>3）对于缓存数据更新机制，当某一个作用域(一级缓存 Session/二级缓存Namespaces)的进行了 C/U/D 操作后，默认该作用域下所有 select 中的缓存将被 clear。</p><h2 id="MyBatis框架（实战）"><a href="#MyBatis框架（实战）" class="headerlink" title="MyBatis框架（实战）"></a>MyBatis框架（实战）</h2><p><strong>面试官</strong>：你如何评价MyBatis框架，它的优缺点是什么？</p><p><strong>我</strong>：MyBatis是一个优秀的持久层框架，我认为它的主要优点包括：</p><ol><li>SQL与代码分离 - XML/注解方式管理SQL，便于维护</li><li>灵活的结果映射 - 强大的resultMap功能</li><li>动态SQL - 根据不同条件生成不同SQL</li><li>缓存机制 - 一级二级缓存提升性能</li></ol><p>但也有一些不足：</p><ol><li>需要手动编写SQL - 相比Hibernate学习成本略高</li><li>复杂关联查询配置较繁琐</li></ol><p>在实际项目中，我通常这样使用MyBatis：</p><ol><li>使用Mapper接口+XML的方式组织SQL</li><li>对复杂查询使用动态SQL构建</li><li>合理配置缓存提升性能</li><li>通过拦截器实现统一的数据过滤或审计功能</li></ol><h2 id="MyBatis高级特性"><a href="#MyBatis高级特性" class="headerlink" title="MyBatis高级特性"></a>MyBatis高级特性</h2><p><strong>面试官</strong>：你使用过MyBatis的哪些高级特性？</p><p><strong>我</strong>：在项目中我主要使用过以下MyBatis高级特性：</p><ol><li><strong>动态SQL</strong>：使用、、等标签构建灵活查询，特别是在复杂查询条件场景下非常实用。</li><li><strong>关联查询</strong>：熟练使用和处理一对一、一对多关系，并通过延迟加载优化性能。</li><li><strong>插件机制</strong>：实现过自定义插件，用于SQL执行时间监控和分页处理。</li><li><strong>二级缓存</strong>：合理配置缓存策略，特别是对于不常变化的基础数据。</li><li><strong>类型处理器</strong>：自定义类型处理器处理特殊数据类型，如枚举和JSON字段。</li></ol><h2 id="设计模式在MyBatis中的应用"><a href="#设计模式在MyBatis中的应用" class="headerlink" title="设计模式在MyBatis中的应用"></a>设计模式在MyBatis中的应用</h2><p><strong>面试官</strong>：你能否举例说明设计模式在MyBatis中的应用？</p><p><strong>我</strong>：MyBatis框架中大量运用了设计模式，我观察到的主要有：</p><ol><li><strong>建造者模式</strong>：SqlSessionFactoryBuilder通过一步步构建最终创建SqlSessionFactory。</li><li><strong>工厂模式</strong>：SqlSessionFactory作为工厂创建SqlSession实例。</li><li><strong>代理模式</strong>：Mapper接口通过动态代理实现，将接口方法调用转换为SQL执行。</li><li><strong>模板方法模式</strong>：BaseExecutor中定义了执行流程的骨架，具体操作由子类实现。</li><li><strong>装饰器模式</strong>：缓存实现中使用装饰器模式层层包装缓存对象。</li></ol><h2 id="数据库部分"><a href="#数据库部分" class="headerlink" title="数据库部分"></a>数据库部分</h2><h3 id="数据库存储引擎"><a href="#数据库存储引擎" class="headerlink" title="数据库存储引擎"></a>数据库存储引擎</h3><p>数据库存储引擎是数据库底层软件组织，数据库管理系统（DBMS）使用数据引擎进行创建、查询、更新和删除数据。不同的存储引擎提供不同的存储机制、索引技巧、锁定水平等功能，使用不同的存储引擎，还可以 获得特定的功能。现在许多不同的数据库管理系统都支持多种不同的数据引擎。存储引擎主要有： 1. MyIsam , 2. InnoDB, 3. Memory, 4. Archive, 5. Federated </p><h3 id="InnoDB与MyISAM的区别"><a href="#InnoDB与MyISAM的区别" class="headerlink" title="InnoDB与MyISAM的区别"></a>InnoDB与MyISAM的区别</h3><ol><li>InnoDB支持事务，MyISAM不支持，对于InnoDB每一条SQL语言都默认封装成事务，自动提交，这样会影响速度，所以最好把多条SQL语言放在begin和commit之间，组成一个事务；</li><li>InnoDB支持外键，而MyISAM不支持。对一个包含外键的InnoDB表转为MYISAM会失败；</li><li>InnoDB是聚集索引，数据文件是和索引绑在一起的，必须要有主键，通过主键索引效率很高。但是辅助索引需要两次查询，先查询到主键，然后再通过主键查询到数据。因此，主键不应该过大，因为主键太大，其他索引也都会很大。而MyISAM是非聚集索引，数据文件是分离的，索引保存的是数据文件的指针。主键索引和辅助索引是独立的。</li><li>InnoDB不保存表的具体行数，执行select count(*) from table时需要全表扫描。而MyISAM用一个变量保存了整个表的行数，执行上述语句时只需要读出该变量即可，速度很快；</li><li>Innodb不支持全文索引，而MyISAM支持全文索引，查询效率上MyISAM要高</li></ol><h3 id="什么是索引，索引的作用？"><a href="#什么是索引，索引的作用？" class="headerlink" title="什么是索引，索引的作用？"></a>什么是索引，索引的作用？</h3><p>索引就是加快检索表中数据的方法。数据库的索引类似于书籍的索引。在书籍中，索引允许用户不必翻阅完整个书就能迅速地找到所需要的信息。在数据库中，索引也允许数据库程序迅速地找到表中的数据，而不必扫描整个数据库。</p><p>mysql 有4种不同的索引：<br>主键索引（PRIMARY）<br>唯一索引（UNIQUE）<br>普通索引（INDEX）<br>全文索引（FULLTEXT</p><h3 id="数据库的三范式是什么"><a href="#数据库的三范式是什么" class="headerlink" title="数据库的三范式是什么"></a>数据库的三范式是什么</h3><p>第一范式：列不可再分<br>第二范式：行可以唯一区分，主键约束<br>第三范式：表的非主属性不能依赖与其他表的非主属性 外键约束<br>且三大范式是一级一级依赖的，第二范式建立在第一范式上，第三范式建立第一第二范式上 。</p><h3 id="什么是数据库事务？事务的特性有哪些？事务的隔离级别？分别处理那些问题"><a href="#什么是数据库事务？事务的特性有哪些？事务的隔离级别？分别处理那些问题" class="headerlink" title="什么是数据库事务？事务的特性有哪些？事务的隔离级别？分别处理那些问题"></a><strong>什么是数据库事务？事务的特性有哪些？事务的隔离级别？分别处理那些问题</strong></h3><p>事务(TRANSACTION)是作为单个逻辑工作单元执行的一系列操作， 这些操作作为一个整体一起向系统提交，要么都执行、要么都不执行 。事务是一个不可分割的工作逻辑单元事务必须具备以下四个属性，简称 ACID 属性：</p><p><strong>原子性（Atomicity）</strong></p><p>事务是一个完整的操作。事务的各步操作是不可分的（原子的）；要么都执行，要么都不执<br>行。</p><p><strong>一致性（Consistency）</strong></p><p>当事务完成时，数据必须处于一致状态。</p><p><strong>隔离性（Isolation）</strong></p><p>对数据进行修改的所有并发事务是彼此隔离的， 这表明事务必须是独立的，它不应以任何方<br>式依赖于或影响其他事务。</p><p><strong>永久性（Durability）</strong></p><p>事务完成后，它对数据库的修改被永久保持，事务日志能够保持事务的永久性</p><p><strong>SQL 标准定义了四个隔离级别：</strong> </p><p><strong>READ-UNCOMMITTED(读取未提交)：</strong> 最低的隔离级别，允许读取尚未提交的数据变更，可能会导致脏读、幻读或不可重复读。</p><p><strong>READ-COMMITTED(读取已提交)：</strong> 允许读取并发事务已经提交的数据，可以阻止脏读，但是幻读或不可重复读仍有可能发生。</p><p><strong>REPEATABLE-READ(可重复读)：</strong> 对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，可以阻止脏读和不可重复读，但幻读仍有可能发生 </p><p><strong>SERIALIZABLE(可串行化)：</strong> 最高的隔离级别，完全服从ACID的隔离级别。所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰</p><h3 id="如何对SQL优化"><a href="#如何对SQL优化" class="headerlink" title="如何对SQL优化"></a>如何对SQL优化</h3><p>1、查询语句中不要使用select *<br>2、尽量减少子查询，使用关联查询（left join,right join,inner join）替代<br>3、减少使用IN或者NOT IN ,使用exists，not exists或者关联查询语句替代<br>4、or 的查询尽量用 union或者union all 代替(在确认没有重复数据或者不用剔除重复数据时，union all会更好)<br>5、应尽量避免在 where 子句中使用!=或&lt;&gt;操作符，否则将引擎放弃使用索引而进行全表扫描。</p><h3 id="简单说一说drop、delete与truncate的区别"><a href="#简单说一说drop、delete与truncate的区别" class="headerlink" title="简单说一说drop、delete与truncate的区别"></a>简单说一说drop、delete与truncate的区别</h3><p>SQL中的drop、delete、truncate都表示删除，但是三者有一些差别<br>delete和truncate只删除表的数据不删除表的结构<br>速度上,一般来说: drop&gt; truncate &gt;delete<br>delete语句是dml,这个操作会放到rollback segement中,事务提交之后才生效;<br>如果有相应的trigger,执行的时候将被触发. truncate,drop是ddl, 操作立即生效,原数据不放到rollbacksegment中,不能回滚. 操作不触发trigger</p><h3 id="什么是视图，视图的优点是什么？"><a href="#什么是视图，视图的优点是什么？" class="headerlink" title="什么是视图，视图的优点是什么？"></a>什么是视图，视图的优点是什么？</h3><p>视图是一种虚拟的表，具有和物理表相同的功能。可以对视图进行增，改，查，操作，试图通常是有一个表或者多个表的行或列的子集。对视图的修改不影响基本表。它使得我们获取数据更容易，相比多表查询</p><p><strong>视图的优点：</strong></p><p>(1) 视图能够简化用户的操作<br>(2) 视图使用户能以多种角度看待同一数据；<br>(3) 视图为数据库提供了一定程度的逻辑独立性；<br>(4) 视图能够对机密数据提供安全保护</p><h3 id="什么是内联接、左外联接、右外联接？"><a href="#什么是内联接、左外联接、右外联接？" class="headerlink" title="什么是内联接、左外联接、右外联接？"></a>什么是内联接、左外联接、右外联接？</h3><p>内联接（Inner Join）：匹配2张表中相关联的记录。<br>左外联接（Left Outer Join）：除了匹配2张表中相关联的记录外，还会匹配左表中剩余的记录，右表中未匹配到的字段用NULL表示。<br>右外联接（Right Outer Join）：除了匹配2张表中相关联的记录外，还会匹配右表中剩余的记录，左表中未匹配到的字段用NULL表示。在判定左表和右表时，要根据表名出现在Outer Join的左右位置关系</p><h3 id="并发事务带来哪些问题"><a href="#并发事务带来哪些问题" class="headerlink" title="并发事务带来哪些问题?"></a>并发事务带来哪些问题?</h3><p><strong>脏读（Dirty read）:</strong> 当一个事务正在访问数据并且对数据进行了修改，而这种修改还没有提交到数据库中，这时另外一个事务也访问了这个数据，然后使用了这个数据。因为这个数据是还没有提交的数据，那么另外一个事务读到的这个数据是“脏数据”，依据“脏数据”所做的操作可能是不正确的。<br><strong>丢失修改（Lost to modify）</strong>: 指在一个事务读取一个数据时，另外一个事务也访问了该数据，那么在第一个事务中修改了这个数据后，第二个事务也修改了这个数据。这样第一个事务内的修改结果就被丢失，因此称为丢失修。 例如：事务1读取某表中的数据A=20，事务2也读取A=20，事务1修改A=A-1，事务2也修改A=A-1，最终结果A=19，事务1的修改被丢失。<br><strong>不可重复读（Unrepeatableread）:</strong> 指在一个事务内多次读同一数据。在这个事务还没有结束时，另一个事务也访问该数据。那么，在第一个事务中的两次读数据之间，由于第二个事务的修改导致第一个事务两次读取的数据可能不太一样。这就发生了在一个事务内两次读到的数据是不一样的情况，因此称为不可重复读。<br><strong>幻读（Phantom read）:</strong> 幻读与不可重复读类似。它发生在一个事务（T1）读取了几行数据，接着另一个并发事务（T2）插入了一些数据时。在随后的查询中，第一个事务（T1）就会发现多了一些原本不存在的记录，就好像发生了幻觉一样，所以称为幻读。</p><p><strong>不可重复读和幻读区别：</strong><br>不可重复读的重点是修改比如多次读取一条记录发现其中某些列的值被修改，幻读的重点在于新增或者删除比如多次读取一条记录发现记录增多或减少了</p><h3 id="遇上大表如何优化？"><a href="#遇上大表如何优化？" class="headerlink" title="遇上大表如何优化？"></a>遇上大表如何优化？</h3><p><strong>限定数据的范围</strong><br>务必禁止不带任何限制数据范围条件的查询语句。比如：我们当用户在查询订单历史的时候，我们可以控制在一个月的范围内；<br><strong>读/写分离</strong><br>经典的数据库拆分方案，主库负责写，从库负责读；<br><strong>垂直分区</strong><br>根据数据库里面数据表的相关性进行拆分。 例如，用户表中既有用户的登录信息又有用户的基本信息，可以将用户表拆分成两个单独的表，甚至放到单独的库做分库。</p><h3 id="数据库并发策略"><a href="#数据库并发策略" class="headerlink" title="数据库并发策略"></a>数据库并发策略</h3><p>并发控制一般采用三种方法，分别是乐观锁和悲观锁以及时间戳。</p><h3 id="MySQL-中有哪几种锁？"><a href="#MySQL-中有哪几种锁？" class="headerlink" title="MySQL 中有哪几种锁？"></a>MySQL 中有哪几种锁？</h3><p>1、表级锁：开销小，加锁快；不会出现死锁；锁定粒度大，发生锁冲突的概率最高，并发度最低。<br>2、行级锁：开销大，加锁慢；会出现死锁；锁定粒度最小，发生锁冲突的概率最低，并发度也最高。<br>3、页面锁：开销和加锁时间界于表锁和行锁之间；会出现死锁；锁定粒度界于表锁和行锁之间，并发度一般</p><h3 id="CHAR-和-VARCHAR-的区别？"><a href="#CHAR-和-VARCHAR-的区别？" class="headerlink" title="CHAR 和 VARCHAR 的区别？"></a>CHAR 和 VARCHAR 的区别？</h3><p>1、CHAR 和 VARCHAR 类型在存储和检索方面有所不同<br>2、CHAR 列长度固定为创建表时声明的长度，长度值范围是 1 到 255 当 CHAR值被存储时，它们被用空格填充到特定长度，检索 CHAR 值时需删除尾随空格。</p><h3 id="对于关系型数据库而言，索引是相当重要的概念，请回答有关索引的几个问题"><a href="#对于关系型数据库而言，索引是相当重要的概念，请回答有关索引的几个问题" class="headerlink" title="对于关系型数据库而言，索引是相当重要的概念，请回答有关索引的几个问题"></a>对于关系型数据库而言，索引是相当重要的概念，请回答有关索引的几个问题</h3><h4 id="1、索引的目的是什么？"><a href="#1、索引的目的是什么？" class="headerlink" title="1、索引的目的是什么？"></a>1、索引的目的是什么？</h4><p>快速访问数据表中的特定信息，提高检索速度<br>创建唯一性索引，保证数据库表中每一行数据的唯一性。<br>加速表和表之间的连接<br>使用分组和排序子句进行数据检索时，可以显著减少查询中分组和排序的时间</p><h4 id="2、索引对数据库系统的负面影响是什么？"><a href="#2、索引对数据库系统的负面影响是什么？" class="headerlink" title="2、索引对数据库系统的负面影响是什么？"></a>2、索引对数据库系统的负面影响是什么？</h4><p><strong>负面影响：</strong><br>创建索引和维护索引需要耗费时间，这个时间随着数据量的增加而增加；索引需要占用物理空间，不光是表需要占用数据空间，每个索引也<br>需要占用物理空间；当对表进行增、删、改、的时候索引也要动态维护，这样就降低了数据的维护速度。</p><h4 id="3、为数据表建立索引的原则有哪些？"><a href="#3、为数据表建立索引的原则有哪些？" class="headerlink" title="3、为数据表建立索引的原则有哪些？"></a>3、为数据表建立索引的原则有哪些？</h4><p>在最频繁使用的、用以缩小查询范围的字段上建立索引。<br>在频繁使用的、需要排序的字段上建立索引</p><h4 id="4、什么情况下不宜建立索引？"><a href="#4、什么情况下不宜建立索引？" class="headerlink" title="4、什么情况下不宜建立索引？"></a>4、什么情况下不宜建立索引？</h4><p>对于查询中很少涉及的列或者重复值比较多的列，不宜建立索引。<br>对于一些特殊的数据类型，不宜建立索引，比如文本字段（text）等</p><h3 id="SQL-语言包括哪几部分？每部分都有哪些操作关键"><a href="#SQL-语言包括哪几部分？每部分都有哪些操作关键" class="headerlink" title="SQL 语言包括哪几部分？每部分都有哪些操作关键"></a>SQL 语言包括哪几部分？每部分都有哪些操作关键</h3><p>SQL 语言包括数据定义(DDL)、数据操纵(DML),数据控制(DCL)和数据查询（DQL）四个部分。<br>数据定义：Create Table,Alter Table,Drop Table, Craete/Drop Index 等<br>数据操纵：Select ,insert,update,delete,<br>数据控制：grant,revoke<br>数据查询：select</p><h3 id="说说对-SQL-语句优化有哪些方法？"><a href="#说说对-SQL-语句优化有哪些方法？" class="headerlink" title="说说对 SQL 语句优化有哪些方法？"></a><strong>说说对</strong> <strong>SQL</strong> <strong>语句优化有哪些方法？</strong></h3><p>1、Where 子句中：where 表之间的连接必须写在其他 Where 条件之前，那些可以过滤掉最大数量记录的条件必须写在 Where 子句的末尾.HAVING 最后。<br>2、用 EXISTS 替代 IN、用 NOT EXISTS 替代 NOT IN。<br>3、 避免在索引列上使用计算<br>4、避免在索引列上使用 IS NULL 和 IS NOT NULL<br>5、对查询进行优化，应尽量避免全表扫描，首先应考虑在 where 及 order by 涉及的列上建立索引。<br>6、应尽量避免在 where 子句中对字段进行 null 值判断，否则将导致引擎放弃使用索引而进行全表扫描<br>7、应尽量避免在 where 子句中对字段进行表达式操作，这将导致引擎放弃使用索引而进行全表扫描</p><h3 id="什么是时间戳"><a href="#什么是时间戳" class="headerlink" title="什么是时间戳"></a>什么是时间戳</h3><p>时间戳就是在数据库表中单独加一列时间戳，比如“TimeStamp”， 每次读出来的时候，把该字段也读出来，当写回去的时候，把该字段加1，提交之前 ，跟数据库的该字段比较一次，如果比数据库的值大的话，就允许保存，否则不允许保存，这种处理方法虽然不使用数据库系统提供的锁机制，但是这种方法可以大大提高数据库处理的并发量，以上悲观锁所说的加“锁”，其实分为几种锁，分别是： 排它锁（写锁）和共享锁（读锁） 。</p><h2 id="LINUX部分"><a href="#LINUX部分" class="headerlink" title="LINUX部分"></a>LINUX部分</h2><h3 id="绝对路径用什么符号表示？当前目录、上层目录用什么表示？主目录用什么表示-切换目录用什么命令？"><a href="#绝对路径用什么符号表示？当前目录、上层目录用什么表示？主目录用什么表示-切换目录用什么命令？" class="headerlink" title="绝对路径用什么符号表示？当前目录、上层目录用什么表示？主目录用什么表示? 切换目录用什么命令？"></a>绝对路径用什么符号表示？当前目录、上层目录用什么表示？主目录用什么表示? 切换目录用什么命令？</h3><p>绝对路径： 如/etc/init.d<br>当前目录和上层目录： ./ ../<br>主目录： ~/<br>切换目录： cd</p><h3 id="怎么查看当前进程？怎么执行退出？怎么查看当前路径？"><a href="#怎么查看当前进程？怎么执行退出？怎么查看当前路径？" class="headerlink" title="怎么查看当前进程？怎么执行退出？怎么查看当前路径？"></a>怎么查看当前进程？怎么执行退出？怎么查看当前路径？</h3><p>查看当前进程： ps<br>执行退出： exit<br>查看当前路径： pwd</p><h3 id="怎么清屏？怎么退出当前命令？怎么执行睡眠？怎么查看当前用户-id？查看指定帮助用什么命令？"><a href="#怎么清屏？怎么退出当前命令？怎么执行睡眠？怎么查看当前用户-id？查看指定帮助用什么命令？" class="headerlink" title="怎么清屏？怎么退出当前命令？怎么执行睡眠？怎么查看当前用户 id？查看指定帮助用什么命令？"></a>怎么清屏？怎么退出当前命令？怎么执行睡眠？怎么查看当前用户 id？查看指定帮助用什么命令？</h3><p>清屏： clear</p><p>退出当前命令： ctrl+c 彻底退出</p><p>执行睡眠 ： ctrl+z 挂起当前进程 fg 恢复后台 查看当前用户 id： ”id“：查看显示目前登陆账户的 uid 和 gid 及所属分组及用户名</p><p>查看指定帮助： 如 man adduser 这个很全 而且有例子； adduser —help 这个告诉你一些常用参数； info adduesr；</p><h3 id="Ls-命令执行什么功能？-可以带哪些参数，有什么区别？"><a href="#Ls-命令执行什么功能？-可以带哪些参数，有什么区别？" class="headerlink" title="Ls 命令执行什么功能？ 可以带哪些参数，有什么区别？"></a>Ls 命令执行什么功能？ 可以带哪些参数，有什么区别？</h3><p>ls 执行的功能： 列出指定目录中的目录，以及文件哪些参数以及区别： a 所有文件 l 详细信息，包括大小字节数，可读可写可执行的权限等</p><h3 id="列举几个常用的Linux命令"><a href="#列举几个常用的Linux命令" class="headerlink" title="列举几个常用的Linux命令"></a>列举几个常用的Linux命令</h3><p>列出文件列表：ls【参数 -a -l】<br>创建目录和移除目录：mkdir rm-dir<br>用于显示文件后几行内容：tail，例如： tail -n 1000：显示最后1000行<br>解压：tar -xvf<br>打包并压缩：tar -zcvf<br>查找字符串：grep<br>显示当前所在目录：pwd创建空文件：touch<br>编辑器：vim vi</p><blockquote><p>要看更多命令，请见<a href="http://xhayane.top/2025/07/24/%E5%BC%80%E5%8F%91%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E9%80%9F%E6%9F%A5/">点击这里看更多</a></p></blockquote><h3 id="使用什么命令查看磁盘使用空间？-空闲空间呢"><a href="#使用什么命令查看磁盘使用空间？-空闲空间呢" class="headerlink" title="使用什么命令查看磁盘使用空间？ 空闲空间呢?"></a>使用什么命令查看磁盘使用空间？ 空闲空间呢?</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df -hl  </span><br></pre></td></tr></table></figure><h3 id="使用什么命令查看网络是否连通-使用什么命令查看-ip-地址及接口信息？"><a href="#使用什么命令查看网络是否连通-使用什么命令查看-ip-地址及接口信息？" class="headerlink" title="使用什么命令查看网络是否连通,使用什么命令查看 ip 地址及接口信息？"></a>使用什么命令查看网络是否连通,使用什么命令查看 ip 地址及接口信息？</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 查看网络是否连通</span><br><span class="line">netsatar</span><br><span class="line"># 查看IP地址及接口信息</span><br><span class="line">ifconfig</span><br></pre></td></tr></table></figure><h3 id="查看各类环境变量用什么命令"><a href="#查看各类环境变量用什么命令" class="headerlink" title="查看各类环境变量用什么命令?"></a>查看各类环境变量用什么命令?</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">查看所有 env</span><br><span class="line">查看某个，如 home： env $HOME</span><br></pre></td></tr></table></figure><hr><p>其余指令和多余的命令指正在施工</p><hr><h2 id="spring部分"><a href="#spring部分" class="headerlink" title="spring部分"></a>spring部分</h2><h3 id="什么是spring？spring的核心机制是什么？"><a href="#什么是spring？spring的核心机制是什么？" class="headerlink" title="什么是spring？spring的核心机制是什么？"></a>什么是spring？spring的核心机制是什么？</h3><p>Spring的核心控制反转（IOC）和面向切面（AOP），简单来说Spring是一个分层JavaEE一站式轻量级开源框架。</p><p><strong>IOC和AOP是spring的核心机制</strong></p><p><strong>IOC:</strong>控制反转/依赖注入，在之前学习的过程中，比如有一个类，我们想要调用类里面的方法，就要创建该类的对象，使用对象调用方法来实现。但是对于Spring来说，不用再自己创建要使用的对象，而是由Spring容器统一管理，自动注入，注入就是赋值</p><p><strong>AOP:</strong>面向切面编程，简单来说就是我们可以在不修改源码的情况下，对程序的方法进行增强，将涉及多业务流程的通用功能抽取并单独封装，形成独立的切面，再合适的时机将这些切面横向切入到业务流程的指定的位置中</p><h3 id="spring中有多少个模块？有那几部分构成"><a href="#spring中有多少个模块？有那几部分构成" class="headerlink" title="spring中有多少个模块？有那几部分构成"></a>spring中有多少个模块？有那几部分构成</h3><p>Spring由20多个模块组成，分为：</p><ul><li>数据访问集成模块（Data Access/Integration）</li><li>web该模块提供了SpringMVC框架给Web应⽤</li><li>面向切面编程（AOP，Aspects）</li><li>提供JVM的代码</li><li>消息发送</li><li>核心容器（Core Container）</li><li>测试（test）</li></ul><h3 id="什么是-Spring-配置文件？"><a href="#什么是-Spring-配置文件？" class="headerlink" title="什么是 Spring 配置文件？"></a>什么是 Spring 配置文件？</h3><p>Spring 配置文件是 XML 文件。该文件主要包含类信息。它描述了这些类是如何配置以及相互引入的。但是，XML 配置文件冗长且更加干净。如果没有正确规划和编写，那么在大项目中管理变得非常困难</p><h3 id="Spring-应用程序有哪些不同组件"><a href="#Spring-应用程序有哪些不同组件" class="headerlink" title="Spring 应用程序有哪些不同组件"></a><strong>Spring</strong> <strong>应用程序有哪些不同组件</strong></h3><p><strong>Spring 应用一般有以下组件：</strong></p><p>接口 - 定义功能。</p><p> Bean 类 - 它包含属性，setter 和 getter 方法，函数等。</p><p> Spring 面向切面编程（AOP） - 提供面向切面编程的功能。</p><p>Bean 配置文件 - 包含类的信息以及如何配置它们。</p><h3 id="什么是依赖注入？"><a href="#什么是依赖注入？" class="headerlink" title="什么是依赖注入？"></a>什么是依赖注入？</h3><p>在依赖注入中，您不必创建对象，但必须描述如何创建它们。您不是直接在代码中将组件和服务连接在一起，而是描述配置文件中哪些组件需要哪些服务。由 IoC容器将它们装配在一起。</p><h3 id="spring-提供了哪些配置方式？"><a href="#spring-提供了哪些配置方式？" class="headerlink" title="spring 提供了哪些配置方式？"></a>spring 提供了哪些配置方式？</h3><p><strong>基于 xml 配置</strong><br>bean 所需的依赖项和服务在 XML 格式的配置文件中指定。这些配置文件通常包含许多 bean 定义和特定于应用程序的配置选项。它们通常以 bean 标签开头。</p><p><strong>基于注解配置</strong><br>您可以通过在相关的类，方法或字段声明上使用注解，将 bean 配置为组件类本身，而不是使用 XML 来描述 bean 装配。默认情况下，Spring 容器中未打开注解装配。因此，您需要在使用它之前在 Spring 配置文件中启用它。</p><p><strong>基于 Java API 配置</strong><br>Spring 的 Java 配置是通过使用 @Bean 和 @Configuration 来实现。<br>1、 @Bean 注解扮演与 元素相同的角色。<br>2、 @Configuration 类允许通过简单地调用同一个类中的其他 @Bean 方法来定义 bean 间依赖关系。</p><h2 id="Spring-Boot部分"><a href="#Spring-Boot部分" class="headerlink" title="Spring Boot部分"></a>Spring Boot部分</h2><h3 id="什么是-Spring-Boot？为什么要用SpringBoot？"><a href="#什么是-Spring-Boot？为什么要用SpringBoot？" class="headerlink" title="什么是 Spring Boot？为什么要用SpringBoot？"></a>什么是 Spring Boot？为什么要用SpringBoot？</h3><p>pring Boot是Spring官方推出的一个快速开发框架，他的优点非常的多例如：</p><p><strong>一、独立运行</strong><br>Spring Boot而且内嵌了各种servlet容器，Tomcat、Jetty等，现在不再需要打成war包部署到容器中，Spring Boot只要打成一个可执行的jar包就能独立运行，所有的依赖包都在一个jar包内。<br><strong>二、简化配置</strong><br>spring-boot-starter-web启动器自动依赖其他组件，简少了maven的配置。</p><p><strong>三、自动配置</strong><br>Spring Boot能根据当前类路径下的类、jar包来自动配置bean，如添加一个spring-boot-starter-web启动器就能拥有web的功能，无需其他配置。<br><strong>四、无代码生成和XML配置</strong><br>Spring Boot配置过程中无代码生成，也无需XML配置文件就能完成所有配置工作，这一切都是借助于条件注解完成的，这也是Spring4.x的核心功能之一。<br><strong>五、应用监控</strong><br>Spring Boot提供一系列端点可以监控服务及应用，做健康检测</p><blockquote><ol><li><strong>简化配置</strong></li></ol><ul><li>自动配置：只要引入starter依赖，就能自动配置相关组件（比如引入spring-boot-starter-web就自动配好Tomcat和Spring MVC）</li><li>约定优于配置：内置默认配置，比如默认端口8080、静态资源目录等</li><li>一个<code>application.properties/yml</code>文件搞定大部分配置</li></ul><ol><li><strong>快速启动</strong></li></ol><ul><li>内嵌服务器：默认打包成可执行jar，内置Tomcat/Jetty，无需部署WAR</li><li>命令行界面：支持通过<code>spring-boot-cli</code>快速原型开发</li><li>健康检查：自带actuator模块提供监控端点</li></ul><ol><li><strong>生态整合</strong></li></ol><ul><li>starter依赖：一组预置的依赖描述（如<code>spring-boot-starter-data-jpa</code>）</li><li>自动管理依赖版本，避免兼容性问题</li><li>无缝集成Spring生态（Security/Cloud等）</li></ul><p><strong>为什么要用Spring Boot</strong>：</p><ul><li>传统SSM项目要配大量XML/注解，Spring Boot用”自动装配”解决了这个痛点</li><li>微服务时代需要快速构建独立应用，内嵌容器和fat jar特性完美匹配</li><li>starter机制让集成Redis、MQ等中间件变得极其简单</li><li>特别适合快速迭代的互联网项目，从创建到上线只需几分钟</li></ul></blockquote><h3 id="Spring-Boot-的核心注解是哪个？它主要由哪几个注解组成的？"><a href="#Spring-Boot-的核心注解是哪个？它主要由哪几个注解组成的？" class="headerlink" title="Spring Boot 的核心注解是哪个？它主要由哪几个注解组成的？"></a>Spring Boot 的核心注解是哪个？它主要由哪几个注解组成的？</h3><p><strong>面试官</strong>：Spring Boot的核心注解是哪个？它由哪些注解组合而成？</p><p><strong>我</strong>：<br>Spring Boot的核心注解是 <strong><code>@SpringBootApplication</code></strong>，它是一个<strong>组合注解</strong>，主要包含以下三个关键注解：</p><blockquote><p>我先告诉你咋读，要不然丢丑</p><ol><li><strong><code>@SpringBootApplication</code></strong><ul><li><strong>音标</strong>：/sprɪŋ buːt ˌæplɪˈkeɪʃən/</li><li><strong>中文谐音</strong>：斯普林-布特-阿普里KAY-申</li></ul></li><li><strong><code>@EnableAutoConfiguration</code></strong><ul><li><strong>音标</strong>：/ɪnˈeɪbl ˌɔːtəʊ kənˌfɪɡjʊˈreɪʃən/</li><li><strong>中文谐音</strong>：因A-布-奥托-肯菲格-瑞-申</li></ul></li><li><strong><code>@ComponentScan</code></strong><ul><li><strong>音标</strong>：/kəmˈpoʊnənt skæn/</li><li><strong>中文谐音</strong>：肯PO-嫩特-斯坎</li></ul></li></ol></blockquote><ol><li><p><strong><code>@SpringBootConfiguration</code></strong>  </p><ul><li>标明这是一个Spring Boot的配置类  </li><li>本质是<code>@Configuration</code>的特化版本，表示该类会定义<code>@Bean</code>方法</li></ul></li><li><p><strong><code>@EnableAutoConfiguration</code></strong>（核心中的核心）  </p><ul><li>启用Spring Boot的自动配置机制  </li><li>自动根据依赖库（如JDBC、Redis等）加载默认配置  </li><li>通过<code>spring.factories</code>文件加载自动配置类</li></ul></li><li><strong><code>@ComponentScan</code></strong>  <ul><li>自动扫描当前包及其子包下的组件  </li><li>识别<code>@Component</code>、<code>@Service</code>、<code>@Controller</code>等注解的类  </li><li>默认扫描启动类所在包及其子包</li></ul></li></ol><p><strong>面试加分点</strong>：  (不着急背诵)</p><ul><li><strong>自动配置原理</strong>：<code>@EnableAutoConfiguration</code>会通过<code>SpringFactoriesLoader</code>加载<code>META-INF/spring.factories</code>中定义的自动配置类  </li><li><strong>自定义排除</strong>：可通过<code>exclude</code>参数禁用特定自动配置（如<code>@SpringBootApplication(exclude = DataSourceAutoConfiguration.class)</code>）  </li><li><strong>组件扫描优化</strong>：合理使用<code>scanBasePackages</code>指定扫描范围提升启动速度  </li></ul><h3 id="运行Spring-Boot有哪几种方式"><a href="#运行Spring-Boot有哪几种方式" class="headerlink" title="运行Spring Boot有哪几种方式"></a>运行Spring Boot有哪几种方式</h3><p>1）打包用命令或者放到容器中运行</p><p>2）用 Maven/Gradle 插件运行</p><p>3）直接执行 main 方法运行</p><h3 id="如何理解-Spring-Boot-中的-Starters？"><a href="#如何理解-Spring-Boot-中的-Starters？" class="headerlink" title="如何理解 Spring Boot 中的 Starters？"></a>如何理解 Spring Boot 中的 Starters？</h3><p><strong>Starters是什么：</strong><br><u>Starters可以理解为启动器，它包含了一系列可以集成到应用里面的依赖包</u>，你可以一站式集成Spring及其他技术，而不需要到处找示例代码和依赖包。如你想使用Spring JPA访问数据库，只要加入springboot-starter-data-jpa启动器依赖就能使用了。Starters包含了许多项目中需要用到的依赖，它们能快速持续的运行，都是一系列得到支持的管理传递性依赖。</p><p><strong>springboot常用的starter有哪些</strong></p><p>spring-boot-starter-<strong>web</strong> 嵌入tomcat和web开发需要servlet与jsp支持</p><p>spring-boot-starter-<strong>data-jpa</strong> 数据库支持</p><p>spring-boot-starter-<strong>data-redis</strong> redis数据库支持</p><p>spring-boot-starter-<strong>data-solr</strong> solr支持</p><p>mybatis-spring-boot-<strong>starter</strong> 第三方的mybatis集成starter</p><h3 id="Spring-Boot-需要独立的容器运行吗？"><a href="#Spring-Boot-需要独立的容器运行吗？" class="headerlink" title="Spring Boot 需要独立的容器运行吗？"></a>Spring Boot 需要独立的容器运行吗？</h3><p>基本上不需要，但是也可以部署到其他容器中，Spring Boot内置了Tomcat/ Jetty等容器</p><h3 id="Spring-Boot中的监视器是什么？"><a href="#Spring-Boot中的监视器是什么？" class="headerlink" title="Spring Boot中的监视器是什么？"></a>Spring Boot中的监视器是什么？</h3><p>Spring boot actuator是spring启动框架中的重要功能之一。Spring boot监视器可帮助您访问生产环境中正在运行的应用程序的当前状态。有几个指标必须在生产环境中进行检查和监控。即使一些外部应用程序可能正在使用这些服务来向相关人员触发警报消息。监视器模块公开了一组可直接作为HTTP URL访问的REST端点来检查状态</p><h3 id="如何使用Spring-Boot实现异常处理？"><a href="#如何使用Spring-Boot实现异常处理？" class="headerlink" title="如何使用Spring Boot实现异常处理？"></a>如何使用Spring Boot实现异常处理？</h3><p>Spring提供了一种使用ControllerAdvice处理异常的非常有用的方法。 我们通过实现一个ControlerAdvice类，来处理控制器类抛出的所有异常</p><h3 id="如何理解-Spring-Boot-配置加载顺序"><a href="#如何理解-Spring-Boot-配置加载顺序" class="headerlink" title="如何理解 Spring Boot 配置加载顺序"></a>如何理解 Spring Boot 配置加载顺序</h3><p>在 Spring Boot 里面，可以使用以下几种方式来加载配置。<br>1）properties文件；<br>2）YAML文件；<br>3）系统环境变量；<br>4）命令行参数；<br>等等……</p><h3 id="Spring-Boot-的核心配置文件有哪几个？它们的区别是什么？"><a href="#Spring-Boot-的核心配置文件有哪几个？它们的区别是什么？" class="headerlink" title="Spring Boot 的核心配置文件有哪几个？它们的区别是什么？"></a>Spring Boot 的核心配置文件有哪几个？它们的区别是什么？</h3><p>Spring Boot 的核心配置文件是 <code>application</code> 和 <code>bootstrap</code>配置文件。</p><p>application 配置文件这个容易理解，主要用于 Spring Boot 项目的自动化配置。<br>bootstrap 配置文件有以下几个应用场景。</p><ol><li>使用 Spring Cloud Config 配置中心时，这时需要在 bootstrap 配置文件中添加连接到配置中心的配置属性来加载外部配置中心的配置<br>信息；</li><li>一些固定的不能被覆盖的属性；</li><li>一些加密/解密的场景</li></ol><h3 id="什么是-JavaConfig？"><a href="#什么是-JavaConfig？" class="headerlink" title="什么是 JavaConfig？"></a>什么是 JavaConfig？</h3><p>Spring JavaConfig 是 Spring 社区的产品，它提供了配置 Spring IoC 容器的纯Java 方法。因此它有助于避免使用 XML 配置。使用JavaConfig 的优点在于：</p><p>1、面向对象的配置:由于配置被定义为 JavaConfig 中的类，因此用户可以充分利用 Java 中的面向对象功能。一个配置类可以继承另一个，重写它的@Bean 方法等。<br>2、减少或消除 XML 配置：基于依赖注入原则的外化配置的好处已被证明。但是，许多开发人员不希望在 XML 和 Java 之间来回切换。JavaConfig 为开发人员提供了一种纯 Java 方法来配置与 XML 配置概念相似的 Spring 容器。从技术角度来讲，只使用 JavaConfig 配置类来配置容器是可行的，但实际上很多人认为将JavaConfig 与 XML 混合匹配是理想的。<br>3、类型安全和重构友好：JavaConfig 提供了一种类型安全的方法来配置 Spring容器。由于 Java 5.0 对泛型的支持，现在可以按类型而不是按名称检索 bean，不需要任何强制转换或基于字符串的查找。</p>]]></content>
      
      
      <categories>
          
          <category> 结构速查 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试大宝典 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis学习笔记</title>
      <link href="/2025/08/07/MyBatis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2025/08/07/MyBatis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="MyBatis"><a href="#MyBatis" class="headerlink" title="MyBatis"></a>MyBatis</h1><h2 id="一、框架概述"><a href="#一、框架概述" class="headerlink" title="一、框架概述"></a>一、框架概述</h2><h3 id="什么是框架"><a href="#什么是框架" class="headerlink" title="什么是框架"></a>什么是框架</h3><p>框架对通用的代码的封装，通过使用框架，提高开发效率，而不需要关心一些繁琐的、复杂的底层代码实现，把更多的经历用于所在需求的实现上。</p><p>框架可以理解为一个半成品，我们选用这个半成品，然后加上业务需求来最终实现整个功能。</p><h3 id="软件开发的分层"><a href="#软件开发的分层" class="headerlink" title="软件开发的分层"></a>软件开发的分层</h3><p>在我们进行程序设计以及程序开发时，尽可能让每一个接口、类、方法的职责更单一（单一原则）</p><p><strong>单一原则</strong>：一个类或者一个方法，就只做一件事情，只管一个功能。这样就可以让类、接口、方法的复杂度更低，可读性更强、扩展性更好，也便于后期的维护。</p><p>以前我们写代码，从组成可以分成三个部分：</p><ul><li>数据访问：负责业务数据的维护操作</li><li>逻辑处理：负责业务逻辑处理的代码</li><li>请求处理：接受请求，给页面响应数据</li></ul><p>在我们项目开发中，将代码分为三层：</p><ol><li>前端发起的请求，由controller层接收，控制器响应数据给前端</li><li>controller层调用service层进行逻辑处理，service层处理后，把处理结果返回给controller层</li><li>dao层操作底层的数据，负责拿到数据返回给service层</li></ol><p>分层就是分工，划分环节，通过分层架构的设计，使代码的职责分明，容易理解和维护，还能实现代码的重用，提高系统的整体性能和扩展性，同时各层之前的结构也很方便，提高代码的质量和稳定性。</p><p>通过分层更好的实现各个部分的职责，在每一层将再细化出不同的矿界，分别解决各层关注的问题。</p><h3 id="分层开发下的常见框架"><a href="#分层开发下的常见框架" class="headerlink" title="分层开发下的常见框架"></a>分层开发下的常见框架</h3><ul><li><strong>表现层</strong>：指的是用户直接与应用进行交互的部分，负责接收用户请求、处理业务逻辑、返回响应结果。表现层框架的主要任务是将业务逻辑与用户进行交互，提供良好的用户体验。</li><li><strong>业务逻辑层</strong>：也称为服务层，负责处理应用的业务逻辑。它负责协调不同组件之间的工作，执行复杂的业务规则和计算。业务逻辑层框架的主要任务是封装业务逻辑，提供可重复使用的业务功能。</li><li><strong>数据访问层</strong>：也称为持久层，负责与数据库或其他数据存储进行交互。它负责执行数据库操作，如查询、插入、更新和删除数据。数据访问层框架的主要任务是提供统一的接口，隐藏底层数据库的细节，使业务逻辑层能够独立于具体的数据库实现。</li></ul><h2 id="二、Mybatis框架"><a href="#二、Mybatis框架" class="headerlink" title="二、Mybatis框架"></a>二、Mybatis框架</h2><h3 id="什么是mybatis"><a href="#什么是mybatis" class="headerlink" title="什么是mybatis"></a>什么是mybatis</h3><p>MyBatis 是一款优秀的持久层框架。</p><p>采用ORM思想解决实体和数据库映射的问题，对JDBC 进行了封装，屏蔽了JDBC API底层访问细节，使我们不用与JDBC API打交道，就可以完成对数据库的持久化操作。</p><p>Mybatis本来是apache的一个开源项目IBatis，2010年的这个项目由apache改名MyBatis。</p><ul><li><strong>持久层</strong>：指的是数据访问层dao，是用来操作数据库的</li><li><strong>框架</strong>：是一个半成品软件，再框架的基础上进行软件开发，更加高效，规范，可扩展。</li></ul><p><strong>ORM</strong>：对象关系映射，实现了面向对象编程语言中对象与关系型数据库中的表之间的映射，ORM框架允许开发者使用面向对象的方式来操作数据库，而无需关心底层的SQL语句。</p><p>具体来说：</p><ol><li>ORM框架将数据库中的表(table)映射为编程语言中的类(class)</li><li>表中的记录映射为类的实例</li><li>字段映射为对象的属性</li></ol><h3 id="JDBC编程的分析"><a href="#JDBC编程的分析" class="headerlink" title="JDBC编程的分析"></a>JDBC编程的分析</h3><ol><li>数据库连接创建、释放频繁造成系统资源浪费从而影响系统性能，如果使用数据库连接池可解决此问题。</li><li>因为SQL语句的where条件不一定，可能多可能少，修改SQL还要i需改代码，系统不容易维护。</li><li>对结果集解析步骤相对繁琐。</li></ol><h3 id="Mybatis入门案例"><a href="#Mybatis入门案例" class="headerlink" title="Mybatis入门案例"></a>Mybatis入门案例</h3><p><strong>1）. pom.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--MySQL驱动--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.46<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--MyBatis核心包--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>2）. 编写实体类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dept</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> deptNo;</span><br><span class="line">    <span class="keyword">private</span> String dname;</span><br><span class="line">    <span class="keyword">private</span> String loc;</span><br><span class="line">    <span class="comment">// 省略get/set及toString方法</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><strong>3）. 编写持久层接口</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IDeptDao</span> &#123;</span><br><span class="line">    <span class="comment">// 查询所有部门信息</span></span><br><span class="line">    List&lt;Dept&gt; <span class="title function_">findAll</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="XML配置文件实现"><a href="#XML配置文件实现" class="headerlink" title="XML配置文件实现"></a>XML配置文件实现</h2><h4 id="【1】创建XML映射文件"><a href="#【1】创建XML映射文件" class="headerlink" title="【1】创建XML映射文件"></a>【1】创建XML映射文件</h4><p>要求：</p><ul><li>创建位置必须与持久层接口在相同的包中</li><li>名称：必须以持久层接口名称命名文件名</li></ul><h4 id="【2】编写XML映射文件"><a href="#【2】编写XML映射文件" class="headerlink" title="【2】编写XML映射文件"></a>【2】编写XML映射文件</h4><p>xml映射文件中的DTD约束，直接从mybatis官网复制即可，或者直接AI生成<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h4 id="【3】配置"><a href="#【3】配置" class="headerlink" title="【3】配置"></a>【3】配置</h4><p>在mybatis-config.xml配置文件中，需要配置mapper映射文件的位置，告诉mybatis去哪里找到对应的SQL语句。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">  <span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- XML映射文件的namespace属性为dao接口全限名  包名.类名 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.iweb.dao.IDeptDao&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置查询所有操作</span></span><br><span class="line"><span class="comment">            id属性为方法名</span></span><br><span class="line"><span class="comment">            resultType属性为返回值类型  报名.类名  区分大小</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.iweb.bean.Dept&quot;</span>&gt;</span></span><br><span class="line">        select * from dept</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="【4】配置mybatis-config-xml配置文件"><a href="#【4】配置mybatis-config-xml配置文件" class="headerlink" title="【4】配置mybatis-config.xml配置文件"></a>【4】配置mybatis-config.xml配置文件</h4><p>核心配置文件主要用于配置数据库的环境以及mybatis的全局配置信息，存放的位置src/main/resources目录下<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置mybatis的环境 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;mysql&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置mysql的环境 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;mysql&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 配置事务的类型 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 配置数据库信息，用的是连接池的数据源 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--配置连接池需要的参数--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/db&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 告诉mybatis映射文件的位置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;com/iweb/dao/DeptDao.xml&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></p><p>以后，这个配置文件可以省略</p><h4 id="【测试】"><a href="#【测试】" class="headerlink" title="【测试】"></a>【测试】</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">package</span> com.iweb.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.iweb.bean.Dept;</span><br><span class="line"><span class="keyword">import</span> com.iweb.dao.IDeptDao;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestMyBatis</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFindAll</span><span class="params">()</span> <span class="keyword">throws</span>  Exception&#123;</span><br><span class="line">        <span class="comment">//1.读取配置文件</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line">        <span class="comment">//2.创建sqlSessionFactory构建者对象</span></span><br><span class="line">        <span class="type">SqlSessionFactory</span> <span class="variable">build</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(in);</span><br><span class="line">        <span class="comment">//3.使用SqlSessionFactory生成sqlSession对象</span></span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">session</span> <span class="operator">=</span> build.openSession();</span><br><span class="line">        <span class="comment">//4.使用session创建dao接口的代理对象</span></span><br><span class="line">        <span class="type">IDeptDao</span> <span class="variable">deptDao</span> <span class="operator">=</span> session.getMapper(IDeptDao.class);</span><br><span class="line">        <span class="comment">//5.使用代理对象执行查询所有的方法</span></span><br><span class="line">        <span class="keyword">for</span> (Dept dept : deptDao.findAll()) &#123;</span><br><span class="line">            System.out.println(dept.toString());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//6.释放资源</span></span><br><span class="line">        session.close();</span><br><span class="line">        in.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="XML映射配置"><a href="#XML映射配置" class="headerlink" title="XML映射配置"></a>XML映射配置</h2><p>mybatis的开发有两种方式：</p><ol><li>注解</li><li>XML</li></ol><h3 id="XML配置文件规范"><a href="#XML配置文件规范" class="headerlink" title="XML配置文件规范"></a>XML配置文件规范</h3><p>使用mybatis的注解方式，主要是完成一些简单的增删改查功能，如果需要实现复杂的SQL功能，建议使用XML配置来配置映射语句，也就是将SQL语句写在XML配置文件中。</p><p>在mybatis中使用XML映射文件方式开发，需要符合一定的规范：</p><ol><li>XML映射文件的名称与Mapper接口名称一致，并且将XML映射文件和Mapper接口放置在相同包下（同包同名）</li><li>XML映射文件的namespace属性为Mapper接口全限定名一致</li><li>XML映射文件中SQL语句的id属性值与Mapper接口中的方法名一致，并保持返回类型一致</li></ol><p><strong>总结</strong><br>通过上述案例，我们发现使用mybatis是非常容易的事情，只需要编写Dao接口并且按照mybatis的要求编写两个配置文件，就可以实现功能。</p><h3 id="基于注解的mybatis使用"><a href="#基于注解的mybatis使用" class="headerlink" title="基于注解的mybatis使用"></a>基于注解的mybatis使用</h3><p><strong>1）. 在持久层接口中添加注解</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IDeptDao</span> &#123;</span><br><span class="line">    <span class="comment">// 查询所有部门信息</span></span><br><span class="line">    <span class="meta">@Select(&quot;select * from dept&quot;)</span></span><br><span class="line">    List&lt;Dept&gt; <span class="title function_">findAll</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><strong>2）. 修改mybatis-config.xml</strong><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">&lt;!-- 告诉mybatis映射文件的位置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;com.iweb.dao.IDeptDao&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><br><strong>注意事项</strong></p><p>在使用基于注解的mybatis配置时，需要移除xml的映射配置</p><h3 id="mybatisX的使用"><a href="#mybatisX的使用" class="headerlink" title="mybatisX的使用"></a>mybatisX的使用</h3><p>mybatis是一款基于DIEA的快速开发mybatis的插件，为效率而生。</p><p><strong>xml与接口互跳</strong><br>我们点击dao接口方法左侧的图标可以直接跳转到dao.xml对应的SQL实现，在dao.xml点击左侧图标也可以直接跳转到dao接口中对应的方法。</p><h3 id="日志技术"><a href="#日志技术" class="headerlink" title="日志技术"></a>日志技术</h3><p>日志就用来记录程序运行信息，状态信息，错误信息的。</p><h4 id="mybatis日志框架"><a href="#mybatis日志框架" class="headerlink" title="mybatis日志框架"></a>mybatis日志框架</h4><p>mybatis没有直接依赖具体的日志实现，而是通过内置的日志抽象层来桥接不同的日志框架。</p><p>mybatis支持的日志框架（优先级别）：</p><ul><li>SLF4J</li><li>LOG4J 2</li><li>LOG4J</li><li>JDK</li><li>LOG4J</li></ul><p>LOG4J是一个流行的日志框架，提供了灵活的配置选项，支持多种输出目标。</p><p>【1】引入log4j的依赖<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><br>【2】在 MyBatis 配置文件 mybatis-config.xml 里面添加一项 setting 来选择日志实现工具<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;LOG4J&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><br>【3】添加日志控制文件<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 配置全局的日志输出级别debug-&gt;info-&gt;warn-&gt;error</span><br><span class="line"># 设置日志输出源 stdout  输出到控制台</span><br><span class="line">log4j.rootLogger=debug, stdout</span><br><span class="line"># 配置日志相关的信息</span><br><span class="line">log4j.logger.org.mybatis.example.BlogMapper=TRACE</span><br><span class="line">log4j.appender.stdout=org.apache.log4j.ConsoleAppender</span><br><span class="line">log4j.appender.stdout.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.stdout.layout.ConversionPattern=%5p [%t] - %m%n</span><br></pre></td></tr></table></figure></p><h2 id="代理Dao实现CRUD操作"><a href="#代理Dao实现CRUD操作" class="headerlink" title="代理Dao实现CRUD操作"></a>代理Dao实现CRUD操作</h2><h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><p>需求：依据部门编号查询部门信息</p><p>1）在持久层添加findByDeptId方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据部门编号查询部门信息</span></span><br><span class="line">   Dept <span class="title function_">findByDeptId</span><span class="params">(<span class="type">int</span> deptNo)</span>;</span><br></pre></td></tr></table></figure><br>2）在deptDao.xml的映射配置见配置查询方法<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findByDeptId&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.iweb.bean.Dept&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span>&gt;</span></span><br><span class="line">    select * from dept where deptno = #&#123;deptNo&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><br><strong>属性说明</strong>：</p><ul><li>resultType属性：用于指定返回结果集的类型</li><li>parameterType属性：用于指定传入参数的类型</li><li>sql语句种使用#{}：在mybatis中我们可以通过占位符#{..}来占位，在调用findByDeptId方法时，传递参数只，最终会替换占位符。</li></ul><p>3）测试<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">package</span> com.iweb.test;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestMyBatis</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> InputStream in;</span><br><span class="line">    <span class="keyword">private</span> SqlSessionFactory build;</span><br><span class="line">    <span class="keyword">private</span> SqlSession session;</span><br><span class="line">    <span class="keyword">private</span> IDeptDao deptDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span>  <span class="comment">// 在测试方法执行完成之后执行</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        session.commit();</span><br><span class="line">        session.close();</span><br><span class="line">        in.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span>  <span class="comment">// 在测试方法执行之前完成执行</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> <span class="keyword">throws</span>  Exception&#123;</span><br><span class="line">        <span class="comment">//1.读取配置文件</span></span><br><span class="line">         in = Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line">        <span class="comment">//2.创建sqlSessionFactory构建者对象</span></span><br><span class="line">         build = <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(in);</span><br><span class="line">        <span class="comment">//3.使用SqlSessionFactory生成sqlSession对象</span></span><br><span class="line">         session = build.openSession();</span><br><span class="line">        <span class="comment">//4.使用session创建dao接口的代理对象</span></span><br><span class="line">         deptDao = session.getMapper(IDeptDao.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFindByDeptId</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Dept</span> <span class="variable">dept</span> <span class="operator">=</span> deptDao.findByDeptId(<span class="number">3</span>);</span><br><span class="line">        System.out.println(dept);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFindAll</span><span class="params">()</span> <span class="keyword">throws</span>  Exception&#123;</span><br><span class="line">        <span class="comment">//5.使用代理对象执行查询所有的方法</span></span><br><span class="line">        <span class="keyword">for</span> (Dept dept : deptDao.findAll()) &#123;</span><br><span class="line">            System.out.println(dept.toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h3><p>1）. 在持久层中添加新增方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 新增部门</span></span><br><span class="line">   <span class="type">int</span> <span class="title function_">saveDept</span><span class="params">(Dept dept)</span>;</span><br></pre></td></tr></table></figure><br>2）. 在映射配置文件中配置新增方法<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">&lt;!-- 添加 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;saveDept&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.iweb.bean.Dept&quot;</span>&gt;</span></span><br><span class="line">    insert into dept(dname,loc) values(#&#123;dname&#125;,#&#123;loc&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><br><strong>parameterType属性</strong>：代表参数的类型，因为我们要传入的是一个类的对象，所以类型就写全类名</p><p><code>#&#123;&#125;</code>中内容的写法：由于我们保存方法的参数是一个Dept对象，此处需要写Dept对象中的属性名称。它用的是OGNL表达式：</p><p><strong>OGNL表达式</strong>：</p><p>它是apache提供的一种表达式语言，全程是对象图导航语言</p><p><code>#&#123;dept.dname&#125;</code>它会先去找dept对象，然后在找到dept对象中的dname属性，并调用getDname()方法把值取出来。但是我们在parameterType属性上指定了实体类名称，所以可以省略dpet.，而直接写dname即可。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">  <span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSaveDept</span><span class="params">()</span>&#123;</span><br><span class="line">    Dept dept=<span class="keyword">new</span> <span class="title class_">Dept</span>();</span><br><span class="line">    dept.setDname(<span class="string">&quot;市场部&quot;</span>);</span><br><span class="line">    dept.setLoc(<span class="string">&quot;长沙&quot;</span>);</span><br><span class="line">    <span class="comment">// 执行保存方法</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> deptDao.saveDept(dept);</span><br><span class="line">    System.out.println(i+<span class="string">&quot;条受影响&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>我们在实现增删该时一定要去控制事务的提交，那么mybatis是如何控制事务提交的？可以使用<code>session.commit()</code>来提交事务。</p><p><strong>如何获取新增id的返回值？</strong></p><p>新增部门后，同时还有返回当前新增部门的id值，因为id属性值是由数据库的自动增长来实现的，所以就相当于我们要在新增后将自动增长的值返回<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;saveDept&quot;</span> <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;deptNo&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.iweb.bean.Dept&quot;</span>&gt;</span></span><br><span class="line">      insert into dept(dname,loc) values(#&#123;dname&#125;,#&#123;loc&#125;)</span><br><span class="line">  <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><br><strong>属性说明</strong>：</p><ul><li>useGeneratedKeys=true: 在执行添加记录之后可以获取到数据库自动生成的主键ID，在自动获取到主键后，需要设置返回的主键对象。</li><li>keyProperty：设置的值为java对象主键的属性，指定主键id值存放的属性。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">  <span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSaveDept</span><span class="params">()</span>&#123;</span><br><span class="line">    Dept dept=<span class="keyword">new</span> <span class="title class_">Dept</span>();</span><br><span class="line">    dept.setDname(<span class="string">&quot;市场部&quot;</span>);</span><br><span class="line">    dept.setLoc(<span class="string">&quot;长沙&quot;</span>);</span><br><span class="line">    <span class="comment">// 执行保存方法</span></span><br><span class="line">    deptDao.saveDept(dept);</span><br><span class="line">    System.out.println(<span class="string">&quot;插入的主键---&gt;&quot;</span>+dept.getDeptNo());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 修改部门信息</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">updateDept</span><span class="params">(Dept dept)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">&lt;!-- 修改 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateDept&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.iweb.bean.Dept&quot;</span>&gt;</span></span><br><span class="line">    update dept set dName=#&#123;dname&#125;,loc=#&#123;loc&#125; where detpNo=#&#123;deptNo&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>测试<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUpdateDept</span><span class="params">()</span>&#123;</span><br><span class="line">           Dept dept=<span class="keyword">new</span> <span class="title class_">Dept</span>();</span><br><span class="line">           dept.setDeptNo(<span class="number">5</span>);</span><br><span class="line">           dept.setDname(<span class="string">&quot;销售部&quot;</span>);</span><br><span class="line">           dept.setLoc(<span class="string">&quot;广州&quot;</span>);</span><br><span class="line">           <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> deptDao.updateDept(dept);</span><br><span class="line">           System.out.println(result+<span class="string">&quot;行受影响&quot;</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 删除</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">delDeptByDeptNo</span><span class="params">(<span class="type">int</span> deptNo)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 删除 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;delDeptByDeptNo&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span>&gt;</span></span><br><span class="line">    delete from dept where deptno=#&#123;deptNo&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure>测试<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDelDeptByDeptNo</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> deptDao.delDeptByDeptNo(<span class="number">5</span>);</span><br><span class="line">    System.out.println(i+<span class="string">&quot;条受影响&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h3></li></ul><h4 id="【方式一】"><a href="#【方式一】" class="headerlink" title="【方式一】"></a>【方式一】</h4><p>在dao接口中直接使用<code>#&#123;&#125;</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 模糊查询方式一</span></span><br><span class="line">   List&lt;Dept&gt; <span class="title function_">findByDeptName</span><span class="params">(String dname)</span>;</span><br></pre></td></tr></table></figure><br>映射文件配置<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 模糊查询一 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findByDeptName&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.iweb.bean.Dept&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;string&quot;</span>&gt;</span></span><br><span class="line">     select * from dept where dname like #&#123;dname&#125;</span><br><span class="line"> <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><br>测试方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">  <span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testLikeByDeptName</span><span class="params">()</span>&#123;</span><br><span class="line">    List&lt;Dept&gt; depts = deptDao.findByDeptName(<span class="string">&quot;%部%&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (Dept dept : depts) &#123;</span><br><span class="line">        System.out.println(dept);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>我们在配置文件中没有加入%来作为模糊查询的条件，所以在传入字符串实参时，就需要给定模糊查询的标识符%。</p><h4 id="【方式二】"><a href="#【方式二】" class="headerlink" title="【方式二】"></a>【方式二】</h4><p>在xml中使用concat函数</p><p>如果你不想在java代码中拼接字符串，可以在xml映射文件中的SQL中使用concat函数来拼接百分比符号和参数。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 模糊查询二 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findByDeptName&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;string&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.iweb.bean.Dept&quot;</span>&gt;</span></span><br><span class="line">     select * from dept where dname like concat(&#x27;%&#x27;,#&#123;deptName&#125;,&#x27;%&#x27;)</span><br><span class="line"> <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><br>测试<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testLikeByDname</span><span class="params">()</span>&#123;</span><br><span class="line">       List&lt;Dept&gt; depts = deptDao.findByDeptName(<span class="string">&quot;运营&quot;</span>);</span><br><span class="line">       <span class="keyword">for</span> (Dept dept : depts) &#123;</span><br><span class="line">           System.out.println(dept);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><h4 id="【方式三】"><a href="#【方式三】" class="headerlink" title="【方式三】"></a>【方式三】</h4><p>使用<code>$&#123;&#125;</code>进行拼接（不推荐）</p><p>虽然可以使用<code>$&#123;&#125;</code>进行字符串拼接以实现like查询，但是这种方式容易导致SQL注入攻击，因此不推荐使用。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">&lt;!-- 模糊查询三 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findByDeptName&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;string&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.iweb.bean.Dept&quot;</span>&gt;</span></span><br><span class="line">    select * from dept where dname like &#x27;%$&#123;value&#125;%&#x27;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><br>我们在上面将原来的<code>#&#123;&#125;</code>占位符改成了<code>$&#123;value&#125;</code>，如果用这种方式的模糊查询，那么<code>$&#123;value&#125;</code>的写法是固定的，不能改成其他的名字。</p><p>测试<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testLikeByDname</span><span class="params">()</span>&#123;</span><br><span class="line">    List&lt;Dept&gt; depts = deptDao.findByDeptName(<span class="string">&quot;部&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (Dept dept : depts) &#123;</span><br><span class="line">        System.out.println(dept);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="面试题-vs-区别"><a href="#面试题-vs-区别" class="headerlink" title="面试题 #{} vs ${}区别?"></a>面试题 #{} vs ${}区别?</h4><ul><li><code>#&#123;&#125;</code>表示一个占位符通过<code>#&#123;&#125;</code>可以实现PreparedStatement向占位符中设置值，自动进行Java类型和Jdbc类型转换，<code>#&#123;&#125;</code>可以有效防止SQL注入。<code>#&#123;&#125;</code>可以接受简单类型值和POJO属性值，如果parameterType传输单个简单类型值，<code>#&#123;&#125;</code>扩种可以是value或者其他名字。</li><li><code>$&#123;&#125;</code>表示拼接SQL通过<code>$&#123;&#125;</code>可以将parameterType传入的内容拼接在SQL中且不进行Jdbc类型转换，<code>$&#123;&#125;</code>可以接受简单类型值或者POJO属性值，如果parameterType传输单个简单类型值，<code>$&#123;&#125;</code>括号只能是value。</li></ul><h3 id="聚合查询"><a href="#聚合查询" class="headerlink" title="聚合查询"></a>聚合查询</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 聚合函数</span></span><br><span class="line">   <span class="type">int</span> <span class="title function_">findTotal</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><p>映射配置文件<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 聚合函数 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findTotal&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;int&quot;</span>&gt;</span></span><br><span class="line">         select count(*) from dept</span><br><span class="line"> <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><br>测试<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFindTotal</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="type">int</span> <span class="variable">total</span> <span class="operator">=</span> deptDao.findTotal();</span><br><span class="line">       System.out.println(total);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><h2 id="四、mybatis的参数深入"><a href="#四、mybatis的参数深入" class="headerlink" title="四、mybatis的参数深入"></a>四、mybatis的参数深入</h2><h3 id="parameterType配置参数"><a href="#parameterType配置参数" class="headerlink" title="parameterType配置参数"></a>parameterType配置参数</h3><p>SQL语句传参，使用标签的parameterType属性设置。属性的取值可以是基本类型，引用类型（String），还可以是实体类类型（POJO），同时也可以是实体类的包装类。</p><h3 id="传递POJO包装对象"><a href="#传递POJO包装对象" class="headerlink" title="传递POJO包装对象"></a>传递POJO包装对象</h3><p>开发中通过POJO传递查询条件，查询条件是综合的查询条件，不仅包括用户查询条件还可以包括其他的查询条件（比如用户购买的商品信息也作为查询条件），这时可以使用包装类对象传递输入参数，POJO类中包含POJO</p><p>需求：根据部门名称查询部门查询，查询条件放到QueryVo的Dept属性中。</p><p>1）. 编写paramVO<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ParamVO</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Dept dept;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Dept <span class="title function_">getDept</span><span class="params">()</span> &#123;<span class="comment">//这里是类中嵌入一个类</span></span><br><span class="line">        <span class="keyword">return</span> dept;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDept</span><span class="params">(Dept dept)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.dept = dept;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>2）. 在持久层接口中添加方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 包装类作为参数</span></span><br><span class="line">    List&lt;Dept&gt; <span class="title function_">findByVo</span><span class="params">(ParamVO vo)</span>;</span><br></pre></td></tr></table></figure><br>3）. 映射配置<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findByVo&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.iweb.bean.Dept&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.iweb.bean.ParamVO&quot;</span>&gt;</span></span><br><span class="line">       select * from dept where dname like #&#123;dept.dname&#125;</span><br><span class="line">   <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><br>4）. 测试包装类作为参数<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFindParamVo</span><span class="params">()</span>&#123;</span><br><span class="line">       ParamVO paramVO=<span class="keyword">new</span> <span class="title class_">ParamVO</span>();</span><br><span class="line">       Dept d=<span class="keyword">new</span> <span class="title class_">Dept</span>();</span><br><span class="line">       d.setDname(<span class="string">&quot;%部%&quot;</span>);</span><br><span class="line">       paramVO.setDept(d);</span><br><span class="line">       List&lt;Dept&gt; depts = deptDao.findByVo(paramVO);</span><br><span class="line">       <span class="keyword">for</span> (Dept  dept: depts) &#123;</span><br><span class="line">           System.out.println(dept);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><h2 id="五、输出结果封装"><a href="#五、输出结果封装" class="headerlink" title="五、输出结果封装"></a>五、输出结果封装</h2><h3 id="resultType配置结果"><a href="#resultType配置结果" class="headerlink" title="resultType配置结果"></a>resultType配置结果</h3><p>resultType的主要作用是告诉mybatis如何将数据库查询的结果集(resultSet)转换为java对象，它告诉mybatis每一行结果应该映射到哪个类型的java对象，还有一个要求，实体类属性名和数据库表中的返回的字段名一致，mybatis才会自动封装。</p><p><strong>如果实体类属性名和数据库表查询返回的字段名不一致，不能自动封装。</strong></p><p><strong>特殊情况示例</strong></p><p>实体类属性和数据库表的列名已经不一致了</p><h3 id="resultMap结果类型"><a href="#resultMap结果类型" class="headerlink" title="resultMap结果类型"></a>resultMap结果类型</h3><p>resultMap标签可以建立查询的列名和实体类的属性名不一致时建立对应关系，从而实现封装。</p><p>在select标签中使用resultMap属性指定引用即可。同时resultMap可以实现将查询结果映射为复杂的POJO，比如在查询结果映射对象中包括POJO和List实现一对一查询或者一对多查询。</p><p>1）. 定义resultMap</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;唯一标识&quot;</span> <span class="attr">type</span>=<span class="string">&quot;指定查询结果映射的java类型&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;实体类中主键属性名称&quot;</span> <span class="attr">column</span>=<span class="string">&quot;数据库表中主键字段的名称&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;实体类中非主键属性名称&quot;</span> <span class="attr">column</span>=<span class="string">&quot;数据库表中非主键字段的名称&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--  定义Dept实体类和数据库表中字段的对应关系</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;deptMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.iweb.bean.Dept&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;deptNo&quot;</span> <span class="attr">column</span>=<span class="string">&quot;deptid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;dname&quot;</span> <span class="attr">column</span>=<span class="string">&quot;deptname&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;loc&quot;</span> <span class="attr">column</span>=<span class="string">&quot;address&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>属性说明</strong>：</p><ul><li>id属性：唯一的标识，将来是给查询select标签去引用的</li><li>type属性：指定查询结果映射的java类型</li><li>id标签：用于指定主键字段<ul><li>property属性：指定实体类中属性名称</li><li>column属性：指定数据库表中字段的名称</li></ul></li><li>result标签：用于指定非主键字段</li></ul><p>2）. 映射配置<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAll&quot;</span>  <span class="attr">resultMap</span>=<span class="string">&quot;deptMap&quot;</span>&gt;</span></span><br><span class="line">    select * from dept</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><br>3）测试<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFindAll</span><span class="params">()</span> <span class="keyword">throws</span>  Exception&#123;</span><br><span class="line">       <span class="comment">//5.使用代理对象执行查询所有的方法</span></span><br><span class="line">       List&lt;Dept&gt; depts = deptDao.findAll();</span><br><span class="line">           <span class="keyword">for</span>(Dept dept : depts)&#123;</span><br><span class="line">               System.out.println(dept);</span><br><span class="line">           &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><h2 id="六、配置内容"><a href="#六、配置内容" class="headerlink" title="六、配置内容"></a>六、配置内容</h2><p>在使用mybatis框架时，自定义别名可以简化XML配置文件和代码中的映射操作。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 单个别名定义 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">&quot;com.iweb.bean.Dept&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;Dept&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 批量别名定义，扫描整个包下的类，别名为类名(首字母大小写都可以) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.iweb.bean&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="在dao-xml文件使用别名"><a href="#在dao-xml文件使用别名" class="headerlink" title="在dao.xml文件使用别名"></a>在dao.xml文件使用别名</h3><p>定义了别名，就可以在dao.xml文件中直接使用别名来引用java类<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAll&quot;</span>  <span class="attr">resultType</span>=<span class="string">&quot;dept&quot;</span>&gt;</span></span><br><span class="line">       select * from dept</span><br><span class="line">   <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></p><h2 id="七、mybatis连接池与事务"><a href="#七、mybatis连接池与事务" class="headerlink" title="七、mybatis连接池与事务"></a>七、mybatis连接池与事务</h2><h3 id="连接池技术"><a href="#连接池技术" class="headerlink" title="连接池技术"></a>连接池技术</h3><p>在我们前面Web课程中也学习过类似的连接池技术，而mybatis中也有连接池技术，在之前的案例中mybatis通过mybatis-config.xml配置文件中的<code>&lt;dataSource type=&quot;POOLED&quot;&gt;</code>来实现mybatis连接池的配置。</p><h3 id="连接分类"><a href="#连接分类" class="headerlink" title="连接分类"></a>连接分类</h3><p>MyBatis内置了连接池技术，dataSource标签的type属性有3个取值：</p><ul><li>POOLED 使用连接池</li><li>UNPOOLED 不使用连接池</li><li>JNDI 使用JNDI实现连接池</li></ul><p>在这三种数据源中，我们一般都是采用POOLED 数据源，数据库连接只有在我们用到的时候，才会获取并打开连接，当我们用完了就立即将数据库连接归还给连接池。</p><h2 id="八、mybatis的动态SQL"><a href="#八、mybatis的动态SQL" class="headerlink" title="八、mybatis的动态SQL"></a>八、mybatis的动态SQL</h2><p>通常情况下，静态SQL是预先定义好的SQL语句，动态SQL允许根据程序运行时的条件和需求动态的生成SQL语句，从而提供更高的灵活性和可重用性。</p><p>在mybatis框架中，提供了一系列的标签可以让我们实现动态SQL配置。</p><h3 id="if标签"><a href="#if标签" class="headerlink" title="if标签"></a>if标签</h3><p><code>&lt;if&gt;</code>标签用于进行条件判断，类似于java中的if语句，通过标签可以有选择的加入SQL语句的片段。</p><p>需求：</p><p>根据实体类的不同取值，使用不同的SQL语句进行查询，比如deptName不为空时可以根据deptName查询，如果address不为空时还要加入部门位置作为条件，这种情况在我们的多条件组合查询中经常会碰到。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 多条件查询</span></span><br><span class="line">  List&lt;Dept&gt; <span class="title function_">findByDept</span><span class="params">(Dept dept)</span>;</span><br></pre></td></tr></table></figure><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findByDept&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;deptMap&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;dept&quot;</span>&gt;</span></span><br><span class="line">      select * from dept where 1=1</span><br><span class="line">      <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;dname!=null and dname!=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">          and deptname like #&#123;dname&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;loc!=null and loc!=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">          and address like #&#123;loc&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><br>在构建动态SQL时，我们可能会根据不同的条件来拼接查询语句，如果没有任何条件，直接拼接一个where子句会导致SQL语句格式错误，使用<code>where 1=1</code>以确保无论是否添加其他条件，都不会出现语法错误。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFindByDept</span><span class="params">()</span>&#123;</span><br><span class="line">       Dept d=<span class="keyword">new</span> <span class="title class_">Dept</span>();</span><br><span class="line">      <span class="comment">// d.setDname(&quot;%部%&quot;);</span></span><br><span class="line">      <span class="comment">// d.setLoc(&quot;%州%&quot;);</span></span><br><span class="line">       List&lt;Dept&gt; depts = deptDao.findByDept(d);</span><br><span class="line">       <span class="keyword">for</span> (Dept dept : depts) &#123;</span><br><span class="line">           System.out.println(dept);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><h3 id="where标签"><a href="#where标签" class="headerlink" title="where标签"></a>where标签</h3><p><code>&lt;where&gt;</code>标签替换where，能够自动处理查询条件，智能的处理多余的where、and、or关键字。</p><p>需求：为了简化上面where1=1的条件拼接，可以采用<code>&lt;where&gt;</code>标签来简化开发。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--  sql标签封装SQL语句  id给SQL去定义 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;queryAll&quot;</span>&gt;</span>select * from dept<span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   </span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findByDept&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;deptMap&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;dept&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;queryAll&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;dname!=null and dname!=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">               and deptname like #&#123;dname&#125;</span><br><span class="line">           <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"></span><br><span class="line">           <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;loc!=null and loc!=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">               and address like #&#123;loc&#125;</span><br><span class="line">           <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="foreach标签"><a href="#foreach标签" class="headerlink" title="foreach标签"></a>foreach标签</h3><p><code>&lt;foreach&gt;</code>标签可以在SQL中配置迭代集合类型参数，用于in语句查询某一范围内的数据。</p><p>需求：</p><p>传入多个deptId查询部门信息，这样我们在进行范围查询时，就要将一个集合中的值，作为参数动态添加进来</p><p>1）. 在Vo中加入一个List集合用于封装参数<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.iweb.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">QueryVo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Integer&gt; ids;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">getIds</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ids;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setIds</span><span class="params">(List&lt;Integer&gt; ids)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.ids = ids;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>映射配置<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findInIds&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;queryVo&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;deptMap&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;queryAll&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;ids!=null and ids.size()&gt;0&quot;</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;ids&quot;</span> <span class="attr">open</span>=<span class="string">&quot;deptid in(&quot;</span> <span class="attr">item</span>=<span class="string">&quot;deptId&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span>&gt;</span></span><br><span class="line">                   #&#123;deptId&#125;</span><br><span class="line">               <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"></span><br><span class="line">           <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><br>SQL说明：</p><p><foreach>标签用于遍历集合，它的属性：</p><ul><li>ollection:代表要遍历的集合</li><li>open:前缀，表示该语句以什么开头</li><li>item:代表遍历集合的每一个元素别名</li><li>separator：表示每次迭代元素之间以什么作为分隔符</li><li>close：是后缀，表示以什么结束</li></ul><p>测试<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFindByIds</span><span class="params">()</span>&#123;</span><br><span class="line">      QueryVo vo=<span class="keyword">new</span> <span class="title class_">QueryVo</span>();</span><br><span class="line">      List&lt;Integer&gt; ids=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">      ids.add(<span class="number">1</span>);</span><br><span class="line">      ids.add(<span class="number">3</span>);</span><br><span class="line">      ids.add(<span class="number">9</span>);</span><br><span class="line">      vo.setIds(ids);</span><br><span class="line">      List&lt;Dept&gt; depts = deptDao.findInIds(vo);</span><br><span class="line">      <span class="keyword">for</span> (Dept dept : depts) &#123;</span><br><span class="line">          System.out.println(dept);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><h2 id="九、多表查询"><a href="#九、多表查询" class="headerlink" title="九、多表查询"></a>九、多表查询</h2><p>我们之间学习都是基于单表操作的，而实际开发中，随着业务难度的加深，肯定需要多表操作。<br><strong>多表分类</strong></p><ul><li>一对一：在任意一方建立外键，关联对方的主表</li><li>一对多：在多的一方建立外键，关联一的一方的主键</li><li>多对多：借助中间表，中间表至少两个字段，分别关联两张表的主键<br>【一对一】<br>需求：查询用户，同时还要获取当前账户的所属用户信息<blockquote><p>因为一个账户信息只能给一个用户使用，所以从查询账户信息触发关联查询用户信息是一对一查询。如果从用户信息出发查询用户下的账户信息为一对多查询，因为一个用户可以有多个账户</p></blockquote></li></ul><p>1）.数据库设计<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 用户表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">user</span>(</span><br><span class="line">    id <span class="type">int</span> auto_increment <span class="keyword">primary</span> key,</span><br><span class="line">    username <span class="type">varchar</span>(<span class="number">10</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">    sex <span class="type">varchar</span>(<span class="number">4</span>),</span><br><span class="line">    birthday <span class="type">date</span>,</span><br><span class="line">    address <span class="type">varchar</span>(<span class="number">200</span>)</span><br><span class="line">)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span> <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;jack&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;2005-1-1&#x27;</span>,<span class="string">&#x27;南京&#x27;</span>),</span><br><span class="line">            (<span class="number">2</span>,<span class="string">&#x27;lucy&#x27;</span>,<span class="string">&#x27;女&#x27;</span>,<span class="string">&#x27;2000-11-12&#x27;</span>,<span class="string">&#x27;扬州&#x27;</span>);</span><br><span class="line"><span class="comment">-- 账户表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> account(</span><br><span class="line">    id <span class="type">int</span> auto_increment <span class="keyword">primary</span> key,</span><br><span class="line">    money <span class="type">decimal</span>(<span class="number">10</span>,<span class="number">2</span>),</span><br><span class="line">    uid <span class="type">INT</span>, <span class="comment">-- 外键</span></span><br><span class="line">    <span class="keyword">foreign</span> key(uid) <span class="keyword">references</span> <span class="keyword">user</span>(id)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> account <span class="keyword">values</span>(<span class="number">10</span>,<span class="number">2000</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> account <span class="keyword">values</span>(<span class="number">11</span>,<span class="number">1500</span>,<span class="number">2</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> account <span class="keyword">values</span>(<span class="number">12</span>,<span class="number">3000</span>,<span class="number">1</span>);</span><br></pre></td></tr></table></figure><br>实现查询账户信息时对应用户的信息SQL如下：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> s.<span class="operator">*</span>,a.`id` <span class="keyword">as</span> aid,a.`money` <span class="keyword">from</span> </span><br><span class="line">    account a,<span class="keyword">user</span> s  <span class="keyword">where</span> a.`uid`<span class="operator">=</span>s.`id`</span><br></pre></td></tr></table></figure><br>2）.账户实体类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.iweb.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Account</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> Integer uid;</span><br><span class="line">    <span class="keyword">private</span> Double money;</span><br><span class="line">    <span class="comment">// 查询账户信息以及对应的用户信息，需要建立一对一或者一对多映射关系，将查询结果封装到user属性中</span></span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line">    <span class="comment">// 省略get/set..</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>3）.用户信息实体类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">        <span class="keyword">private</span>  Integer id;</span><br><span class="line">        <span class="keyword">private</span>  String username;</span><br><span class="line">        <span class="keyword">private</span>  String sex;</span><br><span class="line">        <span class="keyword">private</span>  Date birthday;</span><br><span class="line">        <span class="keyword">private</span> String address;</span><br><span class="line">        <span class="comment">// 省略get/set..</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><br>4）.创建mapper<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AccountDao</span> &#123;</span><br><span class="line">    List&lt;Account&gt; <span class="title function_">findAll</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>5）.创建mapper映射文件<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.iweb.mapper.AccountDao&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 建立对应关系 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;accountMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;account&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 封装account对象 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;aid&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;uid&quot;</span> <span class="attr">property</span>=<span class="string">&quot;uid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;money&quot;</span> <span class="attr">property</span>=<span class="string">&quot;money&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 用于映射关联查询用户的信息</span></span><br><span class="line"><span class="comment">             property 实体类对应的属性名，查询完之后将结果封装到property属性所指定的实体bean熟悉中</span></span><br><span class="line"><span class="comment">             javaType 实体类对应的全类名，用于指定关联查询的结果封装到哪个实体类中</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;user&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;username&quot;</span> <span class="attr">property</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">property</span>=<span class="string">&quot;sex&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;birthday&quot;</span> <span class="attr">property</span>=<span class="string">&quot;birthday&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;address&quot;</span> <span class="attr">property</span>=<span class="string">&quot;address&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置查询所有操作，同时关联用户信息 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAll&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;accountMap&quot;</span>&gt;</span></span><br><span class="line">        select s.*,a.`id` as aid,a.`money` from  account a,user s  where a.`uid`=s.`id`</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><br>6）.将mapper映射文件，添加到mybatis-config.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 告诉mybatis映射文件的位置 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;com/iweb/mapper/AccountDao.xml&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><br>7）.测试<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.iweb.test;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccountTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> InputStream in;</span><br><span class="line">    <span class="keyword">private</span> SqlSessionFactory build;</span><br><span class="line">    <span class="keyword">private</span> SqlSession session;</span><br><span class="line">    <span class="keyword">private</span> AccountDao accountDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span>  <span class="comment">// 在测试方法执行完成之后执行</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        session.commit();</span><br><span class="line">        session.close();</span><br><span class="line">        in.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span>  <span class="comment">// 在测试方法执行之前完成执行</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> <span class="keyword">throws</span>  Exception&#123;</span><br><span class="line">        <span class="comment">//1.读取配置文件</span></span><br><span class="line">         in = Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line">        <span class="comment">//2.创建sqlSessionFactory构建者对象</span></span><br><span class="line">         build = <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(in);</span><br><span class="line">        <span class="comment">//3.使用SqlSessionFactory生成sqlSession对象</span></span><br><span class="line">         session = build.openSession();</span><br><span class="line">        <span class="comment">//4.使用session创建dao接口的代理对象</span></span><br><span class="line">        accountDao = session.getMapper(AccountDao.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFindAll</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;Account&gt; accounts = accountDao.findAll();</span><br><span class="line">        <span class="keyword">for</span> (Account account : accounts) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;------------账户信息-------------&quot;</span>);</span><br><span class="line">            System.out.println(account.getId()+<span class="string">&quot;\t&quot;</span>+account.getMoney());</span><br><span class="line">            System.out.println(<span class="string">&quot;------------所属用户-------------&quot;</span>);</span><br><span class="line">            System.out.println(account.getUser().getId()+<span class="string">&quot;\t&quot;</span>+account.getUser().getUsername());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>【一对多】<br>需求：查询用户信息及用户关联的账户信息<br>1）.修改用户表<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span>  Integer id;</span><br><span class="line">    <span class="keyword">private</span>  String username;</span><br><span class="line">    <span class="keyword">private</span>  String sex;</span><br><span class="line">    <span class="keyword">private</span>  Date birthday;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 实现查询用户的同时关联账户信息 一对多关联</span></span><br><span class="line">    <span class="comment">// 查询用户的信息对应的账户信息之间建立一对多关系，主表为用户表，实体类中需要包含从表实体类的集合引用</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Account&gt; accounts;</span><br><span class="line">     <span class="comment">// 省略get/set方法   </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>2）.用户持久层添加查询方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">    List&lt;User&gt; <span class="title function_">findAll</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>3）.创建对应mapper文件<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.iweb.mapper.UserDao&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;userMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;username&quot;</span> <span class="attr">property</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">property</span>=<span class="string">&quot;sex&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;birthday&quot;</span> <span class="attr">property</span>=<span class="string">&quot;birthday&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;address&quot;</span> <span class="attr">property</span>=<span class="string">&quot;address&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--  collection 是用于建立一对多集合属性的对应关系</span></span><br><span class="line"><span class="comment">               property=&quot;accounts&quot; 关联查询的结果集存储在Users对象上的哪个属性中</span></span><br><span class="line"><span class="comment">               ofType=&quot;account&quot; 指定关联查询的结果集中的对象类型，即List中的对象类型</span></span><br><span class="line"><span class="comment">         --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;accounts&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;account&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;aid&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;uid&quot;</span> <span class="attr">property</span>=<span class="string">&quot;uid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;money&quot;</span> <span class="attr">property</span>=<span class="string">&quot;money&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置查询所有操作，同时关联账户信息 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAll&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;userMap&quot;</span>&gt;</span></span><br><span class="line">        select u.*,a.`id` as aid,a.`uid`,a.`money` from user u left join account a on u.`id`=a.`uid`</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><br>4）.将mapper映射文件，添加到mybatis-config.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;com/iweb/mapper/UserDao.xml&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><br>5）.测试<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.iweb.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> InputStream in;</span><br><span class="line">    <span class="keyword">private</span> SqlSessionFactory build;</span><br><span class="line">    <span class="keyword">private</span> SqlSession session;</span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span>  <span class="comment">// 在测试方法执行完成之后执行</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        session.commit();</span><br><span class="line">        session.close();</span><br><span class="line">        in.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span>  <span class="comment">// 在测试方法执行之前完成执行</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> <span class="keyword">throws</span>  Exception&#123;</span><br><span class="line">        <span class="comment">//1.读取配置文件</span></span><br><span class="line">         in = Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line">        <span class="comment">//2.创建sqlSessionFactory构建者对象</span></span><br><span class="line">         build = <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(in);</span><br><span class="line">        <span class="comment">//3.使用SqlSessionFactory生成sqlSession对象</span></span><br><span class="line">         session = build.openSession();</span><br><span class="line">        <span class="comment">//4.使用session创建dao接口的代理对象</span></span><br><span class="line">        userDao = session.getMapper(UserDao.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFindAll</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;User&gt; users = userDao.findAll();</span><br><span class="line">        <span class="keyword">for</span> (User user : users) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;-----------用户信息------------&quot;</span>);</span><br><span class="line">            System.out.println(user.getId()+<span class="string">&quot;\t&quot;</span>+user.getUsername());</span><br><span class="line">            System.out.println(<span class="string">&quot;-----------账户信息-----------&quot;</span>);</span><br><span class="line">            List&lt;Account&gt; accounts = user.getAccounts();</span><br><span class="line">            <span class="keyword">for</span> (Account account : accounts) &#123;</span><br><span class="line">                System.out.println(account.getId()+<span class="string">&quot;\t&quot;</span>+account.getMoney());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="十、Mybatis缓存"><a href="#十、Mybatis缓存" class="headerlink" title="十、Mybatis缓存"></a>十、Mybatis缓存</h2><blockquote><p>缓存(cache)是一种临时存储数据的机制，用于提供数据访问速度，在计算机系统中，缓存通常存储频繁访问的数据副本，避免每次访问都从原始数据源（数据库）获取，从而减轻IO操作和数据库的压力。</p></blockquote><p>大多数的持久层框架都提供了缓存策略，通过缓存策略来减少数据库的查询次数，从而提供性能。</p><h3 id="一级缓存"><a href="#一级缓存" class="headerlink" title="一级缓存"></a>一级缓存</h3><p><strong>默认开启</strong>，一级缓存是SqlSession级别的缓存，当Session flush或者close后，该session中的一级缓存将被清空。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFindByDeptId</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="type">Dept</span> <span class="variable">dept</span> <span class="operator">=</span> deptDao.findByDeptId(<span class="number">3</span>);</span><br><span class="line">       System.out.println(<span class="string">&quot;第一次查询:&quot;</span>+dept);</span><br><span class="line">       System.out.println(<span class="string">&quot;第二次查询:&quot;</span>+dept);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><br>我们可以发现虽然上面的代码中我们查询了两次，但是最后只执行了一次数据库操作，这就是mybatis提供给我们的一级缓存起了作用，因为一级缓存的存在，导致第二次查询id为3的记录时，并没有发起SQL语句从数据库查询数据，而是从一级缓存中查询。<br><strong>一级缓存分析</strong><br>1.一级缓存是SqlSession范围的缓存。<br>2.第一次发起部门id为3的部分信息，先去缓存中找是否有id为3的部门信息，如果没有从数据库查询部门信息，得到部门信息后，将部门信息存储到一级缓存中。<br>3.如果sqlSession去执行commit操作（执行插入，更新，删除），会清空SqlSession中的一级缓存，是直接从数据库查询的数据。这样做的目的是为了让缓存中存储的是最新的数据，避免脏读。即在一个会话中，对数据库的增删改操作，均会使一级缓存失效。<br>4.第二次发起查询部门id为3的部门信息，先去缓存中找是否有id为3的部门信息，缓存中有，直接从缓存中获取信息。<br><strong>测试清空一级缓存</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFindByDeptId</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="type">Dept</span> <span class="variable">dept</span> <span class="operator">=</span> deptDao.findByDeptId(<span class="number">3</span>);</span><br><span class="line">       System.out.println(<span class="string">&quot;第一次查询:&quot;</span>+dept);</span><br><span class="line">       session.clearCache();<span class="comment">// 此方法清空缓存</span></span><br><span class="line">       <span class="type">Dept</span> <span class="variable">dept1</span> <span class="operator">=</span> deptDao.findByDeptId(<span class="number">3</span>);</span><br><span class="line">       System.out.println(<span class="string">&quot;第二次查询:&quot;</span>+dept1);</span><br><span class="line">       System.out.println(dept==dept1);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><h3 id="mybatis的二级缓存"><a href="#mybatis的二级缓存" class="headerlink" title="mybatis的二级缓存"></a>mybatis的二级缓存</h3><p>默认关闭，需要手动开启。<br>作用域是sqlSessionFactory级别。<br><strong>开启二级缓存</strong><br>1）.在mybatis-config.xml中开启二级缓存<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 因为cacheEnabled的取值默认是true，false代表不开启二级缓存 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;cacheEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><br>2）.在对应的mapper配置文件中声明使用二级缓存<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.iweb.dao.IDeptDao&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 开启二级缓存的支持 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cache</span>/&gt;</span></span><br><span class="line">    ....省略其他配置信息... </span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><br>3）.实体类必须实现<code>Serializable</code>接口<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dept</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;&#125;</span><br></pre></td></tr></table></figure><br>4）.配置statement上面的<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--   useCache=&quot;true&quot; 要使用二级缓存，针对每次要查询的数据是最新的，设置为false，禁用二级缓存 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findByDeptId&quot;</span>  <span class="attr">useCache</span>=<span class="string">&quot;true&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;deptMap&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;queryAll&quot;</span>/&gt;</span> where deptid=#&#123;deptNo&#125;</span><br><span class="line">   <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><br>5）.测试二级缓存<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFindByDeptId</span><span class="params">()</span>&#123;</span><br><span class="line">      <span class="type">SqlSession</span> <span class="variable">sqlSession1</span> <span class="operator">=</span> build.openSession();</span><br><span class="line">      <span class="type">IDeptDao</span> <span class="variable">deptDao1</span> <span class="operator">=</span> sqlSession1.getMapper(IDeptDao.class);</span><br><span class="line">      <span class="type">Dept</span> <span class="variable">dept1</span> <span class="operator">=</span> deptDao1.findByDeptId(<span class="number">3</span>);</span><br><span class="line">      System.out.println(dept1);</span><br><span class="line">      sqlSession1.close();<span class="comment">// 清除一级缓存</span></span><br><span class="line">      <span class="type">SqlSession</span> <span class="variable">sqlSession2</span> <span class="operator">=</span> build.openSession();</span><br><span class="line">      <span class="type">IDeptDao</span> <span class="variable">deptDao2</span> <span class="operator">=</span> sqlSession2.getMapper(IDeptDao.class);</span><br><span class="line">      <span class="type">Dept</span> <span class="variable">dept2</span> <span class="operator">=</span> deptDao2.findByDeptId(<span class="number">3</span>);</span><br><span class="line">      System.out.println(dept2);</span><br><span class="line">      sqlSession2.close();<span class="comment">// 清除一级缓存</span></span><br><span class="line">      System.out.println(dept1==dept2);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><br>经过上面的测试，我们发现执行的两次查询，并且在第一次查询后，我们关闭了一级缓存，再去执行第二次查询时，我们发现并没有对数据库发起SQL语句，所以此时的数据就是来源我们所说的二级缓存。<br>==注意==<br>当我们使用二级缓存时，所缓存的类一定要实现Serializable接口这种就可以使用序列化来保存对象。</p><p><strong>一级缓存和二级缓存的使用和区别</strong><br>1）一级缓存: 基于 PerpetualCache 的 HashMap 本地缓存，其存储作用域为Session，当 Session flush 或 close 之后，该 Session 中的所有 Cache 就将清空，默认打开一级缓存。<br>2）二级缓存与一级缓存其机制相同，默认也是采用 PerpetualCache，HashMap存储，不同在于其存储作用域为 Mapper(Namespace)，并且可自定义存储源，如 Ehcache。默认不打开二级缓存，要开启二级缓存，使用二级缓存属性类需要实现 Serializable 序列化接口(可用来保存对象的状态),可在它的映射文件中配置 ；<br>3）对于缓存数据更新机制，当某一个作用域(一级缓存 Session/二级缓存Namespaces)的进行了 C/U/D 操作后，默认该作用域下所有 select 中的缓存将被 clear。</p><p><code>&lt;foreach&gt;</code>标签用于遍历</p>]]></content>
      
      
      <categories>
          
          <category> 结构速查 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MyBatis 框架学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Oracle 数据库知识整理</title>
      <link href="/2025/08/07/Oracle%E8%AF%A6%E8%A7%A3/"/>
      <url>/2025/08/07/Oracle%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="Oracle-数据库知识整理"><a href="#Oracle-数据库知识整理" class="headerlink" title="Oracle 数据库知识整理"></a>Oracle 数据库知识整理</h1><h2 id="一、Oracle-与-MySQL-对比"><a href="#一、Oracle-与-MySQL-对比" class="headerlink" title="一、Oracle 与 MySQL 对比"></a>一、Oracle 与 MySQL 对比</h2><div class="table-container"><table><thead><tr><th>对比项</th><th>Oracle</th><th>MySQL</th></tr></thead><tbody><tr><td>适用场景</td><td>大型数据库</td><td>中小型数据库</td></tr><tr><td>开源情况</td><td>不开源</td><td>开源</td></tr><tr><td>收费情况</td><td>收费</td><td>免费</td></tr><tr><td>内存占用</td><td>默认物理内存的1/8</td><td>几百MB</td></tr><tr><td>默认端口</td><td>1521</td><td>3306</td></tr></tbody></table></div><h2 id="二、Oracle-安装与配置"><a href="#二、Oracle-安装与配置" class="headerlink" title="二、Oracle 安装与配置"></a>二、Oracle 安装与配置</h2><h3 id="2-1-安装注意事项"><a href="#2-1-安装注意事项" class="headerlink" title="2.1 安装注意事项"></a>2.1 安装注意事项</h3><ol><li>安装顺序：先安装 Oracle11g，再安装 PLSQL_Developer</li><li><strong>重要提示</strong>：<ul><li>安装路径不能包含中文</li><li>严格按照视频教程步骤安装</li><li>新手安装失败率较高</li></ul></li></ol><h3 id="2-2-配置服务"><a href="#2-2-配置服务" class="headerlink" title="2.2 配置服务"></a>2.2 配置服务</h3><p>需要启动的两个核心服务：</p><ol><li><code>OracleServiceORCL</code></li><li><code>OracleOraDb11g_home1TNSListener</code></li></ol><blockquote><p>注：默认自动启动，如无问题无需手动配置</p></blockquote><h2 id="三、用户创建与授权"><a href="#三、用户创建与授权" class="headerlink" title="三、用户创建与授权"></a>三、用户创建与授权</h2><h3 id="3-1-用户类型"><a href="#3-1-用户类型" class="headerlink" title="3.1 用户类型"></a>3.1 用户类型</h3><div class="table-container"><table><thead><tr><th>账户类型</th><th>描述</th><th>功能</th></tr></thead><tbody><tr><td>sysdba</td><td>数据库管理员</td><td>启停服务器、备份恢复、日志归档、会话限制、管理功能、创建数据库等</td></tr><tr><td>sysoper</td><td>数据库操作员</td><td>启停服务器、备份恢复、日志归档、会话限制</td></tr><tr><td>normal</td><td>普通用户</td><td>无权限（需授权后才能操作）</td></tr></tbody></table></div><h3 id="3-2-默认账户"><a href="#3-2-默认账户" class="headerlink" title="3.2 默认账户"></a>3.2 默认账户</h3><div class="table-container"><table><thead><tr><th>用户名</th><th>密码设置</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>sys</td><td>安装时设</td><td>sysdba, sysoper</td><td>最高权限账户</td></tr><tr><td>system</td><td>安装时设</td><td>normal (有dba角色)</td><td>普通用户但有管理员权限</td></tr></tbody></table></div><h3 id="3-3-用户管理命令"><a href="#3-3-用户管理命令" class="headerlink" title="3.3 用户管理命令"></a>3.3 用户管理命令</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建账户</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> username IDENTIFIED <span class="keyword">BY</span> password;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改密码</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> username IDENTIFIED <span class="keyword">BY</span> new_password;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除用户</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">USER</span> username CASCADE;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询所有用户</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> all_users;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 授权</span></span><br><span class="line"><span class="keyword">GRANT</span> privilege <span class="keyword">TO</span> <span class="keyword">user</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 撤销授权</span></span><br><span class="line"><span class="keyword">REVOKE</span> privilege <span class="keyword">FROM</span> <span class="keyword">user</span>;</span><br></pre></td></tr></table></figure><h2 id="四、数据类型"><a href="#四、数据类型" class="headerlink" title="四、数据类型"></a>四、数据类型</h2><div class="table-container"><table><thead><tr><th>类型</th><th>说明</th><th>限制条件</th></tr></thead><tbody><tr><td>CHAR</td><td>固定长度字符串</td><td>最大2000 bytes</td></tr><tr><td>VARCHAR2</td><td>可变长度字符串</td><td>最大4000 bytes</td></tr><tr><td>DATE</td><td>日期(日-月-年)</td><td>YYYY-MM-DD (时间可选)</td></tr><tr><td>TIMESTAMP</td><td>时间戳(精确到微秒)</td><td>YYYY-MM-DD HH24:MI:SS.ff</td></tr><tr><td>NUMBER(P,S)</td><td>数字类型(P:总位数,S:小数位)</td><td></td></tr><tr><td>INTEGER</td><td>整数类型</td><td></td></tr><tr><td>FLOAT</td><td>浮点数类型</td></tr></tbody></table></div><blockquote><p>注：VARCHAR2中文占2字节，英文占1字节</p></blockquote><h2 id="五、SQL分类"><a href="#五、SQL分类" class="headerlink" title="五、SQL分类"></a>五、SQL分类</h2><h3 id="5-1-DDL-数据定义语言"><a href="#5-1-DDL-数据定义语言" class="headerlink" title="5.1 DDL (数据定义语言)"></a>5.1 DDL (数据定义语言)</h3><ul><li>CREATE / ALTER / DROP / CREATE VIEW</li></ul><h3 id="5-2-DML-数据操作语言"><a href="#5-2-DML-数据操作语言" class="headerlink" title="5.2 DML (数据操作语言)"></a>5.2 DML (数据操作语言)</h3><ul><li>INSERT / UPDATE / DELETE</li></ul><h4 id="Oracle特殊语法："><a href="#Oracle特殊语法：" class="headerlink" title="Oracle特殊语法："></a>Oracle特殊语法：</h4><ul><li>自增字段：使用SEQUENCE替代AUTO_INCREMENT</li><li><code>dual</code>：系统虚表，当不确定操作表时使用</li></ul><h3 id="5-3-DQL-数据查询语言"><a href="#5-3-DQL-数据查询语言" class="headerlink" title="5.3 DQL (数据查询语言)"></a>5.3 DQL (数据查询语言)</h3><ul><li>SELECT</li></ul><h4 id="查询运算符："><a href="#查询运算符：" class="headerlink" title="查询运算符："></a>查询运算符：</h4><ol><li>算术运算符：<code>+ - * /</code></li><li>连接符：<code>||</code>、<code>&amp;&amp;</code>、<code>CONCAT(arg1,arg2)</code></li><li>比较运算符：<code>&lt;,&gt;,&lt;=,&gt;=,=,!=,&lt;&gt;,is,is not,in,not,between..and,like</code></li><li>通配符：<ul><li><code>%</code>：匹配任意多个字符</li><li><code>_</code>：匹配1个字符</li></ul></li><li>其他：<ul><li><code>AS</code>：起别名</li><li><code>DISTINCT</code>：去重</li><li><code>ORDER BY</code>：排序(ASC默认/DESC)</li><li><code>GROUP BY</code>：分组</li></ul></li></ol><h3 id="5-4-多表查询"><a href="#5-4-多表查询" class="headerlink" title="5.4 多表查询"></a>5.4 多表查询</h3><p>（内容待补充）</p><h2 id="六、视图"><a href="#六、视图" class="headerlink" title="六、视图"></a>六、视图</h2><h3 id="6-1-视图特点"><a href="#6-1-视图特点" class="headerlink" title="6.1 视图特点"></a>6.1 视图特点</h3><ul><li>虚拟表（存储的SELECT语句）</li><li>基于基表创建</li><li>不存储实际数据</li></ul><h3 id="6-2-视图作用"><a href="#6-2-视图作用" class="headerlink" title="6.2 视图作用"></a>6.2 视图作用</h3><ol><li>封装复杂查询</li><li>隐藏敏感字段</li></ol><h2 id="七、索引"><a href="#七、索引" class="headerlink" title="七、索引"></a>七、索引</h2><h3 id="7-1-索引作用"><a href="#7-1-索引作用" class="headerlink" title="7.1 索引作用"></a>7.1 索引作用</h3><ul><li>加快数据检索速度</li><li>通过ROWID快速定位数据</li><li>减少磁盘IO</li></ul><h3 id="7-2-创建原则"><a href="#7-2-创建原则" class="headerlink" title="7.2 创建原则"></a>7.2 创建原则</h3><p><strong>适合创建索引的情况</strong>：</p><ul><li>频繁SELECT操作的表</li><li>大表且数据分布广</li><li>字段常出现在WHERE或连接条件中</li></ul><p><strong>不适合创建索引的情况</strong>：</p><ul><li>频繁INSERT/UPDATE/DELETE的表</li><li>小表或不常作为查询条件的字段</li></ul><blockquote><p>注：主键/唯一约束字段会自动创建索引</p></blockquote><h2 id="八、事务"><a href="#八、事务" class="headerlink" title="八、事务"></a>八、事务</h2><h3 id="8-1-事务支持对比"><a href="#8-1-事务支持对比" class="headerlink" title="8.1 事务支持对比"></a>8.1 事务支持对比</h3><div class="table-container"><table><thead><tr><th>特性</th><th>Oracle</th><th>MySQL(InnoDB)</th></tr></thead><tbody><tr><td>事务支持</td><td>完全支持</td><td>仅InnoDB支持</td></tr><tr><td>默认提交方式</td><td>不自动提交</td><td>自动提交</td></tr></tbody></table></div><h3 id="8-2-事务问题"><a href="#8-2-事务问题" class="headerlink" title="8.2 事务问题"></a>8.2 事务问题</h3><ul><li>脏读</li><li>不可重复读</li><li>幻读</li><li>覆盖更新</li></ul><h3 id="8-3-ACID原则"><a href="#8-3-ACID原则" class="headerlink" title="8.3 ACID原则"></a>8.3 ACID原则</h3><ol><li>原子性(Atomicity)</li><li>一致性(Consistency)</li><li>隔离性(Isolation)</li><li>持久性(Durability)</li></ol><h3 id="8-4-隔离级别"><a href="#8-4-隔离级别" class="headerlink" title="8.4 隔离级别"></a>8.4 隔离级别</h3><ol><li>SERIALIZABLE（序列化）</li><li>REPEATABLE READ（可重复读）</li><li>READ COMMITTED（读已提交）</li><li>READ UNCOMMITTED（读未提交）</li></ol><h2 id="九、锁机制"><a href="#九、锁机制" class="headerlink" title="九、锁机制"></a>九、锁机制</h2><h3 id="9-1-锁级别"><a href="#9-1-锁级别" class="headerlink" title="9.1 锁级别"></a>9.1 锁级别</h3><ol><li><strong>行级锁</strong>：<ul><li>对查询数据加排他锁</li><li>锁定期间其他用户不能修改</li></ul></li><li><strong>表级锁</strong>：<ul><li>共享锁：允许查询，禁止修改</li><li>共享更新锁：允许查询和更新未锁定行</li><li>排他锁：仅允许查询，禁止所有修改</li></ul></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">undefined</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 结构速查 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Oracle 数据库学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作系统学习速查(1)</title>
      <link href="/2025/08/04/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0%E9%80%9F%E6%9F%A5(1)/"/>
      <url>/2025/08/04/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0%E9%80%9F%E6%9F%A5(1)/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 结构速查 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux学习笔记</title>
      <link href="/2025/07/24/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2025/07/24/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h1><h2 id="一、Linux"><a href="#一、Linux" class="headerlink" title="一、Linux"></a>一、Linux</h2><p> Linux是一套免费使用和自由传播的操作系统。 </p><h3 id="1-1-Linux是基于unix的"><a href="#1-1-Linux是基于unix的" class="headerlink" title="1.1 Linux是基于unix的"></a>1.1 Linux是基于unix的</h3><h3 id="1-2-Linux版本"><a href="#1-2-Linux版本" class="headerlink" title="1.2 Linux版本"></a>1.2 Linux版本</h3><ul><li>内核版本：在Linux领导下的内核小组开发维护的系统内核版本 </li><li><p>发行版：在内核版本基础上扩展出来的版本号 </p><h3 id="1-3-Linux的应用"><a href="#1-3-Linux的应用" class="headerlink" title="1.3 Linux的应用"></a>1.3 Linux的应用</h3><p>Linux广泛应用于服务器、嵌入式系统、桌面系统等领域 </p><h2 id="二、安装操作系统"><a href="#二、安装操作系统" class="headerlink" title="二、安装操作系统"></a>二、安装操作系统</h2><h3 id="2-1-下载contos7的安装镜像"><a href="#2-1-下载contos7的安装镜像" class="headerlink" title="2.1 下载contos7的安装镜像"></a>2.1 下载contos7的安装镜像</h3><p>下载地址：<a href="https://www.centos.org/download/">https://www.centos.org/download/</a> </p><h3 id="2-2-创建一个新的虚拟机"><a href="#2-2-创建一个新的虚拟机" class="headerlink" title="2.2 创建一个新的虚拟机"></a>2.2 创建一个新的虚拟机</h3><p>打开 vmmare<br>选择新建虚拟机<br>下一步即可。<br>将centos7的安装镜像挂载到虚拟机的光驱中<br>在虚拟机的设置中，找到光驱(CD/DVD)选项，将其配置为使用的ISO镜像文件，然后，浏览并选择你之前下载的centos7安装镜像（包含课件中）。<br>在虚拟机设置中，找到CD/DVD选项<br>选择使用ISO映像文件<br>点击浏览，选择centos7的安装镜像文件<br>启动虚拟机并开始安装centos7<br>虚拟机启动之后会出现如下界面：<br>install centos7<br>Test this media &amp; install centos7<br>我们将鼠标移入到虚拟机中，并按下键盘中的⬆箭头，选择install 。 </p><h4 id="【软件选择】"><a href="#【软件选择】" class="headerlink" title="【软件选择】"></a>【软件选择】</h4><p>选择安装的系统是否包含界面：<br>选择gnome桌面 </p><h4 id="【配置网络和主机名】"><a href="#【配置网络和主机名】" class="headerlink" title="【配置网络和主机名】"></a>【配置网络和主机名】</h4><p>“以太网默认是关闭的”，打开即可。 </p><h4 id="【设置root】"><a href="#【设置root】" class="headerlink" title="【设置root】"></a>【设置root】</h4><p>设置root管理员密码，强弱无所谓。 </p><h3 id="2-3-查看是否连接网络"><a href="#2-3-查看是否连接网络" class="headerlink" title="2.3 查看是否连接网络"></a>2.3 查看是否连接网络</h3><p>查看自带的应用程序性火狐访问百度<br>查看网卡ens33 </p><h2 id="三、安装远程连接工具"><a href="#三、安装远程连接工具" class="headerlink" title="三、安装远程连接工具"></a>三、安装远程连接工具</h2><p>finalshell安装跳过.. </p><h2 id="四、Linux的常见命令"><a href="#四、Linux的常见命令" class="headerlink" title="四、Linux的常见命令"></a>四、Linux的常见命令</h2><h3 id="4-1-Linux的目录结构"><a href="#4-1-Linux的目录结构" class="headerlink" title="4.1 Linux的目录结构"></a>4.1 Linux的目录结构</h3><p>linux的目录是一个树形机构<br>windows系统可以拥有多个盘符，如C盘、D盘、E盘<br>linux没有盘符这个概念，只有一个根目录/ 所有文件都在它的下面 </p><h3 id="4-2-Linux用户"><a href="#4-2-Linux用户" class="headerlink" title="4.2 Linux用户"></a>4.2 Linux用户</h3></li><li>root用户（超级管理员）：在Linux系统中拥有最大权限的账户为：root </li><li>root目录：超级管理员所在的目录 </li><li><p>home目录：除了超级管理员外的其他用户所在目录 </p><h3 id="4-3-tab自动补全"><a href="#4-3-tab自动补全" class="headerlink" title="4.3 tab自动补全"></a>4.3 tab自动补全</h3></li><li>tab键自动补全 </li><li>连续两次tab键，给出操作提示 </li><li><p>使用上下箭头快速调出曾经使用过的命令 </p><h3 id="4-4-绝对和相对路径"><a href="#4-4-绝对和相对路径" class="headerlink" title="4.4 绝对和相对路径"></a>4.4 绝对和相对路径</h3></li><li>绝对路径：从/根目录来说的路径 </li><li>相对路径：相对当前所在目录来说的路径 </li><li>特殊的路径：.. 表示上一级目录 </li><li>特殊的路径：~表示家目录 </li><li><p>特殊的路径：-表示上一次所在目录 </p><h3 id="4-5-文件列表命令"><a href="#4-5-文件列表命令" class="headerlink" title="4.5 文件列表命令"></a>4.5 文件列表命令</h3><p>ls:列出文件和目录 </p><h4 id="【常用参数】"><a href="#【常用参数】" class="headerlink" title="【常用参数】"></a>【常用参数】</h4></li><li>-a 显示所有文件和目录包括隐藏的 </li><li><p>-l 显示详细信息(简写ll) </p><h3 id="4-6-目录切换命令"><a href="#4-6-目录切换命令" class="headerlink" title="4.6 目录切换命令"></a>4.6 目录切换命令</h3></li><li>cd + 目录的路径 </li><li>cd..：返回上一级目录 </li><li>cd~：返回当前登录用户所在的用户目录 </li><li>cd/：返回根目录 </li><li><p>cd-：返回上一次所在目录 </p><h3 id="4-7-clear-amp-pwd"><a href="#4-7-clear-amp-pwd" class="headerlink" title="4.7 clear&amp;pwd"></a>4.7 clear&amp;pwd</h3></li><li>清屏命令 </li><li><p>查看当前目录的绝对路径 </p><h3 id="4-8-创建-amp-删除目录命令"><a href="#4-8-创建-amp-删除目录命令" class="headerlink" title="4.8 创建&amp;删除目录命令"></a>4.8 创建&amp;删除目录命令</h3><h4 id="创建目录"><a href="#创建目录" class="headerlink" title="创建目录"></a>创建目录</h4></li><li>mkdir aa:创建aa目录 </li><li>mkdir a b:创建a目录和b目录 </li><li><p>mkdir -p aa/bb:创建aa目录下的bb目录 </p><h4 id="删除目录"><a href="#删除目录" class="headerlink" title="删除目录"></a>删除目录</h4></li><li><p>rmdir aa:删除aa目录 </p><h3 id="4-9-cp、mv、rm"><a href="#4-9-cp、mv、rm" class="headerlink" title="4.9 cp、mv、rm"></a>4.9 cp、mv、rm</h3><h4 id="【文件拷贝cp】"><a href="#【文件拷贝cp】" class="headerlink" title="【文件拷贝cp】"></a>【文件拷贝cp】</h4><p>cp  源文件  目标文件名/目标文件名 </p><h4 id="【文件剪切mv】"><a href="#【文件剪切mv】" class="headerlink" title="【文件剪切mv】"></a>【文件剪切mv】</h4><p>mv  源文件  目标目录/目标文件名 </p><h4 id="【文件删除rm】"><a href="#【文件删除rm】" class="headerlink" title="【文件删除rm】"></a>【文件删除rm】</h4></li></ul><ol><li>rm 文件名：删除文件之前会询问 </li><li>rm -f 删除文件之前不询问 </li><li><p>rm -rf 文件名/目录名：可以直接删除文件或者文件夹，可以是多层，不询问 </p><h3 id="4-10-查找符号条件的文件"><a href="#4-10-查找符号条件的文件" class="headerlink" title="4.10 查找符号条件的文件"></a>4.10 查找符号条件的文件</h3><p>find / -name文件名: 根据指定路径查找指定文件 </p><h3 id="4-11-查找文件中符合条件的字符串（内容）"><a href="#4-11-查找文件中符合条件的字符串（内容）" class="headerlink" title="4.11 查找文件中符合条件的字符串（内容）"></a>4.11 查找文件中符合条件的字符串（内容）</h3><p>grep 要查找到的字符串 文件名 </p><h3 id="4-12-创建新的文件"><a href="#4-12-创建新的文件" class="headerlink" title="4.12 创建新的文件"></a>4.12 创建新的文件</h3><p>touch 文件名称：创建一个a.txt文本文件 </p><h3 id="4-13-压缩和解压（面试题）"><a href="#4-13-压缩和解压（面试题）" class="headerlink" title="4.13 压缩和解压（面试题）"></a>4.13 压缩和解压（面试题）</h3><h4 id="（1）压缩"><a href="#（1）压缩" class="headerlink" title="（1）压缩"></a>（1）压缩</h4><p>tar -zcvf 压缩的文件名   要压缩的目录 </p><h4 id="（2）解压"><a href="#（2）解压" class="headerlink" title="（2）解压"></a>（2）解压</h4><p>tar -zxvf 压缩文件名 -C 指定的目录 </p><h3 id="4-14-VI和VIM编辑器"><a href="#4-14-VI和VIM编辑器" class="headerlink" title="4.14 VI和VIM编辑器"></a>4.14 VI和VIM编辑器</h3><p>vi命令是Linux系统提供的一个文本编辑工具，类似windows中的记事本，可以对文本内容进行编辑。 </p><h4 id="三种工作模式"><a href="#三种工作模式" class="headerlink" title="三种工作模式"></a>三种工作模式</h4><p>进入vi编辑器会进入命令模式，通过命令模式输入键盘指令，进入输入模式，输入模式需要退回到命令模式，然后通过命令可以进入底线命令模式。 </p><h5 id="【1】命令模式"><a href="#【1】命令模式" class="headerlink" title="【1】命令模式"></a>【1】命令模式</h5><p>命令模式下，不能自由进行文本编辑，只能查看。 </p><h5 id="【2】输入模式"><a href="#【2】输入模式" class="headerlink" title="【2】输入模式"></a>【2】输入模式</h5><p>可以对文件内容进行自由编辑。 </p><h5 id="【3】底线命令模式"><a href="#【3】底线命令模式" class="headerlink" title="【3】底线命令模式"></a>【3】底线命令模式</h5><p>用于文件的保存，退出<br>通过命令打开之前的a.txt，进入到vim中： </p><h3 id="4-15-系统命令"><a href="#4-15-系统命令" class="headerlink" title="4.15 系统命令"></a>4.15 系统命令</h3><h4 id="【ps】查看系统的进程"><a href="#【ps】查看系统的进程" class="headerlink" title="【ps】查看系统的进程"></a>【ps】查看系统的进程</h4><p>在Linux中，每一个正在执行的程序都称为一个进程，每个进程都有各自的PID（进程ID）<br>查看所有用户的进程信息 </p><h4 id="【停止进程】"><a href="#【停止进程】" class="headerlink" title="【停止进程】"></a>【停止进程】</h4><p>kill -9 进程号，其中-9表示一种信号，用于强制终止进程 </p><h3 id="4-16-文件权限"><a href="#4-16-文件权限" class="headerlink" title="4.16 文件权限"></a>4.16 文件权限</h3><p>简单来说，那些用户可以对文件执行何种操作。每个文件和目录都有三种类型的权限：读(r)、写(w)、执行(x)。这些权限可以分别应用于文件的所有者，所有组，以及其他用户。<br>在Linux中，文件权限通常以数字的形式表示，每个文件或目录都有3个八进制数字，分别代表所有者，组和其他用户的权限，每个数字的范围0-7： </p></li></ol><ul><li>读权限(r)=4 </li><li>写权限(w)=2 </li><li><p>执行权限(x)=1 </p><p>Linux使用UGO权限模型进行权限控制 </p></li><li>U代表文件所属用户 </li><li>G代表文件所属组 </li><li><p>O代表所属用户和用户组的用户之外的其他用户 </p><h4 id="【chmod】命令"><a href="#【chmod】命令" class="headerlink" title="【chmod】命令"></a>【chmod】命令</h4><p>用于更变文件或目录的权限 </p></li></ul><ol><li>赋值法： </li><li><p>权重法：<br>设置所有人可以读写及执行 </p><h3 id="4-17-防火墙命令"><a href="#4-17-防火墙命令" class="headerlink" title="4.17 防火墙命令"></a>4.17 防火墙命令</h3><h4 id="【查看防火墙】"><a href="#【查看防火墙】" class="headerlink" title="【查看防火墙】"></a>【查看防火墙】</h4><h4 id="【关闭防火墙】下次会重新启动"><a href="#【关闭防火墙】下次会重新启动" class="headerlink" title="【关闭防火墙】下次会重新启动"></a>【关闭防火墙】下次会重新启动</h4><h4 id="【禁用防火墙】"><a href="#【禁用防火墙】" class="headerlink" title="【禁用防火墙】"></a>【禁用防火墙】</h4><h2 id="五、在Liunx中安装软件"><a href="#五、在Liunx中安装软件" class="headerlink" title="五、在Liunx中安装软件"></a>五、在Liunx中安装软件</h2><h3 id="5-1-在Linux中安装JDK"><a href="#5-1-在Linux中安装JDK" class="headerlink" title="5.1 在Linux中安装JDK"></a>5.1 在Linux中安装JDK</h3></li><li>新建一个文件夹 </li><li>切换到software </li><li>将JDK文件上传到/usr/local/software目录中 </li><li><p>删除Linux中自带的JDK<br>centos7一般都会带有自己的openJDK，我们使用oralce的jdk，所以要卸载。<br>查看系统是否以安装JDK<br>卸载已安装的JDK<br>验证是否还有JDK<br>解压安装包<br>【1】在/usr/local目录下创建名为java的目录<br>【2】将JDK解压到/usr/local/java目录中<br>配置JDK环境变量<br>在etc/profile文件最后加上如下内容：按i进入编辑模式，完成后按esc键，在输入:wq保存退出<br>内容：复制课件的profile文件即可<br>修改文件，需要sources命令重新加载<br>验证是否安装成功 </p><h3 id="5-2-安装tomcat"><a href="#5-2-安装tomcat" class="headerlink" title="5.2 安装tomcat"></a>5.2 安装tomcat</h3><p>将tomcat上传到/usr/local/software目录下<br>将tomcat解压到指定目录<br>【1】在/usr/local目录下创建tomcat目录<br>【2】将上传的tomcat解压到/usr/local/tomcat<br>进入tomcat目录<br>启动tomcat<br>【1】切换到bin目录中<br>【2】启动tomcat<br>访问tomcat<br>【1】在Linux系统中使用火狐访问浏览器<br>http:localhost:8080/<br>【2】在宿主机中访问tomcat<br>http:ip:8080/ </p><h3 id="5-3-安装Mysql"><a href="#5-3-安装Mysql" class="headerlink" title="5.3 安装Mysql"></a>5.3 安装Mysql</h3><p>在安装mysql数据库之前，先检查一下当前Linux系统中，是否安装由Mysql的服务，如果有，就需要先卸载，然后在进行安装。<br>通过rpm命令，来查询当前系统中是否存在已安装的mysql软件包<br>mariadb是centos7中自带，这个数据库和mysql数据库是冲突的，所以想保证mysql安装成功，需要卸载mariadb数据库 </p><h4 id="【上传mysql到Linux并解压】"><a href="#【上传mysql到Linux并解压】" class="headerlink" title="【上传mysql到Linux并解压】"></a>【上传mysql到Linux并解压】</h4><p>上传mysql安装包<br>解压到当前目录<br>将解压的文件移动到/usr/local目录下，并改名为mysql<br>配置系统环境变量<br>配置mysql的环境变量，通过vi编辑器/etc/profile文件中<br>尾部追加如下内容：<br>修改此文件后，需要source命令重新加载 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost mysql]# source /etc/profile </span><br></pre></td></tr></table></figure><p>注册mysql为系统服务 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost mysql]# cp /usr/local/mysql/support-files/mysql.server /etc/init.d/mysql </span><br><span class="line">[root@localhost mysql]# chkconfig --add mysql </span><br></pre></td></tr></table></figure><p>初始化数据库 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 创建一个用户组，组名叫mysql </span><br><span class="line">[root@localhost mysql]# groupadd mysql </span><br><span class="line"></span><br><span class="line"># 创建一个系统用户mysql，并归属用于组mysql </span><br><span class="line">[root@localhost mysql]# useradd -r -g mysql -s /bin/false mysql </span><br><span class="line"></span><br><span class="line">#初始化mysql </span><br><span class="line">mysqld --initialize --user=mysql --basedir=/usr/local/mysql --datadir=/usr/local/mysql/data </span><br></pre></td></tr></table></figure><p>执行上述指令时，会输入如下日志。在日志中就会输出mysql中root用户的一个临时密码： </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">2025-08-05T03:33:25.304900Z 0 [System] [MY-013169] [Server] /usr/local/mysql/bin/mysqld (mysqld 8.0.30) initializing of server in progress as process 96881 </span><br><span class="line">2025-08-05T03:33:25.316845Z 1 [System] [MY-013576] [InnoDB] InnoDB initialization has started. </span><br><span class="line">2025-08-05T03:33:26.963945Z 1 [System] [MY-013577] [InnoDB] InnoDB initialization has ended. </span><br><span class="line">2025-08-05T03:33:29.823216Z 6 [Note] [MY-010454] [Server] A temporary password is generated for root@localhost: 6ptfl2zvI*EB </span><br></pre></td></tr></table></figure><h4 id="【启动mysql】"><a href="#【启动mysql】" class="headerlink" title="【启动mysql】"></a>【启动mysql】</h4></li><li>启动mysql服务 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost mysql]# systemctl start mysql </span><br></pre></td></tr></table></figure></li><li>通过命令，登录mysql <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost mysql]# mysql -uroot -p6ptfl2zvI*EB </span><br></pre></td></tr></table></figure></li><li><p>配置mysql<br>修改root用户的密码 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;root&#x27;; </span><br></pre></td></tr></table></figure><p>注意：这个root账号仅能够在本机localhost上访问，我们在windows上是无法访问的，如果需要在window上或其他服务器上也能远程访问，需要创建一个账号，用于远程访问。 </p></li><li><p>创建账号，并授权远程访问 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">create USER &#x27;root&#x27;@&#x27;%&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;1234&#x27;; </span><br><span class="line"> </span><br><span class="line">GRANT ALL PRIVILEGES ON *.* TO &#x27;root&#x27;@&#x27;%&#x27;; </span><br><span class="line"> </span><br><span class="line">FLUSH PRIVILEGES; </span><br></pre></td></tr></table></figure><p>语句各个部分说明如下： </p></li></ol><ul><li>ALL PRIVILEGES表示授予所有可用的权限 </li><li>ON <em>.</em> 表示对所有数据库中的所有表进行授权 </li><li>TO ‘root’@’%’root是授予权限的用户名，@是分隔符，%允许该用户从任何主机链接到mysql服务 </li><li>FLUSH PRIVILEGES对用户权限或密码的修改立即生效，无需重启mysql服务。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 结构速查 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端学习【3】</title>
      <link href="/2025/07/24/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E3%80%903%E3%80%91/"/>
      <url>/2025/07/24/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E3%80%903%E3%80%91/</url>
      
        <content type="html"><![CDATA[<p>让我们接着之前文章没讲完的部分来继续讲。</p><h1 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h1><p>在javaWeb开发中，cookie就像网站给浏览器贴的小纸条，用于记录一些用户信息或者状态，方便下一<br>次访问时识别用户身份或进行个性化服务。</p><p>cookie机制是相当容易理解的，它的工作原理如下：</p><ol><li>当用户第一次访问网站时，服务器会在响应头中设置一个cookie，包含一些用户信息或者状态。</li><li>浏览器收到响应后，会将cookie保存到本地。</li><li>下一次用户访问网站时，浏览器会自动将cookie发送到服务器。</li><li>服务器收到cookie后，就可以根据cookie中的信息来识别用户身份或进行个性化服务。</li></ol><p>结合生活解释就像你经常去一家店吃饭，久了店家都知道你喜欢吃什么，人一到连菜都不用点，直接上你喜欢的菜。</p><h2 id="创建cookie"><a href="#创建cookie" class="headerlink" title="创建cookie"></a>创建cookie</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.iweb.servlet;</span><br><span class="line"><span class="meta">@WebServlet(&quot;/createCookieServlet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CreateCookieServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span></span><br><span class="line">        <span class="keyword">throws</span> ServletException, IOException&#123;</span><br><span class="line">        <span class="comment">//处理响应中文代码问题</span></span><br><span class="line">        resp.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">//创建cookie对象</span></span><br><span class="line">        <span class="type">Cookie</span> <span class="variable">cookie1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;k1&quot;</span>,<span class="string">&quot;v1&quot;</span>);</span><br><span class="line">        <span class="type">Cookie</span> <span class="variable">cookie2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;k2&quot;</span>,<span class="string">&quot;v2&quot;</span>);</span><br><span class="line">        <span class="comment">//通知客户端浏览器保存cookie</span></span><br><span class="line">        <span class="comment">// cookie1.setMaxAge(0);设置cookie生命周期</span></span><br><span class="line">        <span class="comment">//表示马上删除，不需要等待浏览器关闭</span></span><br><span class="line">        cookie1.setMaxAge(<span class="number">0</span>);</span><br><span class="line">        resp.addCookie(cookie1);</span><br><span class="line">        resp.addCookie(cookie2);</span><br><span class="line">        resp.getWriter().write(<span class="string">&quot;cookie创建成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="获取cookie"><a href="#获取cookie" class="headerlink" title="获取cookie"></a>获取cookie</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.iweb.servlet;</span><br><span class="line"><span class="meta">@WebServlet(&quot;/getCookieServlet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GetCookieServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span></span><br><span class="line">        <span class="keyword">throws</span> ServletException, IOException&#123;</span><br><span class="line">        <span class="comment">//获取所有的cookie对象，返回的是数组</span></span><br><span class="line">        resp.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">        Cookie[] cookies = req.getCookies();</span><br><span class="line">        <span class="keyword">for</span>(Cookie cookie : cookies)&#123;</span><br><span class="line">            <span class="comment">// cookie.getName()方法返回的是cookie的key的名字</span></span><br><span class="line">            <span class="comment">// cookie.getValue()方法返回的是cookie的value值</span></span><br><span class="line">            resp.getWriter().write(<span class="string">&quot;cookie[&quot;</span>+cookie.getName()+<span class="string">&quot;=&quot;</span>+cookie.getValue()+<span class="string">&quot;]&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//查找指定的cookie</span></span><br><span class="line">        <span class="type">Cookie</span> <span class="variable">cookie</span> <span class="operator">=</span> CookieUtils.getCookie(<span class="string">&quot;k1&quot;</span>, cookies);</span><br><span class="line">        <span class="comment">//如果不等于null，说明赋过值，找到了需要的cookie</span></span><br><span class="line">        <span class="keyword">if</span>(cookie != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">//找到需要修改的cookie对象</span></span><br><span class="line">            cookie.setValue(<span class="string">&quot;new_value1&quot;</span>);</span><br><span class="line">            resp.addCookie(cookie);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h1><p>session是一种服务器端会话跟踪机制，用于在用户与服务器交互过程中保持用户的状态信息，与cookie不同，session的数据存储在服务器内存中，而cookie的数据存储在客户端浏览器。</p><h2 id="session的生命周期"><a href="#session的生命周期" class="headerlink" title="session的生命周期"></a>session的生命周期</h2><ul><li>创建：当用户第一次访问web系统时，服务器会创建一个session实例</li><li>存在：session在用户访问系统期间一直存在，直到超时或销毁</li><li>销毁：session可以通过调用invalidate()方法来销毁，或者是超时后由服务器自动销毁</li></ul><h2 id="获取session实例"><a href="#获取session实例" class="headerlink" title="获取session实例"></a>获取session实例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.iweb.servlet;</span><br><span class="line"><span class="meta">@WebServlet(&quot;/sessionServlet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SessionServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span></span><br><span class="line">        <span class="keyword">throws</span> ServletException, IOException&#123;</span><br><span class="line">        <span class="comment">//获得session</span></span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> req.getSession();</span><br><span class="line">        <span class="comment">//session.getId()得到session的会话id值，id是唯一的</span></span><br><span class="line">        resp.getWriter().write(session.getId());</span><br><span class="line">        <span class="comment">//绑定数据</span></span><br><span class="line">        req.setAttribute(<span class="string">&quot;req1&quot;</span>,<span class="string">&quot;val1&quot;</span>);</span><br><span class="line">        session.setAttribute(<span class="string">&quot;ses1&quot;</span>,<span class="string">&quot;val2&quot;</span>);</span><br><span class="line">        req.getServletContext().setAttribute(<span class="string">&quot;con1&quot;</span>,<span class="string">&quot;val3&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;已经绑定了request,session,ServletContext保存了数据&quot;</span>);</span><br><span class="line">        req.getRequestDispatcher(<span class="string">&quot;/mapServlet&quot;</span>).forward(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="面试题：session和cookie的区别"><a href="#面试题：session和cookie的区别" class="headerlink" title="面试题：session和cookie的区别"></a>面试题：session和cookie的区别</h2><ol><li><p>数据存放的位置不同</p><ul><li>cookie数据存放在客户端的浏览器上</li><li>session数据放在服务器上</li></ul></li><li><p>安全程度不同</p><ul><li>cookie不是很安全，考虑到安全应当使用session</li></ul></li><li><p>性能使用程度不同</p><ul><li>session会在一定时间内保存在服务器上，当访问增多，会占用服务器的性能，考虑到减轻服务器性能问题，应当使用cookie</li></ul></li><li><p>数据存储大小不同</p><ul><li>单个cookie保存数据不能超过4K，很多浏览器都限制一个站点最多保存20个cookie</li><li>session则存储在服务器</li></ul></li></ol><h1 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h1><p>Filter过滤器，是JavaWeb三大组件之一(Servlet、Filter、Listener)。用于在请求到达servlet之间或者响应返回客户端之前对请求或者响应进行预处理或后处理。</p><h2 id="Filter工作原理"><a href="#Filter工作原理" class="headerlink" title="Filter工作原理"></a>Filter工作原理</h2><p>当客户端浏览器向服务器发送请求时，请求会先经过一系列过滤器，每个过滤器都可以对请求进行修改、验证或者拦截。请求依次通过过滤器链，最终到达目标servlet。类似于小区的安检系统，进门要安检，出门也要过一次安检。</p><h2 id="过滤器的应用场景"><a href="#过滤器的应用场景" class="headerlink" title="过滤器的应用场景"></a>过滤器的应用场景</h2><ul><li>权限验证：检查用户是否有访问特定资源的权限。例如某些网站未登录不能查看商品，评论，不能将商品添加到购物车，得把拦截下来，让你先登录，也就是在访问前，要先经过filter</li><li>字符编码处理：统一设置请求和响应的字符编码，防止中文乱码问题</li></ul><h2 id="filter入门案例"><a href="#filter入门案例" class="headerlink" title="filter入门案例"></a>filter入门案例</h2><ol><li>定义类，实现Filter接口，并重写其所有方法</li><li>配置filter拦截器路径资源</li><li>在doFilter方法中进行放行</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.iweb.util;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebFilter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">//这里配置的是过滤器拦截的路径，/*表示拦截所有路径</span></span><br><span class="line"><span class="meta">@WebFilter(&quot;/*&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//doFilter专门用于拦截请求的方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, </span></span><br><span class="line"><span class="params">        FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        chain.doFilter(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Filter拦截路径配置"><a href="#Filter拦截路径配置" class="headerlink" title="Filter拦截路径配置"></a>Filter拦截路径配置</h2><p>拦截路径表示filter会对请求的那些种资源进行拦截，使用@WebFilter注解进行配置，比如@WebFilter(“拦截路径”)</p><p>拦截路径有如下几种配置方式：</p><ul><li>拦截具体的资源：/index.html 只有访问index.html时才会被拦截</li><li>目录拦截：/user/* 访问/user下所有的资源都会被拦截</li><li>后缀名拦截：*.html 访问后缀名为html资源，都会被拦截</li><li>拦截所有：/* 访问所有资源，都会被拦截</li></ul><h2 id="过滤器处理中文乱码"><a href="#过滤器处理中文乱码" class="headerlink" title="过滤器处理中文乱码"></a>过滤器处理中文乱码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.iweb.util;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebFilter;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebFilter(&quot;/*&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CharacterEncodingFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, </span></span><br><span class="line"><span class="params">        FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException&#123;</span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> (HttpServletRequest)servletRequest;</span><br><span class="line">        <span class="type">HttpServletResponse</span> <span class="variable">response</span> <span class="operator">=</span> (HttpServletResponse)servletResponse;</span><br><span class="line">        <span class="comment">//设置请求编码为UTF-8</span></span><br><span class="line">        request.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">//设置响应内容为UTF-8</span></span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">//放行</span></span><br><span class="line">        filterChain.doFilter(request,response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="过滤器链"><a href="#过滤器链" class="headerlink" title="过滤器链"></a>过滤器链</h2><p>在一个web应用中可以配置多个过滤器，这些过滤器会按照配置的顺序形成一个过滤器链。请求会依次通过过滤器链中的每个过滤器，响应则会按照相反的顺序返回。有两个过滤器FilterA和FilterB，配置顺序为FilterA在前，FilterB在后，那么请求的处理顺序为：FilterA—&gt;FilterB—&gt;目标servlet，响应处理顺序为：servlet—&gt;FilterB—&gt;FilterA</p><h1 id="Listener"><a href="#Listener" class="headerlink" title="Listener"></a>Listener</h1><p>listener表示监听器，监听就是在ServletContext、Session、Request三个对象创建和销毁。</p><h1 id="MVC分层"><a href="#MVC分层" class="headerlink" title="MVC分层"></a>MVC分层</h1><h2 id="MVC概念"><a href="#MVC概念" class="headerlink" title="MVC概念"></a>MVC概念</h2><p>MVC全称：Model模型、View视图、Controller控制器。首先明确的一点是它是一种开发设计思想，将业务逻辑、数据处理、页面显示分别抽取出来统一放到一个地方。MVC的理念就是将软件代码拆分为组件，单独开发，组合使用(降低耦合度)。</p><ul><li>view视图：负责提供页面为用户展示数据，不接受任何与显示数据无关的代码。(html、jsp)</li><li>Controller控制层：servlet作为控制器，用来接受用户的请求，然后获取请求中的数据，然后派发页面，是一个调度者角色，转发某个页面，或者重定向到某个页面(servlet)</li><li>Model模型：将业务逻辑相关的数据封装成具体的JavaBean类，其中不掺杂任何与数据相关处理的代码(bean/pojo/entity)</li></ul><p>MVC的作用就是为了降低耦合度，让代码合理分层，方便后期的升级和维护。</p><h1 id="Vue介绍"><a href="#Vue介绍" class="headerlink" title="Vue介绍"></a>Vue介绍</h1><p>如果使用原生JS来处理界面交互行为，开发效率比较低，而在现在的企业级项目开发中，一般使用Vue这样的js框架来简化操作，提供开发效率。</p><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>vue是一款用于构建用户界面的渐进式的javaScript框架。</p><h3 id="构建用户界面"><a href="#构建用户界面" class="headerlink" title="构建用户界面"></a>构建用户界面</h3><p>构建用户界面是指在vue中，可以基于数据渲染出用户看到的界面，将来服务器返回给前端的原始数据，如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">userList<span class="punctuation">:</span><span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;jack&quot;</span><span class="punctuation">,</span><span class="attr">&quot;age&quot;</span><span class="punctuation">:</span><span class="number">21</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;tom&quot;</span><span class="punctuation">,</span><span class="attr">&quot;age&quot;</span><span class="punctuation">:</span><span class="number">22</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;lucy&quot;</span><span class="punctuation">,</span><span class="attr">&quot;age&quot;</span><span class="punctuation">:</span><span class="number">19</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><p>上面的这些原始数据，用户是看不懂的，而我们开发人员，可以使用vue中提供的操作，将原始数据遍历，解析出来，从而渲染呈现出用户所能看懂的界面：</p><div class="table-container"><table><thead><tr><th>姓名</th><th>年龄</th><th>操作</th></tr></thead><tbody><tr><td>jack</td><td>21</td><td>删除增加修改</td></tr><tr><td>tom</td><td>22</td><td>删除增加修改</td></tr><tr><td>lucy</td><td>19</td><td>删除增加修改</td></tr></tbody></table></div><h3 id="渐进式"><a href="#渐进式" class="headerlink" title="渐进式"></a>渐进式</h3><p>渐进式就是循序渐进，Vue生态中的语法非常多，比如声明式渲染，组件系统，路由，状态管理，构建工具等等。</p><p>我们使用vue框架，不需要把所有的组件全部学习完毕才可以使用vue，而是我们学习一点就可以使用一点：</p><ul><li>声明式渲染：就可以用vue来构建用户界面</li><li>组件：就可以使用vue中的组件，来复用</li><li>路由：就可以在vue中来使用路由功能了</li></ul><h3 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h3><p>框架用于快速构建项目，简化开发提供开发效率的。</p><h2 id="入门案例"><a href="#入门案例" class="headerlink" title="入门案例"></a>入门案例</h2><h3 id="分为三步骤："><a href="#分为三步骤：" class="headerlink" title="分为三步骤："></a>分为三步骤：</h3><ol><li>新建HTML页面，引入vue.js文件</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--引用vue.js脚本--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/vue@3/dist/vue.global.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li>准备元素(div)，交给Vue控制</li></ol><p>这是个容器，vue所管理的范围，这里将来会编写一些用于渲染的逻辑代码。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li>创建vue的应用实例对象</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        &#123;&#123;message&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/vue@3/dist/vue.global.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> obj = &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">message</span>: <span class="string">&quot;hello world&quot;</span></span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;;</span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(obj).<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ul><li>vue中定义数据，必须通过data方法来定义，data返回的是一个对象，这里对象中定义数据</li><li>插值表达式中编写的变量，一定是vue中data定义的数据，如果插值表达式编中写了一个变量，但是在vue中未定义，会报错</li><li>vue应用实例接管的区域是’#app’，超出这个范围，就不受vue控制了，所以vue里面的插值表达式，一定要写在<div id='app'></div>的里面</li></ul><h2 id="vue指令"><a href="#vue指令" class="headerlink" title="vue指令"></a>vue指令</h2><p>指令：HTML标签上带有v-前缀的特殊属性，不同指令就具有不同意义。例如：v-if、v-for</p><div class="table-container"><table><thead><tr><th>指令</th><th>作用</th></tr></thead><tbody><tr><td>v-bind</td><td>为HTML标签绑定属性值，设置href，css样式等</td></tr><tr><td>v-model</td><td>在表单元素上创建双向数据绑定</td></tr><tr><td>v-on</td><td>为HTML标签绑定事件</td></tr><tr><td>v-if/v-else/v-else-if</td><td>条件渲染某个元素，判断为true则渲染否则不渲染</td></tr><tr><td>v-show</td><td>根据条件展示某个元素，区别在于切换的是display属性的值</td></tr><tr><td>v-for</td><td>遍历容器的元素或者对象的属性</td></tr></tbody></table></div><h3 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h3><p>作用：动态为HTML标签绑定属性值</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>指令一：强制数据绑定<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;url&quot;</span>&gt;</span>访问百度1(无效)<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">&quot;url&quot;</span>&gt;</span>访问百度2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- v-bind可以简写为: --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">&quot;url&quot;</span>&gt;</span>访问百度3<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/vue@3/dist/vue.global.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> obj = &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">url</span>: <span class="string">&quot;http://www.baidu.com&quot;</span></span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;;</span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(obj).<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="注意-1"><a href="#注意-1" class="headerlink" title="注意"></a>注意</h3><p>v-bind所绑定的数据，必须是在data中定义数据。</p><h3 id="v-on"><a href="#v-on" class="headerlink" title="v-on"></a>v-on</h3><p>作用：为html标签绑定事件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>绑定事件监听<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;btnClick1&quot;</span>&gt;</span>绑定事件1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;btnClick2&quot;</span>&gt;</span>绑定事件2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;btnClick3(&#x27;hello&#x27;)&quot;</span>&gt;</span>绑定事件3<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/vue@3/dist/vue.global.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> obj = &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> &#123;&#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">btnClick1</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="title function_">alert</span>(<span class="string">&quot;点击事件1&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">btnClick2</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="title function_">alert</span>(<span class="string">&quot;点击事件2&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">btnClick3</span>(<span class="params">msg</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="title function_">alert</span>(msg);</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;;</span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(obj).<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="注意-2"><a href="#注意-2" class="headerlink" title="注意"></a>注意</h3><ul><li>v-on:后面的事件名称是之前原生事件属性名去掉on</li><li>单击事件：事件属性名是onclick，在vue中使用是 v-on:click，简写@click</li></ul><h3 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h3><p>v-if=”表达式”，表达式的值为true，显示，false，隐藏</p><p>原理：基于条件判断，来控制创建或删除元素节点(条件渲染)</p><p>场景：要么显示，要么不显示，不频繁切换的场景</p><h3 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a>v-show</h3><p>v-show=”表达式”，表达式值为true，显示，false，隐藏</p><p>原理：基于css样式display来控制显示与隐藏</p><p>场景：频繁切换显示隐藏</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>v-show<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span> <span class="attr">v-show</span>=<span class="string">&quot;isShow&quot;</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/vue@3/dist/vue.global.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> obj = &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">message</span>: <span class="string">&quot;hello world&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">isShow</span>: <span class="literal">false</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">score</span>: <span class="number">56</span></span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;;</span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(obj).<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="面试题：v-if和v-show的区别？"><a href="#面试题：v-if和v-show的区别？" class="headerlink" title="面试题：v-if和v-show的区别？"></a>面试题：v-if和v-show的区别？</h3><ul><li>v-if根据条件销毁或重建dom元素，初始条件为假时元素不会被渲染</li><li>v-show始终保留dom元素，仅通过display:none控制显示或隐藏状态</li></ul><h3 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h3><p>作用：列表渲染，遍历元素或者对象</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>v-for<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span>--请选择--<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">v-for</span>=<span class="string">&quot;(city,index) in cityList&quot;</span> <span class="attr">:value</span>=<span class="string">&quot;city.id&quot;</span>&gt;</span></span><br><span class="line">                &#123;&#123;index&#125;&#125;----&#123;&#123;city.name&#125;&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/vue@3/dist/vue.global.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> obj = &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">cityList</span>: [</span></span><br><span class="line"><span class="language-javascript">                        &#123;<span class="attr">id</span>:<span class="number">1</span>, <span class="attr">name</span>:<span class="string">&quot;北京&quot;</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">                        &#123;<span class="attr">id</span>:<span class="number">2</span>, <span class="attr">name</span>:<span class="string">&quot;上海&quot;</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">                        &#123;<span class="attr">id</span>:<span class="number">3</span>, <span class="attr">name</span>:<span class="string">&quot;广州&quot;</span>&#125;</span></span><br><span class="line"><span class="language-javascript">                    ]</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;;</span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(obj).<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>参数：</p><ul><li>cityList要遍历的数组</li><li>city遍历出来的元素</li><li>index为索引下标，从0开始，可以省略 v-for=”city in cityList”</li><li>key作用：给元素添加唯一表示，推荐使用id作为key(唯一)，不推荐使用index作为key</li></ul><h3 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h3><p>作用：在表单元素上使用，双向数据绑定，可以方便的获取或设置表单项数据</p><p>语法：v-model=”变量名”</p><p>双向数据绑定：是指vue中的数据变化，会影响视图中的数据展示，视图中的输入的数据变化，也会影响vue的数据的模型</p><h1 id="Vue工程化"><a href="#Vue工程化" class="headerlink" title="Vue工程化"></a>Vue工程化</h1><p>上述开发模式存在一些问题：</p><ul><li>不规范：每次开发都是从头开始，比较麻烦</li><li>复用：多个页面的组件不能复用</li></ul><p>企业开发方式主要有：</p><ul><li>模块化：将js、css封装成一个个可以复用的模块</li><li>组件化：将组件，CSS，js封装称为一个组件，便于管理</li><li>规范化：提供一套标准的规范的目录接口或编码规范</li><li>自动化：项目的构建、测试、部署全部都是自动完成</li></ul><p>学习vue的官方提供的脚手架帮我们完成前端的工程化。</p><h2 id="Vue项目创建"><a href="#Vue项目创建" class="headerlink" title="Vue项目创建"></a>Vue项目创建</h2><p>vite是一个轻量级的，速度极快的下一代前端构建工具，用于快速生成一个工程化的Vue项目，非常适合前端开发。</p><p>Vue的主要特点：</p><ul><li>极速启动：利用浏览器原生ES模块支持，无需打包，启动速度极快</li><li>快速热更新：代码保存后立即显示效果</li><li>按需编译：只编译修改的部分</li></ul><p>要想使用vite创建vue项目，必须依赖环境：node.js。vite本身也是依赖node.js的，下载node.js</p><h3 id="1-跳过node-js安装步骤"><a href="#1-跳过node-js安装步骤" class="headerlink" title="1. 跳过node.js安装步骤"></a>1. 跳过node.js安装步骤</h3><p>node.js安装完毕后，会自动配置好环境变量，我们验证一下是否安装成功：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure></p><h3 id="2-配置淘宝镜像，提升加速下载"><a href="#2-配置淘宝镜像，提升加速下载" class="headerlink" title="2. 配置淘宝镜像，提升加速下载"></a>2. 配置淘宝镜像，提升加速下载</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config set registry=http://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><h2 id="npm介绍"><a href="#npm介绍" class="headerlink" title="npm介绍"></a>npm介绍</h2><p>NPM(Node Package Manager) Node.js的默认包管理器。</p><p>在开发前端项目的过程中，我们需要相关的依赖，可以直接通过npm命令，直接从远程仓库中将依赖直接下载到本地。</p><p>项目创建完毕以后，进入vite-project项目目录，执行命令安装当前项目的依赖：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i</span><br></pre></td></tr></table></figure></p><p>创建项目以安装依赖的过程，都是需要联网的。如果网络不好，可能会造成依赖下载不完成报错，继续再次执行命令安装</p><h2 id="启动项目"><a href="#启动项目" class="headerlink" title="启动项目"></a>启动项目</h2><p>我们使用hbuilderx直接打开vue项目。<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev #启动vue项目</span><br></pre></td></tr></table></figure></p><p>在浏览器中输入：<a href="http://localhost:5173/即可打开页面">http://localhost:5173/即可打开页面</a></p><h2 id="项目目录结构"><a href="#项目目录结构" class="headerlink" title="项目目录结构"></a>项目目录结构</h2><div class="table-container"><table><thead><tr><th>目录/文件</th><th>说明</th></tr></thead><tbody><tr><td>node_modules</td><td>npm加载的项目依赖模块存放第三方依赖包</td></tr><tr><td>src</td><td>这里是我们要开发的目录，基本上要做的事情都在这个目录里。里面包含了几个目录及文件：assets:目录用来存放项目中所有的静态资源文件(css、fonts等)。components:目录用来存放项目中所有的自定义组件。App.vue:是项目的根组件。main.js:是整个项目的打包入口文件。index.css:是项目的全局样式表文件</td></tr><tr><td>assets</td><td>静态资源目录，如图片、字体等</td></tr><tr><td>public</td><td>公共资源目录</td></tr><tr><td>.gitignore</td><td>.gitignore是Git的忽略文件</td></tr><tr><td>index.html</td><td>是SPA单页面应用程序中唯一的HTML页面</td></tr><tr><td>package.json</td><td>项目的包管理配置文件</td></tr><tr><td>vite.config.js</td><td>vite项目配置文件</td></tr><tr><td>README.md</td><td>项目的说明文档，markdown格式</td></tr><tr><td>dist</td><td>使用npm run build命令打包后会生成该目录</td></tr></tbody></table></div><p>项目运行流程：<br>在工程化的项目中，vue要做的事情很简单，通过main.js把app.vue渲染到index.html的指定区域中。<br>1）项目首页（项目入口）index.html<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">   <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">   <span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/src/main.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"> &lt;/body&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>在body体中有一个div标签，其id属性值为app，还引入了一个js，script标签会连接到src/main.js内容。<br>main.js入口文件<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.导入createApp函数</span></span><br><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">// 2.导入待渲染的css文件</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./style.css&#x27;</span></span><br><span class="line"><span class="comment">// 3.导入App.vue组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="comment">// 4.调用createApp函数，创建vue应用实例，调用mount()把vue应用实例挂在到(id选择器)app区域中</span></span><br><span class="line"><span class="title function_">createApp</span>(<span class="title class_">App</span>).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><br>在main.js中，新建了一个vue实例，并使用#app挂在到index.html中的app区域，但是#app区域没有任何内容，需要注意的是我们在创建vue应用的实例的时候，传入了一个App组件，App组件称为根组件，也就是main.js关联到App.vue组件。<br>3）.根组件的App.vue<br>清空App.vue的默认内容<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">     js</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    html</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    css</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><br>其中<em>.vue是vue项目中的组件文件，称为单文件组件。vue的单文件组件会将一个组件的逻辑(js)，模板(html)，样式(css)封装在同一个文件里面(</em>.vue)<br><strong>API风格</strong><br>选项式API：可以用包含多个选项的对象来描述组件的逻辑，例如 data、methods 和 mounted。选项所定义的属性都会暴露在函数内部的 this 上，它会指向当前的组件实例。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">    &lt;template&gt;</span><br><span class="line">   <span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;inputClick&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;count&quot;</span>/&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// export default 就是默认导出</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">export</span> <span class="keyword">default</span>&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="attr">count</span>:<span class="number">0</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">methods</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="title function_">inputClick</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="variable language_">this</span>.<span class="property">count</span>++;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>组合式API</strong><br>组合式API：是vue3中新增的API风格，它是基于响应式API的，使用组合式API可以更灵活的组织组件的逻辑。<br>组合式API的主要优势：</p><ul><li>更灵活：可以根据需要组织代码，而不是被选项式API的固定结构限制</li><li>更强大：可以使用vue3提供的新功能，如组合式API、响应式API等</li><li>更高效：可以避免选项式API的性能问题，如重复渲染、内存泄漏等</li></ul><h1 id="vue-router路由"><a href="#vue-router路由" class="headerlink" title="vue-router路由"></a>vue-router路由</h1><p>vue-router是一个专门用于vue.js的路由管理库，他通过将url映射到组件，实现页面的跳转和管理。与传统的<a>标签不同，vue-router提供的<router-link>组件能够实现无刷新的页面跳转，如：打开网站首页时默认显示登录页面，登录成功后进入到主页面，此时就需要使用路由。<br>VueRouter主要由三个部分组成：</p><ul><li>vueRouter路由器类，根据路由请求在路由视图中动态渲染选择的组件。</li><li>router-link请求连接组件，浏览器会解析为<a></li><li>router-view：动态视图组件，用来渲染展示与路由路径对应的组件</li></ul><h2 id="路由实现步骤"><a href="#路由实现步骤" class="headerlink" title="路由实现步骤"></a>路由实现步骤</h2><p>安装路由组件：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vue-router</span><br></pre></td></tr></table></figure><br>确认路由组件是否安装成功，可打开项目下package.json文件，找到dependencies配置项<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> &quot;dependencies&quot;: &#123;</span><br><span class="line">  &quot;vue&quot;: &quot;^3.3.8&quot;,</span><br><span class="line">  &quot;vue-router&quot;: &quot;^4.5.1&quot;  // 路由组件的版本号，如果安装失败或者未安装，则此配置不会出现</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><br>自定义路由组件：<br>将路由跳转的目标页面（组件）放到src的其他目录下（pages）:<br>在pages下创建login.vue和home.vue<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;-- home.vue --&gt;</span><br><span class="line">    &lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;应用程序主页面&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;-- login.vue --&gt;</span><br><span class="line">    &lt;template&gt;</span><br><span class="line">    用户名：&lt;input type=&quot;text&quot;/&gt;</span><br><span class="line">    密码:&lt;input type=&quot;password&quot;/&gt;&lt;br/&gt;</span><br><span class="line">    &lt;input type=&quot;button&quot; value=&quot;登录&quot;/&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><br><strong>配置路由</strong><br>在项目src/router目录下创建router.js路由文件<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">// 1.从vue-router中导入按需两个方法</span></span><br><span class="line"><span class="keyword">import</span> &#123; createRouter,createWebHashHistory &#125; <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span></span><br><span class="line"><span class="comment">// 2.导入路由页面组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/home.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Login</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/login.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.创建路由实例对象</span></span><br><span class="line"><span class="keyword">const</span> router=<span class="title function_">createRouter</span>(&#123;</span><br><span class="line">    <span class="comment">// 指定路由的工作模式</span></span><br><span class="line">    <span class="attr">history</span>:<span class="title function_">createWebHashHistory</span>(),</span><br><span class="line">     <span class="comment">// 注册路由组件</span></span><br><span class="line">    <span class="attr">routes</span>:[</span><br><span class="line">        <span class="comment">// path是请求路径，也就是地址栏显示的路径,component是放路由组件的</span></span><br><span class="line">        &#123;<span class="attr">path</span>:<span class="string">&quot;/&quot;</span>,<span class="attr">redirect</span>:<span class="string">&quot;/login&quot;</span>&#125;, <span class="comment">// 页面默认加载的路由，redirect表示重定向到path路径到/login</span></span><br><span class="line">        &#123;<span class="attr">path</span>:<span class="string">&quot;/home&quot;</span>,<span class="attr">component</span>:<span class="title class_">Home</span>,<span class="attr">name</span>:<span class="string">&quot;/home&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="attr">path</span>:<span class="string">&quot;/login&quot;</span>,<span class="attr">component</span>:<span class="title class_">Login</span>,<span class="attr">name</span>:<span class="string">&quot;/login&quot;</span>&#125;]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4.导出路由对象</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure><br>在main.js中导入挂载路由模块<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./style.css&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="comment">// 导入路由配置文件</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router/router.js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 挂载vue实例上</span></span><br><span class="line"><span class="keyword">const</span> app=<span class="title function_">createApp</span>(<span class="title class_">App</span>);</span><br><span class="line">app.<span class="title function_">use</span>(router)</span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><br>实现路由跳转：<br>在app.vue中使用router-view组件，动态视图组件，用来渲染展示与路由路径对应的组件。<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">    app.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">            &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line"></span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><br>接下来点击登录按钮需要跳转到home.vue时，如何实现？需要用到编程式路由导航。</p><h2 id="编程式路由导航"><a href="#编程式路由导航" class="headerlink" title="编程式路由导航"></a>编程式路由导航</h2><p>编程式路由导航通过js来实现路由跳转，vue-Router提了两个主要的AIP来进行编程式路由导航 router.push和routerreplace。<br>router.push方法用于向浏览器的历史记录中添加一条新的记录，用户可以通过浏览器的后退按钮返回到前一个页面。<br>router.replace方法与router.push类似，但是他不会在历史记录中添加的新的记录，而是替换掉当前的历史记录。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">    &lt;template&gt;</span><br><span class="line">    用户名：&lt;input type=<span class="string">&quot;text&quot;</span> v-model=<span class="string">&quot;user.username&quot;</span>/&gt;<span class="language-xml"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line">    密码:<span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;user.password&quot;</span>/&gt;</span></span>&#123;&#123;errorMsg&#125;&#125;</span><br><span class="line">    &lt;br/&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;登录&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;userLogin&quot;</span>/&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">export</span> <span class="keyword">default</span>&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="attr">user</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                        <span class="attr">username</span>:<span class="string">&quot;admin&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                        <span class="attr">password</span>:<span class="string">&quot;123456&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="attr">errorMsg</span>:<span class="string">&quot;&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">methods</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="title function_">userLogin</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="comment">// 此处用if语句模拟后台验证用户名和密码</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">user</span>.<span class="property">username</span>==<span class="string">&#x27;admin&#x27;</span> &amp;&amp; <span class="variable language_">this</span>.<span class="property">user</span>.<span class="property">password</span>==<span class="string">&#x27;123456&#x27;</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                        <span class="comment">// 登录成功</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                        <span class="variable language_">this</span>.<span class="property">errorMsg</span>=<span class="string">&quot;&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                        <span class="comment">// 跳转到home主页面</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                        <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">replace</span>(<span class="string">&quot;/home&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                &#125;<span class="keyword">else</span>&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                        <span class="variable language_">this</span>.<span class="property">errorMsg</span>=<span class="string">&quot;用户名或密码错误&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><br>将login.vue中的代码替换：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    用户名：&lt;input type=&quot;text&quot; v-model=&quot;user.username&quot;/&gt;&lt;br/&gt;</span><br><span class="line">    密码:&lt;input type=&quot;text&quot; v-model=&quot;user.password&quot;/&gt;&#123;&#123;errorMsg&#125;&#125;</span><br><span class="line">    &lt;br/&gt;</span><br><span class="line">    &lt;input type=&quot;button&quot; value=&quot;登录&quot; @click=&quot;userLogin&quot;/&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure></p><h2 id="声明式路由导航"><a href="#声明式路由导航" class="headerlink" title="声明式路由导航"></a>声明式路由导航</h2><p>vue-router提供了全局组件router-linke，类似a标签的作用。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link to=<span class="string">&quot;/&quot;</span>&gt;跳转到首页&lt;<span class="regexp">/router-link&gt;&lt;br/</span>&gt;<span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/login&quot;</span>&gt;</span>跳转到登录页<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/home&quot;</span>&gt;</span>跳转到主页<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/home&quot;</span> <span class="attr">replace</span>&gt;</span>跳转到主页<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span></span><br></pre></td></tr></table></figure><br>router-link跳转的时候默认为push，如果设置为replace，router-link组件添加replace属性即可。</p><h2 id="嵌套路由"><a href="#嵌套路由" class="headerlink" title="嵌套路由"></a>嵌套路由</h2><p>案例：由login登录成功后，进入home主页面，在主页面中点击左侧菜单(router-link)进行页面切换，点击首页，商品管理，用户管理，系统配置等等链接时，蓝色区域做局刷新。<br>经过刚才的操作，我们可以看到，在页面点击左侧菜单，右侧主展示区域，就会显示出对应的页面。App.vue 中的router-view是最底层的出口，渲染最高级路由匹配到组件，同样的，一个被渲染的组件同样可以包含自己的嵌套router-view</p><h1 id="vue生命周期"><a href="#vue生命周期" class="headerlink" title="vue生命周期"></a>vue生命周期</h1><p>vue的生命周期是指vue对象从创建到销毁过程，vue生命周期包含8个阶段，每个阶段触发一个生命周期事件，会自动执行一个生命周期方法，这些生命周期方法也成为钩子函数。</p><p>表格描述：<br>| 生命周期阶段 | 生命周期事件 | 生命周期方法 | 描述 |<br>| —- | —- | —- | —- |<br>| 初始化 | beforeCreate |  | 实例初始化完成，数据观测和事件配置之前调用 |<br>| 初始化 | created |  | 实例初始化完成，数据观测和事件配置完成，但是DOM还没有挂载 |<br>| 挂载 | beforeMount |  | 实例挂载之前调用，相关的render函数首次被调用 |<br>| 挂载 | mounted |  | 实例挂载完成，DOM已经挂载完成 |<br>| 更新 | beforeUpdate |  | 数据更新时调用，发生在虚拟DOM重新渲染和打补丁之前 |<br>| 更新 | updated |  | 数据更新时调用，发生在虚拟DOM重新渲染和打补丁之后 |<br>| 销毁 | beforeDestroy |  | 实例销毁之前调用，实例仍然完全可用 |<br>| 销毁 | destroyed |  | 实例销毁后调用，实例的所有事件监听器会被移除，所有子实例也会被销毁 |<br>| 激活 | activated |  | 组件被激活时调用，组件从缓存中被激活 |<br>| 不激活 | deactivated |  | 组件被停用时调用，组件被缓存 |</p><p>vue官网提供了从vue到销毁vue对象的这个过程及各个阶段对应的钩子函数<br>其中我们只需要关注一个<code>mounted</code><br><code>mounted：</code>挂载完成，vue初始化成功，HTML页面渲染成功后，在页面初始化后自动的发送ajax请求到后台获取数据。<br><code>mounted</code>钩子函数在组件实例创建完成后调用，此时组件的<code>el</code>属性已经指向了挂载的DOM元素，我们可以在<code>mounted</code>钩子函数中访问和操作DOM元素。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// 发送ajax请求</span></span><br><span class="line">    axios.<span class="title function_">get</span>(<span class="string">&quot;http://localhost:8080/user&quot;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">data</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h1><p>我们前端页面中的数据，来自于后台，那么我们的后端和前端是互不影响的2个程序，那么我们前端应该如何从后台获取数据？因为是2个程序，所以必须涉及到2个程序的交互，需要用到我们接下来要学习的ajax。<br>Ajax:Asynchronous JavaScript and XML（异步的 JavaScript 和 XML），作用如下：</p><ul><li>与服务器进行数据交换，通过ajax可以给服务器发送请求，并获取服务器响应的数据。</li><li>异步交互：不重新加载整个页面的情况下，与服务器交互数据并更新局部网页的技术。<br><strong>与服务器进行数据交互</strong><br>前端可以通过ajax技术，向后台服务器发送请求，后台服务器接受到了前端的请求，从数据库中获取前端需要的数据，然后响应给前端，前端在通过我们学习的vue技术，可以数据展示到页面上，这样用户就能够看到完整的页面了。<br><strong>异步交互</strong><br>可以在不重新加载整个页面的情况下，与服务器交互数据并更新局部网页的技术。</li></ul><h2 id="同步异步"><a href="#同步异步" class="headerlink" title="同步异步"></a>同步异步</h2><p>ajax的局部刷新功能是因为ajax请求是异步的，对应的又同步请求。<br>同步请求：浏览器页面在发送请求给服务器，在服务器端处理请求的过程中，浏览器页面不能做其他的操作，只能等服务器响应结果后才能，浏览器页面才能继续做其他的操作。<br>异步请求：浏览器页面发送请求给服务器端，在服务器处理请求的过程中，浏览器页面还可以做其他的操作。</p><h1 id="Aixos"><a href="#Aixos" class="headerlink" title="Aixos"></a>Aixos</h1><p>使用原生的ajax请求的代码编写比较繁琐，Aixos是对原生的ajax进行封装，简化书写。<br>安装Aixos<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install axios -s</span><br></pre></td></tr></table></figure><br>检查package.json文件中是否安装axios<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&quot;dependencies&quot;: &#123;</span><br><span class="line">   &quot;axios&quot;: &quot;^1.11.0&quot;,  </span><br><span class="line">   &quot;vue&quot;: &quot;^3.3.8&quot;,</span><br><span class="line">   &quot;vue-router&quot;: &quot;^4.5.1&quot;</span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure><br><strong>配置axios</strong><br>为了简化axios的使用，可以创建一个axios实例并且进行全局配置，这样可以避免在每个组件中重复配置axios，文件夹建立在src/axios，命名为axios.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">//1.导入axios</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span></span><br><span class="line"><span class="comment">//2.使用axios.create创建axios实例</span></span><br><span class="line"><span class="keyword">const</span> axiosObj=axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 后端服务器地址，每次使用axios异步请求</span></span><br><span class="line"><span class="comment">     * 都要填写域名比较麻烦，可以设置一个baseURL</span></span><br><span class="line"><span class="comment">     * 这样可以少一些代码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="attr">baseURL</span>:<span class="string">&quot;http://localhost:8080&quot;</span>,</span><br><span class="line">    <span class="attr">timeout</span>:<span class="number">2000</span>  <span class="comment">// 配置请求超时单位 单位ms</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.导出axios实例</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> axiosObj</span><br></pre></td></tr></table></figure><br>为了方便在 vue组件中使用axios实例，将其挂载到vue的全局对象上，这样每个组件都可以访问它。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="comment">// 导入路由配置文件</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router/router.js&#x27;</span></span><br><span class="line"><span class="comment">// 导入axios实例</span></span><br><span class="line"><span class="keyword">import</span>  axiosInstance  <span class="keyword">from</span> <span class="string">&#x27;./axios/axios.js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 挂载vue实例上</span></span><br><span class="line"><span class="keyword">const</span> app=<span class="title function_">createApp</span>(<span class="title class_">App</span>);</span><br><span class="line">app.<span class="title function_">use</span>(router)</span><br><span class="line"><span class="comment">// 全局注册axios</span></span><br><span class="line">app.<span class="property">config</span>.<span class="property">globalProperties</span>.<span class="property">$axios</span>=axiosInstance</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><br><strong>使用axios</strong><br>在需要进行<strong>axios</strong>做异步请求的地方使用<code>this.$aixos.get()</code>、<code>this.$aixos.post()</code>等异步请求方法。<br>以用户登录为例：<br>前端vue项目地址：<code>http://localhost:5173</code><br>后端项目地址:<code>http://localhost:8081</code><br>后端用户登录API：<code>http://localhost:8081/工程名/aixosServlet?username=xxx&amp;password=xxx</code></p><p>login.vue<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">    &lt;template&gt;</span><br><span class="line">    用户名：&lt;input type=<span class="string">&quot;text&quot;</span> v-model=<span class="string">&quot;user.username&quot;</span>/&gt;<span class="language-xml"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line">    密码:<span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;user.password&quot;</span>/&gt;</span></span>&#123;&#123;errorMsg&#125;&#125;</span><br><span class="line">    &lt;br/&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;登录&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;userLogin&quot;</span>/&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">export</span> <span class="keyword">default</span>&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="attr">user</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                        <span class="attr">username</span>:<span class="string">&quot;admin&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                        <span class="attr">password</span>:<span class="string">&quot;123456&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="attr">errorMsg</span>:<span class="string">&quot;&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">methods</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="title function_">userLogin</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="keyword">let</span> _this=<span class="variable language_">this</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="variable language_">this</span>.<span class="property">$axios</span>.<span class="title function_">get</span>(<span class="string">&quot;/axiosServlet&quot;</span>,&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                                    <span class="attr">params</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                                      <span class="attr">username</span>: <span class="variable language_">this</span>.<span class="property">user</span>.<span class="property">username</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                                      <span class="attr">password</span>: <span class="variable language_">this</span>.<span class="property">user</span>.<span class="property">password</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                                    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                &#125;).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">response</span>)&#123; </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="comment">//then() 请求成功后，获得响应数据</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                     <span class="keyword">if</span>(response.<span class="property">data</span>.<span class="property">code</span>==<span class="number">200</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                         _this.<span class="property">$router</span>.<span class="title function_">replace</span>(<span class="string">&quot;/home&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                     &#125;<span class="keyword">else</span>&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                         _this.<span class="property">errorMsg</span>=<span class="string">&quot;账号或密码错误&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                     &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                &#125;).<span class="title function_">catch</span>(<span class="keyword">function</span> (<span class="params">error</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="comment">// 请求失败时，打印错误信息</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(error)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><br><strong>后端控制器代码</strong><br>前后端的ajax通信几乎用的都是json格式的数据，所以在开发过程中，我们经常会涉及到JSON数据的转换，JSON本来是JS里的内容，有时后端要传递复杂对象和数据给前端，所以需要用到JSON转换。<br><strong>1）.引入依赖</strong><br>fastJson是一个java库，可以将java对象转换为JSON格式，也可以将JSON格式的字符串转换为java对象，首先，在项目中引入fastJson库，maven配置如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"> &lt;dependency&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- fastjson依赖 --&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.78<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></span><br></pre></td></tr></table></figure><br><strong>aixosServletd</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">package</span> com.iweb.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/aixosServlet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AixosServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="built_in">this</span>.doPost(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// 接受前端发送过来的账号和密码</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        HashMap&lt;String,Object&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String,Object&gt;();</span><br><span class="line">        System.out.println(username);</span><br><span class="line">        System.out.println(password);</span><br><span class="line">        <span class="comment">// 连接数据库</span></span><br><span class="line">        <span class="keyword">if</span>(username.equals(<span class="string">&quot;admin&quot;</span>)&amp;&amp;password.equals(<span class="string">&quot;123456&quot;</span>))&#123;</span><br><span class="line">            <span class="comment">// 登录成功</span></span><br><span class="line">            map.put(<span class="string">&quot;code&quot;</span>,<span class="number">200</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">// 账号或密码错误</span></span><br><span class="line">            map.put(<span class="string">&quot;code&quot;</span>,<span class="number">500</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 向前端页面发送字符串</span></span><br><span class="line">        <span class="comment">// JSON.toJSONString()将map对象转换为String字符串</span></span><br><span class="line">        resp.getWriter().write(JSON.toJSONString(map));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>CORS 头缺少 ‘Access-Control-Allow-Origin’这个是跨域了，跨域是指违背了同源策略，同源策略规定了三个东西一致：协议名，主机名，端口号。<br><strong>Vite解决跨域</strong><br>在vite开发中，可以通过配置代理来解决跨域问题<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">//1.导入axios</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span></span><br><span class="line"><span class="comment">//2.使用axios.create创建axios实例</span></span><br><span class="line"><span class="keyword">const</span> axiosObj=axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 后端服务器地址，每次使用axios异步请求</span></span><br><span class="line"><span class="comment">     * 都要填写域名比较麻烦，可以设置一个baseURL</span></span><br><span class="line"><span class="comment">     * 这样可以少一些代码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="attr">baseURL</span>:<span class="string">&quot;/api&quot;</span>,</span><br><span class="line">    <span class="attr">timeout</span>:<span class="number">2000</span>  <span class="comment">// 配置请求超时单位 单位ms</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.导出axios实例</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> axiosObj</span><br></pre></td></tr></table></figure><br>原本跨域的请求就会通过代理服务器转发，从而解决跨域问题。</p>]]></content>
      
      
      <categories>
          
          <category> 结构速查 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开发常用命令速查</title>
      <link href="/2025/07/24/%E5%BC%80%E5%8F%91%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E9%80%9F%E6%9F%A5/"/>
      <url>/2025/07/24/%E5%BC%80%E5%8F%91%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E9%80%9F%E6%9F%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="npm常用命令"><a href="#npm常用命令" class="headerlink" title="npm常用命令"></a>npm常用命令</h1><h2 id="基础操作"><a href="#基础操作" class="headerlink" title="基础操作"></a>基础操作</h2><ul><li><code>npm init</code> - 初始化项目，创建package.json文件</li><li><code>npm init -y</code> - 快速初始化项目，使用默认配置</li><li><code>npm install &lt;package&gt;</code> - 安装依赖包到项目</li><li><code>npm install -g &lt;package&gt;</code> - 全局安装依赖包</li><li><code>npm install &lt;package&gt; --save-dev</code> - 安装开发环境依赖</li><li><code>npm install &lt;package&gt;@&lt;version&gt;</code> - 安装指定版本的依赖包</li></ul><h2 id="依赖管理"><a href="#依赖管理" class="headerlink" title="依赖管理"></a>依赖管理</h2><ul><li><code>npm install</code> - 安装package.json中列出的所有依赖</li><li><code>npm update</code> - 更新所有依赖到最新版本</li><li><code>npm update &lt;package&gt;</code> - 更新指定依赖包</li><li><code>npm uninstall &lt;package&gt;</code> - 卸载依赖包</li><li><code>npm list</code> - 查看已安装的依赖包列表</li><li><code>npm list -g</code> - 查看全局安装的依赖包</li></ul><h2 id="脚本执行"><a href="#脚本执行" class="headerlink" title="脚本执行"></a>脚本执行</h2><ul><li><code>npm run &lt;script&gt;</code> - 运行package.json中定义的脚本</li><li><code>npm start</code> - 运行start脚本（快捷方式）</li><li><code>npm test</code> - 运行test脚本（快捷方式）</li><li><code>npm run dev</code> - 通常用于启动开发服务器</li><li><code>npm run build</code> - 通常用于构建生产版本</li></ul><h2 id="其他常用命令"><a href="#其他常用命令" class="headerlink" title="其他常用命令"></a>其他常用命令</h2><ul><li><code>npm -v</code> - 查看npm版本</li><li><code>npm info &lt;package&gt;</code> - 查看包的详细信息</li><li><code>npm search &lt;keyword&gt;</code> - 搜索npm仓库</li><li><code>npm cache clean --force</code> - 清除npm缓存</li><li><code>npm audit</code> - 检查依赖安全问题</li><li><code>npm audit fix</code> - 自动修复依赖安全问题</li></ul><h1 id="pip常用命令"><a href="#pip常用命令" class="headerlink" title="pip常用命令"></a>pip常用命令</h1><h2 id="基础操作-1"><a href="#基础操作-1" class="headerlink" title="基础操作"></a>基础操作</h2><ul><li><code>pip install &lt;package&gt;</code> - 安装Python包</li><li><code>pip install &lt;package&gt;==&lt;version&gt;</code> - 安装指定版本的Python包</li><li><code>pip install --upgrade &lt;package&gt;</code> - 升级Python包</li><li><code>pip uninstall &lt;package&gt;</code> - 卸载Python包</li><li><code>pip show &lt;package&gt;</code> - 显示包的详细信息</li></ul><h2 id="批量操作"><a href="#批量操作" class="headerlink" title="批量操作"></a>批量操作</h2><ul><li><code>pip install -r requirements.txt</code> - 从文件安装所有依赖</li><li><code>pip freeze &gt; requirements.txt</code> - 将当前环境依赖导出到文件</li><li><code>pip list</code> - 列出已安装的所有包</li><li><code>pip list --outdated</code> - 列出可升级的包</li></ul><h2 id="虚拟环境"><a href="#虚拟环境" class="headerlink" title="虚拟环境"></a>虚拟环境</h2><ul><li><code>python -m venv &lt;env_name&gt;</code> - 创建虚拟环境</li><li><code>source &lt;env_name&gt;/bin/activate</code> - 激活虚拟环境(Linux/Mac)</li><li><code>&lt;env_name&gt;\Scripts\activate</code> - 激活虚拟环境(Windows)</li><li><code>deactivate</code> - 退出虚拟环境</li></ul><h2 id="其他常用命令-1"><a href="#其他常用命令-1" class="headerlink" title="其他常用命令"></a>其他常用命令</h2><ul><li><code>pip --version</code> - 查看pip版本</li><li><code>pip help</code> - 查看pip帮助信息</li><li><code>pip search &lt;package&gt;</code> - 搜索Python包</li><li><code>pip cache purge</code> - 清除pip缓存</li><li><code>pip check</code> - 检查安装的包是否有依赖冲突</li></ul><h1 id="Git-Bash常用命令"><a href="#Git-Bash常用命令" class="headerlink" title="Git Bash常用命令"></a>Git Bash常用命令</h1><h2 id="仓库操作"><a href="#仓库操作" class="headerlink" title="仓库操作"></a>仓库操作</h2><ul><li><code>git init</code> - 初始化本地仓库</li><li><code>git clone &lt;url&gt;</code> - 克隆远程仓库</li><li><code>git add &lt;file&gt;</code> - 将文件添加到暂存区</li><li><code>git add .</code> - 将所有修改添加到暂存区</li><li><code>git commit -m &quot;message&quot;</code> - 提交暂存区到本地仓库</li></ul><h2 id="分支操作"><a href="#分支操作" class="headerlink" title="分支操作"></a>分支操作</h2><ul><li><code>git branch</code> - 查看所有本地分支</li><li><code>git branch &lt;branch_name&gt;</code> - 创建新分支</li><li><code>git checkout &lt;branch_name&gt;</code> - 切换到指定分支</li><li><code>git checkout -b &lt;branch_name&gt;</code> - 创建并切换到新分支</li><li><code>git merge &lt;branch_name&gt;</code> - 将指定分支合并到当前分支</li><li><code>git branch -d &lt;branch_name&gt;</code> - 删除本地分支</li></ul><h2 id="远程操作"><a href="#远程操作" class="headerlink" title="远程操作"></a>远程操作</h2><ul><li><code>git remote add origin &lt;url&gt;</code> - 关联远程仓库</li><li><code>git pull</code> - 拉取远程仓库更新</li><li><code>git push -u origin &lt;branch&gt;</code> - 推送本地分支到远程</li><li><code>git remote -v</code> - 查看远程仓库信息</li><li><code>git fetch</code> - 获取远程仓库更新但不合并</li></ul><h2 id="版本控制"><a href="#版本控制" class="headerlink" title="版本控制"></a>版本控制</h2><ul><li><code>git log</code> - 查看提交历史</li><li><code>git log --oneline</code> - 简洁查看提交历史</li><li><code>git reset --hard &lt;commit_id&gt;</code> - 回退到指定版本</li><li><code>git stash</code> - 暂存工作区修改</li><li><code>git stash pop</code> - 恢复最近的暂存修改</li><li><code>git status</code> - 查看工作区状态</li></ul><h1 id="Windows-CMD常用命令"><a href="#Windows-CMD常用命令" class="headerlink" title="Windows CMD常用命令"></a>Windows CMD常用命令</h1><h2 id="基础操作-2"><a href="#基础操作-2" class="headerlink" title="基础操作"></a>基础操作</h2><ul><li><code>cmd</code> - 打开命令提示符</li><li><code>exit</code> - 退出命令提示符</li><li><code>cls</code> - 清屏</li><li><code>help</code> - 查看帮助信息</li><li><code>command /?</code> - 查看特定命令的帮助</li><li><code>echo &lt;text&gt;</code> - 显示文本</li><li><code>title &lt;text&gt;</code> - 设置命令窗口标题</li><li><code>color &lt;fg&gt;[&lt;bg&gt;]</code> - 设置窗口颜色（前景色和背景色）</li></ul><h2 id="目录操作"><a href="#目录操作" class="headerlink" title="目录操作"></a>目录操作</h2><ul><li><code>cd &lt;directory&gt;</code> - 切换目录</li><li><code>cd ..</code> - 返回上一级目录</li><li><code>cd /</code> - 返回到根目录</li><li><code>dir</code> - 列出当前目录文件和子目录</li><li><code>dir /a</code> - 列出所有文件（包括隐藏文件）</li><li><code>mkdir &lt;directory&gt;</code> - 创建新目录</li><li><code>rmdir &lt;directory&gt;</code> - 删除空目录</li><li><code>rmdir /s /q &lt;directory&gt;</code> - 强制删除非空目录</li><li><code>tree</code> - 显示目录结构树</li></ul><h2 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h2><ul><li><code>copy &lt;source&gt; &lt;destination&gt;</code> - 复制文件</li><li><code>xcopy &lt;source&gt; &lt;destination&gt; /s</code> - 复制目录及子目录</li><li><code>move &lt;source&gt; &lt;destination&gt;</code> - 移动或重命名文件/目录</li><li><code>del &lt;file&gt;</code> - 删除文件</li><li><code>del /s /q &lt;file&gt;</code> - 强制删除文件</li><li><code>type &lt;file&gt;</code> - 显示文件内容</li><li><code>more &lt;file&gt;</code> - 分页显示文件内容</li><li><code>ren &lt;oldname&gt; &lt;newname&gt;</code> - 重命名文件/目录</li><li><code>attrib &lt;file&gt;</code> - 查看或修改文件属性</li><li><code>attrib +h &lt;file&gt;</code> - 隐藏文件</li><li><code>attrib -h &lt;file&gt;</code> - 取消隐藏文件</li></ul><h2 id="系统信息"><a href="#系统信息" class="headerlink" title="系统信息"></a>系统信息</h2><ul><li><code>systeminfo</code> - 显示系统信息</li><li><code>ver</code> - 显示Windows版本</li><li><code>hostname</code> - 显示主机名</li><li><code>ipconfig</code> - 显示网络配置</li><li><code>ipconfig /all</code> - 显示详细网络配置</li><li><code>ping &lt;host&gt;</code> - 测试网络连接</li><li><code>tracert &lt;host&gt;</code> - 跟踪路由</li><li><code>tasklist</code> - 显示运行中的进程</li><li><code>taskkill /pid &lt;pid&gt; /f</code> - 强制结束进程</li></ul><h2 id="网络操作"><a href="#网络操作" class="headerlink" title="网络操作"></a>网络操作</h2><ul><li><code>netstat</code> - 显示网络连接状态</li><li><code>net user</code> - 查看用户账户</li><li><code>net share</code> - 查看共享资源</li><li><code>arp -a</code> - 显示ARP缓存</li><li><code>nslookup &lt;domain&gt;</code> - 域名解析</li></ul><h2 id="其他常用命令-2"><a href="#其他常用命令-2" class="headerlink" title="其他常用命令"></a>其他常用命令</h2><ul><li><code>path</code> - 显示或设置环境变量</li><li><code>set</code> - 显示所有环境变量</li><li><code>set &lt;variable&gt;=&lt;value&gt;</code> - 设置环境变量</li><li><code>date</code> - 显示或设置日期</li><li><code>time</code> - 显示或设置时间</li><li><code>shutdown /s /t 0</code> - 立即关机</li><li><code>shutdown /r /t 0</code> - 立即重启</li><li><code>shutdown /a</code> - 取消关机</li><li><code>sfc /scannow</code> - 系统文件检查</li><li><code>chkdsk</code> - 检查磁盘错误</li><li><code>diskpart</code> - 磁盘分区管理</li><li><code>format &lt;drive&gt;:</code> - 格式化磁盘</li></ul><h1 id="Linux常用命令"><a href="#Linux常用命令" class="headerlink" title="Linux常用命令"></a>Linux常用命令</h1><h2 id="基础操作-3"><a href="#基础操作-3" class="headerlink" title="基础操作"></a>基础操作</h2><ul><li><code>ls</code> - 列出目录内容</li><li><code>ls -la</code> - 列出所有文件（包括隐藏文件）并显示详细信息</li><li><code>cd &lt;directory&gt;</code> - 切换目录</li><li><code>cd ..</code> - 返回上一级目录</li><li><code>cd /</code> - 返回到根目录</li><li><code>pwd</code> - 显示当前工作目录</li><li><code>mkdir &lt;directory&gt;</code> - 创建新目录</li><li><code>rmdir &lt;directory&gt;</code> - 删除空目录</li><li><code>touch &lt;file&gt;</code> - 创建空文件</li><li><code>cp &lt;source&gt; &lt;destination&gt;</code> - 复制文件/目录</li><li><code>mv &lt;source&gt; &lt;destination&gt;</code> - 移动或重命名文件/目录</li><li><code>rm &lt;file&gt;</code> - 删除文件</li><li><code>rm -rf &lt;directory&gt;</code> - 强制删除非空目录</li><li><code>cat &lt;file&gt;</code> - 显示文件内容</li><li><code>more &lt;file&gt;</code> - 分页显示文件内容</li><li><code>less &lt;file&gt;</code> - 交互式查看文件内容</li><li><code>head &lt;file&gt;</code> - 显示文件开头几行</li><li><code>tail &lt;file&gt;</code> - 显示文件结尾几行</li><li><code>tail -f &lt;file&gt;</code> - 实时监控文件更新</li></ul><h2 id="权限管理"><a href="#权限管理" class="headerlink" title="权限管理"></a>权限管理</h2><ul><li><code>chmod &lt;permissions&gt; &lt;file&gt;</code> - 修改文件权限</li><li><code>chmod +x &lt;file&gt;</code> - 给文件添加执行权限</li><li><code>chown &lt;user&gt;:&lt;group&gt; &lt;file&gt;</code> - 更改文件所有者和组</li><li><code>chgrp &lt;group&gt; &lt;file&gt;</code> - 更改文件所属组</li><li><code>sudo &lt;command&gt;</code> - 以管理员权限执行命令</li><li><code>su - &lt;user&gt;</code> - 切换用户</li></ul><h2 id="系统管理"><a href="#系统管理" class="headerlink" title="系统管理"></a>系统管理</h2><ul><li><code>top</code> - 显示系统进程信息</li><li><code>htop</code> - 交互式进程查看器（需要安装）</li><li><code>ps</code> - 显示当前进程</li><li><code>ps aux</code> - 显示所有进程详细信息</li><li><code>kill &lt;pid&gt;</code> - 终止进程</li><li><code>kill -9 &lt;pid&gt;</code> - 强制终止进程</li><li><code>df -h</code> - 显示磁盘空间使用情况</li><li><code>du -sh &lt;directory&gt;</code> - 显示目录大小</li><li><code>free -h</code> - 显示内存使用情况</li><li><code>uname -a</code> - 显示系统信息</li><li><code>hostname</code> - 显示主机名</li><li><code>date</code> - 显示或设置系统日期和时间</li><li><code>cal</code> - 显示日历</li><li><code>whoami</code> - 显示当前用户名</li><li><code>users</code> - 显示当前登录的用户</li></ul><h2 id="网络操作-1"><a href="#网络操作-1" class="headerlink" title="网络操作"></a>网络操作</h2><ul><li><code>ping &lt;host&gt;</code> - 测试网络连接</li><li><code>ping -c 4 &lt;host&gt;</code> - 发送4个ping包后停止</li><li><code>ifconfig</code> - 显示网络接口信息</li><li><code>ip addr</code> - 显示网络接口信息（新版）</li><li><code>netstat</code> - 显示网络连接状态</li><li><code>netstat -tuln</code> - 显示监听的端口</li><li><code>ss</code> - 显示网络连接状态（替代netstat）</li><li><code>curl &lt;url&gt;</code> - 发送HTTP请求</li><li><code>wget &lt;url&gt;</code> - 下载文件</li><li><code>scp &lt;source&gt; &lt;destination&gt;</code> - 安全复制文件</li><li><code>ssh &lt;user&gt;@&lt;host&gt;</code> - 远程登录</li></ul><h2 id="包管理"><a href="#包管理" class="headerlink" title="包管理"></a>包管理</h2><ul><li><p><strong>Debian/Ubuntu</strong></p><ul><li><code>sudo apt update</code> - 更新软件包列表</li><li><code>sudo apt upgrade</code> - 升级所有软件包</li><li><code>sudo apt install &lt;package&gt;</code> - 安装软件包</li><li><code>sudo apt remove &lt;package&gt;</code> - 卸载软件包</li><li><code>sudo apt autoremove</code> - 自动移除不再需要的依赖</li><li><code>sudo apt search &lt;keyword&gt;</code> - 搜索软件包</li></ul></li><li><p><strong>CentOS/RHEL</strong></p><ul><li><code>sudo yum update</code> - 更新软件包</li><li><code>sudo yum install &lt;package&gt;</code> - 安装软件包</li><li><code>sudo yum remove &lt;package&gt;</code> - 卸载软件包</li><li><code>sudo yum search &lt;keyword&gt;</code> - 搜索软件包</li></ul></li><li><p><strong>Fedora</strong></p><ul><li><code>sudo dnf update</code> - 更新软件包</li><li><code>sudo dnf install &lt;package&gt;</code> - 安装软件包</li><li><code>sudo dnf remove &lt;package&gt;</code> - 卸载软件包</li></ul></li></ul><h2 id="文件搜索与处理"><a href="#文件搜索与处理" class="headerlink" title="文件搜索与处理"></a>文件搜索与处理</h2><ul><li><code>find &lt;directory&gt; -name &lt;pattern&gt;</code> - 按名称搜索文件</li><li><code>grep &lt;pattern&gt; &lt;file&gt;</code> - 在文件中搜索字符串</li><li><code>grep -r &lt;pattern&gt; &lt;directory&gt;</code> - 递归搜索目录中的字符串</li><li><code>sed &#39;s/&lt;old&gt;/&lt;new&gt;/g&#39; &lt;file&gt;</code> - 替换文件中的字符串</li><li><code>awk &#39;&#123;print $1&#125;&#39; &lt;file&gt;</code> - 处理文本文件中的列</li><li><code>sort &lt;file&gt;</code> - 排序文件内容</li><li><code>uniq</code> - 去除重复行</li><li><code>diff &lt;file1&gt; &lt;file2&gt;</code> - 比较两个文件的差异</li></ul><h2 id="压缩与解压"><a href="#压缩与解压" class="headerlink" title="压缩与解压"></a>压缩与解压</h2><ul><li><code>tar -cvf &lt;archive&gt;.tar &lt;files&gt;</code> - 创建tar归档</li><li><code>tar -xvf &lt;archive&gt;.tar</code> - 解压tar归档</li><li><code>tar -czvf &lt;archive&gt;.tar.gz &lt;files&gt;</code> - 创建gzip压缩的tar归档</li><li><code>tar -xzvf &lt;archive&gt;.tar.gz</code> - 解压gzip压缩的tar归档</li><li><code>tar -cjvf &lt;archive&gt;.tar.bz2 &lt;files&gt;</code> - 创建bzip2压缩的tar归档</li><li><code>tar -xjvf &lt;archive&gt;.tar.bz2</code> - 解压bzip2压缩的tar归档</li><li><code>zip &lt;archive&gt;.zip &lt;files&gt;</code> - 创建zip压缩文件</li><li><code>unzip &lt;archive&gt;.zip</code> - 解压zip压缩文件</li></ul><h2 id="其他常用命令-3"><a href="#其他常用命令-3" class="headerlink" title="其他常用命令"></a>其他常用命令</h2><ul><li><code>echo &lt;text&gt;</code> - 显示文本</li><li><code>alias &lt;name&gt;=&lt;command&gt;</code> - 创建命令别名</li><li><code>history</code> - 显示命令历史</li><li><code>clear</code> - 清屏</li><li><code>man &lt;command&gt;</code> - 查看命令手册</li><li><code>which &lt;command&gt;</code> - 显示命令的路径</li><li><code>whereis &lt;command&gt;</code> - 显示命令及其相关文件的路径</li><li><code>whatis &lt;command&gt;</code> - 显示命令的简要描述</li><li><code>exit</code> - 退出终端</li></ul><h1 id="框架特定命令"><a href="#框架特定命令" class="headerlink" title="框架特定命令"></a>框架特定命令</h1><p>以下是常用开发框架的完整执行语句，涵盖从项目创建到部署的全流程。</p><h2 id="Vue-js"><a href="#Vue-js" class="headerlink" title="Vue.js"></a>Vue.js</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装Vue CLI</span></span><br><span class="line">npm install -g @vue/cli</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建新项目</span></span><br><span class="line">vue create project-name</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用Vue 3 Vite创建项目</span></span><br><span class="line">npm create vite@latest project-name -- --template vue</span><br><span class="line"><span class="built_in">cd</span> project-name</span><br><span class="line">npm install</span><br><span class="line">npm run dev</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建生产版本</span></span><br><span class="line">npm run build</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装路由</span></span><br><span class="line">npm install vue-router@4</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装状态管理</span></span><br><span class="line">npm install pinia</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装Axios</span></span><br><span class="line">npm install axios</span><br></pre></td></tr></table></figure><h2 id="Spring-Boot"><a href="#Spring-Boot" class="headerlink" title="Spring Boot"></a>Spring Boot</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用Spring Initializr创建项目</span></span><br><span class="line">curl https://start.spring.io/starter.zip -d dependencies=web,data-jpa -d language=java -d <span class="built_in">type</span>=maven-project -o demo.zip</span><br><span class="line">unzip demo.zip</span><br><span class="line"><span class="built_in">cd</span> demo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用Maven构建</span></span><br><span class="line">./mvnw clean package</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行应用</span></span><br><span class="line">./mvnw spring-boot:run</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加依赖</span></span><br><span class="line"><span class="comment"># 在pom.xml中添加依赖后执行</span></span><br><span class="line">./mvnw dependency:resolve</span><br></pre></td></tr></table></figure><h2 id="Vite"><a href="#Vite" class="headerlink" title="Vite"></a>Vite</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装Vite (通常无需全局安装)</span></span><br><span class="line">npm create vite@latest</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建特定框架的项目</span></span><br><span class="line">npm create vite@latest my-vue-app -- --template vue</span><br><span class="line">npm create vite@latest my-react-app -- --template react</span><br><span class="line">npm create vite@latest my-vanilla-app -- --template vanilla</span><br><span class="line">npm create vite@latest my-svelte-app -- --template svelte</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入项目目录</span></span><br><span class="line"><span class="built_in">cd</span> my-vue-app</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line">npm install</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动开发服务器</span></span><br><span class="line">npm run dev</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建生产版本</span></span><br><span class="line">npm run build</span><br><span class="line"></span><br><span class="line"><span class="comment"># 预览构建结果</span></span><br><span class="line">npm run preview</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置Vite</span></span><br><span class="line"><span class="comment"># 编辑vite.config.js文件自定义构建配置</span></span><br></pre></td></tr></table></figure><h2 id="Docker常用命令"><a href="#Docker常用命令" class="headerlink" title="Docker常用命令"></a>Docker常用命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 构建镜像</span></span><br><span class="line">docker build -t my-image .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行容器</span></span><br><span class="line">docker run -p 8080:80 my-image</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行容器(后台模式)</span></span><br><span class="line">docker run -d -p 8080:80 my-image</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看运行中的容器</span></span><br><span class="line">docker ps</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止容器</span></span><br><span class="line">docker stop &lt;container_id&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除容器</span></span><br><span class="line">docker <span class="built_in">rm</span> &lt;container_id&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看本地镜像</span></span><br><span class="line">docker images</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除镜像</span></span><br><span class="line">docker rmi &lt;image_id&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拉取镜像</span></span><br><span class="line">docker pull &lt;image_name&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用Docker Compose</span></span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><h1 id="数据库常用命令"><a href="#数据库常用命令" class="headerlink" title="数据库常用命令"></a>数据库常用命令</h1><h2 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装MySQL (Windows使用安装程序，Linux使用包管理器)</span></span><br><span class="line"><span class="comment"># Ubuntu/Debian</span></span><br><span class="line"><span class="built_in">sudo</span> apt update</span><br><span class="line"><span class="built_in">sudo</span> apt install mysql-server</span><br><span class="line"></span><br><span class="line"><span class="comment"># CentOS/RHEL</span></span><br><span class="line"><span class="built_in">sudo</span> yum install mysql-server</span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> systemctl start mysqld</span><br><span class="line"><span class="built_in">sudo</span> systemctl <span class="built_in">enable</span> mysqld</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化安全设置 (首次安装后)</span></span><br><span class="line"><span class="built_in">sudo</span> mysql_secure_installation</span><br><span class="line"></span><br><span class="line"><span class="comment"># 登录MySQL</span></span><br><span class="line">mysql -u root -p</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建数据库</span></span><br><span class="line">CREATE DATABASE mydb;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建用户并授权</span></span><br><span class="line">CREATE USER <span class="string">&#x27;myuser&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED BY <span class="string">&#x27;mypassword&#x27;</span>;</span><br><span class="line">GRANT ALL PRIVILEGES ON mydb.* TO <span class="string">&#x27;myuser&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span>;</span><br><span class="line">FLUSH PRIVILEGES;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 备份数据库</span></span><br><span class="line">mysqldump -u root -p mydb &gt; mydb_backup.sql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 恢复数据库</span></span><br><span class="line">mysql -u root -p mydb &lt; mydb_backup.sql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看所有数据库</span></span><br><span class="line">SHOW DATABASES;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用数据库</span></span><br><span class="line">USE mydb;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看所有表</span></span><br><span class="line">SHOW TABLES;</span><br></pre></td></tr></table></figure><h2 id="PostgreSQL"><a href="#PostgreSQL" class="headerlink" title="PostgreSQL"></a>PostgreSQL</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装PostgreSQL</span></span><br><span class="line"><span class="comment"># Ubuntu/Debian</span></span><br><span class="line"><span class="built_in">sudo</span> apt update</span><br><span class="line"><span class="built_in">sudo</span> apt install postgresql postgresql-contrib</span><br><span class="line"></span><br><span class="line"><span class="comment"># CentOS/RHEL</span></span><br><span class="line"><span class="built_in">sudo</span> yum install postgresql-server</span><br><span class="line"><span class="built_in">sudo</span> postgresql-setup initdb</span><br><span class="line"><span class="built_in">sudo</span> systemctl start postgresql</span><br><span class="line"><span class="built_in">sudo</span> systemctl <span class="built_in">enable</span> postgresql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 登录PostgreSQL</span></span><br><span class="line"><span class="comment"># 切换到postgres用户</span></span><br><span class="line"><span class="built_in">sudo</span> -i -u postgres</span><br><span class="line"><span class="comment"># 登录数据库</span></span><br><span class="line">psql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建数据库</span></span><br><span class="line">CREATE DATABASE mydb;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建用户并授权</span></span><br><span class="line">CREATE USER myuser WITH PASSWORD <span class="string">&#x27;mypassword&#x27;</span>;</span><br><span class="line">GRANT ALL PRIVILEGES ON DATABASE mydb TO myuser;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 备份数据库</span></span><br><span class="line">pg_dump -U myuser mydb &gt; mydb_backup.sql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 恢复数据库</span></span><br><span class="line">psql -U myuser mydb &lt; mydb_backup.sql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看所有数据库</span></span><br><span class="line">\l</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用数据库</span></span><br><span class="line">\c mydb</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看所有表</span></span><br><span class="line">\dt</span><br></pre></td></tr></table></figure><h2 id="MongoDB"><a href="#MongoDB" class="headerlink" title="MongoDB"></a>MongoDB</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装MongoDB (需要添加MongoDB仓库)</span></span><br><span class="line"><span class="comment"># Ubuntu/Debian</span></span><br><span class="line"><span class="built_in">sudo</span> apt update</span><br><span class="line"><span class="built_in">sudo</span> apt install -y mongodb-org</span><br><span class="line"></span><br><span class="line"><span class="comment"># CentOS/RHEL</span></span><br><span class="line"><span class="built_in">sudo</span> yum install -y mongodb-org</span><br><span class="line"><span class="built_in">sudo</span> systemctl start mongod</span><br><span class="line"><span class="built_in">sudo</span> systemctl <span class="built_in">enable</span> mongod</span><br><span class="line"></span><br><span class="line"><span class="comment"># 登录MongoDB</span></span><br><span class="line">mongo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示所有数据库</span></span><br><span class="line">show dbs</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建/使用数据库</span></span><br><span class="line">use mydb</span><br><span class="line"></span><br><span class="line"><span class="comment"># 插入数据</span></span><br><span class="line">db.mycollection.insertOne(&#123;name: <span class="string">&quot;test&quot;</span>, value: 1&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询数据</span></span><br><span class="line">db.mycollection.find()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 备份数据库</span></span><br><span class="line">mongodump --db mydb --out /path/to/backup</span><br><span class="line"></span><br><span class="line"><span class="comment"># 恢复数据库</span></span><br><span class="line">mongorestore --db mydb /path/to/backup/mydb</span><br></pre></td></tr></table></figure><h1 id="数据库操作自动化脚本"><a href="#数据库操作自动化脚本" class="headerlink" title="数据库操作自动化脚本"></a>数据库操作自动化脚本</h1><h2 id="MySQL备份脚本-mysql-backup-bat-Windows"><a href="#MySQL备份脚本-mysql-backup-bat-Windows" class="headerlink" title="MySQL备份脚本 (mysql-backup.bat) - Windows"></a>MySQL备份脚本 (mysql-backup.bat) - Windows</h2><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="comment">REM MySQL数据库备份脚本</span></span><br><span class="line"><span class="comment">REM 需要预先安装MySQL并配置环境变量</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> <span class="built_in">DATE</span>=<span class="variable">%date:~0,4%</span><span class="variable">%date:~5,2%</span><span class="variable">%date:~8,2%</span></span><br><span class="line"><span class="built_in">set</span> <span class="built_in">TIME</span>=<span class="variable">%time:~0,2%</span><span class="variable">%time:~3,2%</span><span class="variable">%time:~6,2%</span></span><br><span class="line"><span class="built_in">set</span> BACKUP_DIR=D:\db_backup</span><br><span class="line"><span class="built_in">set</span> DB_NAME=mydb</span><br><span class="line"><span class="built_in">set</span> DB_USER=root</span><br><span class="line"><span class="built_in">set</span> DB_PASS=mypassword</span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">REM 创建备份目录</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">exist</span> <span class="variable">%BACKUP_DIR%</span> <span class="built_in">mkdir</span> <span class="variable">%BACKUP_DIR%</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">REM 执行备份</span></span><br><span class="line">mysqldump -u <span class="variable">%DB_USER%</span> -p<span class="variable">%DB_PASS%</span> <span class="variable">%DB_NAME%</span> &gt; <span class="variable">%BACKUP_DIR%</span>\<span class="variable">%DB_NAME%</span>_<span class="variable">%DATE%</span>_<span class="variable">%TIME%</span>.sql</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="variable">%ERRORLEVEL%</span> <span class="keyword">EQU</span> <span class="number">0</span> (</span><br><span class="line">    <span class="built_in">echo</span> 备份成功: <span class="variable">%BACKUP_DIR%</span>\<span class="variable">%DB_NAME%</span>_<span class="variable">%DATE%</span>_<span class="variable">%TIME%</span>.sql</span><br><span class="line">) <span class="keyword">else</span> (</span><br><span class="line">    <span class="built_in">echo</span> 备份失败</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="built_in">pause</span></span><br></pre></td></tr></table></figure><p><strong>使用说明:</strong></p><ol><li>将上述代码保存为<code>mysql-backup.bat</code></li><li>修改脚本中的数据库名称、用户名、密码和备份目录</li><li>双击运行脚本或在命令行中执行</li><li>备份文件将保存在指定目录，文件名包含时间戳</li></ol><h2 id="PostgreSQL自动备份脚本-pg-backup-sh-Linux-Mac"><a href="#PostgreSQL自动备份脚本-pg-backup-sh-Linux-Mac" class="headerlink" title="PostgreSQL自动备份脚本 (pg-backup.sh) - Linux/Mac"></a>PostgreSQL自动备份脚本 (pg-backup.sh) - Linux/Mac</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># PostgreSQL数据库备份脚本</span></span><br><span class="line"><span class="comment"># 需要预先安装PostgreSQL</span></span><br><span class="line"></span><br><span class="line">DATE=$(<span class="built_in">date</span> +%Y%m%d_%H%M%S)</span><br><span class="line">BACKUP_DIR=/path/to/backup</span><br><span class="line">DB_NAME=mydb</span><br><span class="line">DB_USER=myuser</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建备份目录</span></span><br><span class="line"><span class="built_in">mkdir</span> -p <span class="variable">$BACKUP_DIR</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行备份</span></span><br><span class="line">pg_dump -U <span class="variable">$DB_USER</span> <span class="variable">$DB_NAME</span> &gt; <span class="variable">$BACKUP_DIR</span>/$DB_NAME_<span class="variable">$DATE</span>.sql</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ $? -eq 0 ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;备份成功: <span class="variable">$BACKUP_DIR</span>/$DB_NAME_<span class="variable">$DATE</span>.sql&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;备份失败&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p><strong>使用说明:</strong></p><ol><li>将上述代码保存为<code>pg-backup.sh</code></li><li>赋予执行权限: <code>chmod +x pg-backup.sh</code></li><li>修改脚本中的数据库名称、用户名和备份目录</li><li>执行脚本: <code>./pg-backup.sh</code></li><li>可添加到crontab实现定时备份: <code>crontab -e</code> 然后添加 <code>0 2 * * * /path/to/pg-backup.sh</code> (每天凌晨2点执行)</li></ol><h2 id="自动化开发流脚本"><a href="#自动化开发流脚本" class="headerlink" title="自动化开发流脚本"></a>自动化开发流脚本</h2><h3 id="Windows开发环境自动化脚本-dev-setup-bat"><a href="#Windows开发环境自动化脚本-dev-setup-bat" class="headerlink" title="Windows开发环境自动化脚本 (dev-setup.bat)"></a>Windows开发环境自动化脚本 (dev-setup.bat)</h3><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="comment">REM 开发环境自动化设置脚本</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">REM 创建项目目录</span></span><br><span class="line"><span class="built_in">mkdir</span> my-dev-project</span><br><span class="line"><span class="built_in">cd</span> my-dev-project</span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">REM 初始化Git仓库</span></span><br><span class="line">git init</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> # 项目说明 &gt; README.<span class="built_in">md</span></span><br><span class="line">git add README.<span class="built_in">md</span></span><br><span class="line">git commit -m &quot;初始化项目&quot;</span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">REM 初始化前端项目 (Vue + Vite)</span></span><br><span class="line">npm create vite@latest frontend -- --template vue</span><br><span class="line"><span class="built_in">cd</span> frontend</span><br><span class="line">npm install</span><br><span class="line">npm install vue-router@<span class="number">4</span> pinia axios</span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">REM 创建后端项目目录</span></span><br><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line"><span class="built_in">mkdir</span> backend</span><br><span class="line"><span class="built_in">cd</span> backend</span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">REM 初始化Node.js后端项目</span></span><br><span class="line">npm init -y</span><br><span class="line">npm install express cors dotenv</span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">REM 创建基础文件</span></span><br><span class="line"><span class="built_in">echo</span> const express = require(&#x27;express&#x27;); &gt; app.js</span><br><span class="line"><span class="built_in">echo</span> const app = express(); &gt;&gt; app.js</span><br><span class="line"><span class="built_in">echo</span> const port = process.env.PORT || <span class="number">3000</span>; &gt;&gt; app.js</span><br><span class="line"><span class="built_in">echo</span> &gt;&gt; app.js</span><br><span class="line"><span class="built_in">echo</span> app.get(&#x27;/&#x27;, (req, res) =&gt; &#123; &gt;&gt; app.js</span><br><span class="line"><span class="built_in">echo</span>   res.send(&#x27;Hello World!&#x27;); &gt;&gt; app.js</span><br><span class="line"><span class="built_in">echo</span> &#125;); &gt;&gt; app.js</span><br><span class="line"><span class="built_in">echo</span> &gt;&gt; app.js</span><br><span class="line"><span class="built_in">echo</span> app.listen(port, () =&gt; &#123; &gt;&gt; app.js</span><br><span class="line"><span class="built_in">echo</span>   console.log(`Server running on port $&#123;port&#125;`); &gt;&gt; app.js</span><br><span class="line"><span class="built_in">echo</span> &#125;); &gt;&gt; app.js</span><br><span class="line"><span class="built_in">echo</span> &gt;&gt; app.js</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> PORT=<span class="number">3000</span> &gt; .env</span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">REM 返回项目根目录</span></span><br><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">REM 创建Docker Compose配置</span></span><br><span class="line"><span class="built_in">echo</span> version: &#x27;<span class="number">3</span>&#x27; &gt; docker-compose.yml</span><br><span class="line"><span class="built_in">echo</span> services: &gt;&gt; docker-compose.yml</span><br><span class="line"><span class="built_in">echo</span>   frontend: &gt;&gt; docker-compose.yml</span><br><span class="line"><span class="built_in">echo</span>     build: ./frontend &gt;&gt; docker-compose.yml</span><br><span class="line"><span class="built_in">echo</span>     ports: &gt;&gt; docker-compose.yml</span><br><span class="line"><span class="built_in">echo</span>       - &quot;<span class="number">8080</span>:<span class="number">80</span>&quot; &gt;&gt; docker-compose.yml</span><br><span class="line"><span class="built_in">echo</span>   backend: &gt;&gt; docker-compose.yml</span><br><span class="line"><span class="built_in">echo</span>     build: ./backend &gt;&gt; docker-compose.yml</span><br><span class="line"><span class="built_in">echo</span>     ports: &gt;&gt; docker-compose.yml</span><br><span class="line"><span class="built_in">echo</span>       - &quot;<span class="number">3000</span>:<span class="number">3000</span>&quot; &gt;&gt; docker-compose.yml</span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">REM 完成设置</span></span><br><span class="line"><span class="built_in">echo</span> 开发环境设置完成！</span><br><span class="line"><span class="built_in">echo</span> 项目结构已创建，包含前端(Vue+Vite)和后端(Node.js+Express)</span><br><span class="line"><span class="built_in">echo</span> 可使用 &#x27;docker-compose up -d&#x27; 启动服务</span><br><span class="line"></span><br><span class="line"><span class="built_in">pause</span></span><br></pre></td></tr></table></figure><h3 id="开发工作流自动化脚本-dev-flow-bat"><a href="#开发工作流自动化脚本-dev-flow-bat" class="headerlink" title="开发工作流自动化脚本 (dev-flow.bat)"></a>开发工作流自动化脚本 (dev-flow.bat)</h3><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="comment">REM 开发工作流自动化脚本</span></span><br><span class="line"></span><br><span class="line">:menu</span><br><span class="line"><span class="built_in">cls</span></span><br><span class="line"><span class="built_in">echo</span> 开发工作流自动化工具</span><br><span class="line"> <span class="built_in">echo</span> ------------------------</span><br><span class="line"><span class="built_in">echo</span> <span class="number">1</span>. 启动开发服务器</span><br><span class="line"> <span class="built_in">echo</span> <span class="number">2</span>. 构建项目</span><br><span class="line"> <span class="built_in">echo</span> <span class="number">3</span>. 运行测试</span><br><span class="line"> <span class="built_in">echo</span> <span class="number">4</span>. 提交代码</span><br><span class="line"> <span class="built_in">echo</span> <span class="number">5</span>. 部署到测试环境</span><br><span class="line"> <span class="built_in">echo</span> <span class="number">6</span>. 退出</span><br><span class="line"> <span class="built_in">echo</span> ------------------------</span><br><span class="line"><span class="built_in">set</span> /p choice=请选择操作: </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="variable">%choice%</span>==<span class="number">1</span> <span class="keyword">goto</span> <span class="built_in">start</span>-dev</span><br><span class="line"><span class="keyword">if</span> <span class="variable">%choice%</span>==<span class="number">2</span> <span class="keyword">goto</span> build</span><br><span class="line"><span class="keyword">if</span> <span class="variable">%choice%</span>==<span class="number">3</span> <span class="keyword">goto</span> test</span><br><span class="line"><span class="keyword">if</span> <span class="variable">%choice%</span>==<span class="number">4</span> <span class="keyword">goto</span> commit</span><br><span class="line"><span class="keyword">if</span> <span class="variable">%choice%</span>==<span class="number">5</span> <span class="keyword">goto</span> deploy-test</span><br><span class="line"><span class="keyword">if</span> <span class="variable">%choice%</span>==<span class="number">6</span> <span class="keyword">goto</span> <span class="keyword">exit</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> 无效的选择，请重试。</span><br><span class="line"><span class="built_in">pause</span></span><br><span class="line"><span class="keyword">goto</span> menu</span><br><span class="line"></span><br><span class="line">:<span class="built_in">start</span>-dev</span><br><span class="line"> <span class="built_in">echo</span> 启动前端开发服务器...</span><br><span class="line"> <span class="built_in">start</span> <span class="built_in">cmd</span> /k &quot;<span class="built_in">cd</span> frontend &amp;&amp; npm run dev&quot;</span><br><span class="line"> <span class="built_in">echo</span> 启动后端开发服务器...</span><br><span class="line"> <span class="built_in">start</span> <span class="built_in">cmd</span> /k &quot;<span class="built_in">cd</span> backend &amp;&amp; node app.js&quot;</span><br><span class="line"> <span class="built_in">echo</span> 开发服务器已启动。</span><br><span class="line"><span class="built_in">pause</span></span><br><span class="line"><span class="keyword">goto</span> menu</span><br><span class="line"></span><br><span class="line">:build</span><br><span class="line"> <span class="built_in">echo</span> 构建前端项目...</span><br><span class="line"> <span class="built_in">cd</span> frontend</span><br><span class="line"> npm run build</span><br><span class="line"> <span class="keyword">if</span> <span class="variable">%ERRORLEVEL%</span> <span class="keyword">EQU</span> <span class="number">0</span> (</span><br><span class="line">  <span class="built_in">echo</span> 前端构建成功！</span><br><span class="line"> ) <span class="keyword">else</span> (</span><br><span class="line">  <span class="built_in">echo</span> 前端构建失败！</span><br><span class="line">  <span class="built_in">pause</span></span><br><span class="line">  <span class="keyword">goto</span> menu</span><br><span class="line"> )</span><br><span class="line"> <span class="built_in">cd</span> ..</span><br><span class="line"> <span class="built_in">echo</span> 构建完成。</span><br><span class="line"><span class="built_in">pause</span></span><br><span class="line"><span class="keyword">goto</span> menu</span><br><span class="line"></span><br><span class="line">:test</span><br><span class="line"> <span class="built_in">echo</span> 运行前端测试...</span><br><span class="line"> <span class="built_in">cd</span> frontend</span><br><span class="line"> npm test</span><br><span class="line"> <span class="built_in">cd</span> ..</span><br><span class="line"> <span class="built_in">echo</span> 运行后端测试...</span><br><span class="line"> <span class="built_in">cd</span> backend</span><br><span class="line"> npm test</span><br><span class="line"> <span class="built_in">cd</span> ..</span><br><span class="line"><span class="built_in">pause</span></span><br><span class="line"><span class="keyword">goto</span> menu</span><br><span class="line"></span><br><span class="line">:commit</span><br><span class="line"> <span class="built_in">set</span> /p message=请输入提交信息: </span><br><span class="line"> git add .</span><br><span class="line"> git commit -m &quot;<span class="variable">%message%</span>&quot;</span><br><span class="line"> <span class="built_in">echo</span> 代码已提交。</span><br><span class="line"><span class="built_in">pause</span></span><br><span class="line"><span class="keyword">goto</span> menu</span><br><span class="line"></span><br><span class="line">:deploy-test</span><br><span class="line"> <span class="built_in">echo</span> 部署到测试环境...</span><br><span class="line"><span class="comment"> REM 这里添加测试环境部署命令</span></span><br><span class="line"> <span class="built_in">echo</span> 部署完成。</span><br><span class="line"><span class="built_in">pause</span></span><br><span class="line"><span class="keyword">goto</span> menu</span><br><span class="line"></span><br><span class="line">:<span class="keyword">exit</span></span><br><span class="line"> <span class="built_in">echo</span> 退出程序。</span><br><span class="line"> <span class="keyword">exit</span> /b <span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="React"><a href="#React" class="headerlink" title="React"></a>React</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建React应用</span></span><br><span class="line">npx create-react-app my-app</span><br><span class="line"><span class="built_in">cd</span> my-app</span><br><span class="line">npm start</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用Vite创建React应用</span></span><br><span class="line">npm create vite@latest my-react-app -- --template react</span><br><span class="line"><span class="built_in">cd</span> my-react-app</span><br><span class="line">npm install</span><br><span class="line">npm run dev</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装路由</span></span><br><span class="line">npm install react-router-dom</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装状态管理</span></span><br><span class="line">npm install redux react-redux</span><br><span class="line">npm install @reduxjs/toolkit</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建生产版本</span></span><br><span class="line">npm run build</span><br></pre></td></tr></table></figure><h2 id="Django"><a href="#Django" class="headerlink" title="Django"></a>Django</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装Django</span></span><br><span class="line">pip install django</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建项目</span></span><br><span class="line">django-admin startproject mysite</span><br><span class="line"><span class="built_in">cd</span> mysite</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建应用</span></span><br><span class="line">python manage.py startapp myapp</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据库迁移</span></span><br><span class="line">python manage.py makemigrations</span><br><span class="line">python manage.py migrate</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建超级用户</span></span><br><span class="line">python manage.py createsuperuser</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行开发服务器</span></span><br><span class="line">python manage.py runserver</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装REST框架</span></span><br><span class="line">pip install djangorestframework</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 结构速查 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 自动化部署和命令脚本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端学习【2】</title>
      <link href="/2025/07/22/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E3%80%902%E3%80%91/"/>
      <url>/2025/07/22/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E3%80%902%E3%80%91/</url>
      
        <content type="html"><![CDATA[<blockquote><p>开头我先来两嗓子，这几篇的内容有点过多了，所以这部分是由几篇文章共同完成的，避免文章过长，影响阅读体验。</p></blockquote><h1 id="xml"><a href="#xml" class="headerlink" title="xml"></a>xml</h1><h2 id="什么是XML"><a href="#什么是XML" class="headerlink" title="什么是XML"></a>什么是XML</h2><p>XML 指可扩展标记语言（eXtensible Markup Language）：XML是一种用于描述数据的标记语言。</p><h2 id="XML有什么用"><a href="#XML有什么用" class="headerlink" title="XML有什么用"></a>XML有什么用</h2><p>XML主要的作用：<br>1.用来保存数据，而且这些数据具有自我描述性。<br>2.可以作为项目或者模块的配置文件。<br>3.还可以作为网络传输的格式（JSON为主）。</p><h2 id="XML语法"><a href="#XML语法" class="headerlink" title="XML语法"></a>XML语法</h2><p>1.开始标签和结束标签。<br>2.注释<br>3.版本信息<br>4.根标签<br>5.标签名和属性<br>6.编码</p><h2 id="xmL文档说明"><a href="#xmL文档说明" class="headerlink" title="xmL文档说明"></a>xmL文档说明</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- xml声明</span></span><br><span class="line"><span class="comment">     version版本号</span></span><br><span class="line"><span class="comment">     encoding xml的文件编码</span></span><br><span class="line"><span class="comment">     需要注意 &lt;?xml 要连着一起写，否则报错</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">books</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  book标签描述的是一本图书信息</span></span><br><span class="line"><span class="comment">          id属性 描述的是图书编号</span></span><br><span class="line"><span class="comment">          name标签 描述的是图书的名称</span></span><br><span class="line"><span class="comment">          author标签 描述的是作者信息</span></span><br><span class="line"><span class="comment">          price标签 描述的图书的价格</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">book</span> <span class="attr">id</span>=<span class="string">&quot;book1&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>java编程思想<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">author</span>&gt;</span>詹姆斯<span class="tag">&lt;/<span class="name">author</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">price</span>&gt;</span>39.9<span class="tag">&lt;/<span class="name">price</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">book</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">book</span> <span class="attr">id</span>=<span class="string">&quot;book2&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>数据结构与算法<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">author</span>&gt;</span>詹姆斯<span class="tag">&lt;/<span class="name">author</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">price</span>&gt;</span>99.9<span class="tag">&lt;/<span class="name">price</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">book</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 单标签 </span></span><br><span class="line"><span class="comment">    &lt;book id=&quot;book3&quot; name=&quot;python&quot; author=&quot;詹姆斯&quot; price=&quot;59.9&quot;/&gt;</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">books</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="文本区域-CDATA"><a href="#文本区域-CDATA" class="headerlink" title="文本区域(CDATA)"></a>文本区域(CDATA)</h2><p>CDATA语法可以告诉xml解析器，CDATA里面的文本内容，只是纯文本，不需要XML语法解析。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;![CDATA[</span><br><span class="line">           &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;hell,xml&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span><br><span class="line">   ]]&gt;</span><br></pre></td></tr></table></figure></p><h1 id="XML解析"><a href="#XML解析" class="headerlink" title="XML解析"></a>XML解析</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>XML解析就是从XML获取到数据<br><strong>常见的解析思想</strong><br>DOM文档对象模型：就是把文档的各个组成部分看做成对应的对象。把XML文件全部加载到内存，在内存中形成一个树形结构，再获取对应的值。<br>早期JDK为我们提供了两种XML解析技术DML和SAX。<br><strong>面试题：解析XML的方式</strong></p><ul><li>DOM解析：将标记语言一次性加载进内存，再内存中形成一颗DOM树。<ul><li>优点：操作方便，可以对文档进行CRUD的所有操作。</li><li>缺点：占内存。</li></ul></li><li>SAX解析：逐行读取，基于事件驱动。<ul><li>优点：不占内存。</li><li>缺点：只能读取，不能增删改。</li></ul></li></ul><h2 id="常用的解析工具包"><a href="#常用的解析工具包" class="headerlink" title="常用的解析工具包"></a>常用的解析工具包</h2><p>jsoup：可以解析XML，更多用于解析HTML，用于网络爬虫<br>jdom：Jdom组织提供的工具包<br>dom4j：dom4j组织提供的工具包，使用的较多。</p><h1 id="DOM4J"><a href="#DOM4J" class="headerlink" title="DOM4J"></a>DOM4J</h1><p>属于第三方公司的技术，我们需要使用dom4j，就需要再官网下载。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.先加载xml文件创建document对象</span><br><span class="line">2.通过document对象拿到根元素对象</span><br><span class="line">3.通过根元素.elements(标签名)，可以返回一个集合，指定的标签名的元素对象</span><br><span class="line">4.找到你需要修改，删除的资源，进行操作</span><br></pre></td></tr></table></figure><p><strong>案例</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.iweb.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.dom4j.Document;</span><br><span class="line"><span class="keyword">import</span> org.dom4j.Element;</span><br><span class="line"><span class="keyword">import</span> org.dom4j.io.SAXReader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test1</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span>  Exception&#123;</span><br><span class="line">        <span class="comment">// 要创建一个document对象，需要我们事先创建一个SAXReader对象</span></span><br><span class="line">        SAXReader reader=<span class="keyword">new</span> <span class="title class_">SAXReader</span>();</span><br><span class="line">        <span class="comment">// reader对象用于读取xml文件，然后返回一个document对象</span></span><br><span class="line">        <span class="type">Document</span> <span class="variable">document</span> <span class="operator">=</span> reader.read(<span class="string">&quot;src/books.xml&quot;</span>);</span><br><span class="line">        <span class="comment">// 通过document对象拿到xml的根元素对象</span></span><br><span class="line">        <span class="type">Element</span> <span class="variable">root</span> <span class="operator">=</span> document.getRootElement();</span><br><span class="line">        <span class="comment">// 将对象元素对象转换String对象</span></span><br><span class="line">        <span class="comment">//System.out.println(root.asXML());</span></span><br><span class="line">        <span class="comment">// 通过根元素对象，获取所有的book标签对象</span></span><br><span class="line">        <span class="comment">// root.elements(标签名)  它可以拿到当前元素下指定的子元素集合</span></span><br><span class="line">        List&lt;Element&gt; books = root.elements(<span class="string">&quot;book&quot;</span>);</span><br><span class="line">        <span class="comment">// 遍历每个boos标签对象，然后获取book标签对象内的每一个元素</span></span><br><span class="line">        <span class="keyword">for</span>(Element book : books)&#123;</span><br><span class="line">            <span class="comment">// attributeValue获取已知属性名</span></span><br><span class="line">           String id=book.attributeValue(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">           <span class="comment">// 获得指定标签名的元素</span></span><br><span class="line">           Element name=book.element(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">           Element author=book.element(<span class="string">&quot;author&quot;</span>);</span><br><span class="line">           Element price=book.element(<span class="string">&quot;price&quot;</span>);</span><br><span class="line">           <span class="comment">// getText()方法拿到起始标签和结束标签之间的文本内容</span></span><br><span class="line">            System.out.println(<span class="string">&quot;id:&quot;</span>+id+<span class="string">&quot;,name:&quot;</span>+name.getText()+<span class="string">&quot;,author:&quot;</span>+author.getText()+<span class="string">&quot;,price:&quot;</span>+price.getText());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h1><p>maven是一款用于管理和构建java项目工具，是apache旗下的一个开源项目。</p><h2 id="依赖管理"><a href="#依赖管理" class="headerlink" title="依赖管理"></a>依赖管理</h2><p>管理项目依赖的jar包，避免版本冲突问题。</p><h2 id="项目构建"><a href="#项目构建" class="headerlink" title="项目构建"></a>项目构建</h2><p>开发一套系统，代码需要进行编译、测试、打包、发布等过程，这些操作是所有项目都需要做的，如果需要反复进行就显得特别麻烦，而maven提供了一套简单的命令就能够完成构建项目。</p><h2 id="统一项目结构"><a href="#统一项目结构" class="headerlink" title="统一项目结构"></a>统一项目结构</h2><p>maven提供了标准，统一的项目结构。<br>标准Maven项目结构<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">├───src</span><br><span class="line">│   ├───main</span><br><span class="line">│   │   ├───java</span><br><span class="line">│   │   └───resources</span><br><span class="line">│   └───test</span><br><span class="line">│       ├───java</span><br><span class="line">│       └───resources</span><br><span class="line">└───target</span><br></pre></td></tr></table></figure><br>maven项目的目录结构中，main目录下存放的是项目源码。test目录存放测试代码。无论是在main还是在test下，都有两个目录，一个是java用来存放源代码，一个是resources用来存放配置文件。</p><p><strong>maven就是一款管理和构建java项目的工具</strong></p><h2 id="maven概述"><a href="#maven概述" class="headerlink" title="maven概述"></a>maven概述</h2><p>maven是一个项目管理和构建工具，它基于项目对象模型(project Object model)简称pom，通过小段描述信息来管理项目的构建，报告和文档。<br>mavne作用：</p><ol><li>方便依赖管理</li><li>统一项目结构</li><li>标准项目构建流程</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;groupId&gt;com.iweb&lt;/groupId&gt;</span><br><span class="line"> &lt;artifactId&gt;springboot_day02&lt;/artifactId&gt;</span><br><span class="line"> &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line"> &lt;packaging&gt;war&lt;/packaging&gt;</span><br></pre></td></tr></table></figure><p>坐标：就是资源jar包的唯一标识，通过坐标可以定位到所需要的资源(jar)位置，坐标的组成部分：</p><ol><li>groupId：组织名</li><li>artifactId：模板名</li><li>version：版本号</li></ol><h2 id="maven仓库"><a href="#maven仓库" class="headerlink" title="maven仓库"></a>maven仓库</h2><p>仓库：用于存储资源，管理各种jar包</p><blockquote><p>仓库的本质就是一个目录，这个目录被用来存储开发中所需要的依赖（jar包）</p></blockquote><ul><li>本地仓库：自己计算上的一个目录（用来存储jar包）</li><li>中央仓库：由maven团队维护的全球唯一的 <code>https://mvnrepository.com/</code></li><li>远程仓库：一般由公司团队团建的私有仓库</li></ul><p>当项目中使用坐标引入对应依赖jar后，首先会在本地仓库中查找是否有对应的jar包。</p><ul><li>如果有，项目直接引用</li><li>如果没有，去中央仓库下载对应的jar包到本地</li></ul><p>还可以搭建远程仓库（私服），将jar包查找顺序变为：本地仓库—&gt;远程仓库—&gt;中央仓库。</p><h2 id="maven安装"><a href="#maven安装" class="headerlink" title="maven安装"></a>maven安装</h2><p>maven是一个绿色软件，解压即可。</p><p>bin：存放的是可执行命令<br>conf：存放maven的配置文件(settings.xml配置文件需要修改)<br>lib：存放maven依赖的jar包<br><strong>配置本地仓库</strong><br>1.在自己计算上新建一个目录（本地仓库，用来存储jar包）<br>2.进入到conf目录下修改settings.xml配置文件</p><ul><li>使用记事本软件打开settings.xml文件</li><li>复制 <code>&lt;localRepository&gt;</code>粘贴到注释的外面</li><li>复制之前新建的用来存储jar包的路径，替换掉<code>&lt;localRepository&gt;</code>标签体内容</li></ul><p><strong>配置阿里云私服</strong><br>中央仓库在国外，所以下载jar包速度可能比较慢，阿里提供了一个远程仓库，里面基本也都有开源项目的jar包。<br>进入到conf目录下修改settings.xml配置文件</p><p>在 <code>&lt;mirror&gt;</code>标签下为其添加子标签，内容如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>mirrorId<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>repositoryId<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>Human Readable Name for this Mirror.<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://my.repository.com/repo/path<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure><br>注意配置的文件，在<code>&lt;mirrors&gt;</code>中间添加配置<br><strong>配置环境变量</strong><br>Maven环境的配置类似于JDK环境变量配置一样。<br>1.在系统变量新建一个变量</p><ul><li>​    MAVEN_HOME:D:\soft\apache-maven-3.6.0<br>2.编辑系统变量 <strong>Path</strong>，添加变量值：</li><li>​    %MAVEN_HOME%\bin<br>打开DOS命令提示符进行验证，出现如图所示表示安装成功：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn -v</span><br></pre></td></tr></table></figure><h2 id="pom-xml文件详解"><a href="#pom-xml文件详解" class="headerlink" title="pom.xml文件详解"></a>pom.xml文件详解</h2>POM项目对象模型，用来描述当前maven项目，使用pom.xml文件来描述当前项目。<br><strong>maven坐标</strong><br>通过坐标可以唯一定位资源位置。<br><strong>依赖管理</strong><br>依赖：只当前项目运行所需要的jar包，一个项目可以引入多个依赖。<br>在当前工程中，我们需要用到junit来继续测试，此时我们在maven工程的pom.xml文件中，引入junit的依赖。步骤如下：</li></ul><p>1.在pom.xml中编写<code>&lt;dependencys&gt;</code>标签<br>2.在<code>&lt;dependencys&gt;</code>标签中使用<code>&lt;dependency&gt;</code>引入坐标<br>3.定义坐标的<code>groupId</code>、<code>artifactId</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>点击刷新按钮，引入最新加入的坐标<br>刷新依赖：保证每一次引入新的依赖，或者修改现有的依赖配置，都可以加入最新的坐标。</p><blockquote><p>如果引入的依赖，在本地仓库不存在，将会连接远程仓库或者中央仓库，然后下载依赖，这个过程会比较耗时。<br>如果不知道依赖的坐标，可以到mvn的(中央仓库)[<a href="https://mvnrepository.com/">https://mvnrepository.com/</a>]</p></blockquote><h2 id="查找依赖"><a href="#查找依赖" class="headerlink" title="查找依赖"></a>查找依赖</h2><p>利用中央仓库搜索依赖的坐标，以mysql为例<br>在项目的pom.xml文件中添加项目资源依赖<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.33<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h1 id="Serlvet"><a href="#Serlvet" class="headerlink" title="Serlvet"></a>Serlvet</h1><p>这是个至关重要的技术，用于处理客户端请求和响应。</p><h2 id="web服务器"><a href="#web服务器" class="headerlink" title="web服务器"></a>web服务器</h2><p>服务器软件是基于请求和响应来开发，在web服务器软件中，可以部署web项目，让用户通过浏览器来访问这些项目。</p><h3 id="什么是请求"><a href="#什么是请求" class="headerlink" title="什么是请求"></a>什么是请求</h3><p>请求是指客户端给服务器发送数据，叫请求request</p><h3 id="什么是响应"><a href="#什么是响应" class="headerlink" title="什么是响应"></a>什么是响应</h3><p>响应是指服务器给客户端回传数据，叫响应response</p><h3 id="请求和响应的关系"><a href="#请求和响应的关系" class="headerlink" title="请求和响应的关系"></a>请求和响应的关系</h3><p>请求和响应都是成对出现的，有请求就有响应<br>常见的java相关的web服务器软件</p><ul><li>Tomcat：apache基金组织中小型的JavaEE服务器，支持servlet/jsp规范，开源免费。</li><li>webLogic:oralce公司，大型的JavaEE服务器，收费的。</li><li>Jboss:Jboss公司，大型的JavaEE服务器，收费的。</li><li>websphere:IBM公司，大型的JavaEE服务器，收费的。</li></ul><h2 id="Tomcat的使用"><a href="#Tomcat的使用" class="headerlink" title="Tomcat的使用"></a>Tomcat的使用</h2><p>Tomcat是一个开源的免费的web服务器软件，支持servlet/jsp规范。<br>我们可以通过这个网站来获得：[点这里]（<a href="https://tomcat.apache.org/）">https://tomcat.apache.org/）</a><br>获得后直接就可以通过执行startup.bat文件来启动tomcat服务器。</p><blockquote><p>对于中文乱码的问题，在tomcat的conf目录下的server.xml文件中，修改Connector标签的属性：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">&quot;8080&quot;</span> <span class="attr">protocol</span>=<span class="string">&quot;HTTP/1.1&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">connectionTimeout</span>=<span class="string">&quot;20000&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">redirectPort</span>=<span class="string">&quot;8443&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">URIEncoding</span>=<span class="string">&quot;UTF-8&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><br>如果你所在的地域或者机器属性不支持UTF-8编码，那么可以修改为GBK编码。</p></blockquote><p>但是为了方便我们一般会将tomcat集成到IDEA等中进行使用，具体的操作如下：<br>1.在IDEA中打开项目<br>2.点击项目结构（Project Structure）<br>3.点击模块（Modules）<br>4.点击依赖（Dependencies）<br>5.点击加号（+）<br>6.点击Maven<br>7.点击OK<br>8.在弹出的对话框中，选择Tomcat服务器<br>9.点击OK<br>10.点击运行（Run）按钮<br>11.选择Tomcat服务器<br>12.点击OK<br>13.等待服务器启动完成<br>14.在浏览器中输入localhost:8080，即可访问项目。</p><p>本站为了节省资源，并不予以图片截图等的示例，若是不了解具体操作细节，请参考<a href="https://tomcat.apache.org/tomcat-9.0-doc/index.html">官方文档</a>。或者借鉴他人博客来帮助自己学习</p><p>在tomcat中，存在以下文件布局：</p><ul><li>bin：存放的是可执行命令</li><li>conf：存放maven的配置文件(settings.xml配置文件需要修改)</li><li>lib：存放maven依赖的jar包</li><li>webapps：存放的是项目文件，每个项目文件都是一个文件夹，文件夹的名称就是项目的名称。</li><li>work：存放的是项目的临时文件，在项目运行过程中，会生成一些临时文件，这些文件会被存放到work目录下。</li><li>logs：存放的是日志文件，在项目运行过程中，会生成一些日志文件，这些文件会被存放到logs目录下。</li><li>temp：存放的是临时文件，在项目运行过程中，会生成一些临时文件，这些文件会被存放到temp目录下。</li></ul><p>若是你想要在tomcat中部署项目，那么需要将项目文件放到webapps目录下。<br>想要停止该服务器运行，只需要在DOS命令提示符中执行shutdown.bat文件即可，或者使用ctrl+c来停止,在idea中则更加简单，只需要点击停止按钮即可。</p><p>如果你发现自己有一个端口被占用了，那么可以在conf目录下的server.xml文件中，修改Connector标签的属性：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">&quot;8080&quot;</span> <span class="attr">protocol</span>=<span class="string">&quot;HTTP/1.1&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">connectionTimeout</span>=<span class="string">&quot;20000&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">redirectPort</span>=<span class="string">&quot;8443&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">URIEncoding</span>=<span class="string">&quot;UTF-8&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><br>将port属性的值修改为其他的端口号，即可。毕竟8080端口过于热门</p><p>若是您想要将现有的web项目部署到tomcat中，那么需要将项目文件放到webapps目录下。<br>在webapps目录下，每个项目文件都是一个文件夹，文件夹的名称就是项目的名称。<br>在浏览器中输入localhost:8080/项目名称，即可访问项目。</p><h2 id="什么是Serlvet"><a href="#什么是Serlvet" class="headerlink" title="什么是Serlvet"></a>什么是Serlvet</h2><ol><li>serlvet是JavaEE规范之一，规范就是接口</li><li>servlet是JavaWeb三大组件之一，三大组件分别是servlet程序、Filter过滤器、Listener监听器。</li><li>servlet是运行在服务器上的一个java小程序，它可以接受客户端发送过来的请求，并响应数据给客户端</li></ol><h2 id="实现Serlvet程序"><a href="#实现Serlvet程序" class="headerlink" title="实现Serlvet程序"></a>实现Serlvet程序</h2><p>导入servlet依赖坐标，这个坐标宁可以在maven的中央仓库中找到。<a href="https://mvnrepository.com/artifact/javax.servlet/javax.servlet-api">点这里</a><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><br>其他的您想要添加的依赖都可以通过中央仓库的途径来增加</p><p>我们若是想要高效的实现Serlvet首先我们得编写一个类，这个类需要实现Serlvet接口。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">package</span> com.iweb.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyServlet</span> <span class="keyword">implements</span> <span class="title class_">Servlet</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyServlet</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;构造函数&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  对servlet进行初始化</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(ServletConfig servletConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;init&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取servlet配置信息</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ServletConfig <span class="title function_">getServletConfig</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;getServletConfig&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// service方法专门用于处理请求和响应的方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;service&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getServletInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;getServletInfo&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;destroy&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>并对web.xml文件进行配置<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">&lt;!-- 通过servlet标签给tomcat配置servlet程序 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- servlet-name标签 给servlet程序取个一个别名(一般写类名) --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>MyServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- servlet-class标签 是servlet程序的全类名  包名.类名 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.iweb.servlet.MyServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- servlet-mapping标签是给servlet程序配置访问地址 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- servlet-name标签的作用是告诉服务器，我当前配置的路径给哪个servlet程序使用  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>MyServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- url-pattern 标签配置访问地址</span></span><br><span class="line"><span class="comment">      /myServlet 在服务器解析的时候，表示地址为  http://127.0.0.1:8081/myServlet</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/myServlet<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><br>这种手动置入的行为很容易出现错误<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">  1.url-pattern中配置的路径没有以斜杠打头</span><br><span class="line">java.lang.IllegalArgumentException: </span><br><span class="line">Invalid &lt;url-pattern&gt; [myServlet] in servlet mapping</span><br><span class="line"></span><br><span class="line">2.servlet-name配置的值不存在</span><br><span class="line">Caused by: java.lang.IllegalArgumentException: </span><br><span class="line">Servlet mapping specifies an unknown servlet name [MyServlet1]</span><br><span class="line"></span><br><span class="line">3.servlet-class标签的全类名配置错误</span><br><span class="line">java.lang.ClassNotFoundException: com.iweb.servlet.MyServlet1</span><br></pre></td></tr></table></figure></p><h2 id="Serlvet的生命周期"><a href="#Serlvet的生命周期" class="headerlink" title="Serlvet的生命周期"></a>Serlvet的生命周期</h2><p>1.执行servlet构造方法<br>2.执行init方法</p><ul><li>第一步和第二步在第一次访问的时候创建servlet会被调用<br>3.service方法<br>● 每次访问都会被调用<br>4.执行destroy销毁方法</li><li>在web工程停止的时候调用</li></ul><h2 id="HttpServlet实现servlet程序"><a href="#HttpServlet实现servlet程序" class="headerlink" title="HttpServlet实现servlet程序"></a>HttpServlet实现servlet程序</h2><p>一般在实际项目开发中，都是使用继承HttpServlet类的方式去实现servlet程序。<br>1.编写一个类去继承HttpServlet类<br>2.编写业务需要重写doGet或者doPost方法<br>3.到web.xml中配置servlet程序的访问地址</p><ul><li>配置servlet的名称</li><li>配置servlet的全类名</li><li>配置servlet的访问地址<br>4.在浏览器中访问servlet程序的访问地址，即可访问servlet程序。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">package</span> com.iweb.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyServlet1</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// doGet()在get请求的时候调用</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;doGet...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// doPost()在post请求的时候调用</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;doPost...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>对应的xml配置：<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>MyServlet1<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.iweb.servlet.MyServlet1<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>MyServlet1<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/myServlet1<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>这里做一个面试题，GET和POST的区别</p><ul><li>GET请求：<ul><li>1.请求参数在URL中显示</li><li>2.请求参数的大小有限制</li><li>3.请求参数的类型只能是文本类型</li></ul></li><li>POST请求：<ul><li>1.请求参数在请求体中显示</li><li>2.请求参数的大小没有限制</li><li>3.请求参数的类型没有限制</li></ul></li></ul><h2 id="GenericServlet实现servlet程序"><a href="#GenericServlet实现servlet程序" class="headerlink" title="GenericServlet实现servlet程序"></a>GenericServlet实现servlet程序</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">package</span> com.iweb.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyServlet2</span> <span class="keyword">extends</span> <span class="title class_">GenericServlet</span> &#123;</span><br><span class="line">    <span class="comment">// 处理请求和响应的</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;service...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>web.xml配置<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>MyServlet2<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.iweb.servlet.MyServlet2<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>MyServlet2<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/myServlet2<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="Servlet继承体系"><a href="#Servlet继承体系" class="headerlink" title="Servlet继承体系"></a>Servlet继承体系</h2><p>我用一句话来说明白这个过程吧，servlet程序是继承自HttpServlet类的，HttpServlet类是继承自GenericServlet类的，GenericServlet类是继承自Servlet接口的。（阿巴阿巴我自己都不清楚）</p><h2 id="ServletContext类"><a href="#ServletContext类" class="headerlink" title="ServletContext类"></a>ServletContext类</h2><p>1.ServletContext是一个接口，表示servlet上下文对象。<br>2.一个web工程，只有一个ServletContext实例。<br>3.ServletContext对象是一个域对象。<br>4.ServletContext是在web工程部署启动的时候创建，在web工程停止的时候销毁<br>什么是域对象？<br>域对象，是可以像Map一样存取数据的对象，叫做域对象。<br>域对象是指存取数据的操作范围，整个web工程。<br>ServletContext类有四个作用<br>1.获取web.xml中配置的上下文参数<br>2.获得当前的工程路径<br>3.获取工程部署后在服务器硬盘上的绝对路径<br>4.像Map一样存取数据</p><blockquote><p>注意一下啊这个存储数据的范围是整个web工程，所以在不同的servlet程序中，获取的ServletContext对象是同一个。并且这些数据都是在服务器启动的时候就已经加载好的，所以在servlet程序中可以直接获取到。和项目强制绑定</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">&lt;!-- context-param是上下参数（属于这个web工程）</span></span><br><span class="line"><span class="comment">     当web项目启动，可以通过它来实现初始化数据加载效果</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>username<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>root<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>password<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>root123<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>对应构造类java示例<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">package</span> com.iweb.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyServlet</span> <span class="keyword">implements</span> <span class="title class_">Servlet</span> &#123;</span><br><span class="line">    ServletContext servletContext=<span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// service方法专门用于处理请求和响应的方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// 获取web.xml中配置的上下文参数 context-param</span></span><br><span class="line">        <span class="comment">// 获得username参数</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> servletContext.getInitParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> servletContext.getInitParameter(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        System.out.println(username+<span class="string">&quot;\t&quot;</span>+password);</span><br><span class="line">        <span class="comment">// 获取当前的工程路径</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">contextPath</span> <span class="operator">=</span> servletContext.getContextPath();</span><br><span class="line">        System.out.println(contextPath);</span><br><span class="line">        System.out.println(<span class="string">&quot;当前的工程路径--&gt;&quot;</span>+contextPath);</span><br><span class="line">        <span class="comment">// 获取工程部署后在服务器硬盘上的绝对路径</span></span><br><span class="line">        System.out.println(<span class="string">&quot;工程部署的路径--&gt;&quot;</span>+servletContext.getRealPath(<span class="string">&quot;/&quot;</span>));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyServlet</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;构造函数&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  对servlet进行初始化</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(ServletConfig servletConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;init&quot;</span>);</span><br><span class="line">        servletContext = servletConfig.getServletContext();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取servlet配置信息</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ServletConfig <span class="title function_">getServletConfig</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;getServletConfig&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getServletInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;getServletInfo&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;destroy&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="Servlet3-0规范"><a href="#Servlet3-0规范" class="headerlink" title="Servlet3.0规范"></a>Servlet3.0规范</h2><p>可以看见，我们在对servlet进行配置的时候，需要在web.xml中进行配置，这过于繁琐和复杂，但是在Servlet3.0规范中，我们可以不使用web.xml进行配置，而是使用注解的方式进行配置。</p><blockquote><p>@WebServlet注解用于将一个类声明为servlet，该注解将会在部署时被容器处理，容器将根据具体的属性配置相应的类部署为servlet。该注解具体常用属性：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">package</span> com.iweb.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * urlPatterns 指定一组servlet的url匹配等价于 &lt;url-pattern&gt;</span></span><br><span class="line"><span class="comment"> * loadOnStartup 指定servlet的加载顺序</span></span><br><span class="line"><span class="comment"> * name   指定servlet的name属性，如果没有指定则以该servlet的取值为类的全类名   &lt;servlet-name&gt;</span></span><br><span class="line"><span class="comment"> * value 该属于等价于 urlPatterns属性，两个属性不能同时使用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/myServlet3&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyServlet3</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;doGet..MyServlet3&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上配置之后，就不需要在web.xml中配置响应的标签了。<br>但是请一定要注意书写的数据类型和路径格式等细节问题，很容易造成错误。</p><h1 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h1><h2 id="HTTP协议-1"><a href="#HTTP协议-1" class="headerlink" title="HTTP协议"></a>HTTP协议</h2><p>HTTP：Hypertext Transfer Protocol超文本传输协议，规定了浏览器和服务器之间数据传输的规则。</p><ul><li>HTTP是互联网应用最广泛的一种网络协议</li><li>HTTP协议要求：浏览器向服务器发送请求数据时，或者服务器在向浏览器响应数据时，都必须按照固定的格式进行数据传输。<br>我们学习HTTP协议，就是学习请求和响应数据的具体格式内容。</li></ul><p><strong>就我个人而言很喜欢HTTP,方便且强大。而且依托于html的强大功能，我们可以很方便的实现一个简单的网站。</strong></p><p><strong>HTTP协议的特点：</strong><br>基于TCP协议：面向连接，安全<br>TCP是一种面向连接的（建立连接之前需要经过三次握手），可靠的，基于字符流的传输层通信协议，在数据传输方便更安全<br>基于请求-响应：一次请求对应一次响应（先请求后响应）<br>请求和响应是一一对应的关系，没有请求就没有响应</p><h2 id="HTTP协议的格式"><a href="#HTTP协议的格式" class="headerlink" title="HTTP协议的格式"></a>HTTP协议的格式</h2><p>● 客户端给服务器发送数据叫请求<br>● 服务器给客户端回传数据叫响应<br>  ○ 请求又分为Get请求，和Post请求中。<br>请求协议：浏览器将数据以请求格式发送给服务器，包括请求行，请求头，请求体。</p><p><strong>请求行：</strong>HTTP请求中的第一行数据，由请求方式、资源路径、协议/版本组成。<br><strong>请求方式：</strong>GET<br><strong>资源路径</strong>：/web_project02_war/myServlet3<br><strong>请求参数：</strong>username=admin123&amp;password=123456</p><ul><li>请求参数是以key=value形式组成</li><li>多个请求参数之间使用&amp;连接<br><strong>请求头：</strong>第二行开始，格式为key:value，在请求头设置浏览器的一些自身信息和响应的形式</li><li>host:请求的主机名</li><li>User-Agent:浏览器版本</li><li>Accept:表示浏览器能接受的资源类型</li><li>Accept-Language：浏览器支持的语言，服务器可以根据此返回不同语言的网页</li><li>Accept-Encoding：浏览器支持压缩类型<br><strong>请求体：</strong>存储请求参数<br>GET请求的请求体参数在请求行中<br><strong>Post方式的请求协议：</strong><br>请求行：包含请求方式Post，资源路径，协议/版本<br>请求头<br>请求体：存储请求参数</li></ul><h2 id="GET-amp-POST"><a href="#GET-amp-POST" class="headerlink" title="GET&amp;POST"></a>GET&amp;POST</h2><p><strong>GET：</strong>GET请求的参数直接附加在URL上，以?号分隔路径于参数，多个参数使用&amp;连接，这种方式使参数在URL中可见。<br>例如：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8081/web_project02_war/myServlet3?username=admin123&amp;password=123456</span><br></pre></td></tr></table></figure><br>可以看见，GET请求的参数直接附加在URL上，以?号分隔路径于参数，多个参数使用&amp;连接，这种方式使参数在URL中可见。在开发过程中这种调试可以更加的直观，但是在实际开发运用中这种行为过于危险<br><strong>POST：</strong>POST请求的参数不直接附加在URL上，而是存储在请求体中。<br>例如：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8081/web_project02_war/myServlet3</span><br></pre></td></tr></table></figure><br>可以看见，POST请求的参数不直接附加在URL上，而是存储在请求体中。在开发过程中这种调试相对GET请求来说更加的安全，但是在实际开发运用中这种行为相对GET请求来说更加的安全。<br><strong>那些是GET请求，那些是POST请求</strong><br>● get请求有那些：<br>  ○ form标签method=get<br>  ○ a标签<br>  ○ 在浏览器地址中输入地址后敲回车<br>● post请求有那些：<br>  ○ form标签method=post</p><h2 id="HttpServletRequest"><a href="#HttpServletRequest" class="headerlink" title="HttpServletRequest"></a>HttpServletRequest</h2><p>每次只要有请求进入tomcat服务器，tomcat服务器就把请求过来的http协议信息解析好封装到request对象，然后传递到service(doGet和doPost)方法中给我们使用，我们可以通过HttpServletRequest对象，获取请求中的信息<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">package</span> com.iweb.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * urlPatterns 指定一组servlet的url匹配等价于 &lt;url-pattern&gt;</span></span><br><span class="line"><span class="comment"> * loadOnStartup 指定servlet的加载顺序</span></span><br><span class="line"><span class="comment"> * name   指定servlet的name属性，如果没有指定则以该servlet的取值为类的全类名   &lt;servlet-name&gt;</span></span><br><span class="line"><span class="comment"> * value 该属于等价于 urlPatterns属性，两个属性不能同时使用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/myServlet3&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyServlet3</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">         <span class="built_in">this</span>.doPost(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;绝对路径--&gt;&quot;</span>+req.getRequestURL());</span><br><span class="line">        System.out.println(<span class="string">&quot;获取请求的参数--&gt;&quot;</span>+req.getParameter(<span class="string">&quot;username&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;获取客户端的IP地址--&gt;&quot;</span>+req.getRemotePort());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="如何获取请求参数"><a href="#如何获取请求参数" class="headerlink" title="如何获取请求参数"></a>如何获取请求参数</h2><p><strong>获取请求行中的参数：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">req.getRequestURL();<span class="comment">//获取请求的绝对路径</span></span><br><span class="line">req.getRequestURI();<span class="comment">//获取请求的资源路径</span></span><br><span class="line">req.getMethod();<span class="comment">//获取请求的方式</span></span><br><span class="line">req.getProtocol();<span class="comment">//获取请求的协议</span></span><br><span class="line">req.getServerName();<span class="comment">//获取请求的服务器名</span></span><br><span class="line">req.getServerPort();<span class="comment">//获取请求的服务器端口</span></span><br></pre></td></tr></table></figure><br><strong>获取请求头中的参数：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">req.getHeader(<span class="string">&quot;key&quot;</span>);<span class="comment">//获取请求头中的key值</span></span><br></pre></td></tr></table></figure><br><strong>获取请求体中的参数：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">req.getParameter(<span class="string">&quot;key&quot;</span>);<span class="comment">//获取请求体中的key值</span></span><br></pre></td></tr></table></figure><br><strong>获取请求参数的名称：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">req.getParameterNames();<span class="comment">//获取请求参数的名称</span></span><br></pre></td></tr></table></figure><br><strong>获取请求参数的名称和值：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">req.getParameterMap();<span class="comment">//获取请求参数的名称和值</span></span><br></pre></td></tr></table></figure><br><strong>获取请求参数的值：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">req.getParameterValues(<span class="string">&quot;key&quot;</span>);<span class="comment">//获取请求参数的值</span></span><br></pre></td></tr></table></figure><br><strong>获取请求参数的值：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">req.getParameter(<span class="string">&quot;key&quot;</span>);<span class="comment">//获取请求参数的值</span></span><br></pre></td></tr></table></figure><br>OK打住，再写下去我要炸了。我直接用一个典型的案例来给大家做介绍吧<br><strong>index.html</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">  <span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;paramsServlet&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">        用户名:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>  <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        密码:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span>  <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        性别:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">value</span>=<span class="string">&quot;man&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">checked</span>/&gt;</span>男</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">value</span>=<span class="string">&quot;woman&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span>/&gt;</span>女<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        兴趣爱好:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;java&quot;</span>/&gt;</span>java</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;python&quot;</span>/&gt;</span>python</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;c++&quot;</span>/&gt;</span>c++<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><br><strong>servlet</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">package</span> com.iweb.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/paramsServlet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ParamsServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="built_in">this</span>.doPost(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// 获取请求中的参数</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">sex</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;sex&quot;</span>);</span><br><span class="line">        String[] hobby = req.getParameterValues(<span class="string">&quot;hobby&quot;</span>);</span><br><span class="line">        System.out.println(username+<span class="string">&quot;\t&quot;</span>+password+<span class="string">&quot;\t&quot;</span>+sex);</span><br><span class="line">        System.out.println(Arrays.toString(hobby));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>你要是直接截取上述代码，你会发现在中文传递上会存在一些问题，所以我们需要单独去对这个问题进行解决<br><strong>doGet请求的中文乱码解决</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">    <span class="comment">// 获取请求中的参数</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">    <span class="comment">// 先以iso-8859-1进行编码，再以UTF-8进行解码</span></span><br><span class="line">    username=<span class="keyword">new</span> <span class="title class_">String</span>(username.getBytes(<span class="string">&quot;iso-8859-1&quot;</span>),<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><br><strong>doPost请求的中文乱码解决</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// 设置请求体的字符集为UTF-8解决post请求的中文乱码问题</span></span><br><span class="line">        req.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="请求转发"><a href="#请求转发" class="headerlink" title="请求转发"></a>请求转发</h2><p>什么是请求转发？<br>请求转发是指，服务器收到请求后，从一次资源跳转到另外一个资源的操作叫做请求转发。<br>请求转发特点：<br>1.浏览器地址栏没有变化<br>2.他们是一次请求<br>3.他们共享request域中的数据<br>4.不可以访问工程以外的资源<br>5.request域中的数据只能是一次请求</p><p>实现方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">  <span class="meta">@WebServlet(&quot;/servletTest1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletTest1</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="built_in">this</span>.doPost(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// 获取请求中的参数(办事的材料)</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;在servlet1柜台查看参数(材料):&quot;</span>+username);</span><br><span class="line">        <span class="comment">// 给材料盖个章，并传递到servlet2（柜台）绑定上request域对象中</span></span><br><span class="line">        req.setAttribute(<span class="string">&quot;key&quot;</span>,username);</span><br><span class="line">        <span class="comment">//   问路，走向servlet2</span></span><br><span class="line">        <span class="comment">// 请求转发必须以/打头</span></span><br><span class="line">        req.getRequestDispatcher(<span class="string">&quot;/servletTest2&quot;</span>).forward(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">  <span class="meta">@WebServlet(&quot;/servletTest2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletTest2</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="built_in">this</span>.doPost(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">         <span class="comment">// 检查柜台1是否有盖章</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">key</span> <span class="operator">=</span> req.getAttribute(<span class="string">&quot;key&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;检查柜台1是否有盖章：&quot;</span>+key);</span><br><span class="line">        <span class="comment">// 处理业务</span></span><br><span class="line">        System.out.println(<span class="string">&quot;servlet2处理自己的业务&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="HttpServletResponse"><a href="#HttpServletResponse" class="headerlink" title="HttpServletResponse"></a>HttpServletResponse</h2><p>HttpServletResponse和HttpServletRequest类一样，每次请求进来，tomcat服务器都会创建一个Response对象传递给servlet程序去使用，<br>HttpServletRequest类表示请求过来的信息，HttpServletResponse表示所有响应的信息，如果我们需要设置返回给客户端的信息，可以通过HttpServletResponse对象来设置。</p><p>字有点多，我一句话用大白话说清楚：<br>HttpServletResponse类表示响应的信息，我们可以通过HttpServletResponse对象来设置响应的信息。</p><h2 id="两个输出流的说明"><a href="#两个输出流的说明" class="headerlink" title="两个输出流的说明"></a>两个输出流的说明</h2><p>字节流 getOutputStream():用于下载<br>字符流 getWriter():用于回传字符串（常用）<br>两个流同时只能使用一个，使用了字节流就不能使用字符流，反之亦然，否则会报错。</p><p>有点难记啊，打多了写多了就记得了<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">package</span> com.iweb.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/responseServlet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResponseServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="built_in">this</span>.doPost(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// 接受客户端传递过来的参数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span>Integer.parseInt(req.getParameter(<span class="string">&quot;age&quot;</span>));</span><br><span class="line">        System.out.println(age);</span><br><span class="line">        <span class="comment">// 往客户端回传字符串(数据)</span></span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">writer</span> <span class="operator">=</span> resp.getWriter();</span><br><span class="line">        writer.write(<span class="string">&quot;客户端你好，已经收到了你的数据&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="响应的乱码问题"><a href="#响应的乱码问题" class="headerlink" title="响应的乱码问题"></a>响应的乱码问题</h2><p>因为各种软件，地域的标准不同，所以在不同的地域，会有不同的编码标准，在中文的地域，会使用gbk编码，在英文的地域，会使用utf-8编码，所以在回传字符串时，需要注意编码问题，否则会出现乱码问题。<br>下面就是个姐姐乱码问题的典型实例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">package</span> com.iweb.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/responseServlet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResponseServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="built_in">this</span>.doPost(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// 处理请求中文乱码</span></span><br><span class="line">        req.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">// 处理响应中文乱码</span></span><br><span class="line">        <span class="comment">// 同时设置服务器和客户端使用UTF-8字符集，还设置响应头</span></span><br><span class="line">        <span class="comment">// 方法一定要在获取流对象之间调用才有效</span></span><br><span class="line">        resp.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">// 接受客户端传递过来的参数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span>Integer.parseInt(req.getParameter(<span class="string">&quot;age&quot;</span>));</span><br><span class="line">        System.out.println(age);</span><br><span class="line">        <span class="comment">// 往客户端回传字符串(数据)</span></span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">writer</span> <span class="operator">=</span> resp.getWriter();</span><br><span class="line">        writer.write(<span class="string">&quot;客户端你好，已经收到了你的数据&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="请求中定向"><a href="#请求中定向" class="headerlink" title="请求中定向"></a>请求中定向</h2><p>重定向行为，是指客户端给服务器发请求，然后服务器告诉客户端，之前的访问地址已经被废弃，去新的地址访问，叫做请求重定向。</p><blockquote><p>因为我认为转换页面等行为本质上是路径选取，所以我认为重定向可以做到很多的功能，比如：<br>1.访问一个页面，但是这个页面需要登录才能访问，那么我们就可以在servlet中判断用户是否登录，如果没有登录，就可以重定向到登录页面。<br>2.访问一个页面，但是这个页面的访问地址已经被废弃，我们可以重定向到新的地址。<br>3.访问一个页面，但是这个页面的访问地址已经被废弃，我们可以重定向到新的地址。</p></blockquote><p>请求重定向的特点：<br>1.浏览器地址会发生改变<br>2.两次请求<br>3.不能共享request域中的数据<br>4.不能访问web-inf下的资源<br>以下是一个重定向的案例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">package</span> com.iweb.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/servletTest3&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletTest3</span>  <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="built_in">this</span>.doPost(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// 绑定数据到request域中</span></span><br><span class="line">        req.setAttribute(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;admin123&quot;</span>);</span><br><span class="line">        <span class="comment">// 重定向</span></span><br><span class="line">        resp.sendRedirect(<span class="string">&quot;servletTest4&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>最终要的部分来自最后的那一行：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">resp.sendRedirect(<span class="string">&quot;servletTest4&quot;</span>);</span><br></pre></td></tr></table></figure><br>更多请转下一篇：<strong>前端学习【3】</strong></p>]]></content>
      
      
      <categories>
          
          <category> 结构速查 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库基础练习题（完整版）</title>
      <link href="/2025/07/22/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80%E7%BB%83%E4%B9%A0%E9%A2%98%EF%BC%88%E5%AE%8C%E6%95%B4%E7%89%88%EF%BC%89/"/>
      <url>/2025/07/22/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80%E7%BB%83%E4%B9%A0%E9%A2%98%EF%BC%88%E5%AE%8C%E6%95%B4%E7%89%88%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="数据库基础练习题（完整版）"><a href="#数据库基础练习题（完整版）" class="headerlink" title="数据库基础练习题（完整版）"></a>数据库基础练习题（完整版）</h1><p>这份练习题包含大量理论和实操题目，覆盖MySQL数据库的核心知识点，适合面试复习和技能提升。答案隐藏在每个问题下方的折叠框中，点击即可查看。</p><blockquote><p>這份題目不是面試寶典，背書以面試寶典爲主，這個更多的是可以作爲自我檢測和抽查的一個部分，本站所有題目均在側欄展示，可以精準定位到對應的位置<br>這是份面試題筆試題均在的文章，可以加强自我使用數據庫部分的技能加强</p></blockquote><h2 id="一、理论简答题"><a href="#一、理论简答题" class="headerlink" title="一、理论简答题"></a>一、理论简答题</h2><h3 id="1-请解释数据库事务的ACID属性，并说明每个属性的作用。"><a href="#1-请解释数据库事务的ACID属性，并说明每个属性的作用。" class="headerlink" title="1. 请解释数据库事务的ACID属性，并说明每个属性的作用。"></a>1. 请解释数据库事务的ACID属性，并说明每个属性的作用。</h3><details class="folding-tag" blue><summary> 查看答案 </summary>              <div class='content'>              <p><strong>原子性(Atomicity)</strong>：事务是一个不可分割的工作单位，要么全部执行，要么全部不执行。<br><strong>一致性(Consistency)</strong>：事务执行前后，数据库的完整性约束没有被破坏。<br><strong>隔离性(Isolation)</strong>：多个事务并发执行时，一个事务的执行不应影响其他事务的执行。<br><strong>持久性(Durability)</strong>：事务一旦提交，其对数据库的修改就是永久性的。</p>              </div>            </details><h3 id="2-MySQL中有哪些常见的存储引擎？InnoDB和MyISAM的主要区别是什么？"><a href="#2-MySQL中有哪些常见的存储引擎？InnoDB和MyISAM的主要区别是什么？" class="headerlink" title="2. MySQL中有哪些常见的存储引擎？InnoDB和MyISAM的主要区别是什么？"></a>2. MySQL中有哪些常见的存储引擎？InnoDB和MyISAM的主要区别是什么？</h3><details class="folding-tag" blue><summary> 查看答案 </summary>              <div class='content'>              <p>常见存储引擎：InnoDB、MyISAM、Memory、Archive、Federated等。</p><p>InnoDB和MyISAM的主要区别：</p><ul><li>InnoDB支持事务，MyISAM不支持</li><li>InnoDB支持行级锁，MyISAM支持表级锁</li><li>InnoDB支持外键，MyISAM不支持</li><li>InnoDB支持MVCC（多版本并发控制），MyISAM不支持</li><li>InnoDB的索引和数据存储在一起，MyISAM的索引和数据分开存储</li><li>InnoDB适合写操作多的场景，MyISAM适合读操作多的场景</li></ul>              </div>            </details><h3 id="3-什么是索引？索引的优缺点是什么？MySQL支持哪些类型的索引？"><a href="#3-什么是索引？索引的优缺点是什么？MySQL支持哪些类型的索引？" class="headerlink" title="3. 什么是索引？索引的优缺点是什么？MySQL支持哪些类型的索引？"></a>3. 什么是索引？索引的优缺点是什么？MySQL支持哪些类型的索引？</h3><details class="folding-tag" blue><summary> 查看答案 </summary>              <div class='content'>              <p><strong>索引</strong>：是帮助MySQL高效获取数据的数据结构，类似于书籍的目录。</p><p><strong>优点</strong>：</p><ul><li>提高查询速度</li><li>减少I/O操作</li><li>可以加速表与表之间的连接</li></ul><p><strong>缺点</strong>：</p><ul><li>占用存储空间</li><li>降低插入、更新、删除操作的速度</li><li>维护索引需要额外开销</li></ul><p>MySQL支持的索引类型：</p><ul><li>主键索引（PRIMARY）</li><li>唯一索引（UNIQUE）</li><li>普通索引（INDEX）</li><li>全文索引（FULLTEXT）</li><li>联合索引</li></ul>              </div>            </details><h3 id="4-数据库三大范式是什么？请分别简要说明。"><a href="#4-数据库三大范式是什么？请分别简要说明。" class="headerlink" title="4. 数据库三大范式是什么？请分别简要说明。"></a>4. 数据库三大范式是什么？请分别简要说明。</h3><details class="folding-tag" blue><summary> 查看答案 </summary>              <div class='content'>              <p><strong>第一范式(1NF)</strong>：列不可再分，确保每列的值都是原子的。<br><strong>第二范式(2NF)</strong>：在1NF的基础上，非主属性完全依赖于主键，不能部分依赖。<br><strong>第三范式(3NF)</strong>：在2NF的基础上，非主属性不依赖于其他非主属性，消除传递依赖。</p>              </div>            </details><h3 id="5-并发事务可能带来哪些问题？MySQL的事务隔离级别有哪些？默认隔离级别是什么？"><a href="#5-并发事务可能带来哪些问题？MySQL的事务隔离级别有哪些？默认隔离级别是什么？" class="headerlink" title="5. 并发事务可能带来哪些问题？MySQL的事务隔离级别有哪些？默认隔离级别是什么？"></a>5. 并发事务可能带来哪些问题？MySQL的事务隔离级别有哪些？默认隔离级别是什么？</h3><details class="folding-tag" blue><summary> 查看答案 </summary>              <div class='content'>              <p><strong>并发事务问题</strong>：</p><ul><li>脏读：读取到未提交的数据</li><li>不可重复读：同一事务内多次读取同一数据，结果不一致</li><li>幻读：同一事务内多次查询，结果集的行数不一致</li><li>丢失修改：多个事务同时修改同一数据，导致某些修改丢失</li></ul><p><strong>事务隔离级别</strong>：</p><ul><li>READ-UNCOMMITTED（读取未提交）</li><li>READ-COMMITTED（读取已提交）</li><li>REPEATABLE-READ（可重复读）：MySQL的默认隔离级别</li><li>SERIALIZABLE（可串行化）</li></ul>              </div>            </details><h3 id="6-什么是脏读、不可重复读和幻读？如何避免这些问题？"><a href="#6-什么是脏读、不可重复读和幻读？如何避免这些问题？" class="headerlink" title="6. 什么是脏读、不可重复读和幻读？如何避免这些问题？"></a>6. 什么是脏读、不可重复读和幻读？如何避免这些问题？</h3><details class="folding-tag" blue><summary> 查看答案 </summary>              <div class='content'>              <p><strong>脏读</strong>：一个事务读取到另一个事务未提交的数据。避免方法：提高隔离级别到READ-COMMITTED及以上。</p><p><strong>不可重复读</strong>：同一事务内多次读取同一数据，由于其他事务的修改导致结果不一致。避免方法：提高隔离级别到REPEATABLE-READ及以上。</p><p><strong>幻读</strong>：同一事务内多次查询，由于其他事务的插入或删除导致结果集的行数不一致。避免方法：提高隔离级别到SERIALIZABLE。</p>              </div>            </details><h3 id="7-请解释主键、外键和唯一索引的区别。"><a href="#7-请解释主键、外键和唯一索引的区别。" class="headerlink" title="7. 请解释主键、外键和唯一索引的区别。"></a>7. 请解释主键、外键和唯一索引的区别。</h3><details class="folding-tag" blue><summary> 查看答案 </summary>              <div class='content'>              <p><strong>主键</strong>：唯一标识一条记录，不能重复，不能为空，一个表只能有一个主键。</p><p><strong>外键</strong>：指向另一个表的主键，用于建立表与表之间的关系，可以重复，可以为空，一个表可以有多个外键。</p><p><strong>唯一索引</strong>：确保列的值唯一，可以为空，一个表可以有多个唯一索引。</p>              </div>            </details><h3 id="8-什么是视图？视图的优缺点是什么？"><a href="#8-什么是视图？视图的优缺点是什么？" class="headerlink" title="8. 什么是视图？视图的优缺点是什么？"></a>8. 什么是视图？视图的优缺点是什么？</h3><details class="folding-tag" blue><summary> 查看答案 </summary>              <div class='content'>              <p><strong>视图</strong>：是一种虚拟的表，基于查询结果集创建，不存储实际数据。</p><p><strong>优点</strong>：</p><ul><li>简化查询操作</li><li>隐藏复杂的查询逻辑</li><li>提供数据安全性</li><li>实现逻辑数据独立性</li></ul><p><strong>缺点</strong>：</p><ul><li>性能可能不如直接查询表</li><li>修改视图有很多限制</li><li>维护视图需要额外开销</li></ul>              </div>            </details><h3 id="9-SQL优化有哪些常用方法？请列举至少5种。"><a href="#9-SQL优化有哪些常用方法？请列举至少5种。" class="headerlink" title="9. SQL优化有哪些常用方法？请列举至少5种。"></a>9. SQL优化有哪些常用方法？请列举至少5种。</h3><details class="folding-tag" blue><summary> 查看答案 </summary>              <div class='content'>              <ul><li>避免使用SELECT *，只查询需要的列</li><li>合理使用索引</li><li>避免在WHERE子句中使用函数或表达式</li><li>避免使用IN和NOT IN，改用EXISTS和NOT EXISTS</li><li>优化JOIN操作，确保连接条件有索引</li><li>避免在WHERE子句中使用!=或&lt;&gt;</li><li>合理使用分页查询（LIMIT）</li><li>避免使用OR，改用UNION或UNION ALL</li><li>定期分析表和优化表</li><li>合理设计数据库表结构，遵循三大范式</li></ul>              </div>            </details><h3 id="10-内连接、左连接和右连接的区别是什么？请用SQL语句举例说明。"><a href="#10-内连接、左连接和右连接的区别是什么？请用SQL语句举例说明。" class="headerlink" title="10. 内连接、左连接和右连接的区别是什么？请用SQL语句举例说明。"></a>10. 内连接、左连接和右连接的区别是什么？请用SQL语句举例说明。</h3><details class="folding-tag" blue><summary> 查看答案 </summary>              <div class='content'>              <p><strong>内连接(INNER JOIN)</strong>：只返回两个表中匹配的行。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table1 <span class="keyword">INNER</span> <span class="keyword">JOIN</span> table2 <span class="keyword">ON</span> table1.id <span class="operator">=</span> table2.id;</span><br></pre></td></tr></table></figure></p><p><strong>左连接(LEFT JOIN)</strong>：返回左表的所有行，以及右表中匹配的行，右表中不匹配的行用NULL填充。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table1 <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> table2 <span class="keyword">ON</span> table1.id <span class="operator">=</span> table2.id;</span><br></pre></td></tr></table></figure></p><p><strong>右连接(RIGHT JOIN)</strong>：返回右表的所有行，以及左表中匹配的行，左表中不匹配的行用NULL填充。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table1 <span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> table2 <span class="keyword">ON</span> table1.id <span class="operator">=</span> table2.id;</span><br></pre></td></tr></table></figure></p>              </div>            </details><h3 id="11-什么是SQL注入？如何防止SQL注入？"><a href="#11-什么是SQL注入？如何防止SQL注入？" class="headerlink" title="11. 什么是SQL注入？如何防止SQL注入？"></a>11. 什么是SQL注入？如何防止SQL注入？</h3><details class="folding-tag" blue><summary> 查看答案 </summary>              <div class='content'>              <p><strong>SQL注入</strong>：是一种攻击方式，攻击者通过在输入中插入SQL代码，使数据库执行恶意的SQL语句。</p><p><strong>防止方法</strong>：</p><ul><li>使用参数化查询（预处理语句）</li><li>对用户输入进行过滤和转义</li><li>限制数据库用户的权限</li><li>使用ORM框架</li><li>避免使用动态SQL</li></ul>              </div>            </details><h3 id="12-什么是存储过程？存储过程的优缺点是什么？"><a href="#12-什么是存储过程？存储过程的优缺点是什么？" class="headerlink" title="12. 什么是存储过程？存储过程的优缺点是什么？"></a>12. 什么是存储过程？存储过程的优缺点是什么？</h3><details class="folding-tag" blue><summary> 查看答案 </summary>              <div class='content'>              <p><strong>存储过程</strong>：是一组预编译的SQL语句，保存在数据库中，可以被多次调用。</p><p><strong>优点</strong>：</p><ul><li>提高性能，减少网络传输</li><li>重用性好</li><li>安全性高</li><li>简化复杂操作</li></ul><p><strong>缺点</strong>：</p><ul><li>移植性差</li><li>调试困难</li><li>维护成本高</li><li>可能导致数据库服务器负载过高</li></ul>              </div>            </details><h3 id="13-什么是触发器？触发器的使用场景有哪些？"><a href="#13-什么是触发器？触发器的使用场景有哪些？" class="headerlink" title="13. 什么是触发器？触发器的使用场景有哪些？"></a>13. 什么是触发器？触发器的使用场景有哪些？</h3><details class="folding-tag" blue><summary> 查看答案 </summary>              <div class='content'>              <p><strong>触发器</strong>：是一种特殊的存储过程，当表发生INSERT、UPDATE、DELETE操作时自动执行。</p><p><strong>使用场景</strong>：</p><ul><li>数据验证</li><li>数据审计</li><li>数据同步</li><li>自动生成派生列</li><li>强制业务规则</li></ul>              </div>            </details><h3 id="14-数据库备份和恢复的方法有哪些？"><a href="#14-数据库备份和恢复的方法有哪些？" class="headerlink" title="14. 数据库备份和恢复的方法有哪些？"></a>14. 数据库备份和恢复的方法有哪些？</h3><details class="folding-tag" blue><summary> 查看答案 </summary>              <div class='content'>              <p><strong>备份方法</strong>：</p><ul><li>物理备份：直接复制数据库文件</li><li>逻辑备份：使用工具（如mysqldump）导出SQL语句</li><li>增量备份：只备份上次备份后更改的数据</li><li>全量备份：备份所有数据</li></ul><p><strong>恢复方法</strong>：</p><ul><li>物理恢复：复制备份文件到数据库目录</li><li>逻辑恢复：使用mysql命令执行备份的SQL文件</li><li>点恢复：恢复到指定时间点的数据</li></ul>              </div>            </details><h3 id="15-什么是数据库分区？分区的类型有哪些？"><a href="#15-什么是数据库分区？分区的类型有哪些？" class="headerlink" title="15. 什么是数据库分区？分区的类型有哪些？"></a>15. 什么是数据库分区？分区的类型有哪些？</h3><details class="folding-tag" blue><summary> 查看答案 </summary>              <div class='content'>              <p><strong>数据库分区</strong>：是将大表的数据分成多个小的物理区域，提高查询性能和管理效率。</p><p><strong>分区类型</strong>：</p><ul><li>范围分区（RANGE）</li><li>列表分区（LIST）</li><li>哈希分区（HASH）</li><li>键分区（KEY）</li></ul>              </div>            </details><h2 id="二、SQL操作题"><a href="#二、SQL操作题" class="headerlink" title="二、SQL操作题"></a>二、SQL操作题</h2><h3 id="1-请写出创建以下员工表的SQL语句："><a href="#1-请写出创建以下员工表的SQL语句：" class="headerlink" title="1. 请写出创建以下员工表的SQL语句："></a>1. 请写出创建以下员工表的SQL语句：</h3><ul><li>表名：employees</li><li>字段：id(主键，自增)、name(非空)、age(整数)、gender(男/女)、salary(小数)、hire_date(日期)<details class="folding-tag" blue><summary> 查看答案 </summary>              <div class='content'>              <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> employees (</span><br><span class="line">    id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT,</span><br><span class="line">    name <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    age <span class="type">INT</span>,</span><br><span class="line">    gender ENUM(<span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;女&#x27;</span>),</span><br><span class="line">    salary <span class="type">DECIMAL</span>(<span class="number">10</span>, <span class="number">2</span>),</span><br><span class="line">    hire_date <span class="type">DATE</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>              </div>            </details></li></ul><h3 id="2-请写出向employees表中插入3条测试数据的SQL语句。"><a href="#2-请写出向employees表中插入3条测试数据的SQL语句。" class="headerlink" title="2. 请写出向employees表中插入3条测试数据的SQL语句。"></a>2. 请写出向employees表中插入3条测试数据的SQL语句。</h3><details class="folding-tag" blue><summary> 查看答案 </summary>              <div class='content'>              <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> employees (name, age, gender, salary, hire_date) <span class="keyword">VALUES</span></span><br><span class="line">(<span class="string">&#x27;张三&#x27;</span>, <span class="number">25</span>, <span class="string">&#x27;男&#x27;</span>, <span class="number">5000.00</span>, <span class="string">&#x27;2023-01-15&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;李四&#x27;</span>, <span class="number">30</span>, <span class="string">&#x27;女&#x27;</span>, <span class="number">6500.00</span>, <span class="string">&#x27;2022-05-20&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;王五&#x27;</span>, <span class="number">35</span>, <span class="string">&#x27;男&#x27;</span>, <span class="number">8000.00</span>, <span class="string">&#x27;2021-09-10&#x27;</span>);</span><br></pre></td></tr></table></figure>              </div>            </details><h3 id="3-写出查询工资大于5000的员工姓名、年龄和部门名称的SQL语句（假设存在部门表departments，包含id和name字段）。"><a href="#3-写出查询工资大于5000的员工姓名、年龄和部门名称的SQL语句（假设存在部门表departments，包含id和name字段）。" class="headerlink" title="3. 写出查询工资大于5000的员工姓名、年龄和部门名称的SQL语句（假设存在部门表departments，包含id和name字段）。"></a>3. 写出查询工资大于5000的员工姓名、年龄和部门名称的SQL语句（假设存在部门表departments，包含id和name字段）。</h3><details class="folding-tag" blue><summary> 查看答案 </summary>              <div class='content'>              <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> e.name, e.age, d.name <span class="keyword">AS</span> department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> departments d <span class="keyword">ON</span> e.department_id <span class="operator">=</span> d.id</span><br><span class="line"><span class="keyword">WHERE</span> e.salary <span class="operator">&gt;</span> <span class="number">5000</span>;</span><br></pre></td></tr></table></figure>              </div>            </details><h3 id="4-写出更新employees表中id-101的员工工资增加10-的SQL语句。"><a href="#4-写出更新employees表中id-101的员工工资增加10-的SQL语句。" class="headerlink" title="4. 写出更新employees表中id=101的员工工资增加10%的SQL语句。"></a>4. 写出更新employees表中id=101的员工工资增加10%的SQL语句。</h3><details class="folding-tag" blue><summary> 查看答案 </summary>              <div class='content'>              <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> employees</span><br><span class="line"><span class="keyword">SET</span> salary <span class="operator">=</span> salary <span class="operator">*</span> <span class="number">1.1</span></span><br><span class="line"><span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">101</span>;</span><br></pre></td></tr></table></figure>              </div>            </details><h3 id="5-写出删除employees表中年龄大于60岁员工记录的SQL语句。"><a href="#5-写出删除employees表中年龄大于60岁员工记录的SQL语句。" class="headerlink" title="5. 写出删除employees表中年龄大于60岁员工记录的SQL语句。"></a>5. 写出删除employees表中年龄大于60岁员工记录的SQL语句。</h3><details class="folding-tag" blue><summary> 查看答案 </summary>              <div class='content'>              <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> age <span class="operator">&gt;</span> <span class="number">60</span>;</span><br></pre></td></tr></table></figure>              </div>            </details><h3 id="6-写出查询每个部门平均工资的SQL语句，要求显示部门名称和平均工资，并按平均工资降序排序。"><a href="#6-写出查询每个部门平均工资的SQL语句，要求显示部门名称和平均工资，并按平均工资降序排序。" class="headerlink" title="6. 写出查询每个部门平均工资的SQL语句，要求显示部门名称和平均工资，并按平均工资降序排序。"></a>6. 写出查询每个部门平均工资的SQL语句，要求显示部门名称和平均工资，并按平均工资降序排序。</h3><details class="folding-tag" blue><summary> 查看答案 </summary>              <div class='content'>              <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> d.name <span class="keyword">AS</span> department_name, <span class="built_in">AVG</span>(e.salary) <span class="keyword">AS</span> avg_salary</span><br><span class="line"><span class="keyword">FROM</span> departments d</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> employees e <span class="keyword">ON</span> d.id <span class="operator">=</span> e.department_id</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> d.name</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> avg_salary <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure>              </div>            </details><h3 id="7-写出查询员工表中年龄最大的前三名员工信息的SQL语句。"><a href="#7-写出查询员工表中年龄最大的前三名员工信息的SQL语句。" class="headerlink" title="7. 写出查询员工表中年龄最大的前三名员工信息的SQL语句。"></a>7. 写出查询员工表中年龄最大的前三名员工信息的SQL语句。</h3><details class="folding-tag" blue><summary> 查看答案 </summary>              <div class='content'>              <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> age <span class="keyword">DESC</span></span><br><span class="line">LIMIT <span class="number">3</span>;</span><br></pre></td></tr></table></figure>              </div>            </details><h3 id="8-写出创建employees表中name字段普通索引的SQL语句。"><a href="#8-写出创建employees表中name字段普通索引的SQL语句。" class="headerlink" title="8. 写出创建employees表中name字段普通索引的SQL语句。"></a>8. 写出创建employees表中name字段普通索引的SQL语句。</h3><details class="folding-tag" blue><summary> 查看答案 </summary>              <div class='content'>              <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> INDEX idx_employees_name <span class="keyword">ON</span> employees(name);</span><br></pre></td></tr></table></figure>              </div>            </details><h3 id="9-写出使用子查询查找工资高于公司平均工资的员工信息的SQL语句。"><a href="#9-写出使用子查询查找工资高于公司平均工资的员工信息的SQL语句。" class="headerlink" title="9. 写出使用子查询查找工资高于公司平均工资的员工信息的SQL语句。"></a>9. 写出使用子查询查找工资高于公司平均工资的员工信息的SQL语句。</h3><details class="folding-tag" blue><summary> 查看答案 </summary>              <div class='content'>              <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> salary <span class="operator">&gt;</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="built_in">AVG</span>(salary)</span><br><span class="line">    <span class="keyword">FROM</span> employees</span><br><span class="line">);</span><br></pre></td></tr></table></figure>              </div>            </details><h3 id="10-写出创建一个视图，包含员工姓名、部门名称和入职年份的SQL语句。"><a href="#10-写出创建一个视图，包含员工姓名、部门名称和入职年份的SQL语句。" class="headerlink" title="10. 写出创建一个视图，包含员工姓名、部门名称和入职年份的SQL语句。"></a>10. 写出创建一个视图，包含员工姓名、部门名称和入职年份的SQL语句。</h3><details class="folding-tag" blue><summary> 查看答案 </summary>              <div class='content'>              <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> employee_info <span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> e.name, d.name <span class="keyword">AS</span> department_name, <span class="keyword">YEAR</span>(e.hire_date) <span class="keyword">AS</span> hire_year</span><br><span class="line"><span class="keyword">FROM</span> employees e</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> departments d <span class="keyword">ON</span> e.department_id <span class="operator">=</span> d.id;</span><br></pre></td></tr></table></figure>              </div>            </details><h3 id="11-写出查询入职日期在2022年1月1日至2023年12月31日之间的员工信息的SQL语句。"><a href="#11-写出查询入职日期在2022年1月1日至2023年12月31日之间的员工信息的SQL语句。" class="headerlink" title="11. 写出查询入职日期在2022年1月1日至2023年12月31日之间的员工信息的SQL语句。"></a>11. 写出查询入职日期在2022年1月1日至2023年12月31日之间的员工信息的SQL语句。</h3><details class="folding-tag" blue><summary> 查看答案 </summary>              <div class='content'>              <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> hire_date <span class="keyword">BETWEEN</span> <span class="string">&#x27;2022-01-01&#x27;</span> <span class="keyword">AND</span> <span class="string">&#x27;2023-12-31&#x27;</span>;</span><br></pre></td></tr></table></figure>              </div>            </details><h3 id="12-写出查询姓名以’张’开头的员工信息的SQL语句。"><a href="#12-写出查询姓名以’张’开头的员工信息的SQL语句。" class="headerlink" title="12. 写出查询姓名以’张’开头的员工信息的SQL语句。"></a>12. 写出查询姓名以’张’开头的员工信息的SQL语句。</h3><details class="folding-tag" blue><summary> 查看答案 </summary>              <div class='content'>              <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> name <span class="keyword">LIKE</span> <span class="string">&#x27;张%&#x27;</span>;</span><br></pre></td></tr></table></figure>              </div>            </details><h3 id="13-写出查询每个部门不同性别的员工人数的SQL语句。"><a href="#13-写出查询每个部门不同性别的员工人数的SQL语句。" class="headerlink" title="13. 写出查询每个部门不同性别的员工人数的SQL语句。"></a>13. 写出查询每个部门不同性别的员工人数的SQL语句。</h3><details class="folding-tag" blue><summary> 查看答案 </summary>              <div class='content'>              <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> d.name <span class="keyword">AS</span> department_name, e.gender, <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">AS</span> count</span><br><span class="line"><span class="keyword">FROM</span> departments d</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> employees e <span class="keyword">ON</span> d.id <span class="operator">=</span> e.department_id</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> d.name, e.gender;</span><br></pre></td></tr></table></figure>              </div>            </details><h3 id="14-写出查询员工表中工资最高的员工信息的SQL语句。"><a href="#14-写出查询员工表中工资最高的员工信息的SQL语句。" class="headerlink" title="14. 写出查询员工表中工资最高的员工信息的SQL语句。"></a>14. 写出查询员工表中工资最高的员工信息的SQL语句。</h3><details class="folding-tag" blue><summary> 查看答案 </summary>              <div class='content'>              <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> salary <span class="operator">=</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="built_in">MAX</span>(salary)</span><br><span class="line">    <span class="keyword">FROM</span> employees</span><br><span class="line">);</span><br></pre></td></tr></table></figure>              </div>            </details><h3 id="15-写出删除employees表中所有记录的SQL语句（保留表结构）。"><a href="#15-写出删除employees表中所有记录的SQL语句（保留表结构）。" class="headerlink" title="15. 写出删除employees表中所有记录的SQL语句（保留表结构）。"></a>15. 写出删除employees表中所有记录的SQL语句（保留表结构）。</h3><details class="folding-tag" blue><summary> 查看答案 </summary>              <div class='content'>              <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">TRUNCATE</span> <span class="keyword">TABLE</span> employees;</span><br></pre></td></tr></table></figure>              </div>            </details><h2 id="三、综合应用题"><a href="#三、综合应用题" class="headerlink" title="三、综合应用题"></a>三、综合应用题</h2><h3 id="1-设计一个简单的学生选课系统数据库，包含学生表、课程表和选课表，写出创建这三个表的SQL语句，并设置适当的主键、外键和约束。"><a href="#1-设计一个简单的学生选课系统数据库，包含学生表、课程表和选课表，写出创建这三个表的SQL语句，并设置适当的主键、外键和约束。" class="headerlink" title="1. 设计一个简单的学生选课系统数据库，包含学生表、课程表和选课表，写出创建这三个表的SQL语句，并设置适当的主键、外键和约束。"></a>1. 设计一个简单的学生选课系统数据库，包含学生表、课程表和选课表，写出创建这三个表的SQL语句，并设置适当的主键、外键和约束。</h3><details class="folding-tag" blue><summary> 查看答案 </summary>              <div class='content'>              <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 学生表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> students (</span><br><span class="line">    id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT,</span><br><span class="line">    name <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    gender ENUM(<span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;女&#x27;</span>),</span><br><span class="line">    birth_date <span class="type">DATE</span>,</span><br><span class="line">    student_id <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">UNIQUE</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 课程表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> courses (</span><br><span class="line">    id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT,</span><br><span class="line">    name <span class="type">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    credit <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    teacher <span class="type">VARCHAR</span>(<span class="number">50</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 选课表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> course_selections (</span><br><span class="line">    id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT,</span><br><span class="line">    student_id <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    course_id <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    score <span class="type">DECIMAL</span>(<span class="number">5</span>, <span class="number">2</span>),</span><br><span class="line">    select_date <span class="type">DATE</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_DATE</span>,</span><br><span class="line">    <span class="keyword">FOREIGN</span> KEY (student_id) <span class="keyword">REFERENCES</span> students(id) <span class="keyword">ON</span> <span class="keyword">DELETE</span> CASCADE,</span><br><span class="line">    <span class="keyword">FOREIGN</span> KEY (course_id) <span class="keyword">REFERENCES</span> courses(id) <span class="keyword">ON</span> <span class="keyword">DELETE</span> CASCADE,</span><br><span class="line">    <span class="keyword">UNIQUE</span> (student_id, course_id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>              </div>            </details><h3 id="2-针对上述学生选课系统，写出查询每个学生所选课程数量和平均成绩的SQL语句。"><a href="#2-针对上述学生选课系统，写出查询每个学生所选课程数量和平均成绩的SQL语句。" class="headerlink" title="2. 针对上述学生选课系统，写出查询每个学生所选课程数量和平均成绩的SQL语句。"></a>2. 针对上述学生选课系统，写出查询每个学生所选课程数量和平均成绩的SQL语句。</h3><details class="folding-tag" blue><summary> 查看答案 </summary>              <div class='content'>              <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> s.id, s.name, <span class="built_in">COUNT</span>(cs.course_id) <span class="keyword">AS</span> course_count, <span class="built_in">AVG</span>(cs.score) <span class="keyword">AS</span> avg_score</span><br><span class="line"><span class="keyword">FROM</span> students s</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> course_selections cs <span class="keyword">ON</span> s.id <span class="operator">=</span> cs.student_id</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> s.id, s.name;</span><br></pre></td></tr></table></figure>              </div>            </details><h3 id="3-写出一个事务，实现从A账户向B账户转账1000元的功能，确保事务的ACID属性。"><a href="#3-写出一个事务，实现从A账户向B账户转账1000元的功能，确保事务的ACID属性。" class="headerlink" title="3. 写出一个事务，实现从A账户向B账户转账1000元的功能，确保事务的ACID属性。"></a>3. 写出一个事务，实现从A账户向B账户转账1000元的功能，确保事务的ACID属性。</h3><details class="folding-tag" blue><summary> 查看答案 </summary>              <div class='content'>              <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">START</span> TRANSACTION;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 检查A账户余额是否足够</span></span><br><span class="line"><span class="keyword">SELECT</span> balance <span class="keyword">INTO</span> <span class="variable">@a_balance</span> <span class="keyword">FROM</span> accounts <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span> <span class="keyword">FOR</span> <span class="keyword">UPDATE</span>;</span><br><span class="line">IF <span class="variable">@a_balance</span> <span class="operator">&lt;</span> <span class="number">1000</span> <span class="keyword">THEN</span></span><br><span class="line">    <span class="keyword">ROLLBACK</span>;</span><br><span class="line">    SIGNAL <span class="keyword">SQLSTATE</span> <span class="string">&#x27;45000&#x27;</span> <span class="keyword">SET</span> MESSAGE_TEXT <span class="operator">=</span> <span class="string">&#x27;余额不足&#x27;</span>;</span><br><span class="line"><span class="keyword">END</span> IF;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 从A账户扣款</span></span><br><span class="line"><span class="keyword">UPDATE</span> accounts <span class="keyword">SET</span> balance <span class="operator">=</span> balance <span class="operator">-</span> <span class="number">1000</span> <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 向B账户存款</span></span><br><span class="line"><span class="keyword">UPDATE</span> accounts <span class="keyword">SET</span> balance <span class="operator">=</span> balance <span class="operator">+</span> <span class="number">1000</span> <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 提交事务</span></span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></table></figure>              </div>            </details><h3 id="4-设计一个简单的博客系统数据库，包含用户表、文章表和评论表，写出创建这三个表的SQL语句，并设置适当的主键、外键和约束。"><a href="#4-设计一个简单的博客系统数据库，包含用户表、文章表和评论表，写出创建这三个表的SQL语句，并设置适当的主键、外键和约束。" class="headerlink" title="4. 设计一个简单的博客系统数据库，包含用户表、文章表和评论表，写出创建这三个表的SQL语句，并设置适当的主键、外键和约束。"></a>4. 设计一个简单的博客系统数据库，包含用户表、文章表和评论表，写出创建这三个表的SQL语句，并设置适当的主键、外键和约束。</h3><details class="folding-tag" blue><summary> 查看答案 </summary>              <div class='content'>              <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 用户表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> users (</span><br><span class="line">    id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT,</span><br><span class="line">    username <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">UNIQUE</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    password <span class="type">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    email <span class="type">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">UNIQUE</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    create_time DATETIME <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 文章表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> articles (</span><br><span class="line">    id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT,</span><br><span class="line">    title <span class="type">VARCHAR</span>(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    content TEXT <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    author_id <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    create_time DATETIME <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span>,</span><br><span class="line">    update_time DATETIME <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="built_in">CURRENT_TIMESTAMP</span>,</span><br><span class="line">    <span class="keyword">FOREIGN</span> KEY (author_id) <span class="keyword">REFERENCES</span> users(id) <span class="keyword">ON</span> <span class="keyword">DELETE</span> CASCADE</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 评论表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> comments (</span><br><span class="line">    id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT,</span><br><span class="line">    content TEXT <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    article_id <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    user_id <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    create_time DATETIME <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span>,</span><br><span class="line">    <span class="keyword">FOREIGN</span> KEY (article_id) <span class="keyword">REFERENCES</span> articles(id) <span class="keyword">ON</span> <span class="keyword">DELETE</span> CASCADE,</span><br><span class="line">    <span class="keyword">FOREIGN</span> KEY (user_id) <span class="keyword">REFERENCES</span> users(id) <span class="keyword">ON</span> <span class="keyword">DELETE</span> CASCADE</span><br><span class="line">);</span><br></pre></td></tr></table></figure>              </div>            </details><h3 id="5-针对上述博客系统，写出查询每篇文章的标题、作者名和评论数量的SQL语句。"><a href="#5-针对上述博客系统，写出查询每篇文章的标题、作者名和评论数量的SQL语句。" class="headerlink" title="5. 针对上述博客系统，写出查询每篇文章的标题、作者名和评论数量的SQL语句。"></a>5. 针对上述博客系统，写出查询每篇文章的标题、作者名和评论数量的SQL语句。</h3><details class="folding-tag" blue><summary> 查看答案 </summary>              <div class='content'>              <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> a.title, u.username, <span class="built_in">COUNT</span>(c.id) <span class="keyword">AS</span> comment_count</span><br><span class="line"><span class="keyword">FROM</span> articles a</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> users u <span class="keyword">ON</span> a.author_id <span class="operator">=</span> u.id</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> comments c <span class="keyword">ON</span> a.id <span class="operator">=</span> c.article_id</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> a.id, a.title, u.username;</span><br></pre></td></tr></table></figure>              </div>            </details>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql数据库学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端学习【1】</title>
      <link href="/2025/07/17/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E3%80%901%E3%80%91/"/>
      <url>/2025/07/17/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E3%80%901%E3%80%91/</url>
      
        <content type="html"><![CDATA[<h1 id="前端学习【1】"><a href="#前端学习【1】" class="headerlink" title="前端学习【1】"></a>前端学习【1】</h1><blockquote><p>我终于开始写前端部分的博客了，这部分学着真的很好玩，反馈很强，但写博客就会很无聊，极其无聊，三剑客你大概知道怎么写就行，标签，效果啥的太多了，所以博客这边也就基本是一些链接了，外面的各大网站都有，有的还有内置的编辑器可以对着学习，我认为写在这里更多的是说明我正在系统性的学习这个部分罢了</p></blockquote><p><strong>这辈子就是被浏览器害了，浏览器才是这个世界上最强大的工具！！(暴论)</strong></p><h1 id="HTML（超文本标记语言）"><a href="#HTML（超文本标记语言）" class="headerlink" title="HTML（超文本标记语言）"></a>HTML（超文本标记语言）</h1><p>我们学这个玩意就是学个标签我非常推荐来这个网站来进行学习</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Learn_web_development/Core/Structuring_content/Basic_HTML_syntax">点这里开始系统系学习练习HTML+CSS</a></p><p>玩HTML+CSS就是玩标签，这里面没啥好说的，去查找更好的网站，讲的比我这里细节多了，所以我这里只会提供<strong>结构，各种蓝图，框架，可以直接拿着就去用的，还有标签速查表</strong></p><h2 id="HTML网站骨架"><a href="#HTML网站骨架" class="headerlink" title="HTML网站骨架"></a>HTML网站骨架</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>这是网页名喔的位置喔<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是第一标题喔的位置喔<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是第一段落喔的位置喔<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这是最基础的骨架部分，这是每个网站都需要的，<strong>不要自己写</strong>，直接复制粘贴，然后根据需要修改即可。</p><p>我在给个更标准的骨架<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>TT<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>我的第一个标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我的第一个段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><br><strong>涉及的元素和规则：</strong></p><ul><li><code>&lt;!DOCTYPE html&gt;</code>：声明文档类型，确保浏览器使用正确的渲染模式。</li><li><code>&lt;html lang=&quot;en&quot;&gt;</code>：根元素，指定文档的语言为英文。</li><li><code>&lt;head&gt;</code>：文档的元数据和头部信息。</li><li><code>&lt;meta charset=&quot;UTF-8&quot;&gt;</code>：指定字符编码为 UTF-8，确保正确显示特殊字符。</li><li><code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</code>：设置视口宽度，优化移动端访问。</li><li><code>&lt;title&gt;Document&lt;/title&gt;</code>：文档的标题，显示在浏览器标签和搜索结果中。</li></ul><h2 id="HTML标签速查表"><a href="#HTML标签速查表" class="headerlink" title="HTML标签速查表"></a>HTML标签速查表</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element">点这里查看HTML标签速查表</a></p><blockquote><p>这个标签要写在我这里得没完没了了，超级多，我提供常用标签如下:</p><h3 id="font标签-字体属性管理"><a href="#font标签-字体属性管理" class="headerlink" title="font标签(字体属性管理)"></a>font标签(字体属性管理)</h3><p><strong>font</strong>标签是字体标签，用来设置字体的颜色，大小，字体等属性（用法如下）<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">&quot;red&quot;</span>&gt;</span>这是红色字体<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br></pre></td></tr></table></figure><br>font标签的属性有：</p><ul><li>color：字体颜色</li><li>size：字体大小</li><li>face：字体类型</li></ul></blockquote><p>font标签的属性值有：</p><ul><li>颜色：red、green、blue、#FF0000（十六进制）等</li><li>大小：px、em、%等</li><li>字体：宋体、微软雅黑等</li></ul><p>font标签的属性可以组合使用，例如：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">&quot;red&quot;</span> <span class="attr">size</span>=<span class="string">&quot;4&quot;</span>&gt;</span>这是红色字体<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br></pre></td></tr></table></figure><br>font标签的属性可以使用<strong>CSS</strong>来设置，例如：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">font</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">    size: <span class="number">4px</span>;</span><br><span class="line">    face: 宋体;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="br标签-换行"><a href="#br标签-换行" class="headerlink" title="br标签(换行)"></a>br标签(换行)</h3><p><strong>br</strong>标签是换行标签，用来换行（用法如下）<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure><br>br标签的属性可以使用<strong>CSS</strong>来设置，例如：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">br &#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="hr标签-水平线"><a href="#hr标签-水平线" class="headerlink" title="hr标签(水平线)"></a>hr标签(水平线)</h3><p><strong>hr</strong>标签是水平线标签，用来绘制水平线（用法如下）<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br></pre></td></tr></table></figure><br>hr标签的属性可以使用<strong>CSS</strong>来设置，例如：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hr &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">1px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#333</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="路径相关"><a href="#路径相关" class="headerlink" title="路径相关"></a>路径相关</h3><p>路径相关标签用来定义文档的路径，有6个等级，分别是：</p><ul><li>base：基本路径</li><li>link：链接路径</li><li>meta：元数据路径</li><li>script：脚本路径</li><li>style：样式路径</li><li>title：标题路径</li></ul><p>路径相关标签的用法如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">base</span> <span class="attr">href</span>=<span class="string">&quot;https://www.baidu.com&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><br>进入到上一级文件：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">base</span> <span class="attr">href</span>=<span class="string">&quot;../&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><br>进入到下一级文件：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">base</span> <span class="attr">href</span>=<span class="string">&quot;./&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="标题标签"><a href="#标题标签" class="headerlink" title="标题标签"></a>标题标签</h3><p>加粗，定位，字体大小<br><strong>标题标签</strong>用来定义文档的标题，有6个等级，分别是：</p><ul><li>h1：一级标题</li><li>h2：二级标题</li><li>h3：三级标题</li><li>h4：四级标题</li><li>h5：五级标题</li><li>h6：六级标题</li></ul><p>标题标签的用法如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>一级标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>二级标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>三级标题<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>四级标题<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h5</span>&gt;</span>五级标题<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h6</span>&gt;</span>六级标题<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br></pre></td></tr></table></figure><br>这里面有一些设置方式：<br>align属性：</p><ul><li>left：左对齐</li><li>center：居中对齐</li><li>right：右对齐</li><li>justify：两端对齐<br>实际在标签内使用为：<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span>一级标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">align</span>=<span class="string">&quot;left&quot;</span>&gt;</span>二级标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure>标题标签的属性可以使用<strong>CSS</strong>来设置，例如：<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">24px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="超链接标签"><a href="#超链接标签" class="headerlink" title="超链接标签"></a>超链接标签</h3><strong>超链接标签</strong>用来定义超链接，点击超链接可以跳转到其他页面（用法如下）<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.baidu.com&quot;</span>&gt;</span>这是一个超链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>超链接标签的属性有：</li><li>href：超链接目标的URL</li><li>target：超链接打开的目标窗口（_blank：新窗口，_self：当前窗口）<ul><li>新窗口：_blank</li><li>当前窗口：_self<br>下面是一个例子：<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.baidu.com&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>这是一个超链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.baidu.com&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_self&quot;</span>&gt;</span>这是一个超链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><p>超链接标签的属性可以使用<strong>CSS</strong>来设置，例如：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#007bff</span>;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="img标签-图片"><a href="#img标签-图片" class="headerlink" title="img标签(图片)"></a>img标签(图片)</h3><p><strong>img</strong>标签是图片标签，用来显示图片（用法如下）<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;图片路径&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;图片描述&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><br>img标签的属性有：</p><ul><li>src：图片路径</li><li>alt：图片加载失败时显示的替代文本</li><li>width：图片宽度</li><li>height：图片高度</li><li>style：图片样式</li><li>align：图片对齐方式</li><li>border：图片边框</li><li>vspace：图片垂直间距</li><li>hspace：图片水平间距<br>我给个样例啊：<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;图片路径&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;图片描述&quot;</span> <span class="attr">width</span>=<span class="string">&quot;200&quot;</span> <span class="attr">height</span>=<span class="string">&quot;200&quot;</span> <span class="attr">style</span>=<span class="string">&quot;border: 1px solid #000;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>你也可以获取网上的图片，取得该图片的url，然后复制到src中，案例如下<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;http://gips3.baidu.com/it/u=1821127123,1149655687&amp;fm=3028&amp;app=3028&amp;f=JPEG&amp;fmt=auto?w=720&amp;h=1280&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;图片描述放这里&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>img标签的属性可以使用<strong>CSS</strong>来设置，例如：<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="表格标签"><a href="#表格标签" class="headerlink" title="表格标签"></a>表格标签</h3><strong>表格标签</strong>用来定义表格（用法如下）<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>表格标签的属性有：</li><li>border：表格边框</li><li>cellspacing：单元格间距</li><li>cellpadding：单元格内边距</li><li>width：表格宽度</li><li>height：表格高度</li><li>style：表格样式<br>表格标签的属性可以使用<strong>CSS</strong>来设置，例如：<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">table</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="列表标签"><a href="#列表标签" class="headerlink" title="列表标签"></a>列表标签</h3><strong>列表标签</strong>用来定义列表（用法如下）<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>列表标签的属性有：</li><li>type：列表类型（disc：圆点，square：方块，circle：圆）</li><li>style：列表样式</li><li>width：列表宽度</li><li>height：列表高度</li><li>align：列表对齐方式</li></ul><p>列表标签的属性可以使用<strong>CSS</strong>来设置，例如：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">ul</span> &#123;</span><br><span class="line">    <span class="attribute">list-style-type</span>: disc;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>ol</strong>有序列表<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- li是列表项 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure><br><strong>ul</strong>无序列表<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><br>这两个的type属性中可以选择</p><ul><li>disc：圆点</li><li>square：方块</li><li>circle：圆<h3 id="表单标签"><a href="#表单标签" class="headerlink" title="表单标签"></a>表单标签</h3>表单标签很重要，用来收集用户信息<br>由用户输入信息，提交到服务器，服务器处理数据，返回结果。是前后端交互的重要方式。</li></ul><p><strong>表单标签</strong>用来定义表单（用法如下）<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;name&quot;</span>&gt;</span>姓名：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;name&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">required</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><br>表单标签的属性有：</p><ul><li>action：表单提交的目标URL</li><li>method：表单提交的方式（GET、POST）<ul><li>GET：将表单数据拼接在URL后面，提交到服务器<br>会将表单信息暴露在URL上，不安全</li><li>POST：将表单数据放在请求体中提交到服务器<br>不会将表单信息暴露在URL上，安全</li></ul></li><li>name：表单的名称</li><li>id：表单的唯一标识</li><li>required：必填项</li><li>type：输入框的类型（text、password、radio、checkbox、select、textarea）</li><li>value：输入框的默认值</li><li>placeholder：输入框的占位符</li><li>style：输入框的样式</li><li>readonly：只读属性</li><li>disabled：禁用属性</li><li>multiple：多选属性</li><li>size：输入框的宽度</li><li>maxlength：输入框的最大长度</li><li>minlength：输入框的最小长度</li><li>pattern：输入框的正则表达式验证</li><li>form：输入框所属的表单</li><li>formaction：表单提交的目标URL</li><li>formmethod：表单提交的方式（GET、POST）</li><li>formname：表单的名称</li></ul><h2 id="实际样例参考蓝图布局"><a href="#实际样例参考蓝图布局" class="headerlink" title="实际样例参考蓝图布局"></a>实际样例参考蓝图布局</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">&lt;!--超级参考，超级易懂的一个简单的元素介绍页面--&gt;</span></span><br><span class="line">    <span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>这是个元素操作使用学习页面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 我们以一个登录页面来学习元素操作 --&gt;</span></span><br><span class="line">     <span class="comment">&lt;!-- 因为用户登录页面的泛用性比较广，并且有传值操作内容 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--大標題--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">align</span> = <span class="string">&quot;center&quot;</span>&gt;</span>这是个元素操作使用学习页面<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--tr和td是表格的行和列--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span>用户名（文本）<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- text是文本框 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">required</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">&quot;right&quot;</span>&gt;</span>性别（单选框）<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- radio是单选框 --&gt;</span></span><br><span class="line">             <span class="comment">&lt;!-- 可以用checked来设置默认选中(默认高亮) --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">checked</span>=<span class="string">&quot;true&quot;</span>&gt;</span>男</span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span>&gt;</span>女<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">&quot;right&quot;</span>&gt;</span>年龄（下拉列表）<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- select是下拉列表 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">id</span>=<span class="string">&quot;age&quot;</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- option是下拉列表的选项 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;18&quot;</span>&gt;</span>18<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;19&quot;</span>&gt;</span>19<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;20&quot;</span>&gt;</span>20<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">&quot;right&quot;</span>&gt;</span>兴趣（复选框）<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- checkbox是复选框 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;interest&quot;</span> <span class="attr">id</span>=<span class="string">&quot;interest&quot;</span>&gt;</span>篮球</span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;interest&quot;</span> <span class="attr">id</span>=<span class="string">&quot;interest&quot;</span>&gt;</span>足球</span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;interest&quot;</span> <span class="attr">id</span>=<span class="string">&quot;interest&quot;</span>&gt;</span>跑步<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">&quot;right&quot;</span>&gt;</span>登录（提交按钮）<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- submit是提交按钮 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;登录&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">&quot;right&quot;</span>&gt;</span>重置（重置按钮）<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- reset是重置按钮 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span> <span class="attr">value</span>=<span class="string">&quot;重置&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 文件上传 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">&quot;right&quot;</span>&gt;</span>文件上传<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span> <span class="attr">id</span>=<span class="string">&quot;file&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- textarea是文本域 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">&quot;textarea&quot;</span> <span class="attr">id</span>=<span class="string">&quot;textarea&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;30&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;10&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="CSS（层叠样式表）"><a href="#CSS（层叠样式表）" class="headerlink" title="CSS（层叠样式表）"></a>CSS（层叠样式表）</h1><p><strong>CSS</strong>是用来定义网页的样式的，是<strong>HTML</strong>的补充。</p><p>它是属性样式定义，对特定id,标签，类进行样式定义。</p><blockquote><p>三种选择器存在优先级顺序：<br>id选择器 &gt; 类选择器 &gt; 元素选择器</p></blockquote><p><strong>CSS实例样式：</strong><br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 选择器 &#123; 属性: 值; &#125; */</span></span><br><span class="line"><span class="comment">/* 元素选择器 */</span></span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 类选择器 */</span></span><br><span class="line"><span class="selector-class">.red</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* ID选择器 */</span></span><br><span class="line"><span class="selector-id">#id</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>你可以直接在HTML文件体中定义CSS样式，也可以在外部文件中定义CSS样式。</p><blockquote><p>直接在HTML文件体中定义CSS样式的方法是：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="comment">/* 选择器 &#123; 属性: 值; &#125; */</span></span></span><br><span class="line"><span class="language-css">    <span class="comment">/* 元素选择器 */</span></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="comment">/* 类选择器 */</span></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.red</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="comment">/* ID选择器 */</span></span></span><br><span class="line"><span class="language-css">    <span class="selector-id">#id</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><br>在外部文件中定义CSS样式的方法是：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 选择器 &#123; 属性: 值; &#125; */</span></span><br><span class="line"><span class="comment">/* 元素选择器 */</span></span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 类选择器 */</span></span><br><span class="line"><span class="selector-class">.red</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* ID选择器 */</span></span><br><span class="line"><span class="selector-id">#id</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>外部调用是最常见的用法，也是最合理的。想要在外部调用CSS样式，需要在HTML文件中引入CSS文件。<br>引入CSS文件的方法是：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;css/样式.css&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">link</span>&gt;</span></span><br><span class="line">&lt;！-- 也可以 -- &gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    </span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">table</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><br>rel属性指定文档与外部资源的关系。stylesheet表示引入CSS文件。<br>href属性指定引入的外部资源的位置。<br>CSS文件的位置可以是本地文件，也可以是远程文件。<br>CSS文件的位置可以是相对位置，也可以是绝对位置。<br>CSS文件的位置可以是多个文件，也可以是一个文件。</p></blockquote><p>若是多个文件，需要在每个文件中引入CSS文件。像下面这样：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;css/样式.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;css/样式2.css&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><br><strong>以下是关于CSS的三大选择器在HTML中的例子：</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 元素选择器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一个段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 类选择器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;red&quot;</span>&gt;</span>这是一个红色的div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- ID选择器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;id&quot;</span>&gt;</span>这是一个ID选择器<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><br>以下是CSS的三大选择器的例子：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 元素选择器 */</span></span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 类选择器 */</span></span><br><span class="line"><span class="selector-class">.red</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* ID选择器 */</span></span><br><span class="line"><span class="selector-id">#id</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>但是这样用选择器是很不灵活的，所以存在复合选择器，他可以更加精准的选择元素和标签，有两个及其以上的选择器组合而成的是复合选择器<br><strong>以下是CSS的复合选择器的例子：</strong><br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 后代选择器 */</span></span><br><span class="line"><span class="selector-tag">div</span> <span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 子代选择器 */</span></span><br><span class="line"><span class="selector-tag">div</span> &gt; <span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 并集选择器 */</span></span><br><span class="line"><span class="selector-tag">div</span>, <span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>以下是CSS的复合选择器的说明：</p><ul><li><p>后代选择器：选择器1 选择器2 { 属性: 值; }<br>  这个玩意又叫包含选择器，外层标签在前面，内层标签在后面，表示选择选择器1中的所有选择器2的元素，记得用空格隔开，前者为父亲（父元素），后者为儿子（子元素），理论上你可以一直套下去，最后选择的最后儿子，选择器2可以是任意一个基础选择器</p></li><li><p>子代选择器：选择器1 &gt; 选择器2 { 属性: 值; }<br>  这个玩意又叫直接选择器，外层标签在前面，内层标签在后面，表示选择选择器1中的直接儿子，选择器2只能是直接的子元素，选择器1和选择器2之间不能有空格隔开</p></li><li><p>并集选择器：选择器1, 选择器2 { 属性: 值; }<br>  这个玩意又叫并集选择器，选择器1和选择器2之间用逗号隔开，这个玩意的作用是将两种选择器的样式合并起来，选择器1和选择器2之间不能有空格隔开</p></li></ul><blockquote><p>不得不说前端部分的东西真的都多呢，学起来其实还是很有成就感的，毕竟看的见摸得着</p></blockquote><p>常用的CSS属性字段表：<br><a href="https://cankaoshouce.com/css/cssref.html">这个想想也会很多的吧靠北，点这个链接查找把</a></p><p><strong>我这里放几个常用的,最常用的CSS的属性的属性表：按照文本属性，按照背景属性，按照边框属性，按照定位属性，按照其他属性来分</strong><br>文本属性：</p><ul><li>color：文本颜色</li><li>font-size：字体大小</li><li>font-family：字体类型</li><li>text-align：文本对齐方式</li><li>text-decoration：文本装饰线</li><li>line-height：行高</li></ul><p>背景属性：</p><ul><li>background-color：背景颜色</li><li>background-image：背景图片</li><li>background-repeat：背景重复</li><li>background-position：背景位置</li></ul><p>边框属性：</p><ul><li>border-width：边框宽度</li><li>border-style：边框样式</li><li>border-color：边框颜色</li></ul><p>定位属性：</p><ul><li>position：定位方式</li><li>top：顶部位置</li><li>left：左侧位置</li><li>right：右侧位置</li><li>bottom：底部位置</li></ul><p>其他属性：</p><ul><li>margin：外边距</li><li>padding：内边距</li><li>display：显示方式</li><li>float：浮动方式</li><li>clear：清除浮动</li><li>cursor：鼠标指针</li><li>z-index：层叠顺序</li></ul><blockquote><p>够了吗？别贪得无厌啊，特么喵的，爷爷我连个四级都没有过，叫我说“看着提示的标签你就知道是干什么的了”，不是找打吗喵</p></blockquote><h2 id="CSS基础框盒模型"><a href="#CSS基础框盒模型" class="headerlink" title="CSS基础框盒模型"></a>CSS基础框盒模型</h2><p>border可以设置元素的边框，网页的各个组件和设计基本上就是大框套小框<br>边框有三个部分组成：边框宽度，边框颜色，边框样式</p><blockquote><p>border-width：边框宽度<br>border-style：边框样式<br>border-color：边框颜色</p></blockquote><p>border-style：边框样式设置</p><ul><li>solid：实线</li><li>dotted：虚线</li><li>dashed：破折线</li></ul><blockquote><p>border-width：边框宽度<br>border-style：边框样式<br>border-color：边框颜色</p></blockquote><p>border-style：边框样式设置</p><ul><li>solid：实线</li><li>dotted：虚线</li><li>dashed：破折线</li></ul><h3 id="CSS3效果"><a href="#CSS3效果" class="headerlink" title="CSS3效果"></a>CSS3效果</h3><p>圆角边框，阴影，渐变，过渡，动画等<br>这里提一下就行：效果有点多，而且可定制化，但是也比较复杂，需要自己去研究，这里就不详细介绍了<br><a href="https://developer.mozilla.org/">点这个，快点这个，喵的，后面没有了，这里去细节学习</a></p><h1 id="javaScript"><a href="#javaScript" class="headerlink" title="javaScript"></a>javaScript</h1><blockquote><p>这个是前端的脚本语言，用来给网页添加互动性，比如：弹窗，表单验证，动态内容更新等，可以说是前端的灵魂</p></blockquote><p>js如何和HTML进行联系：</p><ul><li>内联式：在HTML标签中使用script标签，将js代码写在标签中<br>  只需要在HTML标签中使用script标签，将js代码写在标签中，不需要引入外部文件，但是这种方式不推荐，因为js代码写在HTML标签中，会导致HTML标签变得冗长，影响网页的加载速度（你还觉得HTML不够长吗？）</li><li><p>外部式：在外部文件中写js代码，然后在HTML标签中使用script标签引入外部文件<br>  外部式的js代码写在外部文件中，需要引入外部文件，这种是最主流的操作，可以通过script标签引入外部文件。写法如下</p>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/脚本.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>  <strong>script标签可以引入内部的js代码，也可以引入外部代码，但是功能只可以二选一</strong></p></li><li><p>嵌入式：在HTML标签中使用script标签，将js代码写在标签中，但是使用type属性，将script标签设置为text/javascript，这样浏览器就会将script标签中的代码作为js代码执行</p></li></ul><p>注意在同一个块中，script标签只能引入一个外部文件，但是可以引入多个内部的js代码，但是不推荐这样做</p><p>以下是两种引用方式的实际案例：（这里强烈建议在代码中使用内联式的，写好了后再将其移出去）<br>内嵌式标签：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// alert是js语言提供了一个警告框函数</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 可以接受任意类型的参数</span></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">&quot;hello!!JavaScript&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><br>外链式标签：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/脚本.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><br>外链式标签的js代码写在外部文件中，需要引入外部文件，但是这种方式不推荐，因为js代码写在外部文件中，会导致HTML标签变得冗长，影响网页的加载速度（你还觉得HTML不够长吗？）</p><h2 id="js的变量"><a href="#js的变量" class="headerlink" title="js的变量"></a>js的变量</h2><p>变量的意思大家都知道，就是用来存储数据的，变量的类型有：</p><ul><li>字符串:String</li><li>数字（所有的数值类型）统一为：number</li><li>布尔值:boolean</li><li>函数类型:function</li><li>对象：object</li><li>未定义：undefined<ul><li>空值：null</li></ul></li><li>NaN：Not a Number(非数字类型)<br>示例如下：<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// var可变类型</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> i;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 在控制台输出日志</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// typeOf 函数是js语言提供的一个函数，返回变量类型</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">typeof</span>(i));</span></span><br><span class="line"><span class="language-javascript">            i=<span class="number">12</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">typeof</span>(i));</span></span><br><span class="line"><span class="language-javascript">            i=<span class="number">3.14</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">typeof</span>(i));</span></span><br><span class="line"><span class="language-javascript">            i=<span class="string">&quot;helloJs&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">typeof</span>(i));</span></span><br><span class="line"><span class="language-javascript">            i=<span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">typeof</span>(i));</span></span><br><span class="line"><span class="language-javascript">            i=<span class="keyword">new</span> <span class="title class_">Date</span>();</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">typeof</span>(i));</span></span><br><span class="line"><span class="language-javascript">            </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>为什么代码不自动对齐呜呜呜……</li></ul><h2 id="js的运算符"><a href="#js的运算符" class="headerlink" title="js的运算符"></a>js的运算符</h2><p>这个简单过一下就行上表格：（运算符，描述，例子，运算结果）<br>|运算符|描述|例子|运算结果|<br>|—|—|—|—|<br>|+|加法|1+2|3|<br>|-|减法|1-2|-1|<br>|<em>|乘法|1</em>2|2|<br>|/|除法|1/2|0.5|<br>|%|取余|1%2|1|<br>|++|自增|i++|1|<br>|—|自减|i—|1|<br>|+|字符串连接|1+”2”|”12”|<br>|==|等于|1==2|false|<br>|!=|不等于|1!=2|true|<br>|&gt;|大于|1&gt;2|false|<br>|&lt;|小于|1<2|true||>=|大于等于|1&gt;=2|false|<br>|&lt;=|小于等于|1&lt;=2|true|<br>|&amp;&amp;|逻辑与|1&amp;&amp;2|2|<br>||||逻辑或|1||2|1|<br>|!|逻辑非|!1|false|</p><p>ok,打住，这玩意都不认识的建议再单独看看基础QAQ</p><blockquote><p>+有加法和连接符两种作业，如果+的某一边是字符串那么就是为字符串，否则为加法。</p></blockquote><p><strong>隐式类型转换</strong><br>如果参与数学运算的某个操作数不是数字类型，那么JS会自动将此操作数转换为数字类型。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> i=<span class="string">&quot;123&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> j=<span class="number">123</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i+j);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><br><strong>显示类型转换</strong><br>如果需要将一个变量转换为数字类型，那么可以使用Number()函数<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> i=<span class="string">&quot;123&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> j=<span class="title class_">Number</span>(i);</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">typeof</span>(j));</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><br><strong>字符串类型转换</strong><br>如果需要将一个变量转换为字符串类型，那么可以使用toString()函数<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> i=<span class="number">123</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> j=i.<span class="title function_">toString</span>();</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">typeof</span>(j));</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><br>有很多有很多，这里就不一一列举了。都是些很基础的东西，建议去看看js的官方文档。</p><h2 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h2><p><strong>流程控制语句</strong><br>分类：</p><ol><li>条件判断语句</li><li>条件分支语句</li><li>循环语句</li></ol><p>这里的控制语句与java的相比很相似，简化了许多地方，整体看来还是变简单了<br><strong>条件判断语句</strong><br>if语句<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> i=<span class="number">123</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">if</span>(i&gt;<span class="number">100</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;i大于100&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><br><strong>条件分支语句</strong><br>switch语句<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> i=<span class="number">123</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">switch</span>(i)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">case</span> <span class="number">123</span>:</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;i等于123&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">break</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">case</span> <span class="number">456</span>:</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;i等于456&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">break</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">default</span>:</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;i不等于123也不等于456&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><br><strong>循环语句</strong><br>for语句<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><br>while语句<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> i=<span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">while</span>(i&lt;<span class="number">10</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span></span><br><span class="line"><span class="language-javascript">        i++;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><br>do…while语句<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> i=<span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">do</span>&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span></span><br><span class="line"><span class="language-javascript">        i++;</span></span><br><span class="line"><span class="language-javascript">    &#125;<span class="keyword">while</span>(i&lt;<span class="number">10</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><br><strong>数组</strong><br>字面量数组的创建<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(arr);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><br>构造函数创建数组<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> arr=<span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(arr);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><br>遍历数组<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;arr.<span class="property">length</span>;i++)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(arr[i]);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>这玩意就像是java的方法的概念，可以让这些代码被复用。具有一次定义，多次调用的优点<br>创建函数<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">say</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><br>调用函数<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">say</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">say</span>();</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="函数的参数"><a href="#函数的参数" class="headerlink" title="函数的参数"></a>函数的参数</h3><p>函数的参数可以有多个，也可以没有参数<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">say</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">say</span>();</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="函数的返回值"><a href="#函数的返回值" class="headerlink" title="函数的返回值"></a>函数的返回值</h3><p>函数的返回值可以有多个，也可以没有返回值<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">say</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">say</span>();</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="js的事件"><a href="#js的事件" class="headerlink" title="js的事件"></a>js的事件</h2><p>什么是事件？事件是电脑输入设备与页面进行响应，称为事件。是js非常重要的性质<br>常用事件：</p><ul><li>onload加载事件，页面加载完成之后，常用于在页面初始化操作。</li><li>onclick点击事件，常用于按钮点击响应操作。</li><li>onblur失去焦点事件，常用于输入框失去焦点后验证其内容是否合法。</li><li>onchange内容发生改变事件，常用于下拉列表和输入框内容发生改变后的操作。</li><li>onsubmit表单提交事件，用于表单提交时，验证所有表单项的内容是否合法。<br><strong>事件的注册又分为静态注册和动态注册两种：</strong><br><strong>什么是事件注册（绑定）：</strong><br>就是告诉浏览器，当事件响应后要执行的那些操作代码，叫事件注册或者事件绑定。</li><li>静态注册事件：通过HTML标签的事件属性直接赋予事件响应的代码，静态注册。</li><li>动态注册事件：通过Dom对象.事件名=function(){}这种形式赋予事件响应后的代码，动态注册</li></ul><h3 id="onload页面加载完成事件"><a href="#onload页面加载完成事件" class="headerlink" title="onload页面加载完成事件"></a>onload页面加载完成事件</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// onload事件动态注册，是固定写法</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">window</span>.<span class="property">onload</span>=<span class="keyword">function</span> (<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>(<span class="string">&#x27;动态注册&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 静态事件注册</span></span><br><span class="line"><span class="comment">        onload 事件是浏览器解析完页面之后就会自动触发的事件（代码）</span></span><br><span class="line"><span class="comment">        onload=&quot;alert(&#x27;body&#x27;);</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="onclick点击事件"><a href="#onclick点击事件" class="headerlink" title="onclick点击事件"></a>onclick点击事件</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// onclick事件动态注册，是固定写法</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">window</span>.<span class="property">onclick</span>=<span class="keyword">function</span> (<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>(<span class="string">&#x27;动态注册&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 静态事件注册</span></span><br><span class="line"><span class="comment">        onclick 事件是浏览器解析完页面之后就会自动触发的事件（代码）</span></span><br><span class="line"><span class="comment">        onclick=&quot;alert(&#x27;body&#x27;);</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="onblur失去焦点事件"><a href="#onblur失去焦点事件" class="headerlink" title="onblur失去焦点事件"></a>onblur失去焦点事件</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// onblur事件动态注册，是固定写法</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">window</span>.<span class="property">onblur</span>=<span class="keyword">function</span> (<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>(<span class="string">&#x27;动态注册&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 静态事件注册</span></span><br><span class="line"><span class="comment">        onblur 事件是浏览器解析完页面之后就会自动触发的事件（代码）</span></span><br><span class="line"><span class="comment">        onblur=&quot;alert(&#x27;body&#x27;);</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="onchange内容发生改变事件"><a href="#onchange内容发生改变事件" class="headerlink" title="onchange内容发生改变事件"></a>onchange内容发生改变事件</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// onchange事件动态注册，是固定写法</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">window</span>.<span class="property">onchange</span>=<span class="keyword">function</span> (<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>(<span class="string">&#x27;动态注册&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 静态事件注册</span></span><br><span class="line"><span class="comment">        onchange 事件是浏览器解析完页面之后就会自动触发的事件（代码）</span></span><br><span class="line"><span class="comment">        onchange=&quot;alert(&#x27;body&#x27;);</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="onsubmit表单提交事件"><a href="#onsubmit表单提交事件" class="headerlink" title="onsubmit表单提交事件"></a>onsubmit表单提交事件</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// onsubmit事件动态注册，是固定写法</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">window</span>.<span class="property">onsubmit</span>=<span class="keyword">function</span> (<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>(<span class="string">&#x27;动态注册&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 静态事件注册</span></span><br><span class="line"><span class="comment">        onsubmit 事件是浏览器解析完页面之后就会自动触发的事件（代码）</span></span><br><span class="line"><span class="comment">        onsubmit=&quot;alert(&#x27;body&#x27;);</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="内置对象"><a href="#内置对象" class="headerlink" title="内置对象"></a>内置对象</h2><p>js的对象分为3种：内置对象，自定义对象，浏览器对象</p><p>内置对象：Math/Array/Date对象带有属性和方法的特殊数据类型。</p><h3 id="Date对象"><a href="#Date对象" class="headerlink" title="Date对象"></a>Date对象</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 1970-1-1</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> now=<span class="keyword">new</span> <span class="title class_">Date</span>();</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 距1970-1-1起的毫秒数now.valueOf()</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(now.<span class="title function_">valueOf</span>());</span></span><br><span class="line"><span class="language-javascript">            now=<span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">2015</span>,<span class="number">4</span>,<span class="number">1</span>); <span class="comment">// 月0-11</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(now);</span></span><br><span class="line"><span class="language-javascript">            now=<span class="keyword">new</span> <span class="title class_">Date</span>();</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 日期格式化的方法 不同浏览器表现不一致</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// toLocaleDateString() 日期部分</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// toLocaleTimeString() 时间部分</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(now.<span class="title function_">toLocaleDateString</span>());</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;年:&quot;</span>+now.<span class="title function_">getFullYear</span>())</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;月:&quot;</span>+now.<span class="title function_">getMonth</span>())</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;当前月的第几天:&quot;</span>+now.<span class="title function_">getDate</span>())</span></span><br><span class="line"><span class="language-javascript">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="String字符串"><a href="#String字符串" class="headerlink" title="String字符串"></a>String字符串</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 由于字符串不可改变，再大量拼接字符串的时候会有效率问题</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// helloWorld是常量，当重新给str赋值的时候，不会被修改，依然内存中，重新给字符串赋值，会重新再内存中开辟空间</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> str=<span class="string">&quot;helloWorld&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">        str=<span class="string">&quot;helloJS!!&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> s=<span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;hello&quot;</span>); <span class="comment">// 内存保存在堆内存中</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">charAt</span>(<span class="number">1</span>)); <span class="comment">// 获取指定位置上的字符</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">charCodeAt</span>(<span class="number">0</span>));<span class="comment">//获取指定位置字符的ASCII码</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">substring</span>(<span class="number">1</span>,<span class="number">4</span>));</span></span><br><span class="line"><span class="language-javascript">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="js的组成"><a href="#js的组成" class="headerlink" title="js的组成"></a>js的组成</h2><p><strong>js是由三部分组成：ECMAScript、DOM、BOM。</strong><br>核心语法(ECMAScript)<br>JavaScript的核心语法是构建整个语言基础的部分。这包括了变量、数据类型、运算符、控制流（如if语句、循环）、函数等。<br>文档对象模型（DOM）<br>文档对象模型（DOM）是JavaScript与网页文档进行交互的一部分。它允许您通过JavaScript改、添加、删除页面上的元素和内容。<br>浏览器对象模型（BOM）<br>浏览器对象模型（BOM）是JavaScript与浏览器进行交互的一部分。它提供了访问和操作浏览器口，文档、导航历史等的方法和属性<br>DOM的概念<br>Document Object Model文档对象模型就是把HTML文档中的标签，属性，文本转换为对象来管DOM经常进行的操作<br><strong>DOM的操作</strong></p><ul><li>获取元素</li><li>对元素进行操作（设置属性或调用其方法）</li><li>动态创建元素</li><li>事件<br><strong>根据id获取元素</strong><br>document.getElementById(“ElementId值”)通过标签的Id属性值查找标签的dom对象，ElementId是标签的id属性值。<br><strong>根据name获取元素</strong><br>document.getElementsByName(“ElementName”)通过标签的name属性查找标签的dom对象，ElementsByName是标签的name属性值<br><strong>根据标签名获取元素</strong><br>document.getElementsByTagName(“tagName”)通过标签名查找标签dom对象，tagName是标签名<br><strong>说明指导</strong><br>document对象有三个查询方法，如果有id属性，优先使用getElementById方法来进行查询标签如果没有id属性，则优先使用getElementsByName方法来进行查询，如果id属性和name属性都没有最后再按照标签名查找getElementsByTagName。<br><strong>以上三个方法，一定要再页面加载完成之后执行，才能查询到标签对象。</strong><br>以下有几个案例：<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 全选</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">checkAll</span>(<span class="params">checkAll</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 获得checkAll标签的选中状态</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> checkAll_status=checkAll.<span class="property">checked</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 获得指定的name属性为hobby的标签，返回的是多个标签对象集合</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> hobbys=<span class="variable language_">document</span>.<span class="title function_">getElementsByName</span>(<span class="string">&quot;hobby&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 改变所有name属性为hobbys的checkbox的选中状态 修改为true</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;hobbys.<span class="property">length</span>;i++)&#123;</span></span><br><span class="line"><span class="language-javascript">        hobbys[i].<span class="property">checked</span>=checkAll_status;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">兴趣爱好:</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">id</span>=<span class="string">&quot;checkAll&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;checkAll(this)&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;java&quot;</span>/&gt;</span>java</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;python&quot;</span>/&gt;</span>python</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;css&quot;</span>/&gt;</span>css</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;js&quot;</span>/&gt;</span>js</span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>案例<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 动态注册 页面加载完成之后</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">window</span>.<span class="property">onload</span>=<span class="keyword">function</span> (<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;checkAll&quot;</span>).<span class="property">onclick</span>=<span class="keyword">function</span> (<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// getElementsByTagName按照指定标签名进行查询并返回集合</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> inputs= <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;input&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;inputs.<span class="property">length</span>;i++)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span>(inputs[i].<span class="property">name</span>=<span class="string">&#x27;hobby&#x27;</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            inputs[i].<span class="property">checked</span>=<span class="literal">true</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">兴趣爱好:</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;java&quot;</span>/&gt;</span>java</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;python&quot;</span>/&gt;</span>python</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;css&quot;</span>/&gt;</span>css</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;js&quot;</span>/&gt;</span>js<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;checkAll&quot;</span>&gt;</span>全选<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="操作属性"><a href="#操作属性" class="headerlink" title="操作属性"></a>操作属性</h2>通过各种获取元素的方式获取页面中的标签以后，可以直接操作dom元素的属性。<br><strong>1）innerHTML</strong><br>获取元素内部的HTML结构<br><strong>2）InnerText</strong><br>获取元素内部的文本（只能获取到文本内容，获取不到html标签）</li></ul><h1 id="BOM浏览器对象"><a href="#BOM浏览器对象" class="headerlink" title="BOM浏览器对象"></a>BOM浏览器对象</h1><h2 id="bom概念"><a href="#bom概念" class="headerlink" title="bom概念"></a>bom概念</h2><p>bom由多个对象组成，其中代表浏览器窗口的window对象是bom的顶层对象，其他对象都是该对象的子对象。</p><h2 id="对话框"><a href="#对话框" class="headerlink" title="对话框"></a>对话框</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">function</span> <span class="title function_">clickAlert</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">window</span>.<span class="title function_">alert</span>(<span class="string">&#x27;clickAlert&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 询问框 只有确定和取消两个按钮</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">function</span> <span class="title function_">showConfim</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span>(<span class="variable language_">window</span>.<span class="title function_">confirm</span>(<span class="string">&#x27;你确定要删除吗?&#x27;</span>))&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">&quot;删除成功&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">&quot;取消删除&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 对话框 提示文字的下方，有一个输入框</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">function</span> <span class="title function_">showPrompt</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> context= <span class="variable language_">window</span>.<span class="title function_">prompt</span>(<span class="string">&quot;请输入内容&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(context);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;clickAlert()&quot;</span>&gt;</span>alert<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;showConfim()&quot;</span>&gt;</span>confim<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;showPrompt()&quot;</span>&gt;</span>prompt<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 定时器</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 1）setTimeout() 延迟执行</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 2）setInterval() 重复执行</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 3）clearTimeout() 取消定时器</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 4）clearInterval() 取消定时器</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 1）setTimeout() 延迟执行</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// setTimeout(function()&#123;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//     alert(&quot;延迟执行&quot;);</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// &#125;,3000);</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 2）setInterval() 重复执行</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// setInterval(function()&#123;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//     alert(&quot;重复执行&quot;);</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// &#125;,3000);</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 3）clearTimeout() 取消定时器</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// var timer=setTimeout(function()&#123;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//     alert(&quot;延迟执行&quot;);</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// &#125;,3000);</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// clearTimeout(timer);</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 4）clearInterval() 取消定时器</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// var timer=setInterval(function()&#123;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//     alert(&quot;重复执行&quot;);</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// &#125;,3000);</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// clearInterval(timer);</span></span></span><br><span class="line"><span class="language-javascript">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;clickAlert()&quot;</span>&gt;</span>alert<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;showConfim()&quot;</span>&gt;</span>confim<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;showPrompt()&quot;</span>&gt;</span>prompt<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 结构速查 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java快速学习速查（7）[进阶篇]</title>
      <link href="/2025/07/14/java%E5%BF%AB%E9%80%9F%E5%AD%A6%E4%B9%A0%E9%80%9F%E6%9F%A5%EF%BC%887%EF%BC%89%5B%E8%BF%9B%E9%98%B6%E7%AF%87%5D/"/>
      <url>/2025/07/14/java%E5%BF%AB%E9%80%9F%E5%AD%A6%E4%B9%A0%E9%80%9F%E6%9F%A5%EF%BC%887%EF%BC%89%5B%E8%BF%9B%E9%98%B6%E7%AF%87%5D/</url>
      
        <content type="html"><![CDATA[<h1 id="java快速学习速查（7）-进阶篇"><a href="#java快速学习速查（7）-进阶篇" class="headerlink" title="java快速学习速查（7）[进阶篇]"></a>java快速学习速查（7）[进阶篇]</h1><h1 id="JBDC"><a href="#JBDC" class="headerlink" title="JBDC"></a>JBDC</h1><p>JDBC：java语言连接数据库，通过java语言操作数据库中的数据。JDBC（Java Database Connectivity）是sun公司指定的一套标准规范，由很多的类和接口组成，在java.sql.*包下。</p><p>JDBC本质上是sun公司提供的一套接口，接口的实现类由数据库厂商提供。</p><ul><li>sum公司定义的一套操作所有关系型数据库的规范，即接口。</li><li>各个数据库厂商去实现这套接口，提供数据库驱动jar包。</li><li>我们可以使用这套接口（JDBC）编程，真正执行的代码是驱动jar包中的实现类。</li></ul><p>这玩意的存在，为世界上所有的关系型数据库提供了统一的访问方式。是编程中访问数据库的标准规范。</p><blockquote><p>各数据库厂商使用相同的接口，java代码不需要针对不同的数据库分别开发。<br>可以随时替换叠层数据库，访问数据库的java代码基本不变，以后编写操作数据库的代码只需要面向JDBC（接口），操作哪个关系型数据库就需要导入该数据库的驱动jar包，需要操作mysql数据库，就需要在项目中导入mysql数据库的驱动包。</p></blockquote><h2 id="java访问数据库（流程和对应的方法）"><a href="#java访问数据库（流程和对应的方法）" class="headerlink" title="java访问数据库（流程和对应的方法）"></a>java访问数据库（流程和对应的方法）</h2><p>在java中访问数据库有几个步骤：<br>1.加载并注册数据库驱动<br>2.建立数据连接（URL书写,用户名,密码）</p><p>3.创建Statement<br>4.执行对数据库的增删改查操作<br>5.结果集处理</p><p><strong>对应以上步骤的方法名是：</strong></p><ul><li>加载并注册数据库驱动：Class.forName(“com.mysql.jdbc.Driver”);</li><li>建立数据连接：Connection conn = DriverManager.getConnection(“jdbc:mysql://localhost:3306/db_name”, “username”, “password”);</li><li>创建Statement：Statement stmt = conn.createStatement();</li><li>执行对数据库的增删改查操作：int rowsAffected = stmt.executeUpdate(“INSERT INTO users (name, age) VALUES (‘John Doe’, 30)”);</li><li>结果集处理：ResultSet rs = stmt.executeQuery(“SELECT * FROM users”);</li><li>关闭连接：rs.close(); stmt.close(); conn.close();</li></ul><p>我们在进行数据库和java连接前，请一定注意将对应版本的驱动包导入项目中。<br>(mysql-connector-java-5.1.37-bin.jar)添加到工程中的classpath里面（右键add as library），我们可以直接拷贝jar包。</p><p>连接方式上，我们可以直接在对应的行为类中进行连接，也可以在工具类中进行连接。<br><strong>直接连接</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.iweb.test</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span>  Exception &#123;</span><br><span class="line">        <span class="comment">// 加载驱动</span></span><br><span class="line">        Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        <span class="comment">// 驱动管理类获得连接对象</span></span><br><span class="line">        <span class="comment">// url:连接的数据库的地址</span></span><br><span class="line">        <span class="comment">// user: 连接数据库的账号</span></span><br><span class="line">        <span class="comment">// pass: 连接数据库的密码</span></span><br><span class="line">        String url=<span class="string">&quot;jdbc:mysql://localhost:3306/mydb&quot;</span>;</span><br><span class="line">        String user=<span class="string">&quot;root&quot;</span>;</span><br><span class="line">        String pass=<span class="string">&quot;root&quot;</span>;</span><br><span class="line">        <span class="comment">// DriverManager驱动管理类获得了一个数据库连接对象</span></span><br><span class="line">        <span class="comment">// Connection 接口负责java程序与数据库之间的连接</span></span><br><span class="line">        Connection cn=DriverManager.getConnection(url,user,pass);</span><br><span class="line">        System.out.println(cn);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><strong>用其他的配置文件保存数据库配置信息（更推荐）</strong></p><p>配置文件生命在工程的src目录下【jdbc.properties】<br>说明：使用配置文件的方式保存数据库配置信息，在代码中加载配置文件。<br>使用配置文件的好处：<br>1.实现了代码和数据分离，如果需要修改数据库配置信息，直接在配置文中修改，不需要深入代码。<br>2.如果修改了配置信息，省去重新编译的过程。</p><p><strong>配置文件生命在工程的src目录下【jdbc.properties】</strong><br><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://localhost:3306/mydb?useUnicode=true&amp;characterEncoding=utf8</span></span><br><span class="line"><span class="attr">user</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">pass</span>=<span class="string">root</span></span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.iweb.test;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>  <span class="keyword">throws</span>  Exception&#123;</span><br><span class="line">        <span class="comment">// 加载jdbc.properties文件</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">resourceAsStream</span> </span><br><span class="line"><span class="operator">=</span>Test2.class.getClassLoader().getResourceAsStream(<span class="string">&quot;jdbc.properties&quot;</span>);</span><br><span class="line">        <span class="comment">// Properties 继承于 HashTable，主要用于读取配置文件</span></span><br><span class="line">        Properties pros=<span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        <span class="comment">// 加载文本信息到属性集</span></span><br><span class="line">        pros.load(resourceAsStream);</span><br><span class="line">        <span class="comment">// 读取配置信息,依据KEY获取Value</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> pros.getProperty(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> pros.getProperty(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">pass</span> <span class="operator">=</span> pros.getProperty(<span class="string">&quot;pass&quot;</span>);</span><br><span class="line">        <span class="comment">// 1.加载驱动</span></span><br><span class="line">        Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        <span class="comment">// 2.驱动管理类获得一个连接对象</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">cn</span> <span class="operator">=</span> DriverManager.getConnection(url, user, pass);</span><br><span class="line">        System.out.println(cn);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="statement"><a href="#statement" class="headerlink" title="statement"></a>statement</h2><h3 id="操作和访问数据库"><a href="#操作和访问数据库" class="headerlink" title="操作和访问数据库"></a>操作和访问数据库</h3><p>数据库连接用于向数据库服务器发送命令和SQL语句，并接受数据库服务器返回的结果，其实就一个数据库连接就是一个socket连接。<br>在java.sql包中有3各接口，分别定了对数据库的调用的不同方式</p><ul><li>Statement：用于执行静态SQL语句并返回它所生成的结果的对象。</li><li>PrepatedStatement:SQL语句预编译对象，可以使用对象多次高效的执行该SQL语句。</li></ul><p><strong>statement</strong><br>createStatement()用于创建statement对象，我们通过statement对象来完成对数据库的增删改查操<br>作。其实就是通过statement对象来将SQL语句发送给数据库，然后执行SQL语句。<br>该方法的具体的使用方法为：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Statement</span> <span class="variable">st</span> <span class="operator">=</span> cn.createStatement();</span><br></pre></td></tr></table></figure><br>此处注意一下啊：<br>statement只能执行静态SQL语句，会有安全隐患，这个会在PrepatedStatement:SQL接口的时候讲解。（statement不推荐使用）</p><h3 id="执行增删改查"><a href="#执行增删改查" class="headerlink" title="执行增删改查"></a>执行增删改查</h3><p>执行对数据库的操作主要是执行statement中的方法。<br>执行给定的SQL语句，语句为insert、update、和delete语句，返回值是语句响应的行数。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">executeUpdate</span><span class="params">(String sql)</span></span><br></pre></td></tr></table></figure><br>实际实例：（DML操作）<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.iweb.test;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test2</span> &#123;<span class="number">2</span>）.查询数据</span><br><span class="line">执行给定的查询的SQL语句，该语句返回ResultSet对象。</span><br><span class="line">ResultSet（结果集对象）封装了SQL查询语句的结果</span><br><span class="line"><span class="number">1.</span>通过列名</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>  <span class="keyword">throws</span>  Exception&#123;</span><br><span class="line">        <span class="comment">// 加载jdbc.properties文件</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">resourceAsStream</span> </span><br><span class="line"><span class="operator">=</span>Test2.class.getClassLoader().getResourceAsStream(<span class="string">&quot;jdbc.properties&quot;</span>);</span><br><span class="line">        <span class="comment">// Properties 继承于 HashTable，主要用于读取配置文件</span></span><br><span class="line">        Properties pros=<span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        <span class="comment">// 加载文本信息到属性集</span></span><br><span class="line">        pros.load(resourceAsStream);</span><br><span class="line">        <span class="comment">// 读取配置信息,依据KEY获取Value</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> pros.getProperty(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> pros.getProperty(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">pass</span> <span class="operator">=</span> pros.getProperty(<span class="string">&quot;pass&quot;</span>);</span><br><span class="line">        <span class="comment">// 1.加载驱动</span></span><br><span class="line">        Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        <span class="comment">// 2.驱动管理类获得一个连接对象</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">cn</span> <span class="operator">=</span> DriverManager.getConnection(url, user, pass);</span><br><span class="line">        <span class="comment">// 3.通过Connection对象获得数据库操作工具（statement）</span></span><br><span class="line">        <span class="type">Statement</span> <span class="variable">st</span> <span class="operator">=</span> cn.createStatement();</span><br><span class="line">        <span class="comment">// 4.数据库操作工具（statement）来执行SQL语句</span></span><br><span class="line">        <span class="comment">// st.executeQuery()用于执行查询操作 DQL</span></span><br><span class="line">        <span class="comment">// st.executeUpdate() 用于执行增删改操作 DML</span></span><br><span class="line">        <span class="comment">// 新增</span></span><br><span class="line">        <span class="comment">// String sql=&quot;insert into emp </span></span><br><span class="line">values(<span class="literal">null</span>,<span class="string">&#x27;1012&#x27;</span>,<span class="string">&#x27;wangjie&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="number">55</span>,<span class="string">&#x27;4313&#x27;</span>,<span class="string">&#x27;2021-2-2&#x27;</span>,<span class="number">10</span>,<span class="number">3000</span>)<span class="string">&quot;;</span></span><br><span class="line"><span class="string">        // 修改</span></span><br><span class="line"><span class="string">        // String sql=&quot;</span>update emp set name=<span class="string">&#x27;王杰&#x27;</span>,age=<span class="number">58</span> where id=<span class="number">30</span><span class="string">&quot;;</span></span><br><span class="line"><span class="string">        // 删除</span></span><br><span class="line"><span class="string">        String sql=&quot;</span>delete from emp where id=<span class="number">30</span><span class="string">&quot;;</span></span><br><span class="line"><span class="string">        int result = st.executeUpdate(sql);</span></span><br><span class="line"><span class="string">        if(result&gt;0)&#123;</span></span><br><span class="line"><span class="string">            System.out.println(&quot;</span>删除成功<span class="string">&quot;);</span></span><br><span class="line"><span class="string">       &#125;else&#123;</span></span><br><span class="line"><span class="string">            System.out.println(&quot;</span>删除失败<span class="string">&quot;);</span></span><br><span class="line"><span class="string">       &#125;</span></span><br><span class="line"><span class="string">        st.close();</span></span><br><span class="line"><span class="string">        cn.close();</span></span><br><span class="line"><span class="string">   &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure></p><h3 id="查询数据操作"><a href="#查询数据操作" class="headerlink" title="查询数据操作"></a>查询数据操作</h3><p>执行给定的查询的SQL语句，该语句返回ResultSet对象。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ResultSet <span class="title function_">executeQuery</span><span class="params">(sql)</span></span><br></pre></td></tr></table></figure><br>ResultSet（结果集对象）封装了SQL查询语句的结果</p><p><strong>通过列名查找</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.iweb.test;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>  <span class="keyword">throws</span>  Exception &#123;</span><br><span class="line">        Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> </span><br><span class="line">Test3.class.getClassLoader().getResourceAsStream(<span class="string">&quot;jdbc.properties&quot;</span>);</span><br><span class="line">        <span class="type">Properties</span> <span class="variable">prop</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        prop.load(is);</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> prop.getProperty(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> prop.getProperty(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">pass</span> <span class="operator">=</span> prop.getProperty(<span class="string">&quot;pass&quot;</span>);</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">cn</span> <span class="operator">=</span> DriverManager.getConnection(url, user, pass);</span><br><span class="line">        <span class="comment">// Statement st 操作数据库执行的工具</span></span><br><span class="line">        <span class="type">Statement</span> <span class="variable">st</span> <span class="operator">=</span> cn.createStatement();</span><br><span class="line">        <span class="comment">// 执行查询</span></span><br><span class="line">        String sql=<span class="string">&quot;select * from emp&quot;</span>;</span><br><span class="line">        <span class="comment">// 获得SQL查询语句的结果</span></span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> st.executeQuery(sql);</span><br><span class="line">        <span class="comment">// next判断是否还有下行数据，如果还有下一条数据，则返回true,否则false</span></span><br><span class="line">        <span class="comment">// 循环结果集</span></span><br><span class="line">        <span class="keyword">while</span>(rs.next())&#123;</span><br><span class="line">            <span class="comment">// 通过字段名</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> rs.getInt(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">worknumber</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;worknumber&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">sex</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;sex&quot;</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> rs.getInt(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">card</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;card&quot;</span>);</span><br><span class="line">            <span class="type">Date</span> <span class="variable">hiredate</span> <span class="operator">=</span> rs.getDate(<span class="string">&quot;hiredate&quot;</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">dno</span> <span class="operator">=</span> rs.getInt(<span class="string">&quot;dno&quot;</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">sal</span> <span class="operator">=</span> rs.getInt(<span class="string">&quot;sal&quot;</span>);</span><br><span class="line">           </span><br><span class="line"> System.out.println(<span class="string">&quot;id:&quot;</span>+id+<span class="string">&quot;,worknumber:&quot;</span>+worknumber+<span class="string">&quot;,name:&quot;</span>+name+<span class="string">&quot;,sex:&quot;</span>+sex</span><br><span class="line">+<span class="string">&quot;,age:&quot;</span>+age+<span class="string">&quot;,card:&quot;</span>+card+<span class="string">&quot;,hiredate:&quot;</span>+hiredate+<span class="string">&quot;,dno:&quot;</span>+dno+<span class="string">&quot;,sal:&quot;</span>+sal);</span><br><span class="line">       &#125;</span><br><span class="line">        <span class="comment">// 释放资源</span></span><br><span class="line">        rs.close();</span><br><span class="line">        st.close();</span><br><span class="line">        cn.close();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><br><strong>使用下标获取表中列的值</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.iweb.test;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test4</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>  <span class="keyword">throws</span>  Exception &#123;</span><br><span class="line">        Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> </span><br><span class="line">Test4.class.getClassLoader().getResourceAsStream(<span class="string">&quot;jdbc.properties&quot;</span>);</span><br><span class="line">        <span class="type">Properties</span> <span class="variable">prop</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        prop.load(is);</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> prop.getProperty(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> prop.getProperty(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">pass</span> <span class="operator">=</span> prop.getProperty(<span class="string">&quot;pass&quot;</span>);</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">cn</span> <span class="operator">=</span> DriverManager.getConnection(url, user, pass);</span><br><span class="line">        <span class="comment">// Statement st 操作数据库执行的工具</span></span><br><span class="line">        <span class="type">Statement</span> <span class="variable">st</span> <span class="operator">=</span> cn.createStatement();</span><br><span class="line">        <span class="comment">// 准备一条SQL语句</span></span><br><span class="line">        String sql=<span class="string">&quot;select * from emp where id=20&quot;</span>;</span><br><span class="line">        <span class="comment">// 执行SQL语句</span></span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> st.executeQuery(sql);</span><br><span class="line">        <span class="keyword">if</span>(rs.next())&#123;</span><br><span class="line">            <span class="comment">// 通过下标</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> rs.getInt(<span class="number">1</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">number</span> <span class="operator">=</span> rs.getString(<span class="number">2</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> rs.getString(<span class="number">3</span>);</span><br><span class="line">           </span><br><span class="line"> System.out.println(<span class="string">&quot;id:&quot;</span>+id+<span class="string">&quot;\t&quot;</span>+<span class="string">&quot;number:&quot;</span>+number+<span class="string">&quot;\t&quot;</span>+<span class="string">&quot;name:&quot;</span>+name);</span><br><span class="line">       &#125;</span><br><span class="line">        rs.close();</span><br><span class="line">        st.close();</span><br><span class="line">        cn.close();</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>关于Result接口的注意事项<br>1）注意类型不要获取错了<br><strong>2）使用完毕要关闭结果集ResultSet，再关闭Statement，再关闭Connection（关闭原则）</strong></p><p><strong>综合案例</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.iweb.test;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserLogin</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 用户从控制台输入账号和密码去登录</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入用户名&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> sc.nextLine();</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入密码&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> sc.nextLine();</span><br><span class="line">        <span class="comment">// 调用登录方法</span></span><br><span class="line">        login(username,password);</span><br><span class="line">   &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 登录功能</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username 登录账号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> password 登录密码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">login</span><span class="params">(String username,String password)</span>&#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">cn</span> <span class="operator">=</span><span class="literal">null</span>;</span><br><span class="line">        <span class="type">Statement</span> <span class="variable">st</span> <span class="operator">=</span><span class="literal">null</span>;</span><br><span class="line">        ResultSet rs=<span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1. 注册并加载驱动</span></span><br><span class="line">            Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">            <span class="comment">//2.读取属性文件</span></span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> </span><br><span class="line">UserLogin.class.getClassLoader().getResourceAsStream(<span class="string">&quot;jdbc.properties&quot;</span>);</span><br><span class="line">            <span class="type">Properties</span> <span class="variable">prop</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">            prop.load(is);</span><br><span class="line">            <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> prop.getProperty(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> prop.getProperty(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">pass</span> <span class="operator">=</span> prop.getProperty(<span class="string">&quot;pass&quot;</span>);</span><br><span class="line">            cn = DriverManager.getConnection(url, user, pass);</span><br><span class="line">            <span class="comment">//3.连接Connection获得操作工具</span></span><br><span class="line">            st = cn.createStatement();</span><br><span class="line">            String sql=<span class="string">&quot;SELECT * FROM userinfo WHERE username=&#x27;&quot;</span>+username+<span class="string">&quot;&#x27; AND </span></span><br><span class="line"><span class="string">PASSWORD=&#x27;&quot;</span>+password+<span class="string">&quot;&#x27;&quot;</span>;</span><br><span class="line">            System.out.println(sql);</span><br><span class="line">            rs = st.executeQuery(sql);</span><br><span class="line">            <span class="keyword">if</span> (rs.next()) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;欢迎&quot;</span>+username+<span class="string">&quot;登录本系统!!&quot;</span>);</span><br><span class="line">           &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;账号或密码错误，请重新登录!!&quot;</span>);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">       &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                rs.close();</span><br><span class="line">                st.close();</span><br><span class="line">                cn.close();</span><br><span class="line">           &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="SQL注入问题-有面试题的喔"><a href="#SQL注入问题-有面试题的喔" class="headerlink" title="SQL注入问题(有面试题的喔)"></a>SQL注入问题(有面试题的喔)</h2><p>当我们输出密码，发现账号和密码不正确竟然登录成功。<br>例如：执行以下结果机器现象</p><blockquote><p>请输入用户名<br>admin<br>请输入密码<br>a’ or ‘1’=’1<br>SELECT * FROM userinfo WHERE username=’admin’ AND PASSWORD=’a’ or ‘1’=’1’<br>欢迎admin登录本系统!!</p></blockquote><p>select * from userinfo where true 查询所有记录</p><p><strong>以上案例出现的问题是：</strong><br>我们让用户输入的密码和SQL语句进行字符串拼接，用户输入的内容作为SQL语句语法的一部分，改变<br>了原有SQL真正的意义，以上问题称为SQL注入，要解决SQL注入就不能让用户输入的密码和我们SQL<br>语句进行简单的字符串拼接。</p><p>使用Statement操作数据库表存在的弊端：</p><ul><li>问题一：存在拼串操作，繁琐</li><li>问题二：存在SQL注入问题</li></ul><p>对于java而言，要防范SQL注入，只要用 PreparedStatement（从Statement扩展而来）取代<br>Statement就可以了。</p><h2 id="PreparedStatement"><a href="#PreparedStatement" class="headerlink" title="PreparedStatement"></a>PreparedStatement</h2><p>PreparedStatement也叫做预处理对象，它是Statement的子接口，两者功能相似，但是如果多次执行SQL语句时PreparedStatement效率会更高，它还可以给SQL语句传递参数，避免SQL注入问题。<br><strong>预编译：</strong>将SQL语句发送给数据库预编译，PreparedStatement会引用这预编译后的结果，可以多次传<br>入不同的参数给PreparedStatement对象并执行，减少SQL编译次数，提高效率。</p><p><strong>使用PreparedStatement的步骤</strong><br>1）. 编写SQL语句时，未知参数用?占位<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String sql=<span class="string">&quot;SELECT * FROM userinfo WHERE username=? AND PASSWORD=?&quot;</span>;</span><br></pre></td></tr></table></figure><br>2）.通过链接对象获得PreparedStatement对象<br>3）.设置实际参数的值 setXXX(占位符的位置,赋予真实的值)<br>4）.执行带参数的SQL语句<br>5）.关闭资源</p><p>在使用数据库语言时请在SQL中先行写好之后移植过来</p><p><strong>案例（登录操作）</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserLogin</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 用户从控制台输入账号和密码去登录</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入用户名&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> sc.nextLine();</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入密码&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> sc.nextLine();</span><br><span class="line">        <span class="comment">// 调用登录方法</span></span><br><span class="line">        login(username,password);</span><br><span class="line">   &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 登录功能</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username 登录账号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> password 登录密码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">login</span><span class="params">(String username,String password)</span>&#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">cn</span> <span class="operator">=</span><span class="literal">null</span>;</span><br><span class="line">        ResultSet rs=<span class="literal">null</span>;</span><br><span class="line">        PreparedStatement ps=<span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1. 注册并加载驱动</span></span><br><span class="line">            Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">            <span class="comment">//2.读取属性文件</span></span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> </span><br><span class="line">UserLogin.class.getClassLoader().getResourceAsStream(<span class="string">&quot;jdbc.properties&quot;</span>);</span><br><span class="line">            <span class="type">Properties</span> <span class="variable">prop</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">            prop.load(is);</span><br><span class="line">            <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> prop.getProperty(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> prop.getProperty(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">pass</span> <span class="operator">=</span> prop.getProperty(<span class="string">&quot;pass&quot;</span>);</span><br><span class="line">            cn = DriverManager.getConnection(url, user, pass);</span><br><span class="line">            <span class="comment">// 编写SQL语句时，未知参数用?占位</span></span><br><span class="line">            String sql=<span class="string">&quot;SELECT * FROM userinfo WHERE username=? AND PASSWORD=?&quot;</span>;</span><br><span class="line">            <span class="comment">// 通过连接获得预处理对象PreparedStatement</span></span><br><span class="line">            ps = cn.prepareStatement(sql);</span><br><span class="line">            <span class="comment">// 设置实际参数的值 setXXX(占位符的位置,赋予真实的值)</span></span><br><span class="line">            ps.setString(<span class="number">1</span>,username);</span><br><span class="line">            ps.setString(<span class="number">2</span>,password);</span><br><span class="line">            <span class="comment">// 执行带参数的SQL语句</span></span><br><span class="line">            rs = ps.executeQuery();</span><br><span class="line">            <span class="keyword">if</span>(rs.next())&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;登录成功:&quot;</span>+username);</span><br><span class="line">           &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;账号或密码错误&quot;</span>);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">       &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                rs.close();</span><br><span class="line">                ps.close();</span><br><span class="line">                cn.close();</span><br><span class="line">           &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><br><strong>实际案例（模糊查询）</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmpLikeTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入要查询的职员姓名&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> sc.next();</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">cn</span> <span class="operator">=</span><span class="literal">null</span>;</span><br><span class="line">        PreparedStatement ps=<span class="literal">null</span>;</span><br><span class="line">        ResultSet rs=<span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> Test4.class.getClassLoader().</span><br><span class="line">                    getResourceAsStream(<span class="string">&quot;jdbc.properties&quot;</span>);</span><br><span class="line">            <span class="type">Properties</span> <span class="variable">prop</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">            prop.load(is);</span><br><span class="line">            <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> prop.getProperty(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> prop.getProperty(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">pass</span> <span class="operator">=</span> prop.getProperty(<span class="string">&quot;pass&quot;</span>);</span><br><span class="line">            cn = DriverManager.getConnection(url, user, pass);</span><br><span class="line">            <span class="comment">// 未知参数?占位</span></span><br><span class="line">            String sql=<span class="string">&quot;select * from emp where name like ?&quot;</span>;</span><br><span class="line">            <span class="comment">// 获得预编译对象</span></span><br><span class="line">            ps = cn.prepareStatement(sql);</span><br><span class="line">            <span class="comment">// 设置参数</span></span><br><span class="line">            ps.setString(<span class="number">1</span>,<span class="string">&quot;%&quot;</span>+name+<span class="string">&quot;%&quot;</span>);</span><br><span class="line">            <span class="comment">// 返回结果集</span></span><br><span class="line">            rs=ps.executeQuery();</span><br><span class="line">            <span class="comment">// 循环结果集</span></span><br><span class="line">            <span class="keyword">while</span>(rs.next())&#123;</span><br><span class="line">                System.out.println(rs.getString(<span class="string">&quot;name&quot;</span>)+<span class="string">&quot;\t&quot;</span>+</span><br><span class="line">                        rs.getInt(<span class="string">&quot;age&quot;</span>)+<span class="string">&quot;\t&quot;</span>+</span><br><span class="line">                        rs.getDate(<span class="string">&quot;hiredate&quot;</span>));</span><br><span class="line">           &#125;</span><br><span class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">       &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                rs.close();</span><br><span class="line">                ps.close();</span><br><span class="line">                cn.close();</span><br><span class="line">           &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><br><strong>注意</strong><br>使用jdbc进行模糊查询的时候”% _”不能写在SQL里面，写在执行的SQL有时候语法错误，所有我们要写setXXX()里面。<br>表与类的关系整张表看作是一个类，表的一行数据是类的一个实例对象。<br>1）.查询一条数据，封装成一个Emp对象<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestById</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Connection cn=<span class="literal">null</span>;</span><br><span class="line">        PreparedStatement ps=<span class="literal">null</span>;</span><br><span class="line">        ResultSet rs=<span class="literal">null</span>;</span><br><span class="line">        Emp emp=<span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> </span><br><span class="line">Test3.class.getClassLoader().getResourceAsStream(<span class="string">&quot;jdbc.properties&quot;</span>);</span><br><span class="line">            <span class="type">Properties</span> <span class="variable">prop</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">            prop.load(is);</span><br><span class="line">            <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> prop.getProperty(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> prop.getProperty(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">pass</span> <span class="operator">=</span> prop.getProperty(<span class="string">&quot;pass&quot;</span>);</span><br><span class="line">            cn = DriverManager.getConnection(url, user, pass);</span><br><span class="line">            String sql=<span class="string">&quot;select * from emp where id=?&quot;</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 预编译对象</span></span><br><span class="line">            ps=cn.prepareStatement(sql);</span><br><span class="line">            <span class="comment">// 赋值操作</span></span><br><span class="line">            ps.setInt(<span class="number">1</span>,<span class="number">20</span>);</span><br><span class="line">            <span class="comment">// 执行</span></span><br><span class="line">            rs = ps.executeQuery();</span><br><span class="line">            <span class="keyword">if</span>(rs.next())&#123;</span><br><span class="line">                <span class="comment">// 将查询的一行数据封装为Emp对象</span></span><br><span class="line">                 emp=<span class="keyword">new</span> <span class="title class_">Emp</span>(rs.getInt(<span class="string">&quot;id&quot;</span>),</span><br><span class="line">                        rs.getString(<span class="string">&quot;worknumber&quot;</span>),</span><br><span class="line">                        rs.getString(<span class="string">&quot;name&quot;</span>),</span><br><span class="line">                        rs.getString(<span class="string">&quot;sex&quot;</span>),</span><br><span class="line">                        rs.getInt(<span class="string">&quot;age&quot;</span>),</span><br><span class="line">                        rs.getString(<span class="string">&quot;card&quot;</span>),</span><br><span class="line">                        rs.getDate(<span class="string">&quot;hiredate&quot;</span>),</span><br><span class="line">                        rs.getInt(<span class="string">&quot;sal&quot;</span>),</span><br><span class="line">                        rs.getInt(<span class="string">&quot;dno&quot;</span>)</span><br><span class="line">               );</span><br><span class="line">           &#125;</span><br><span class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">       &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                rs.close();</span><br><span class="line">                ps.close();</span><br><span class="line">                cn.close();</span><br><span class="line">           &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">        System.out.println(emp.toString());</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>2）.将多条数据封装称集合 List<Emp> ，集合中每个元素都是一个Emp对象，查询所有的职员类，封装成 List<Emp> 。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestSelectAll</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Connection cn=<span class="literal">null</span>;</span><br><span class="line">        PreparedStatement ps=<span class="literal">null</span>;</span><br><span class="line">        ResultSet rs=<span class="literal">null</span>;</span><br><span class="line">        List&lt;Emp&gt; list =<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Emp&gt;();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> </span><br><span class="line">Test3.class.getClassLoader().getResourceAsStream(<span class="string">&quot;jdbc.properties&quot;</span>);</span><br><span class="line">            <span class="type">Properties</span> <span class="variable">prop</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">            prop.load(is);</span><br><span class="line">            <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> prop.getProperty(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> prop.getProperty(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">pass</span> <span class="operator">=</span> prop.getProperty(<span class="string">&quot;pass&quot;</span>);</span><br><span class="line">            cn = DriverManager.getConnection(url, user, pass);</span><br><span class="line">            <span class="comment">// 预处理SQL语句</span></span><br><span class="line">            ps=cn.prepareStatement(<span class="string">&quot;select * from emp&quot;</span>);</span><br><span class="line">            <span class="comment">// 没有？要赋值 </span></span><br><span class="line">            <span class="comment">// 执行返回结果集</span></span><br><span class="line">            rs = ps.executeQuery();</span><br><span class="line">            <span class="keyword">while</span>(rs.next())&#123;</span><br><span class="line">                <span class="comment">// 每一行数据封装成Emp对象</span></span><br><span class="line">               Emp emp=<span class="keyword">new</span> <span class="title class_">Emp</span>(rs.getInt(<span class="string">&quot;id&quot;</span>),</span><br><span class="line">                        rs.getString(<span class="string">&quot;worknumber&quot;</span>),</span><br><span class="line">                        rs.getString(<span class="string">&quot;name&quot;</span>),</span><br><span class="line">                        rs.getString(<span class="string">&quot;sex&quot;</span>),</span><br><span class="line">                        rs.getInt(<span class="string">&quot;age&quot;</span>),</span><br><span class="line">                        rs.getString(<span class="string">&quot;card&quot;</span>),</span><br><span class="line">                        rs.getDate(<span class="string">&quot;hiredate&quot;</span>),</span><br><span class="line">                        rs.getInt(<span class="string">&quot;sal&quot;</span>),</span><br><span class="line">                        rs.getInt(<span class="string">&quot;dno&quot;</span>)</span><br><span class="line">               );</span><br><span class="line">                <span class="comment">// 将封装的Emp对象添加到集合中</span></span><br><span class="line">                list.add(emp);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">       &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                rs.close();</span><br><span class="line">                ps.close();</span><br><span class="line">                cn.close();</span><br><span class="line">           &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">        <span class="keyword">for</span>(Emp e : list)&#123;</span><br><span class="line">            System.out.println(e.toString());</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="增删改操作"><a href="#增删改操作" class="headerlink" title="增删改操作"></a>增删改操作</h2><p><strong>使用prepareStatement进行新增操作</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.iweb.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDate;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalTime;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestEmpInsert</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">cn</span> <span class="operator">=</span><span class="literal">null</span>;</span><br><span class="line">        PreparedStatement ps=<span class="literal">null</span>;</span><br><span class="line">        ResultSet rs=<span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> Test4.class.getClassLoader().</span><br><span class="line">                    getResourceAsStream(<span class="string">&quot;jdbc.properties&quot;</span>);</span><br><span class="line">            <span class="type">Properties</span> <span class="variable">prop</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">            prop.load(is);</span><br><span class="line">            <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> prop.getProperty(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> prop.getProperty(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">pass</span> <span class="operator">=</span> prop.getProperty(<span class="string">&quot;pass&quot;</span>);</span><br><span class="line">            cn = DriverManager.getConnection(url, user, pass);</span><br><span class="line">            <span class="comment">// 获得预编译对象</span></span><br><span class="line">            String sql=<span class="string">&quot;INSERT INTO emp VALUES(NULL,?,?,?,?,?,?,?,?)&quot;</span>;</span><br><span class="line">            ps=cn.prepareStatement(sql);</span><br><span class="line">            <span class="comment">// 赋值</span></span><br><span class="line">            ps.setString(<span class="number">1</span>,<span class="string">&quot;1112&quot;</span>);</span><br><span class="line">            ps.setString(<span class="number">2</span>,<span class="string">&quot;zhouxixi&quot;</span>);</span><br><span class="line">            ps.setString(<span class="number">3</span>,<span class="string">&quot;男&quot;</span>);</span><br><span class="line">            ps.setInt(<span class="number">4</span>,<span class="number">58</span>);</span><br><span class="line">            ps.setString(<span class="number">5</span>,<span class="string">&quot;4333&quot;</span>);</span><br><span class="line">            <span class="comment">//  创建java.util.Date对象转为java.sql.Date对象（没有时间部分）</span></span><br><span class="line">            <span class="comment">//ps.setDate(6,new java.sql.Date(new java.util.Date().getTime()));</span></span><br><span class="line">            <span class="comment">// java8引入的新的日期时间API</span></span><br><span class="line">            <span class="comment">// LocalDate.now() 获得当前日期</span></span><br><span class="line">            <span class="comment">// LocalTime.now()  获得当前时间</span></span><br><span class="line">            <span class="comment">// LocalDateTime.now  获得当前时间和日期</span></span><br><span class="line">            ps.setDate(<span class="number">6</span>, java.sql.Date.valueOf(LocalDate.now()));</span><br><span class="line">            ps.setInt(<span class="number">7</span>,<span class="number">40</span>);</span><br><span class="line">            ps.setInt(<span class="number">8</span>,<span class="number">5000</span>);</span><br><span class="line">            <span class="comment">// 执行</span></span><br><span class="line">            <span class="type">int</span> result=ps.executeUpdate();</span><br><span class="line">            <span class="keyword">if</span>(result&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;添加成功&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;添加失败&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                ps.close();</span><br><span class="line">                cn.close();</span><br><span class="line">            &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>使用prepareStatement进行修改操作</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestEmpUpdate</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">cn</span> <span class="operator">=</span><span class="literal">null</span>;</span><br><span class="line">        PreparedStatement ps=<span class="literal">null</span>;</span><br><span class="line">        ResultSet rs=<span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> Test4.class.getClassLoader().</span><br><span class="line">                    getResourceAsStream(<span class="string">&quot;jdbc.properties&quot;</span>);</span><br><span class="line">            <span class="type">Properties</span> <span class="variable">prop</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">            prop.load(is);</span><br><span class="line">            <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> prop.getProperty(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> prop.getProperty(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">pass</span> <span class="operator">=</span> prop.getProperty(<span class="string">&quot;pass&quot;</span>);</span><br><span class="line">            cn = DriverManager.getConnection(url, user, pass);</span><br><span class="line">            String sql=<span class="string">&quot;update emp set name=?,age=?  where id=?&quot;</span>;</span><br><span class="line">            ps=cn.prepareStatement(sql);</span><br><span class="line">            ps.setString(<span class="number">1</span>,<span class="string">&quot;肉丝&quot;</span>);</span><br><span class="line">            ps.setInt(<span class="number">2</span>,<span class="number">28</span>);</span><br><span class="line">            ps.setInt(<span class="number">3</span>,<span class="number">24</span>);</span><br><span class="line">            <span class="keyword">if</span>(ps.executeUpdate()&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;修改成功&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;修改失败&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                ps.close();</span><br><span class="line">                cn.close();</span><br><span class="line">            &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>使用prepareStatement进行删除操作</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestEmpDelete</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">cn</span> <span class="operator">=</span><span class="literal">null</span>;</span><br><span class="line">        PreparedStatement ps=<span class="literal">null</span>;</span><br><span class="line">        ResultSet rs=<span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> Test4.class.getClassLoader().</span><br><span class="line">                    getResourceAsStream(<span class="string">&quot;jdbc.properties&quot;</span>);</span><br><span class="line">            <span class="type">Properties</span> <span class="variable">prop</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">            prop.load(is);</span><br><span class="line">            <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> prop.getProperty(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> prop.getProperty(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">pass</span> <span class="operator">=</span> prop.getProperty(<span class="string">&quot;pass&quot;</span>);</span><br><span class="line">            cn = DriverManager.getConnection(url, user, pass);</span><br><span class="line">            String sql=<span class="string">&quot;delete from emp  where id=?&quot;</span>;</span><br><span class="line">            ps=cn.prepareStatement(sql);</span><br><span class="line">            ps.setInt(<span class="number">1</span>,<span class="number">20</span>);</span><br><span class="line">            <span class="keyword">if</span>(ps.executeUpdate()&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;删除成功&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;删除失败&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                ps.close();</span><br><span class="line">                cn.close();</span><br><span class="line">            &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数据库工具类"><a href="#数据库工具类" class="headerlink" title="数据库工具类"></a>数据库工具类</h2><p>需求：上面写的代码中出现了很多重复代码，可以把这些共同的代码抽取出来。</p><blockquote><p>开始打包操作……呜噜噜</p><h3 id="创建类JdbcUtils（其实这个很重要的，到时候我会发蓝图，所以只是简单总结一下）"><a href="#创建类JdbcUtils（其实这个很重要的，到时候我会发蓝图，所以只是简单总结一下）" class="headerlink" title="创建类JdbcUtils（其实这个很重要的，到时候我会发蓝图，所以只是简单总结一下）"></a>创建类JdbcUtils（其实这个很重要的，到时候我会发蓝图，所以只是简单总结一下）</h3></blockquote><p>JdbcUtils类的作用是封装数据库连接，以及释放数据库资源。 </p><ul><li>驱动程序、用户名、密码、URL定义为静态常量。</li><li>注册驱动使用static静态代码块实现，只需要加载一次。</li><li>提供获取数据库连接对象的静态方法。</li><li>释放系统资料的方法</li></ul><p>包含三个方法：</p><p>1）用户名、密码、URL、驱动类定义为静态常量<br>2）获得数据库连接 getConnecation()<br>3）关闭所有打开的资源<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.iweb.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.iweb.test.Test4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcUtils</span> &#123;</span><br><span class="line">    <span class="comment">// 1）用户名、密码、URL、驱动类定义为静态常量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String url;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String user;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String password;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String driver;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 文件的读取，只需要读取一次即可拿到这些值，静态代码块</span></span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> JdbcUtils.class.getClassLoader().</span><br><span class="line">                    getResourceAsStream(<span class="string">&quot;jdbc.properties&quot;</span>);</span><br><span class="line">            <span class="type">Properties</span> <span class="variable">prop</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">            prop.load(is);</span><br><span class="line">            url = prop.getProperty(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">            user = prop.getProperty(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">            password = prop.getProperty(<span class="string">&quot;pass&quot;</span>);</span><br><span class="line">            driver=prop.getProperty(<span class="string">&quot;driverClass&quot;</span>);</span><br><span class="line">            <span class="comment">// 加载驱动</span></span><br><span class="line">            Class.forName(driver);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//  2）获得数据库连接 getConnecation()</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title function_">getConnection</span><span class="params">()</span> <span class="keyword">throws</span>  Exception&#123;</span><br><span class="line">            <span class="keyword">return</span> DriverManager.getConnection(url,user,password);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//  3）关闭所有打开的资源  关闭顺序 ResultSet--&gt;Statement--&gt;Connection</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">(ResultSet rs, Statement st, Connection cn)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(rs!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                rs.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(st!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                st.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(cn!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                cn.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">(Statement st, Connection cn)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(st!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                st.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(cn!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                cn.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>测试:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestJdbcUtils</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="comment">/*  删除</span></span><br><span class="line"><span class="comment">       int reuslt= deleteEmp(21);</span></span><br><span class="line"><span class="comment">       if(reuslt&gt;0)&#123;</span></span><br><span class="line"><span class="comment">           System.out.println(&quot;删除成功!&quot;);</span></span><br><span class="line"><span class="comment">       &#125;else&#123;</span></span><br><span class="line"><span class="comment">           System.out.println(&quot;删除失败!&quot;);</span></span><br><span class="line"><span class="comment">       &#125;*/</span></span><br><span class="line">     <span class="comment">/*    添加</span></span><br><span class="line"><span class="comment">        Emp emp=new Emp();</span></span><br><span class="line"><span class="comment">        emp.setWorkNumber(&quot;1211&quot;);</span></span><br><span class="line"><span class="comment">        emp.setName(&quot;zhouhaha&quot;);</span></span><br><span class="line"><span class="comment">        emp.setSex(&quot;男&quot;);</span></span><br><span class="line"><span class="comment">        emp.setAge(28);</span></span><br><span class="line"><span class="comment">        emp.setCard(&quot;4333&quot;);</span></span><br><span class="line"><span class="comment">        emp.setSal(2800);</span></span><br><span class="line"><span class="comment">        emp.setDno(50);</span></span><br><span class="line"><span class="comment">        int result = saveEmp(emp);</span></span><br><span class="line"><span class="comment">        if(result&gt;0)&#123;</span></span><br><span class="line"><span class="comment">            System.out.println(&quot;添加成功&quot;);</span></span><br><span class="line"><span class="comment">        &#125;else&#123;</span></span><br><span class="line"><span class="comment">            System.out.println(&quot;添加失败&quot;);</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line">       <span class="comment">/* Emp emp=new Emp();</span></span><br><span class="line"><span class="comment">        emp.setName(&quot;周哈&quot;);</span></span><br><span class="line"><span class="comment">        emp.setAge(32);</span></span><br><span class="line"><span class="comment">        emp.setId(33);</span></span><br><span class="line"><span class="comment">        System.out.println(editEmp(emp)&gt;0?&quot;修改成功&quot;:&quot;修改失败&quot;);*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*Emp emp = findById(22);</span></span><br><span class="line"><span class="comment">        System.out.println(emp);*/</span></span><br><span class="line"></span><br><span class="line">        List&lt;Emp&gt; list = findAll();</span><br><span class="line">        <span class="keyword">if</span>(!list.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">for</span> (Emp e: list) &#123;</span><br><span class="line">                System.out.println(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;Emp&gt; <span class="title function_">findAll</span><span class="params">()</span>&#123;</span><br><span class="line">        Connection cn=<span class="literal">null</span>;</span><br><span class="line">        PreparedStatement ps=<span class="literal">null</span>;</span><br><span class="line">        ResultSet rs=<span class="literal">null</span>;</span><br><span class="line">        List&lt;Emp&gt; list=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Emp&gt;();</span><br><span class="line">        <span class="comment">// 获得连接对象</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            cn = JdbcUtils.getConnection();</span><br><span class="line">            ps=cn.prepareStatement(<span class="string">&quot;select * from emp&quot;</span>);</span><br><span class="line">            rs=ps.executeQuery();</span><br><span class="line">            <span class="keyword">while</span>(rs.next())&#123;</span><br><span class="line">                <span class="comment">// 将一行数据封装成一个Emp对象</span></span><br><span class="line">                Emp emp=<span class="keyword">new</span> <span class="title class_">Emp</span>();</span><br><span class="line">                emp.setName(rs.getString(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">                emp.setHiredate(rs.getDate(<span class="string">&quot;hiredate&quot;</span>));</span><br><span class="line">                emp.setSal(rs.getInt(<span class="string">&quot;sal&quot;</span>));</span><br><span class="line">                <span class="comment">// 将对象添加到集合</span></span><br><span class="line">                list.add(emp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//调用封装好的close方法来关闭</span></span><br><span class="line">            JdbcUtils.close(rs,ps,cn);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Emp <span class="title function_">findById</span><span class="params">(<span class="type">int</span> id)</span>&#123;</span><br><span class="line">        Connection cn=<span class="literal">null</span>;</span><br><span class="line">        PreparedStatement ps=<span class="literal">null</span>;</span><br><span class="line">        ResultSet rs=<span class="literal">null</span>;</span><br><span class="line">        Emp emp=<span class="literal">null</span>;</span><br><span class="line">        <span class="comment">// 获得连接对象</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            cn = JdbcUtils.getConnection();</span><br><span class="line">            ps=cn.prepareStatement(<span class="string">&quot;select * from emp where id=?&quot;</span>);</span><br><span class="line">            ps.setInt(<span class="number">1</span>,id);</span><br><span class="line">            rs=ps.executeQuery();</span><br><span class="line">            <span class="keyword">while</span>(rs.next())&#123;</span><br><span class="line">                <span class="comment">// 将一行数据封装成一个Emp对象</span></span><br><span class="line">                emp=<span class="keyword">new</span> <span class="title class_">Emp</span>();</span><br><span class="line">                emp.setName(rs.getString(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">                emp.setHiredate(rs.getDate(<span class="string">&quot;hiredate&quot;</span>));</span><br><span class="line">                emp.setSal(rs.getInt(<span class="string">&quot;sal&quot;</span>));</span><br><span class="line">                <span class="keyword">return</span> emp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//调用封装好的close方法来关闭</span></span><br><span class="line">            JdbcUtils.close(rs,ps,cn);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> emp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">editEmp</span><span class="params">(Emp emp)</span>&#123;</span><br><span class="line">        Connection cn=<span class="literal">null</span>;</span><br><span class="line">        PreparedStatement ps=<span class="literal">null</span>;</span><br><span class="line">        <span class="comment">// 获得连接对象</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            cn = JdbcUtils.getConnection();</span><br><span class="line">            ps = cn.prepareStatement(<span class="string">&quot;update emp set name=?,age=? where id=?&quot;</span>);</span><br><span class="line">            ps.setString(<span class="number">1</span>,emp.getName());</span><br><span class="line">            ps.setInt(<span class="number">2</span>,emp.getAge());</span><br><span class="line">            ps.setInt(<span class="number">3</span>,emp.getId());</span><br><span class="line">            <span class="keyword">return</span> ps.executeUpdate();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//调用封装好的close方法来关闭</span></span><br><span class="line">            JdbcUtils.close(ps,cn);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">saveEmp</span><span class="params">(Emp emp)</span>&#123;</span><br><span class="line">        Connection cn=<span class="literal">null</span>;</span><br><span class="line">        PreparedStatement ps=<span class="literal">null</span>;</span><br><span class="line">        <span class="comment">// 获得连接对象</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            cn = JdbcUtils.getConnection();</span><br><span class="line">            ps = cn.prepareStatement(<span class="string">&quot;insert into emp values(null,?,?,?,?,?,?,?,?)&quot;</span>);</span><br><span class="line">            ps.setString(<span class="number">1</span>,emp.getWorkNumber());</span><br><span class="line">            ps.setString(<span class="number">2</span>,emp.getName());</span><br><span class="line">            ps.setString(<span class="number">3</span>,emp.getSex());</span><br><span class="line">            ps.setInt(<span class="number">4</span>,emp.getAge());</span><br><span class="line">            ps.setString(<span class="number">5</span>,emp.getCard());</span><br><span class="line">            ps.setDate(<span class="number">6</span>, java.sql.Date.valueOf(LocalDate.now()));</span><br><span class="line">            ps.setInt(<span class="number">7</span>,emp.getDno());</span><br><span class="line">            ps.setInt(<span class="number">8</span>,emp.getSal());</span><br><span class="line">            <span class="keyword">return</span> ps.executeUpdate();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//调用封装好的close方法来关闭</span></span><br><span class="line">            JdbcUtils.close(ps,cn);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>  <span class="title function_">deleteEmp</span><span class="params">(<span class="type">int</span> id)</span>&#123;</span><br><span class="line">        Connection cn=<span class="literal">null</span>;</span><br><span class="line">        PreparedStatement ps=<span class="literal">null</span>;</span><br><span class="line">        <span class="comment">// 获得连接对象</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            cn = JdbcUtils.getConnection();</span><br><span class="line">            ps = cn.prepareStatement(<span class="string">&quot;delete from emp where id=?&quot;</span>);</span><br><span class="line">            ps.setInt(<span class="number">1</span>,id);</span><br><span class="line">            <span class="keyword">return</span> ps.executeUpdate();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//调用封装好的close方法来关闭</span></span><br><span class="line">            JdbcUtils.close(ps,cn);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="数据库事务"><a href="#数据库事务" class="headerlink" title="数据库事务"></a>数据库事务</h1><p>事物是一组操作的集合，事务会把所有的操作作为一个整体一起向系统提交或撤销请求，这些操作要么同时成功，要么同时失败。</p><h2 id="JDBC事务处理"><a href="#JDBC事务处理" class="headerlink" title="JDBC事务处理"></a>JDBC事务处理</h2><p>1.数据一旦提交，就不可回滚。</p><p>2.数据什么时候意味着提交？</p><ul><li>当一个连接对象被创建时，默认情况下是自动提交事务，每次执行一个SQL语句时，如果执行成功就会向数据自动提交，而不能回滚。</li><li>关闭数据库连接，数据就会自动的提交。如果多个操作，每个操作使用的都是自己单独的连接，则无法保证。事务，即同一个事务的多个操作必须在同一个连接下。</li></ul><p>JDBC程序中为了让多个SQL语句作为一个事务执行：</p><ul><li>调用Connecation对象的setAutoCommit(false)：以取消自动提交事务。</li><li>在所有的SQL语句都成功执行后，调用commit()提交事务。</li><li>在出现异常时，调用rollback()方法回滚事务</li></ul><p>【案例：张三给李四转账】</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.iweb.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.iweb.utils.JdbcUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestCommit</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">cn</span> <span class="operator">=</span><span class="literal">null</span>;</span><br><span class="line">        PreparedStatement ps=<span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            cn = JdbcUtils.getConnection();</span><br><span class="line">            <span class="comment">// 开启事务</span></span><br><span class="line">            cn.setAutoCommit(<span class="literal">false</span>);</span><br><span class="line">            <span class="comment">// 张三-500</span></span><br><span class="line">            ps=cn.prepareStatement(<span class="string">&quot;update account set money=money-? where name=?&quot;</span>);</span><br><span class="line">            ps.setInt(<span class="number">1</span>,<span class="number">500</span>);</span><br><span class="line">            ps.setString(<span class="number">2</span>,<span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line">            <span class="comment">// 执行</span></span><br><span class="line">            ps.executeUpdate();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 模拟错误   除非不能为0</span></span><br><span class="line">            System.out.println(<span class="number">1</span>/<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 李四+500</span></span><br><span class="line">            ps=cn.prepareStatement(<span class="string">&quot;update account set money=money+? where name=?&quot;</span>);</span><br><span class="line">            ps.setInt(<span class="number">1</span>,<span class="number">500</span>);</span><br><span class="line">            ps.setString(<span class="number">2</span>,<span class="string">&quot;lisi&quot;</span>);</span><br><span class="line">            <span class="comment">// 执行</span></span><br><span class="line">            ps.executeUpdate();</span><br><span class="line">            <span class="comment">// 提交事务cn</span></span><br><span class="line">            cn.commit();</span><br><span class="line">            System.out.println(<span class="string">&quot;转账成功&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;转账失败&quot;</span>);</span><br><span class="line">            <span class="comment">// 事务回滚</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                cn.rollback();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException ex) &#123;</span><br><span class="line">                ex.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                JdbcUtils.close(ps,cn);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个部分灵活度很高，建议自己写代码，多调试几遍。话是什么说，但是还是多练吧</p><h1 id="DAO结构"><a href="#DAO结构" class="headerlink" title="DAO结构"></a>DAO结构</h1><p>DAO：Data Access Object，数据访问对象。<br>项目文件标准文件结构（tree）<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">├───dao</span><br><span class="line">│   ├───impl</span><br><span class="line">│   └───interface</span><br><span class="line">├───domain</span><br><span class="line">├───service</span><br><span class="line">└───utils</span><br></pre></td></tr></table></figure><br>以上的各个文件夹的作用是：</p><ul><li>dao：数据访问层，负责与数据库进行交互，执行SQL语句。</li><li>domain：领域模型层，负责定义业务模型。</li><li>service：业务逻辑层，负责处理业务逻辑。</li><li>utils：工具类层，负责提供一些常用的工具方法。</li><li>impl：实现类层，负责实现DAO接口中的方法。</li><li>interface：接口层，定义DAO接口。</li><li>test：测试类层，负责编写测试代码。</li></ul><h1 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h1><p>反射是指在运行时动态获取类的信息并调用其方法的能力。</p><h2 id="反射机制"><a href="#反射机制" class="headerlink" title="反射机制"></a>反射机制</h2><p>java反射机制在程序的运行时动态加载类并获取类的详情信息，从而操作类或对象的属性和方法。其本质是JVM得到Class对象之后，从而获取对象的各种信息。</p><p>反射机制主要包括以下几个方面：</p><ol><li>类加载机制：将类的字节码文件加载到内存中，形成类的Class对象。</li><li>反射API：提供了一组用于操作类、对象和方法的API。</li><li>动态代理：在运行时创建代理对象，用于拦截和修改方法的调用。</li></ol><h2 id="类加载"><a href="#类加载" class="headerlink" title="类加载"></a>类加载</h2><p>类加载是指将类的字节码文件加载到内存中，形成类的Class对象的过程。</p><p>Java文件通过java编译器（javac）将java源代码(.java)编译而生成的。编译器将java代码转换成字节码，存储在class文件中，class文件需要加载到虚拟机中之后才能运行和使用。而虚拟机如何加载class文件，class文件中的信息进入到虚拟机后发生什么变化，这个过程涉及到了<strong>java的类加载机制</strong>。</p><h3 id="类加载过程"><a href="#类加载过程" class="headerlink" title="类加载过程"></a>类加载过程</h3><p>主要由以下几个步骤组成：</p><p>类从被加载到虚拟机内存中开始，到卸载出内存为止，它的整个生命周期可以概括为 7 个阶段：</p><p>加载、验证、准备、解析、初始化、使用和卸载。</p><p><img src="assets/1752645731436.png" alt="1752645731436"></p><p><strong>1）.加载（Loading）</strong></p><p>加载是类加载过程的第一个阶段，在这个过程中，JVM会查找并加载类的二进制数据，通常通过类加载器(ClassLoader)完成。</p><p><strong>类加载器</strong>：负责查找类文件，并将其加载到JVM中，JVM中内置了三个重要的ClassLoader：</p><ul><li>启动类加载器（Bootstrap ClassLoader）</li><li>扩展类加载器（Extension ClassLoader）</li><li>系统类加载器（System ClassLoader）</li></ul><p><strong>2）.链接（Linking）</strong></p><p>链接阶段分为三个子阶段：验证、准备和解析<br>画个流程图<br>加载—&gt;验证—&gt;准备—&gt;解析—&gt;初始化—&gt;使用—&gt;卸载</p><ul><li>验证（Verification）：确保加载的类符合JVM规范，不会危害JVM的安全。</li><li>准备（Preparation）：为类的变量分配内存并设置默认初始化（int为0，引用对象为null）。</li><li>解析（Resolution）：将类、接口、字段和方法的符号引用转换为直接引用。</li></ul><p><strong>3）.初始化（Initialization）</strong></p><p>在初始化阶段，JVM会执行类中的静态初始化器和静态变量的赋值操作，初始化类变量和静态代码块。</p><p><strong>4）.使用（Using）</strong></p><p> 一旦类被初始化了，就可以被java程序使用了。可以通过new关键字创建类的实例。</p><p><strong>5）.卸载（Unloading）</strong></p><p>当Java虚拟机结束时，或者在某个类不再被任务对象引用时，该类的类加载器可以卸载这个类。</p><h3 id="1-2-2-双亲委派模型的核心机制"><a href="#1-2-2-双亲委派模型的核心机制" class="headerlink" title="1.2.2 双亲委派模型的核心机制"></a>1.2.2 双亲委派模型的核心机制</h3><p>如果当一个类加载器收到类加载请求时，它不会先去加载，而是把这个请求委托父类加载器处理，如果父类加载器还存在其父类加载器，进一步向上委托，依次递归，最终将达到顶层的启动类加载器，如果父类加载器可以完成加载任务，就成功返回，倘如父类加载器无法完成加载任务，子加载器才会尝试自己去加载，这就是双亲委派模式。</p><h2 id="class"><a href="#class" class="headerlink" title="class"></a>class</h2><p>class类是java反射机制的基础，反射机制主要是通过class类来实现的。</p><p>在java编程语言中，Class类是一个特殊的类，它用于表示JVM运行的类或者接口的信息。Class对象是在加载类时由Java虚拟机自动构建的，也就是不需要我们创建，JVM已经帮我们创建好了。</p><p>每个类在java中都对应一个Class对象，这个对象保存了该类的结构信息，比如类名、属性、方法等等。class类是一个反射工具，能提供很多的方法用于获取类的各种信息（构造方法，属性，方法，注解）。</p><h2 id="获取类对象"><a href="#获取类对象" class="headerlink" title="获取类对象"></a>获取类对象</h2><p>java.lang.Class类的实例表示正在运行的Java应用程序中的类和接口。</p><p><strong>获取类对象的方式(三种)</strong></p><ol><li>Class.forName(“类的全路径名”)</li><li>类名.class</li><li>对象.getClass()<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. Class.forName(&quot;类的全路径名&quot;)</span></span><br><span class="line">Class&lt;?&gt; c1 = Class.forName(<span class="string">&quot;com.bettfil.java快速学习速查.domain.Account&quot;</span>);</span><br><span class="line">System.out.println(c1);</span><br><span class="line"><span class="comment">// 2. 类名.class</span></span><br><span class="line">Class&lt;Account&gt; c2 = Account.class;</span><br><span class="line">System.out.println(c2);</span><br><span class="line"><span class="comment">// 3. 对象.getClass()</span></span><br><span class="line"><span class="type">Account</span> <span class="variable">account</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Account</span>();</span><br><span class="line">Class&lt;? <span class="keyword">extends</span> <span class="title class_">Account</span>&gt; c3 = account.getClass();</span><br><span class="line">System.out.println(c3);</span><br></pre></td></tr></table></figure></li></ol><h2 id="Class类的常用方法"><a href="#Class类的常用方法" class="headerlink" title="Class类的常用方法"></a>Class类的常用方法</h2><ul><li>Field:获得对象的成员变量属性</li><li>Method:获得对象的方法</li><li>Constructor:获得对象的构造方法<ul><li>getConstructors：获得对象的构造方法</li></ul></li><li>Annotation:获得对象的注解<ul><li>getAnnotations：获得对象的注解</li></ul></li></ul><p><strong>获取属性值</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test2</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 获取类对象</span></span><br><span class="line">        Class&lt;Student&gt; stuClass= Student.class;</span><br><span class="line">        <span class="comment">// 获取属性</span></span><br><span class="line">        <span class="comment">// getFields() 获得全部成员，包括继承而来的成员，不包括私有</span></span><br><span class="line">        <span class="comment">// getDeclaredFields 获得本来定义的成员，包括私有，但是不包括继承而来</span></span><br><span class="line">        Field[] fields = stuClass.getDeclaredFields();</span><br><span class="line">        <span class="keyword">for</span>(Field field  : fields)&#123;</span><br><span class="line">            <span class="comment">// getModifiers() 修饰符都是通过数字编号获取，要想获取具体内容</span></span><br><span class="line">            <span class="comment">// filed.getType() 返回属性类型</span></span><br><span class="line">            <span class="comment">// field.getName()  获得属性名</span></span><br><span class="line">            System.out.println(field.getModifiers()+<span class="string">&quot;\t&quot;</span>+field.getType()+<span class="string">&quot;\t&quot;</span>+field.getName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>如何看出来这个部分是反射呢？从哪个地方看出来的，有什么好处吗？</p><ul><li>从类对象中获取属性，这个类对象是我们自己定义的，我们可以通过类对象获取到类中的属性。</li><li>反射机制的灵活性，我们可以在运行时动态地获取类的信息，包括属性、方法、构造函数等。</li></ul><p><strong>获取方法</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Class</span> <span class="variable">stuClass</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.iweb.bean.Student&quot;</span>);</span><br><span class="line">            <span class="comment">// getMethods() 获取类中定义的方法和继承而来的方法</span></span><br><span class="line">            <span class="comment">// getDeclaredMethods() 获取本类定义的方法，包括私有，但是不包括继承而来</span></span><br><span class="line">            Method[] methods = stuClass.getDeclaredMethods();</span><br><span class="line">            <span class="keyword">for</span>(Method method : methods)&#123;</span><br><span class="line">                System.out.println(method);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>获取构造函数</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test4</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Student student=<span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        Class&lt;? <span class="keyword">extends</span> <span class="title class_">Student</span>&gt; studentClass = student.getClass();</span><br><span class="line">        <span class="comment">// getConstructors() 获取所有公开的构造方法</span></span><br><span class="line">        <span class="comment">// getDeclaredConstructors() 获取所有构造方法（包括私有）</span></span><br><span class="line">        Constructor&lt;?&gt;[] constructors = studentClass.getDeclaredConstructors();</span><br><span class="line">        <span class="keyword">for</span>(Constructor con :constructors)&#123;</span><br><span class="line">            System.out.println(con);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>获得注解</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test5</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Class</span> <span class="variable">stuClass</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.iweb.bean.Student&quot;</span>);</span><br><span class="line">            Annotation[] annotations = stuClass.getAnnotations();</span><br><span class="line">            <span class="keyword">for</span>(Annotation anno: annotations)&#123;</span><br><span class="line">                System.out.println(anno);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-5-反射应用"><a href="#1-5-反射应用" class="headerlink" title="1.5 反射应用"></a>1.5 反射应用</h2><p><strong>Constructor构造方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.iweb.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test6</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class&lt;?&gt; stuClass = Class.forName(<span class="string">&quot;com.iweb.bean.Student&quot;</span>);</span><br><span class="line">            <span class="comment">// newInstance()表示调用这个类的无参构造函数，这个类没有无参构造方法，一定会出现异常</span></span><br><span class="line">            stuClass.newInstance();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>指定参数的构造</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test6</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        method2();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class&lt;?&gt; stuClass = Class.forName(<span class="string">&quot;com.iweb.bean.Student&quot;</span>);</span><br><span class="line">            <span class="comment">// 调用有两个参数的构造方法，并进行赋值</span></span><br><span class="line">            <span class="comment">// 需要申明参数的类型</span></span><br><span class="line">            Constructor&lt;?&gt; constructor = stuClass.getConstructor(String.class, <span class="type">int</span>.class);</span><br><span class="line">            <span class="comment">// 利用newInstance创建Student对象</span></span><br><span class="line">            <span class="type">Student</span> <span class="variable">stu</span> <span class="operator">=</span> (Student)constructor.newInstance(<span class="string">&quot;zhangsan&quot;</span>, <span class="number">21</span>);</span><br><span class="line">            System.out.println(stu);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method2</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class&lt;?&gt; stuClass = Class.forName(<span class="string">&quot;com.iweb.bean.Student&quot;</span>);</span><br><span class="line">            <span class="comment">// 调用有两个参数的构造方法，并进行赋值</span></span><br><span class="line">            Constructor&lt;?&gt; constructor = stuClass.getDeclaredConstructor(String.class);</span><br><span class="line">            <span class="comment">// 如果要访问私有的成员，不能直接使用</span></span><br><span class="line">            <span class="comment">// 如果用反射强行获取并使用，需要取消访问检查（暴力访问,忽略访问权限修饰符）</span></span><br><span class="line">            constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="type">Student</span> <span class="variable">stu</span> <span class="operator">=</span> (Student)constructor.newInstance(<span class="string">&quot;tom&quot;</span>);</span><br><span class="line">            System.out.println(stu);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Field</strong></p><p>反射获取成员并使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method3</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           Class&lt;?&gt; stuClass = Class.forName(<span class="string">&quot;com.iweb.bean.Student&quot;</span>);</span><br><span class="line">           <span class="comment">// 获得 name属性</span></span><br><span class="line">           <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> stuClass.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">           <span class="comment">// 通过反射创建对象</span></span><br><span class="line">           Student stu= (Student) stuClass.newInstance();</span><br><span class="line">           <span class="comment">// 暴力访问</span></span><br><span class="line">           field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">           <span class="comment">// 有了对象才可以给指定对象进行赋值</span></span><br><span class="line">           field.set(stu,<span class="string">&quot;jack&quot;</span>);</span><br><span class="line">           <span class="comment">// 获取指定对象的name值</span></span><br><span class="line">           System.out.println(field.get(stu));</span><br><span class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><strong>Method</strong></p><p>调用本来的方法，一定要保证实例化对象，可以直接利用class类反射实例对象，反射调用方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method4</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           Class&lt;?&gt; stuClass = Class.forName(<span class="string">&quot;com.iweb.bean.Student&quot;</span>);</span><br><span class="line">           <span class="comment">// 获得student类里面的setName方法，需要传入类型字节码对象</span></span><br><span class="line">           <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> stuClass.getDeclaredMethod(<span class="string">&quot;setName&quot;</span>, String.class);</span><br><span class="line">           <span class="comment">// 创建一个student对象，当作方法的调用者</span></span><br><span class="line">           Student stu= (Student) stuClass.newInstance();</span><br><span class="line">           <span class="comment">// 运行方法</span></span><br><span class="line">           method.invoke(stu,<span class="string">&quot;tom&quot;</span>);</span><br><span class="line">         <span class="comment">/*  Field field = stuClass.getDeclaredField(&quot;name&quot;);</span></span><br><span class="line"><span class="comment">           // 暴力访问</span></span><br><span class="line"><span class="comment">           field.setAccessible(true);</span></span><br><span class="line"><span class="comment">           System.out.println(field.get(stu));*/</span></span><br><span class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>调用有返回值有参数的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method5</span><span class="params">()</span>&#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">          Class&lt;?&gt; stuClass = Class.forName(<span class="string">&quot;com.iweb.bean.Student&quot;</span>);</span><br><span class="line">          <span class="comment">// 获得student类里面的setName方法，需要传入类型字节码对象</span></span><br><span class="line">          <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> stuClass.getDeclaredMethod(<span class="string">&quot;test2&quot;</span>, String.class);</span><br><span class="line">          <span class="comment">// 创建一个student对象，当作方法的调用者</span></span><br><span class="line">          Student stu= (Student) stuClass.newInstance();</span><br><span class="line">          <span class="comment">// 运行方法,接受返回值</span></span><br><span class="line">          <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> method.invoke(stu, <span class="string">&quot;helloWorld&quot;</span>);</span><br><span class="line">          System.out.println(result);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">          e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>==总结==</p><p>在程序运行时，动态的加载类的信息（方法，属性，构造函数，注解），从而操作类或对象的属性和方法的这种机制称为Java反射。</p><h2 id="实际案例"><a href="#实际案例" class="headerlink" title="实际案例"></a>实际案例</h2><p>要求如下：<br>1.创建一个Emp类，定义私有的编码，私有的姓名和公开的年龄，3个属性，并创建set/get和toString方法，<br> 添加无参构造，1个参数构造，2个参数构造赋值。<br> 添加无参数无返回的study()方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Emp</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String code;       <span class="comment">// 私有编码</span></span><br><span class="line">    <span class="keyword">private</span> String name;       <span class="comment">// 私有姓名</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> age;            <span class="comment">// 公开年龄</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 无参构造</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Emp</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1个参数构造（年龄）</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Emp</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2个参数构造（编码、姓名）</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Emp</span><span class="params">(String code, String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// study方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">study</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot; is studying&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// getter和setter</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCode</span><span class="params">(String code)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Emp&#123;code=&#x27;&quot;</span> + code + <span class="string">&quot;&#x27;, name=&#x27;&quot;</span> + name + <span class="string">&quot;&#x27;, age=&quot;</span> + age + <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.测试以上三种获得类对象的方法<br> （1）通过类拿到字节码对象<br> new Emp().getClass()<br> （2）通过类的class属性拿到字节码对象<br> Emp.Class<br> (3) 通过类的路径拿到字节码对象<br> Class.forName()<br>3.获得类属性的方法。<br> (1)获得所有共有属性<br> (2)获得本类之中的属性<br> (3)为私有属性赋值，以及获取值。<br>4.利用反射创建对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ObjectCreationTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Class&lt;?&gt; clazz = Emp.class;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 方式1：通过无参构造创建</span></span><br><span class="line">        <span class="type">Emp</span> <span class="variable">emp1</span> <span class="operator">=</span> (Emp) clazz.newInstance();</span><br><span class="line">        emp1.setCode(<span class="string">&quot;E003&quot;</span>);</span><br><span class="line">        emp1.setName(<span class="string">&quot;王五&quot;</span>);</span><br><span class="line">        emp1.age = <span class="number">22</span>;</span><br><span class="line">        System.out.println(emp1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 方式2：通过有参构造创建</span></span><br><span class="line">        Constructor&lt;?&gt; constructor = clazz.getConstructor(String.class, String.class);</span><br><span class="line">        <span class="type">Emp</span> <span class="variable">emp2</span> <span class="operator">=</span> (Emp) constructor.newInstance(<span class="string">&quot;E004&quot;</span>, <span class="string">&quot;赵六&quot;</span>);</span><br><span class="line">        emp2.age = <span class="number">23</span>;</span><br><span class="line">        System.out.println(emp2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5.利用反射执行study方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MethodInvocationTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Class&lt;?&gt; clazz = Emp.class;</span><br><span class="line">        <span class="type">Emp</span> <span class="variable">emp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Emp</span>(<span class="string">&quot;E005&quot;</span>, <span class="string">&quot;钱七&quot;</span>);</span><br><span class="line">        emp.age = <span class="number">24</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取study方法并执行</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">studyMethod</span> <span class="operator">=</span> clazz.getMethod(<span class="string">&quot;study&quot;</span>);</span><br><span class="line">        studyMethod.invoke(emp); <span class="comment">// 输出：钱七 is studying</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 带参数方法示例（假设存在work方法）</span></span><br><span class="line">        <span class="comment">// Method workMethod = clazz.getMethod(&quot;work&quot;, String.class);</span></span><br><span class="line">        <span class="comment">// workMethod.invoke(emp, &quot;Java开发&quot;);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><p>Java注解（Annotation）是JDK引入的一种注释机制，注解可以作用在类，属性，方法上等。注解可以做到不改变改变逻辑的前提下在代码中嵌入补充信息。</p><p>注解本质就是一个接口。</p><h2 id="元注解"><a href="#元注解" class="headerlink" title="元注解"></a>元注解</h2><p>用来标注注解的注解叫做元注解（JDK的内置注解）：</p><p><strong>@Target：设置注解作用的位置：</strong></p><ol><li>type</li><li>field</li><li>method</li></ol><p><strong>@Retention：设置注解作用的时机：</strong></p><ol><li>RetentionPolicy.RUNTIME：运行时（大多数情况使用它）</li><li>RetentionPolicy.CLASS：注解在字节码文件中存在</li><li>RetentionPolicy.SOURCE：注解仅存在源码中</li></ol><h1 id="Junit"><a href="#Junit" class="headerlink" title="Junit"></a>Junit</h1><h2 id="测试分类"><a href="#测试分类" class="headerlink" title="测试分类"></a>测试分类</h2><p>用Java写完程序之后需要测试准确性，然后每一次测试如果出现错误，就需要重新修改重新写，这是一个比较麻烦的过程。</p><p><strong>黑盒测试</strong>：不需要写代码，输入值，看程序是否能够输出期望的值。</p><p><strong>白盒测试：</strong>需要写代码，关注程序的具体执行流程。Junit就是一个百盒测试的工具。</p><h2 id="Junit概述"><a href="#Junit概述" class="headerlink" title="Junit概述"></a>Junit概述</h2><p>Junit是java编程语言的单元测试工具，是一个非常重要的测试工具（白盒测试）</p><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul><li>Junit是一个开放源代码的测试工具</li><li>提供注解来识别测试方法</li><li>Junit测试可以让你编写代码更快，并提供之质量</li><li>Junit在一个进度条中显示进度，如果运行良好则是绿色，如果运行失败，则是红色</li></ul><h2 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h2><p>步骤</p><p>1.将Junit的jar包导入到工程中</p><p>2.编写测试方法必须是共同的无参数无返回的测试方法。</p><p>3.在测试方面上使用@Test注解来标识该方法是一个测试方法。</p><p>4.选中测试方法右键通过Junit运行该方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test7</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="number">1</span>/<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="相关注解-应用"><a href="#相关注解-应用" class="headerlink" title="相关注解[应用]"></a>相关注解[应用]</h2><div class="table-container"><table><thead><tr><th>注解</th><th>含义</th></tr></thead><tbody><tr><td>@Test</td><td>测试方法</td></tr><tr><td>@Before</td><td>在测试方法之前运行</td></tr><tr><td>@After</td><td>在测试方法之后运行</td></tr></tbody></table></div><p>代码示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.iweb.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.After;</span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test7</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 测试代码之前执行，用于初始化操作</span></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;before&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;test1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在测试代码之后执行，用于释放资源</span></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;after&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="JDK8新特性"><a href="#JDK8新特性" class="headerlink" title="JDK8新特性"></a>JDK8新特性</h1><p>当前的java市场对JDK8和JDK9是主流，至于更高的11,17等，在企业中使用的最多的是JDK8和JDK9。</p>]]></content>
      
      
      <categories>
          
          <category> 结构速查 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java快速学习速查（6）[进阶篇]</title>
      <link href="/2025/07/09/java%E5%BF%AB%E9%80%9F%E5%AD%A6%E4%B9%A0%E9%80%9F%E6%9F%A5%EF%BC%886%EF%BC%89%5B%E8%BF%9B%E9%98%B6%E7%AF%87%5D/"/>
      <url>/2025/07/09/java%E5%BF%AB%E9%80%9F%E5%AD%A6%E4%B9%A0%E9%80%9F%E6%9F%A5%EF%BC%886%EF%BC%89%5B%E8%BF%9B%E9%98%B6%E7%AF%87%5D/</url>
      
        <content type="html"><![CDATA[<h1 id="java快速学习速查（6）-进阶篇"><a href="#java快速学习速查（6）-进阶篇" class="headerlink" title="java快速学习速查（6）[进阶篇]"></a>java快速学习速查（6）[进阶篇]</h1><blockquote><p>通过了一段时间的学习，也是终于得开个新的文章了，前面几篇都超级冗杂的，这篇是新写的，不会太复杂</p></blockquote><h1 id="文件（file）"><a href="#文件（file）" class="headerlink" title="文件（file）"></a>文件（file）</h1><p>java.io.File 类表示一个普通文件，也可以是目录，File可以进行文件目录的创建、删除改、查询目录下面的文件。但是它不涉及到任何文件的读写操作。</p><p><strong>文件分隔符</strong><br>原因是\在java里面有特殊的意义，使用它需要转义也就是在前面加一个反斜杠 \ 。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String paht=<span class="string">&quot;c:\\a.txt&quot;</span>;</span><br></pre></td></tr></table></figure><br><strong>构造方法是：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">File(String pathname)<span class="comment">//通过将给定路径名字符串转换为抽象路径名来创建一个新File实例。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 文件路径名</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\a.txt&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><strong>注意喔</strong><br>1.一个File对象代表的是硬盘中实际存在的一个文件或者目录。<br>2.无论该路径下是否存在文件或者目录，都不影响File对象的创建。</p><h2 id="常用方法摘要"><a href="#常用方法摘要" class="headerlink" title="常用方法摘要"></a>常用方法摘要</h2><blockquote><p>接下来的这些是在java中的涉及文件的方法蓝图，我尽可能整理出来<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//返回file的绝对路径字符串</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getAbsolutePath</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">//返回由此抽象路径名表示的 文件 的名称。</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">//返回由此抽象路径名表示的文件的长度。</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">long</span> <span class="title function_">length</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">//返回转换为路径名字字符串</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">//返回转换为路径名字字符串</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getPath</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">//----------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//判断功能的方法</span></span><br><span class="line"><span class="comment">//判断File是不是目录</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isDirectory</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">//判断File是不是文件</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isFile</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">//判断File是不是隐藏文件</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isHidden</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">//判断File文件或者目录是否存在</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">exists</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">//创建删除的方法</span></span><br><span class="line"><span class="comment">//创建文件的方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">createNewFile</span><span class="params">()</span> <span class="keyword">throws</span> IOException;</span><br><span class="line"><span class="comment">//创建目录的方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">mkdir</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">//创建多级目录的方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">mkdirs</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">//删除文件的方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">delete</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">//删除目录的方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">delete</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">//删除多级目录的方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">delete</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">//------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">//目录的遍历</span></span><br><span class="line"><span class="comment">//返回目录下的文件或者目录的名称字符串数组</span></span><br><span class="line"><span class="keyword">public</span> String[] list();</span><br><span class="line"><span class="comment">//返回目录下的文件或者目录的File数组</span></span><br><span class="line"><span class="keyword">public</span> File[] listFiles();</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>若是想通过终端，使用指令完成上述操作见下方指令</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line">//返回上级目录</span><br><span class="line"><span class="built_in">dir</span></span><br><span class="line">//查看当前目录下的文件以及目录</span><br><span class="line"><span class="built_in">mkdir</span> 目录名</span><br><span class="line">//创建目录</span><br><span class="line"><span class="built_in">rmdir</span> 目录名</span><br><span class="line">//删除目录</span><br><span class="line">del 文件名</span><br><span class="line">//删除文件</span><br></pre></td></tr></table></figure><p>指令使用可以很灵活，也很快速。以下是常用整合指令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#暂时施工中-----------------</span></span><br></pre></td></tr></table></figure></p><h3 id="绝对路径和相对路径"><a href="#绝对路径和相对路径" class="headerlink" title="绝对路径和相对路径"></a>绝对路径和相对路径</h3><p><strong>绝对路径</strong>：从盘符开始的路径，这是一个完整的路径。</p><p><strong>相对路径</strong>：相对于项目目录的路径，这是一个便捷的路径，开发中经常使用。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//d盘下的某个文件</span></span><br><span class="line">        File f=<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;d:\\a.txt&quot;</span>);</span><br><span class="line">        System.out.println(f.getAbsolutePath());</span><br><span class="line">        <span class="comment">// 项目下new.txt</span></span><br><span class="line">        f=<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;new.txt&quot;</span>);</span><br><span class="line">        System.out.println(f.getAbsolutePath());</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><h3 id="判断功能的方法"><a href="#判断功能的方法" class="headerlink" title="判断功能的方法"></a>判断功能的方法</h3><ul><li>public boolean isDirectory()：判断File是不是目录</li><li>public boolean isFile()：判断File是不是文件</li><li>public boolean exists()：判断File文件或目录是否存在</li></ul><p>示例部分：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">            <span class="comment">//d盘下的某个文件</span></span><br><span class="line">        File f=<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;d:\\a.txt&quot;</span>);</span><br><span class="line">        <span class="comment">// 判断是否存在</span></span><br><span class="line">        System.out.println(<span class="string">&quot;d:\\a.txt是否存在&quot;</span>+f.exists());</span><br><span class="line">        System.out.println(f.isFile()); <span class="comment">// 判断是不是文件</span></span><br><span class="line">        System.out.println(f.isDirectory()); <span class="comment">// 判断是不是目录</span></span><br></pre></td></tr></table></figure></p><h3 id="创建删除的方法"><a href="#创建删除的方法" class="headerlink" title="创建删除的方法"></a>创建删除的方法</h3><ul><li>public boolean createNewFile() throws IOException：创建文件的方法</li><li>public boolean mkdir()：创建目录的方法</li><li>public boolean mkdirs()：创建多级目录的方法</li><li>public boolean delete()：删除文件或者目录的方法</li></ul><p>注意事项：<br>1.<code>mkdir</code>和<code>mkdirs</code>方法的返回值都是boolean类型，返回true表示创建成功，返回false表示创建失败。<br>2.<code>delete</code>方法的返回值也是boolean类型，返回true表示删除成功，返回false表示删除失败。<br>3.<code>delete</code><strong>方法删除目录时，只能删除空目录。</strong><br>4.<code>delete</code>方法删除文件时，只能删除文件，不能删除目录。<br>5.<code>delete</code>方法删除文件或目录时，必须保证文件或目录存在。<br>6.<code>delete</code>方法删除文件或目录时，必须保证文件或目录不是只读的。<br>7.<code>delete</code>方法删除文件或目录时，必须保证文件或目录不是正在被使用的。</p><p>示例部分：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个目录</span></span><br><span class="line"><span class="type">File</span> <span class="variable">dir</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;d:\\demo&quot;</span>);</span><br><span class="line"><span class="type">boolean</span> <span class="variable">mkdir</span> <span class="operator">=</span> dir.mkdir();</span><br><span class="line">System.out.println(mkdir); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建多个目录</span></span><br><span class="line"><span class="type">File</span> <span class="variable">dirs</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;d:\\demo\\a\\b\\c&quot;</span>);</span><br><span class="line"><span class="type">boolean</span> <span class="variable">mkdirs</span> <span class="operator">=</span> dirs.mkdirs();</span><br><span class="line">System.out.println(mkdirs); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个文件</span></span><br><span class="line"><span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;d:\\demo\\a.txt&quot;</span>);</span><br><span class="line"><span class="type">boolean</span> <span class="variable">newFile</span> <span class="operator">=</span> file.createNewFile();</span><br><span class="line">System.out.println(newFile); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除文件</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">delete</span> <span class="operator">=</span> file.delete();</span><br><span class="line">System.out.println(delete); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除目录</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">delete1</span> <span class="operator">=</span> dir.delete();</span><br><span class="line">System.out.println(delete1); <span class="comment">// true</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">delete2</span> <span class="operator">=</span> dirs.delete();</span><br><span class="line">System.out.println(delete2); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></p><h3 id="目录的遍历"><a href="#目录的遍历" class="headerlink" title="目录的遍历"></a>目录的遍历</h3><ul><li>public String[] list()：返回目录下的文件或者目录的名称字符串数组</li><li>public File[] listFiles()：返回目录下的文件或者目录的File数组</li></ul><p>示例部分：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">        <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test4</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        File file=<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;d:\\soft&quot;</span>);</span><br><span class="line">        <span class="comment">// 获取当前目录下的文件以及文件夹的名称</span></span><br><span class="line">        String[] names = file.list();</span><br><span class="line">        <span class="keyword">for</span>(String name :names)&#123;</span><br><span class="line">            System.out.println(name);</span><br><span class="line">       &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;~~~~~~~~~~~~~~~&quot;</span>);</span><br><span class="line">        <span class="comment">// 获得当前目录下的文件以及文件夹对象</span></span><br><span class="line">        File[] files = file.listFiles();</span><br><span class="line">        <span class="keyword">for</span>(File f: files)&#123;</span><br><span class="line">            <span class="keyword">if</span>(f.isDirectory())&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;文件夹--&gt;&quot;</span>+f.getName());</span><br><span class="line">           &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;文件--&gt;&quot;</span>+f.getName());</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><strong>使用递归浏览文件夹信息</strong></p><p><strong>递归</strong>：从编程角度来看，递归行为可以视为是方法定义中调用自身方法的行为</p><p><strong>典型使用案例</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test5</span> &#123;</span><br><span class="line">    <span class="comment">// 多级目录打印，到底有多少级目录不知道</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//定位到一个文件夹</span></span><br><span class="line">        File fileDir=<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;d:\\soft&quot;</span>);</span><br><span class="line">        getAllFile(fileDir);</span><br><span class="line">   &#125;</span><br><span class="line">    <span class="comment">// 打印目录下面的目录与文件的信息</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">getAllFile</span><span class="params">(File fileDir)</span>&#123;</span><br><span class="line">        <span class="comment">// 获得指定File文件目录下的所有的文件和文件夹</span></span><br><span class="line">        File[] files = fileDir.listFiles();</span><br><span class="line">        <span class="comment">// 判断文件夹是否为空</span></span><br><span class="line">        <span class="keyword">if</span>(files!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">// 循环遍历，得到每一个File对象</span></span><br><span class="line">            <span class="keyword">for</span>(File file: files)&#123;</span><br><span class="line">                <span class="comment">// 判断File是文件还是文件夹</span></span><br><span class="line">                <span class="keyword">if</span>(file.isDirectory())&#123;</span><br><span class="line">                    <span class="comment">// 说明是文件夹</span></span><br><span class="line">                    System.out.println(<span class="string">&quot;文件夹---&gt;&quot;</span>+file.getName());</span><br><span class="line">                    getAllFile(file);</span><br><span class="line">               &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="comment">// 如果是文件，打印文件名</span></span><br><span class="line">                  <span class="comment">// System.out.println(&quot;文件---&gt;&quot;+file.getName());</span></span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>解析以上代码：可以发现运行逻辑是：<br>1.首先定位到一个文件夹<br>2.获得指定File文件目录下的所有的文件和文件夹<br>3.判断文件夹是否为空<br>4.如果不为空，循环遍历，得到每一个File对象<br>5.判断File是文件还是文件夹<br>6.如果是文件夹，打印文件夹名，并递归调用<br>7.如果是文件，打印文件名</p><p>在此案例上精进（文件搜索，搜索目录中以.java结尾的文件。）<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test6</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 查找到某个盘符下所有的.java文件</span></span><br><span class="line">        <span class="comment">// 1.搜索目录，无法判断多少级子目录，所以使用递归，遍历所有目录。</span></span><br><span class="line">        <span class="comment">// 2.遍历目录时，获取子文件，通过文件名称，判断是不是以.java结尾的。</span></span><br><span class="line">        <span class="comment">// 定位到一个指定的目录</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">fileDir</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;C:\\Users\\jiannaize\\IdeaProjects&quot;</span>);</span><br><span class="line">        <span class="comment">// 递归调用打印目录的方法</span></span><br><span class="line">    printDir(fileDir);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printDir</span><span class="params">(File fileDir)</span>&#123;</span><br><span class="line">        <span class="comment">//获取子文件和目录</span></span><br><span class="line">        File[] files = fileDir.listFiles();</span><br><span class="line">        <span class="comment">// 遍历所有的File类</span></span><br><span class="line">        <span class="keyword">for</span>(File file : files)&#123;</span><br><span class="line">            <span class="comment">// 判断是不是文件</span></span><br><span class="line">            <span class="keyword">if</span>(file.isFile())&#123;</span><br><span class="line">                <span class="comment">// 如果是文件</span></span><br><span class="line">                <span class="keyword">if</span>(file.getName().endsWith(<span class="string">&quot;.java&quot;</span>))&#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;文件名---&gt;&quot;</span>+file.getAbsolutePath());</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;<span class="keyword">else</span>&#123;<span class="comment">// 否则是文件夹</span></span><br><span class="line">                printDir(file);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="IO流"><a href="#IO流" class="headerlink" title="IO流"></a>IO流</h1><p>程序中的数据需要移动传输，外部的数据输入到计算机，计算机内部的数据输出到尾外部，这个过程的实现就行由io流来完成的，即负责进行数据传输的技术就是IO流</p><ul><li>输入也叫做读取数据</li><li>输出也叫做写出数据<br>输入：可以让程序从外部系统获得数据，例如：读取磁盘，网络，数据库等媒介的数据到程序</li></ul><p>输出：可以将程序中的数据输出到外部系统，例如：将数据写到磁盘，网络，数据库等媒介中。</p><h3 id="IO流的分类"><a href="#IO流的分类" class="headerlink" title="IO流的分类"></a>IO流的分类</h3><ul><li><p>按照流向分：</p><ul><li>输入流：可以从外部系统获得数据到程序中<br>输入input:读取外部数据到程序中，以InputStream,reader结尾</li><li>输出流：可以将程序中的数据输出到外部系统<br>输出output:将程序中的数据输出到外部系统，以FileOutputStream,FileWriter结尾</li></ul></li><li><p>按照数据类型分：</p><ul><li>字节流：可以读写任意类型的文件，以字节为单位操作数据<br>字节输入流：InputStream结尾<br>字节输出流：OutputStream结尾</li><li>字符流：只能读写文本文件，以字符为单位操作数据（这玩意底层还是字节流）<br>字符输入流：Reader结尾<br>字符输出流：Writer结尾</li></ul></li></ul><h2 id="字节流"><a href="#字节流" class="headerlink" title="字节流"></a>字节流</h2><h3 id="字节输出流OutputStream"><a href="#字节输出流OutputStream" class="headerlink" title="字节输出流OutputStream"></a>字节输出流OutputStream</h3><p>OutputStream抽象类表示字节流所有类的超类，将指定的字节数据写出到目的地，主要方法如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//关闭输出流，并释放资源</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    flush();</span><br><span class="line">    sync();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将B.length个字节从指定的byte数组写入此输出流。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">(<span class="type">byte</span>[] b)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    write(b, <span class="number">0</span>, b.length);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将指定的字节数组写入len个字节，从偏移量off开始输出。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">(<span class="type">byte</span>[] b, <span class="type">int</span> off, <span class="type">int</span> len)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="keyword">if</span> (b == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((off &lt; <span class="number">0</span>) || (off &gt; b.length) || (len &lt; <span class="number">0</span>) ||</span><br><span class="line">               ((off + len) &gt; b.length) || ((off + len) &lt; <span class="number">0</span>)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IndexOutOfBoundsException</span>();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (len == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    flush();</span><br><span class="line"></span><br><span class="line"><span class="comment">//将指定的字节写入输出流。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">(<span class="type">int</span> b)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    write(<span class="keyword">new</span> <span class="title class_">byte</span>[]&#123;(<span class="type">byte</span>) b&#125;, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><br><strong>注意</strong><br>close方法：关闭输出流，并释放资源，但是在关闭前，会先调用flush方法刷新缓冲区。</p><h4 id="FileOutputStream类"><a href="#FileOutputStream类" class="headerlink" title="FileOutputStream类"></a>FileOutputStream类</h4><p>FileOutputStream类是文件输出流，用于将数据写入File或FileDescriptor。<br><strong>构造方法：</strong></p><ul><li>public FileOutputStream(File file)：创建文件输出流，以写入由指定的File对象表示的文件。</li><li>public FileOutputStream(String name)：创建文件输出流，以写入具有指定名称的文件。</li></ul><h3 id="字节输入流InputStream"><a href="#字节输入流InputStream" class="headerlink" title="字节输入流InputStream"></a>字节输入流InputStream</h3><p>InputStream抽象类表示字节输入流所有的超类，可以读取字节信息到内存中<br><strong>方法摘要</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 关闭输入流并释放资源</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    sync();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 从输入流中读取数据的下一个字节</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="type">int</span> <span class="title function_">read</span><span class="params">()</span> <span class="keyword">throws</span> IOException;</span><br><span class="line"><span class="comment">// 从输入流中读取一定数量的字节，并将其存储在缓冲区数组b中</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">read</span><span class="params">(<span class="type">byte</span>[] b)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="keyword">return</span> read(b, <span class="number">0</span>, b.length);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 跳过并丢弃输入流中的数据字节</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">long</span> <span class="title function_">skip</span><span class="params">(<span class="type">long</span> n)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">long</span> <span class="variable">remaining</span> <span class="operator">=</span> count - pos;</span><br><span class="line">    <span class="keyword">if</span> (n &lt;= remaining) &#123;</span><br><span class="line">        pos += n;</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    &#125;</span><br><span class="line">    pos = count;</span><br><span class="line">    <span class="keyword">return</span> remaining;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><strong>构造方法：</strong></p><ul><li>public FileInputStream(File file)：通过打开与实际文件的连接来创建文件输入流，该文件由文件系统中的File对象file命名。</li><li>public FileInputStream(String name)：通过打开与实际文件的连接来创建文件输入流，该文件由文件系统中的路径名name命名。<br><strong>常用方法：</strong></li><li>public int read()：从输入流中读取数据的下一个字节。</li><li>public int read(byte[] b)：从输入流中读取一定数量的字节，并将其存储在缓冲区数组b中。</li><li>public int available()：返回输入流中可以读取的字节数。</li><li>public void close()：关闭输入流并释放资源。</li><li>public long skip(long n)：跳过并丢弃输入流中的数据字节。</li></ul><p><strong>read方法：</strong></p><ul><li>public int read()：从输入流中读取数据的下一个字节。</li><li>public int read(byte[] b)：从输入流中读取一定数量的字节，并将其存储在缓冲区数组b中。</li><li>public int available()：返回输入流中可以读取的字节数。</li><li>public void close()：关闭输入流并释放资源。</li><li>public long skip(long n)：跳过并丢弃输入流中的数据字节。</li></ul><blockquote><p>读取过程中我们一般使用循环去读取该文件内的内容，当返回值为-1时，表示读取到文件的末尾，停止读取，具体代码如下：</p></blockquote><p><strong>示例：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//低效代码，一个一个遍历</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">text4</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;new.txt&quot;</span>);</span><br><span class="line">        <span class="type">int</span> b;</span><br><span class="line">        <span class="keyword">while</span> ((b = fis.read())!= -<span class="number">1</span>)&#123;</span><br><span class="line">            System.out.println((<span class="type">char</span>) b);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//高效手段：使用字节数组</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileInputStreamDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 创建文件输入流</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;test.txt&quot;</span>);</span><br><span class="line">        <span class="comment">// 读取文件内容</span></span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line">        <span class="comment">//定义数组，起到缓冲作用，存储每次读取到的多个字节</span></span><br><span class="line">        <span class="comment">//整数的长度一定定义为1024（kb）或者为1024的倍数</span></span><br><span class="line">        <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">while</span> ((len = fis.read(bytes)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(bytes, <span class="number">0</span>, len));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 关闭输入流</span></span><br><span class="line">        fis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意</strong><br>流的关闭原则，先开后关，后开先关</p><h2 id="字符流"><a href="#字符流" class="headerlink" title="字符流"></a>字符流</h2><h3 id="字符输入流reader"><a href="#字符输入流reader" class="headerlink" title="字符输入流reader"></a>字符输入流reader</h3><p>reader抽象类表示字符流所有类的超类，可以读取字符串信息到内存中,主要方法如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 关闭流并释放资源</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    sync();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 读取单个字符</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">read</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="keyword">return</span> read(<span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">1</span>], <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 读取字符数组</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">read</span><span class="params">(<span class="type">char</span>[] cbuf)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="keyword">return</span> read(cbuf, <span class="number">0</span>, cbuf.length);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><strong>构造方法：</strong></p><ul><li>public FileReader(File file)：创建一个新的FileReader对象，该对象使用给定的File对象读取文件。</li><li>public FileReader(String fileName)：创建一个新的FileReader对象，该对象使用给定的文件名读取文件。</li></ul><p><strong>常用方法：</strong></p><ul><li>public int read()：读取单个字符，会提升为int类型。</li><li>public int read(char[] cbuf)：将字符读入数组。</li><li>public void close()：关闭流并释放资源。</li></ul><p><strong>示例：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//经典字符数组读取实例</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileReaderDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 创建文件字符输入流</span></span><br><span class="line">        <span class="type">FileReader</span> <span class="variable">fr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;test.txt&quot;</span>);</span><br><span class="line">        <span class="comment">// 读取文件内容</span></span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line">        <span class="comment">// 定义字符数组，存储每次读取到的多个字符</span></span><br><span class="line">        <span class="type">char</span>[] chars = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">while</span> ((len = fr.read(chars)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(chars, <span class="number">0</span>, len));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 关闭流</span></span><br><span class="line">        fr.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="字符输出流Writer"><a href="#字符输出流Writer" class="headerlink" title="字符输出流Writer"></a>字符输出流Writer</h3><blockquote><p>FileWriter类在关闭资源时候，与FileInputStream类的close方法不同，这是个带缓冲的对象，如果不关闭资源，文件根本没有写入磁盘，而是缓冲区满了之后在一次性写入，所以一定注意释放，这个操作是为了提供性能。</p></blockquote><div class="note success simple"><p>IO操作如果频繁的进行磁盘操作会很影响性能，所以才引入缓冲区</p></div><p>Writer抽象类表示字符输出流所有类的超类，将字符信息写入文件中，主要方法如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 关闭流并释放资源</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    flush();</span><br><span class="line">    sync();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 写入字符数组</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">(<span class="type">char</span>[] cbuf)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    write(cbuf, <span class="number">0</span>, cbuf.length);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 刷新流</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">flush</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    sync();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><strong>构造方法：</strong></p><ul><li>public FileWriter(File file)：创建一个新的FileWriter对象，该对象使用给定的File对象写入文件。</li><li>public FileWriter(String fileName)：创建一个新的FileWriter对象，该对象使用给定的文件名写入文件。</li><li>public FileWriter(String fileName, boolean append)：创建一个新的FileWriter对象，该对象使用给定的文件名写入文件，append参数指定是否追加写入。</li></ul><div class="note success simple"><p>因为内置</p></div><p><strong>常用方法：</strong></p><ul><li>public void write(char[] cbuf)：写入字符数组。</li><li>public void flush()：刷新流。</li><li>public void close()：关闭流并释放资源。<br><strong>示例：</strong><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//高效字符数组写入实例</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileWriterDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 创建文件字符输出流</span></span><br><span class="line">        <span class="type">FileWriter</span> <span class="variable">fw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;test.txt&quot;</span>);</span><br><span class="line">        <span class="comment">// 写入文件内容</span></span><br><span class="line">        fw.write(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">        <span class="comment">// 刷新流</span></span><br><span class="line">        fw.flush();</span><br><span class="line">        <span class="comment">// 关闭流</span></span><br><span class="line">        fw.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>如果要追加写入，只需要在构造方法中加入true参数即可。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//追加写入实例</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileWriterDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 创建文件字符输出流</span></span><br><span class="line">        <span class="type">FileWriter</span> <span class="variable">fw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;test.txt&quot;</span>,<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">// 写入文件内容</span></span><br><span class="line">        fw.write(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">        <span class="comment">// 刷新流</span></span><br><span class="line">        fw.flush();</span><br><span class="line">        <span class="comment">// 关闭流</span></span><br><span class="line">        fw.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="缓冲流"><a href="#缓冲流" class="headerlink" title="缓冲流"></a>缓冲流</h2><h3 id="字节缓冲流"><a href="#字节缓冲流" class="headerlink" title="字节缓冲流"></a>字节缓冲流</h3></li></ul><p>字节缓冲流可以大幅度提高读写效率，缓冲流会把数据加入缓存，缓存满后再一次性读到程序或者写入目的地，在IO操作中，请务必添加使用，主要方法如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 刷新流</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">flush</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    sync();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 关闭流并释放资源</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    flush();</span><br><span class="line">    sync();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><strong>构造方法：</strong></p><ul><li>public BufferedInputStream(InputStream in)：创建一个新的BufferedInputStream对象，该对象使用给定的InputStream对象读取数据。</li><li>public BufferedOutputStream(OutputStream out)：创建一个新的BufferedOutputStream对象，该对象使用给定的OutputStream对象写入数据。</li></ul><p><strong>高效字节缓冲流实例</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//高效字节缓冲流实例</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BufferedStreamDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="comment">//记录开始时间</span></span><br><span class="line">        <span class="type">BufferedInputStream</span> <span class="variable">bis</span> <span class="operator">=</span><span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            bis = <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;假装自己是个大文件&quot;</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 读取文件内容</span></span><br><span class="line">        <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>*<span class="number">8</span>];</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (!((len = bis.read(bytes)) != -<span class="number">1</span>)) <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(bytes, <span class="number">0</span>, len));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 关闭输入流</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            bis.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="comment">//记录结束时间</span></span><br><span class="line">        System.out.println(end-start);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><blockquote><p>若是遇到权限问题，会弹出<code>拒绝访问</code>字样,想要解决这个问题，需要在创建流的时候加入路径，而不是直接写文件名，这样就可以避免权限问题。</p></blockquote><h3 id="字符缓冲流"><a href="#字符缓冲流" class="headerlink" title="字符缓冲流"></a>字符缓冲流</h3><p>字符缓冲流可以大幅度提高读写效率，缓冲流会把数据加入缓存，缓存满后再一次性读到程序或者写入目的地，在IO操作中，请务必添加使用，主要方法如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 刷新流</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">flush</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    flushBuffer();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 关闭流并释放资源</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    flush();</span><br><span class="line">    <span class="built_in">super</span>.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><strong>构造方法：</strong></p><ul><li>public BufferedReader(Reader in)：创建一个新的BufferedReader对象，该对象使用给定的Reader对象读取数据。</li><li>public BufferedWriter(Writer out)：创建一个新的BufferedWriter对象，该对象使用给定的Writer对象写入数据。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//高效字符缓冲流实例</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//创建流对象</span></span><br><span class="line">            <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;假装这是个大文件&quot;</span>));</span><br><span class="line">            <span class="comment">//定义字符串，保存读取一行文字</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span><span class="literal">null</span>;</span><br><span class="line">            <span class="comment">//循环读数，读到最后返回null</span></span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (!(line = br.readLine()!= <span class="literal">null</span>)) <span class="keyword">break</span>;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(line);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                br.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//高效字符缓冲流实例</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">BufferedWriter</span> <span class="variable">bw</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;time.txt&quot;</span>));</span><br><span class="line">        </span><br><span class="line">        bw.write(<span class="string">&quot;我也不知道，先说句话&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        bw.newLine();</span><br><span class="line">        bw.newLine();</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="序列化和反序列化"><a href="#序列化和反序列化" class="headerlink" title="序列化和反序列化"></a>序列化和反序列化</h2></li></ul><p>序列化：将对象以字节的形式写入文件，方便下次读取。<br>反序列化：将文件中的字节数据读取出来，恢复成对象。</p><h3 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h3><p><strong>构造方法：</strong></p><ul><li>public ObjectOutputStream(OutputStream out)：创建一个新的ObjectOutputStream对象，该对象使用给定的OutputStream对象写入数据。<br><strong>常用方法：</strong></li><li>public final void writeObject(Object x) throws IOException：将指定的对象写入ObjectOutputStream。</li></ul><p><strong>示例：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//序列化实例</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SerializeDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 创建文件字符输出流</span></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;test.txt&quot;</span>);</span><br><span class="line">        <span class="comment">// 创建对象输出流</span></span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fos);</span><br><span class="line">        <span class="comment">// 写入对象</span></span><br><span class="line">        oos.writeObject(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;张三&quot;</span>, <span class="number">18</span>));</span><br><span class="line">        <span class="comment">// 刷新流</span></span><br><span class="line">        oos.flush();</span><br><span class="line">        <span class="comment">// 关闭流</span></span><br><span class="line">        oos.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h3><p><strong>构造方法：</strong></p><ul><li>public ObjectInputStream(InputStream in)：创建一个新的ObjectInputStream对象，该对象使用给定的InputStream对象读取数据。<br><strong>常用方法：</strong></li><li>public final Object readObject() throws IOException, ClassNotFoundException：从ObjectInputStream读取一个对象。<br><strong>示例：</strong><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//反序列化实例</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeserializeDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="comment">// 创建文件字符输入流</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;test.txt&quot;</span>);</span><br><span class="line">        <span class="comment">// 创建对象输入流</span></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(fis);</span><br><span class="line">        <span class="comment">// 读取对象</span></span><br><span class="line">        <span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> (Person) ois.readObject();</span><br><span class="line">        <span class="comment">// 关闭流</span></span><br><span class="line">        ois.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="objectoutputstream和objectinputstream"><a href="#objectoutputstream和objectinputstream" class="headerlink" title="objectoutputstream和objectinputstream"></a>objectoutputstream和objectinputstream</h3>在java中，实现序列化的方式是通过让类实现java.io.Serializable接口，这个接口是一个标记接口（没有任何方法），其作用告诉JVM该类的对象可以被序列化，不实现接口的类会抛出NotSerializableException。</li></ul><h4 id="ObjectOutputStream"><a href="#ObjectOutputStream" class="headerlink" title="ObjectOutputStream"></a>ObjectOutputStream</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//接口书写</span></span><br><span class="line"><span class="keyword">package</span> com.iweb.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实现Serializable，表示该类的属性可以序列化</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span>  <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="comment">// transient修饰的成员，不会被序列化</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> String sex;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getSex</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSex</span><span class="params">(String sex)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestPerson</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span>  Exception &#123;</span><br><span class="line">        <span class="comment">// 创建序列化流对象</span></span><br><span class="line">        ObjectOutputStream oos=<span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;person.txt&quot;</span>));</span><br><span class="line">        <span class="comment">// 写出的对象</span></span><br><span class="line">        Person p=<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;jack&quot;</span>,<span class="number">21</span>);</span><br><span class="line">        oos.writeObject(p);</span><br><span class="line">        oos.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ObjectInputStream"><a href="#ObjectInputStream" class="headerlink" title="ObjectInputStream"></a>ObjectInputStream</h3><p>ObjectInputStream反序列化流，将之前使用ObjectOutputStream序列化的原始数据恢复为对象。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.iweb.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestPerson1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span>  Exception &#123;</span><br><span class="line">        ObjectInputStream ois=<span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;person.txt&quot;</span>));</span><br><span class="line">        <span class="comment">// 读取一个对象</span></span><br><span class="line">        Person p=(Person) ois.readObject();</span><br><span class="line">      System.out.println(p.getName()+<span class="string">&quot;\t&quot;</span>+p.getAge());</span><br><span class="line">        <span class="comment">// 释放资源</span></span><br><span class="line">        ois.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="打印流-PrintStream"><a href="#打印流-PrintStream" class="headerlink" title="打印流(PrintStream)"></a>打印流(PrintStream)</h2><p>这是个输出信息的类，可以打印任何的数据的信息，一般我们打印的信息都是在控制台输出的，而控制台就是<code>System.out</code>，<code>PrintStream</code>类能够方便地打印各种数据类型的值，是一种便捷的输出方式。</p><h3 id="字节打印流"><a href="#字节打印流" class="headerlink" title="字节打印流"></a>字节打印流</h3><p><strong>构造方法：</strong></p><ul><li>public PrintStream(String fileName)：创建一个新的PrintStream对象，该对象使用给定的文件名写入数据。</li><li>public PrintStream(File file)：创建一个新的PrintStream对象，该对象使用给定的File对象写入数据。</li><li>public PrintStream(OutputStream out)：创建一个新的PrintStream对象，该对象使用给定的OutputStream对象写入数据。<br><strong>常用方法：</strong></li><li>public void print(String str)：打印字符串。</li><li>public void println(String str)：打印字符串并换行。</li></ul><p><strong>示例：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test8</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;78&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建打印流</span></span><br><span class="line">        <span class="comment">//设定系统的输出流向</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.setOut(<span class="keyword">new</span> <span class="title class_">PrintStream</span>(<span class="string">&quot;out.txt&quot;</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;emem&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="字符打印流"><a href="#字符打印流" class="headerlink" title="字符打印流"></a>字符打印流</h3><p><strong>构造方法：</strong></p><ul><li>public PrintWriter(String fileName)：创建一个新的PrintWriter对象，该对象使用给定的文件名写入数据。</li><li>public PrintWriter(File file)：创建一个新的PrintWriter对象，该对象使用给定的File对象写入数据。</li><li>public PrintWriter(OutputStream out)：创建一个新的PrintWriter对象，该对象使用给定的OutputStream对象写入数据。<br><strong>常用方法：</strong></li><li>public void print(String str)：打印字符串。</li><li>public void println(String str)：打印字符串并换行。</li></ul><p><strong>示例：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">pw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintWriter</span>(<span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;a.txt&quot;</span>));</span><br><span class="line">        pw.println(<span class="string">&quot;阿巴阿巴&quot;</span>);</span><br><span class="line">        pw.print(<span class="string">&quot;阿巴阿巴也&quot;</span>);</span><br><span class="line">        pw.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><h2 id="java设计模式"><a href="#java设计模式" class="headerlink" title="java设计模式"></a>java设计模式</h2><p>设计模式是在大量的实践中总结和理论化之后优选的代码结构、编程风格以及解决问题的思考方式。设计模式就像是经典的棋谱，不同的棋局，我们用不同的棋谱。<br>设计模式的本质是面向对象设计原则的实际运用，是对类的封装性、继承性和多态性以及类的关联关系和组合关系的充分理解。</p><h3 id="装饰者模式"><a href="#装饰者模式" class="headerlink" title="装饰者模式"></a>装饰者模式</h3><p>通过对对象包装，来增强或者修改对象的功能，装饰者模式允许在不改变原有类的情况下，动态的给对象添加新的功能，这种方式不仅提供了代码的 复用性，还使得更加的灵活</p><blockquote><p>javaIO使用者模式可以在不改变原有类的基础上，动态扩展功能</p></blockquote><p>但是这玩意也有很大的缺点，最大的问题是装饰者模式会增加许多小的类，过度使用会使程序变得很复杂。</p><h1 id="java网络编程"><a href="#java网络编程" class="headerlink" title="java网络编程"></a>java网络编程</h1><p>以</p><h2 id="TCP通信程序"><a href="#TCP通信程序" class="headerlink" title="TCP通信程序"></a>TCP通信程序</h2><p>TCP 是一种面向连接的协议，它提供可靠的双向数据传输服务</p><p><strong>两端通信步骤</strong></p><ol><li>客户端向服务器端发送连接请求，请求建立连接。</li><li>服务器端接收客户端的连接请求，并同意连接。</li><li>客户端和服务器端完成连接后，就可以进行数据的传输了。</li><li>数据传输完成后，客户端和服务器端可以断开连接。</li></ol><div class="note info simple"><p>客户端主动连接服务端，连接成功才能通信，服务端不可以主动去连接客户端。</p></div><p><strong>面向连接</strong><br>在数据传输前需要建立连接（三次握手），传输结束后断开连接（四次挥手）。</p><p><strong>针对java中的实现的话</strong></p><p><strong>服务端</strong>：java.net.ServerSocket类表示创建ServerSocket对象,相当于开启了一个服务，并等待客户端连接</p><p><strong>客户端</strong>：java.net.Socket类表示创建Socket对象，相当于请求连接服务端</p><h2 id="ServerSocket"><a href="#ServerSocket" class="headerlink" title="ServerSocket"></a>ServerSocket</h2><p>ServerSocket类的主要作用是监听客户端的连接请求，当客户端连接时，会返回一个Socket对象，用于与客户端进行数据的交互。</p><p><strong>构造方法</strong></p><ul><li>public ServerSocket(int port)：创建一个ServerSocket对象，指定监听的端口号。</li><li>public ServerSocket(int port, int backlog)：创建一个ServerSocket对象，指定监听的端口号和连接请求队列的长度。</li></ul><p><strong>常用方法</strong></p><ul><li>public Socket accept()：监听并接收客户端的连接请求，返回一个Socket对象。</li><li>public void close()：关闭ServerSocket对象，释放资源。</li></ul><p><strong>示例</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServerSocketDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 创建ServerSocket对象，指定监听的端口号</span></span><br><span class="line">        <span class="type">ServerSocket</span> <span class="variable">serverSocket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">8888</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 监听并接收客户端的连接请求</span></span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> serverSocket.accept();</span><br><span class="line">        <span class="comment">// 从Socket对象中获取输入流</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> socket.getInputStream();</span><br><span class="line">        <span class="comment">// 读取数据</span></span><br><span class="line">        <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> inputStream.read(bytes);</span><br><span class="line">        <span class="comment">// 打印数据</span></span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(bytes, <span class="number">0</span>, len));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 关闭资源</span></span><br><span class="line">        socket.close();</span><br><span class="line">        serverSocket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="Socket"><a href="#Socket" class="headerlink" title="Socket"></a>Socket</h2><p>Socket类的主要作用是与服务器端进行数据的交互。Socket类用于实现TCP客户端程序。</p><p><strong>构造方法</strong></p><ul><li>public Socket(String host, int port)：创建一个Socket对象，指定连接的服务器端的IP地址和端口号。</li><li>public Socket(InetAddress address, int port)：创建一个Socket对象，指定连接的服务器端的IP地址和端口号。</li></ul><p><strong>常用方法</strong></p><ul><li>public InputStream getInputStream()：返回Socket对象的输入流，用于接收服务器端发送的数据。</li><li>public OutputStream getOutputStream()：返回Socket对象的输出流，用于向服务器端发送数据。</li><li>public void close()：关闭Socket对象，释放资源。</li></ul><p><strong>示例</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SocketDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 创建Socket对象，指定连接的服务器端的IP地址和端口号</span></span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">8888</span>);</span><br><span class="line">        <span class="comment">// 从Socket对象中获取输出流</span></span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> socket.getOutputStream();</span><br><span class="line">        <span class="comment">// 向服务器端发送数据</span></span><br><span class="line">        outputStream.write(<span class="string">&quot;Hello, Server!&quot;</span>.getBytes());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 关闭资源</span></span><br><span class="line">        socket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>第二示例：服务端<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 服务端</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServerTcp</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span>  Exception&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;服务端启动，等待客户端连接....&quot;</span>);</span><br><span class="line">        <span class="comment">// 创建指定端口为8888的服务端ServerSocket对象</span></span><br><span class="line">        ServerSocket ss=<span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">8888</span>);</span><br><span class="line">        <span class="comment">// 调用ServerSocket.accept() 方法开始接受数据</span></span><br><span class="line">        <span class="type">Socket</span> <span class="variable">accept</span> <span class="operator">=</span> ss.accept();</span><br><span class="line">        System.out.println(<span class="string">&quot;客户端连接成功,开始通信...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>在上述的代码中，我们创建了一个ServerSocket对象，并通过accept()方法等待客户端的连接请求，一旦有了客户端连接成功，就会创建Socket对象，通过这个Socket对象，服务端和客户端可以进行数据传输</p><p>第二示例：客户端<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 客户端</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClientTcp</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span>  Exception&#123;</span><br><span class="line">        <span class="comment">// 创建一个Socket并连接指定的服务端</span></span><br><span class="line">        <span class="comment">// InetAddress.getLocalHost() 本机地址</span></span><br><span class="line">        Socket client=<span class="keyword">new</span> <span class="title class_">Socket</span>(InetAddress.getLocalHost(),<span class="number">8888</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>在客户端代码中，创建了Socket对象，指定服务器的地址和端口继续连接，一旦连接成功，就可以在这个Socket上进行数据的发送和接收</p><h2 id="简单的一个TCP网络程序"><a href="#简单的一个TCP网络程序" class="headerlink" title="简单的一个TCP网络程序"></a>简单的一个TCP网络程序</h2><p>通过这个实例来了解Socket和ServerSocket的使用：<br><strong>思路如下</strong></p><ol><li>服务端创建ServerSocket对象，指定监听的端口号。</li><li>客户端创建Socket对象，指定连接的服务器端的IP地址和端口号。</li><li>服务端调用accept方法监听并接收客户端的连接请求，返回一个Socket对象。</li><li>客户端调用getInputStream方法获取输入流，用于接收服务器端发送的数据。</li><li>客户端调用getOutputStream方法获取输出流，用于向服务器端发送数据。</li><li>服务端调用getInputStream方法获取输入流，用于接收客户端发送的数据。</li><li>服务端调用getOutputStream方法获取输出流，用于向客户端发送数据。</li></ol><p>客户端和服务端分开写，代码如下：<br><strong>服务端代码</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServerSocketDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 创建ServerSocket对象，指定监听的端口号</span></span><br><span class="line">        <span class="type">ServerSocket</span> <span class="variable">serverSocket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">8888</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 监听并接收客户端的连接请求</span></span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> serverSocket.accept();</span><br><span class="line">        <span class="comment">// 从Socket对象中获取输入流</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> socket.getInputStream();</span><br><span class="line">        <span class="comment">// 读取数据</span></span><br><span class="line">        <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> inputStream.read(bytes);</span><br><span class="line">        <span class="comment">// 打印数据</span></span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(bytes, <span class="number">0</span>, len));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 关闭资源</span></span><br><span class="line">        socket.close();</span><br><span class="line">        serverSocket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><strong>客户端代码</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SocketDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 创建Socket对象，指定连接的服务器端的IP地址和端口号</span></span><br><span class="line">        <span class="comment">// 127.0.0.1 是本地回环地址，用于测试网络连接</span></span><br><span class="line">        <span class="comment">//也可以使用InetAddress.getLocalHost()</span></span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">8888</span>);</span><br><span class="line">        <span class="comment">// 从Socket对象中获取输出流</span></span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> socket.getOutputStream();</span><br><span class="line">        <span class="comment">// 向服务器端发送数据</span></span><br><span class="line">        outputStream.write(<span class="string">&quot;Hello, Server!&quot;</span>.getBytes());</span><br><span class="line">        <span class="comment">// 从Socket对象中获取输入流</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> socket.getInputStream();</span><br><span class="line">        <span class="comment">// 读取数据</span></span><br><span class="line">        <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> inputStream.read(bytes);</span><br><span class="line">        <span class="comment">// 打印数据</span></span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(bytes, <span class="number">0</span>, len));</span><br><span class="line">        <span class="comment">// 关闭资源</span></span><br><span class="line">        socket.close();</span><br><span class="line">        serverSocket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>在客户端代码中，创建了Socket对象，指定连接的服务器端的IP地址和端口号。连接成功后就可以通过Socket对象的输入流和输出流与服务器端进行数据的交互。</p><p>在服务端代码中，创建了ServerSocket对象，指定监听的端口号。调用accept方法监听并接收客户端的连接请求，返回一个Socket对象。通过Socket对象的输入流和输出流与客户端进行数据的交互。</p><p><strong>注意事项</strong></p><ul><li>客户端和服务端的IP地址和端口号必须一致，否则连接失败。</li><li>客户端和服务端必须在同一个网络中，否则连接失败。</li></ul><p>第二示例：服务端和客户端通信</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.iweb.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 服务端</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServerTcp</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span>  Exception&#123;</span><br><span class="line">        <span class="comment">// 创建指定端口为8888的服务端ServerSocket对象</span></span><br><span class="line">        ServerSocket ss=<span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">8888</span>);</span><br><span class="line">        <span class="comment">// 调用ServerSocket.accept() 方法开始接受数据</span></span><br><span class="line">        <span class="type">Socket</span> <span class="variable">accept</span> <span class="operator">=</span> ss.accept();</span><br><span class="line">        <span class="comment">// 读取客户端发送过来的数据</span></span><br><span class="line">        BufferedReader br=<span class="keyword">new</span> <span class="title class_">BufferedReader</span>(</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(accept.getInputStream()));</span><br><span class="line">        <span class="comment">// 从客户端读取数据</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">context</span> <span class="operator">=</span> br.readLine();</span><br><span class="line">        System.out.println(<span class="string">&quot;接收到客户端信息:&quot;</span>+context);</span><br><span class="line">        <span class="comment">//向客户端发送数据  true表示开启自动刷新缓存</span></span><br><span class="line">        PrintWriter pw=<span class="keyword">new</span> <span class="title class_">PrintWriter</span>(accept.getOutputStream(),<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">// 发送消息</span></span><br><span class="line">        pw.println(<span class="string">&quot;你好，客户端&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.iweb.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 客户端</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClientTcp</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span>  Exception&#123;</span><br><span class="line">        <span class="comment">// 创建一个Socket并连接指定的服务端</span></span><br><span class="line">        <span class="comment">// InetAddress.getLocalHost() 本机地址</span></span><br><span class="line">        Socket client=<span class="keyword">new</span> <span class="title class_">Socket</span>(InetAddress.getLocalHost(),<span class="number">8888</span>);</span><br><span class="line">        <span class="comment">// 获取服务器端返回的输入流数据并打印</span></span><br><span class="line">        PrintWriter pw=<span class="keyword">new</span> <span class="title class_">PrintWriter</span>(client.getOutputStream(),<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">// 向服务器发送数据</span></span><br><span class="line">        pw.println(<span class="string">&quot;你好，服务器&quot;</span>);</span><br><span class="line">        <span class="comment">//  接受服务器发送过来的信息</span></span><br><span class="line">        BufferedReader br=<span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(client.getInputStream()));</span><br><span class="line">        <span class="comment">// 读取服务器的回复</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> br.readLine();</span><br><span class="line">        System.out.println(content);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这两端代码中，服务器通过<code>BufferedReader</code>读取客户端发送的数据，通过<code>PrintWriter</code>向客户端发送响应，客户端则响应，先发送数据再接受响应。</p><p><strong>面试题：TCP与UPD的区别？</strong><br><strong>TCP协议：</strong><br>1.TCP是面向连接的协议，意味着在数据传输开始前，必须先建立连接（通过三次握手），数据传输结束还需要断开连接（通过四次挥手）。<br>2.TCP可靠的数据传输。<br>3.TCP由于要进行建立和维护，并且需要确认应答，因此传输速度相对比较慢。<br><strong>UDP协议：</strong><br>1.UDP是无连接的协议，不需要连接连接，数据可以直接发送。<br>2.UDP不可靠的数据传输。<br>3.UDP因为无连接且没有确认应答，传输速度相对比较快。</p><h2 id="TCP协议"><a href="#TCP协议" class="headerlink" title="TCP协议"></a>TCP协议</h2><p>OSI七层模型<br>OSI七层模型是国际标准化组织（ISO）提出的一个网络通信模型，从上到下依次分为(以OSI和TCP/IP的区别表格展现):</p><p>没有图啦，三次握手和四次挥手的原理图都请见外站，本站暂时不留存图片（图床故障）</p><h1 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h1><h2 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h2><p><strong>进程：</strong>是指操作系统中的一个独立运行的程序。在windons系统，wx、QQ、IDEA都是一个进程，在window操作系统中任务管理中，可以看到当前操作系统正在运行的进程信息。<br><strong>进程</strong>，也称为任务，所有支持多个进程同时执行的操作系统称做多进程操作系统或多任务操作系统，现在主流的操作系统属于这种类型。</p><p><strong>多进程的实现原理：</strong><br>CPU采用的原理是分时执行，每个进程依次获得一个时间片进入CPU进行执行，在该时间篇执行完以后，该进程保存自身状态，退出CPU，然后其他的进程进入CPU继续执行，由于时间片的时间很短，计算机用户看来程序是同时执行的，而实际上执行方式是穿插依次执行的。</p><blockquote><p>因此操作系统通过快速的在不同进程之间进行切换，因此CPU的执行速度是非常快的，CPU循环依次执行各个程序，以达到给用户造成一种多个进程同时运行的错觉。</p></blockquote><hr><p><strong>进程特点：</strong><br>进程和进程之间的内部数据和状态都是互相独立的，进程之间不能直接通信或者通信代价很高。进程相对来说是特别消耗系统性能的，比如CPU资源以及内存。</p><h2 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h2><p>进程的概念相对比较大，而且需要称为一个独立的程序，这样对于变成来说比较麻烦，所以在程序开发中设计了另外一个概念“线程”。<br>一个进程是由多个线程组成的，他们是包含关系。比如某个程序运行时需要执行1000行代码，CPU需要将这些代码分给多个线程来执行，因为线程才是CPU的最小调度单位，当这些线程执行完毕之后，那么我们的进程也就随着执行完毕了。</p><blockquote><p><strong>线程：</strong>是指进程中每个单独、单独执行的流程。Java语言支持在一个程序内部同时执行多个流程，其中每个单独的流程就是一个线程。</p></blockquote><p>线程被看作是一个轻量级的继承，因为使用线程和进程比较类似，而且使用线程对于系统资源，如内存，CPU等占用要比进程小很多（线程就是进程的一部分），也就是更小的系统开销。</p><p><strong>进程和线程的关系？</strong><br><strong>进程</strong>：可以看作是现实生活当中的公司<br><strong>线程</strong>：可以看作是公司当中的每个员工</p><h1 id="多线程的实现"><a href="#多线程的实现" class="headerlink" title="多线程的实现"></a>多线程的实现</h1><blockquote><p>东西有点多，为了方便找索引，所以用了一级标题，还是归属在线程下的喔</p></blockquote><h2 id="创建线程的三种方式"><a href="#创建线程的三种方式" class="headerlink" title="创建线程的三种方式"></a>创建线程的三种方式</h2><ol><li>继承Thread类</li><li>实现Runnable接口</li><li>实现Callable接口<br>例子分别如下：<br><strong>继承Thread类</strong><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Thread is running&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><strong>实现Runnable接口</strong><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyRunnable</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Runnable is running&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><strong>实现Callable接口</strong><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyCallable</span> <span class="keyword">implements</span> <span class="title class_">Callable</span>&lt;Integer&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Callable is running&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">100</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Thread"><a href="#Thread" class="headerlink" title="Thread"></a>Thread</h2>java使用<code>java.lang.Thread</code>类代表线程，所有的线程都必须是Thread类或其子类的实例。</li></ol><p>通过继承Thread类来创建并启动多线程的步骤如下：<br>1.定义类继承Thread类，并重写该类run()方法，run()方法体就是代表了线程需要完成的任务，称为线程执行体。<br>2.创建Thread子类的实例，创建线程对象。<br>3.调用线程对象的start()方法来启动多线程。</p><p><strong>代码如下:</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">package</span> com.iweb.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">extends</span>  <span class="title class_">Thread</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">10</span>;i++)&#123;</span><br><span class="line">            <span class="comment">// 获得当前线程的名字</span></span><br><span class="line">            <span class="comment">// Thread.currentThread()获得当前线程</span></span><br><span class="line">            <span class="comment">// 当前线程的名字</span></span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;正在执行---&gt;&quot;</span>+i);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 休眠的方法</span></span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);  <span class="comment">// 1000毫秒/1秒</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><strong>测试：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">package</span> com.iweb.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestThread</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建线程对象</span></span><br><span class="line">        MyThread t1=<span class="keyword">new</span> <span class="title class_">MyThread</span>();</span><br><span class="line">        <span class="comment">// 开启线程</span></span><br><span class="line">        t1.start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//在main方法中执行for循环</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">10</span>;i++)&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;正在执行:&quot;</span>+i);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>从运行结果看main线程和自定义线程运行会交运行，java程序启动时实际上启动了一个JVM线程，在这个JVM线程里先启动主线程main()方法（主线程mainThread），然后在main方法中创建和启动了其他线程（通过继承Thread类创建的线程称为子线程）。</p><h3 id="线程启动"><a href="#线程启动" class="headerlink" title="线程启动"></a>线程启动</h3><p>使用start()方法，线程进入Runnable可运行状态，它将向线程调度器注册这个线程，这意味着它可以由JVM调度并执行；但是这并不意味线程就会立即运行，只有当CPU分配时间片，这个获得了时间片时，才可以执行run()方法，start()方法去调用run()，而run方法则是需要去重写的，包含了线程的主体（真正的逻辑）。</p><h3 id="线程名字"><a href="#线程名字" class="headerlink" title="线程名字"></a>线程名字</h3><p>上面的运行代码中发现运行结果，没有给名字，会有默认的名字，可以自己指定，通过构造方法：<br>public Thread(String name)：分配新的Thread对象。<br>public final void setName(String name)：改变线程名称，使之与参数 name 相同。<br><strong>两种方式给线程取名字：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.iweb.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">extends</span>  <span class="title class_">Thread</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义指定线程名称的构造函数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyThread</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        <span class="comment">// 调用父类的String参数的构造方法，指定线程的名称</span></span><br><span class="line">        <span class="built_in">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">10</span>;i++)&#123;</span><br><span class="line">            <span class="comment">// 获得当前线程的名字</span></span><br><span class="line">            <span class="comment">// Thread.currentThread()获得当前线程</span></span><br><span class="line">            <span class="comment">// getName()当前线程的名字</span></span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;正在执行---&gt;&quot;</span>+i);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 休眠的方法</span></span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);  <span class="comment">// 1000毫秒/1秒</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><strong>对应测试</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">package</span> com.iweb.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestThread</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建线程对象</span></span><br><span class="line">        <span class="comment">// 1.构造方法</span></span><br><span class="line">        MyThread t1=<span class="keyword">new</span> <span class="title class_">MyThread</span>(<span class="string">&quot;子线程1&quot;</span>);</span><br><span class="line">        <span class="comment">// 2.setName给线程取名字</span></span><br><span class="line">        t1.setName(<span class="string">&quot;子线程2&quot;</span>);</span><br><span class="line">        <span class="comment">// 开启线程</span></span><br><span class="line">        t1.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="Runnable"><a href="#Runnable" class="headerlink" title="Runnable"></a>Runnable</h2><p>实现线程可以继承于Thread类，也可以通过<code>java.lang.Runnable</code>接口进行实现，定义其中唯一的run()方法，也可以创建一个线程。<br><strong>步骤：</strong><br>1.定义Runnable接口的实现类，并重写该接口的run()方法。<br>2.创建Runnable 实现类的实例，并以此实例作为Thread的targer来创建Thread对象，该Thread对象才是真正的线程对象。<br>3.调用线程对象的start()方法来启动线程。<br><strong>代码如下：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">package</span> com.iweb.test;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这并不是一个线程，是一个任务对象，它还不是一个线程</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyRun</span> <span class="keyword">implements</span>  <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">10</span>;i++)&#123;</span><br><span class="line">            <span class="comment">// 获得当前线程的名字</span></span><br><span class="line">            <span class="comment">// Thread.currentThread()获得当前线程</span></span><br><span class="line">            <span class="comment">// getName()当前线程的名字</span></span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;正在执行---&gt;&quot;</span>+i);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 休眠的方法</span></span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);  <span class="comment">// 1000毫秒/1秒</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><strong>测试：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">   <span class="keyword">package</span> com.iweb.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sun.awt.windows.ThemeReader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestRun</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 方式一</span></span><br><span class="line">        MyRun myRun=<span class="keyword">new</span> <span class="title class_">MyRun</span>();</span><br><span class="line">        <span class="comment">// 创建Thread线程对象</span></span><br><span class="line">        Thread t1=<span class="keyword">new</span> <span class="title class_">Thread</span>(myRun);</span><br><span class="line">        t1.setName(<span class="string">&quot;t1&quot;</span>);</span><br><span class="line">        t1.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 方式二</span></span><br><span class="line">        <span class="comment">// 使用匿名内部类</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">10</span>;i++)&#123;</span><br><span class="line">                    <span class="comment">// 获得当前线程的名字</span></span><br><span class="line">                    <span class="comment">// Thread.currentThread()获得当前线程</span></span><br><span class="line">                    <span class="comment">// getName()当前线程的名字</span></span><br><span class="line">                    System.out.println(Thread.currentThread().getName()+<span class="string">&quot;正在执行---&gt;&quot;</span>+i);</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="comment">// 休眠的方法</span></span><br><span class="line">                        Thread.sleep(<span class="number">1000</span>);  <span class="comment">// 1000毫秒/1秒</span></span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><strong>对比以上两种方法，有以下区别</strong><br>Thread是类，而runnable是接口，Thread本身是实现了runnable接口的类，我们知道一个类只能有一个父类，但是却能实现多个接口，因此runnable具有更好的扩展性。</p><h2 id="线程的生命周期"><a href="#线程的生命周期" class="headerlink" title="线程的生命周期"></a>线程的生命周期</h2><blockquote><p>由死到生还是由生到死？这是个哲学问题</p></blockquote><p><strong>它要经历多个状态，按顺序来是：</strong></p><ol><li>新建状态（New）：使用 new 关键字和 Thread 类或其子类建立一个线程对象后，该线程对象就处于新建状态。它保持这个状态直到程序 start() 这个线程。</li><li>就绪状态（Runnable）：线程对象创建后，其他线程调用了该对象的start()方法。该状态的线程位于可运行线程池中，变得可运行，等待获取CPU的使用权。</li><li>运行状态（Running）：就绪状态的线程获取了CPU，执行run()方法。</li><li>阻塞状态（Blocked）：阻塞状态是线程因为某种原因放弃CPU使用权，暂时5. 死亡状态（Dead）：线程执行完毕或者被别的线程杀死，就会进入死亡状态。<br><strong>阻塞的情况分三种：</strong></li><li>等待阻塞：运行的线程执行wait()方法，JVM会把该线程放入等待池中。</li><li>同步阻塞：运行的线程在获取对象的同步锁时，若该同步锁被别的线程占用，则JVM会把该线程放入锁池中。</li><li>其他阻塞：运行的线程执行sleep()或join()方法，或者发出了I/O请求时，JVM会把该线程置为阻塞状态。当sleep()状态超时、join()等待线程终止或者超时、或者I/O处理完毕时，线程重新转入就绪状态。</li></ol><h2 id="线程调度"><a href="#线程调度" class="headerlink" title="线程调度"></a>线程调度</h2><p>多线程的并发（同一个时间段内处理多个任务）运行是指线程轮流获得CPU的使用权，分别执行各自的任务。在线程的可运行池中，会有多个处于就绪状态的线程等待CPU，Java虚拟机的一项任务就是负责线程的调度，线程的调度是按照特定的机制为多个线程分配CPU的使用权<br><strong>有两种调度模型：</strong></p><ul><li>分时调度</li><li>抢占式调度</li></ul><p><strong>分时调度</strong>（鱼露均占）：是指所有线程轮流使用CPU的使用权，且平均分配每个线程占用CPU的时间。<br><strong>抢占式调度</strong>（强者为王）：优先让可运行池中优先级别最高的线程占用CPU，如果优先级别一样，就随机选一个，使用占用CPU，然后线程运行，直到放弃CPU。<br><strong>注意：</strong></p><ul><li>分时调度是所有线程轮流使用CPU的使用权，且平均分配每个线程占用CPU的时间。</li><li>抢占式调度是优先让可运行池中优先级别最高的线程占用CPU，如果优先级别一样，就随机选一个，使用占用CPU，然后线程运行，直到放弃CPU。    </li></ul><h2 id="线程的优先级"><a href="#线程的优先级" class="headerlink" title="线程的优先级"></a>线程的优先级</h2><p>在多线程系统中，线程优先级决定了线程在抢占CPU时间时的调度顺序，但在大多数情况下，较高优先级别线程更容器获得CPU时间，从而提供响应速度。</p><p><strong>线程优先级API</strong></p><ul><li>public final int getPriority()：返回线程优先级</li><li>public final void setPriority(int newPriority)：更改线程优先级<br>优先级别用整数表示，取值范围1-10，Thread类有三个静态常量。这里强调的是，优先级别越高抢占CPU的概率越高，只是说概率高，并不是优先级别高就肯定比优先级别低的要先抢占CPU。</li></ul><p>表格展示：（静态常量+说明）<br>| 静态常量 | 说明 |<br>| —- | —- |<br>| MAX_PRIORITY | 最大优先级，值为10 |<br>| MIN_PRIORITY | 最小优先级，值为1 |<br>| NORM_PRIORITY | 默认优先级，值为5 |<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestRun</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建Thread线程对象</span></span><br><span class="line">        Thread t1=<span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">MyRun</span>(),<span class="string">&quot;min&quot;</span>);</span><br><span class="line">        <span class="comment">// 设置优先级别</span></span><br><span class="line">        t1.setPriority(Thread.MIN_PRIORITY);</span><br><span class="line">        t1.start();</span><br><span class="line">        Thread t2=<span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">MyRun</span>(),<span class="string">&quot;max&quot;</span>);</span><br><span class="line">        t2.setPriority(Thread.MAX_PRIORITY);</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>根据时间片轮询调度，所以并发执行。</p><h2 id="yield-amp-join"><a href="#yield-amp-join" class="headerlink" title="yield()&amp;join()"></a>yield()&amp;join()</h2><ul><li>public static void yield()：暂停当前线程，让出CPU资源，给其他线程执行机会。</li><li>public final void join()：等待线程死亡。</li></ul><p><strong>案例：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.iweb.test1;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 烧水</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BoilWater</span> <span class="keyword">implements</span>  <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;开始烧水..&quot;</span>);</span><br><span class="line">        <span class="comment">// 烧水需要时间，有个过程</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">10000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;水烧开了..&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.iweb.test1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WashingCups</span> <span class="keyword">implements</span>  <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;开始洗杯子..&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">5</span>;i++)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;洗第&quot;</span>+i+<span class="string">&quot;个杯子&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1500</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;杯子洗完了..&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>测试：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.iweb.test1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sun.awt.windows.ThemeReader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;---------------欢迎来家里做客---------------&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;准备给您泡茶!!&quot;</span>);</span><br><span class="line">        Thread t1=<span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">BoilWater</span>());</span><br><span class="line">        Thread t2=<span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">WashingCups</span>());</span><br><span class="line">        <span class="comment">// 启动烧开水和洗杯子的线程</span></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        System.out.println(<span class="string">&quot;茶泡好了~~&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;请慢用~~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>通过案例可以发现：<br>应该是两个子线程执行的时候，我的主线程应该要等等，等两个子线程先把事情做完，再执行。主线程调用yieId()方法，让它暂时放弃CPU，给其他线程一个运行机会，但是当前线程仍然处于就绪状态。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.iweb.test1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sun.awt.windows.ThemeReader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;---------------欢迎来家里做客---------------&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;准备给您泡茶!!&quot;</span>);</span><br><span class="line">        <span class="comment">// 主线程放弃CPU使用权</span></span><br><span class="line">        Thread.<span class="keyword">yield</span>();</span><br><span class="line">        Thread t1=<span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">BoilWater</span>());</span><br><span class="line">        Thread t2=<span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">WashingCups</span>());</span><br><span class="line">        <span class="comment">// 启动烧开水和洗杯子的线程</span></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        System.out.println(<span class="string">&quot;茶泡好了~~&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;请慢用~~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过案例发现，并没有什么区别？主要并没有让出CPU执行权给子线程去执行，这是什么原因？<br><code>Thread.yield()</code>用于当前线程愿意放弃CPU使用权，但是当前线程仍然处于就绪状态，线程调度器再次调用的时候，也还有可能继续运行这个线程。<br>public final void join()：将一个线程合并到当前线程中，当前线程受阻塞，加入的线程执行直到结束。<br>使用<code>Thread.join()</code>后，即这个子线程会获得执行权，主线程会等子线程执行完后再执行。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.iweb.test1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sun.awt.windows.ThemeReader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;---------------欢迎来家里做客---------------&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;准备给您泡茶!!&quot;</span>);</span><br><span class="line">        <span class="comment">// 主线程放弃CPU使用权</span></span><br><span class="line">        <span class="comment">//Thread.yield();</span></span><br><span class="line">        Thread t1=<span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">BoilWater</span>());</span><br><span class="line">        Thread t2=<span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">WashingCups</span>());</span><br><span class="line">        <span class="comment">// 启动烧开水和洗杯子的线程</span></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 先烧水，再洗杯子</span></span><br><span class="line">            t1.join();</span><br><span class="line">            t2.join();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;茶泡好了~~&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;请慢用~~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步"></a>线程同步</h2><p>线程同步是指多个线程按照一定的顺序执行，一个线程执行完后，下一个线程才能执行。<br>以买票为情景：<br>需求：使用多线程实现三个窗口卖票业务<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.iweb.test1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Ticket</span> <span class="keyword">implements</span>  <span class="title class_">Runnable</span> &#123;</span><br><span class="line">     <span class="comment">// 卖100张票</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> ticket=<span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(ticket&gt;<span class="number">0</span>)&#123;  <span class="comment">// 有票可以卖</span></span><br><span class="line">                <span class="comment">// 模拟出票时间</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">&quot;正在卖:&quot;</span>+ticket--);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>测试：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.iweb.test1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建线程任务对象</span></span><br><span class="line">        Ticket ticket=<span class="keyword">new</span> <span class="title class_">Ticket</span>();</span><br><span class="line">        <span class="comment">// 创建三个窗口</span></span><br><span class="line">        Thread t1=<span class="keyword">new</span> <span class="title class_">Thread</span>(ticket,<span class="string">&quot;窗口1&quot;</span>);</span><br><span class="line">        Thread t2=<span class="keyword">new</span> <span class="title class_">Thread</span>(ticket,<span class="string">&quot;窗口2&quot;</span>);</span><br><span class="line">        Thread t3=<span class="keyword">new</span> <span class="title class_">Thread</span>(ticket,<span class="string">&quot;窗口3&quot;</span>);</span><br><span class="line">        <span class="comment">// 同时卖票</span></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><strong>分析</strong><br>当多个线程同时访问共享资源时，可能会导致数据不一致等线程安全问题。Java提供了synchronized关键字来实现线程同步，确保同一时刻只有一个线程可以访问共享资源。<br>运行中出现了一张票被多个窗口卖了，出现这个问题的原因是线程执行时是有随机性的，当一个线程休眠时，其他的线程就可以抢到CPU了，休眠之后就又可以抢占CPU，此时如果一个线程刚好执行到了ticket—，还没有来得及打印，其他线程抢回了CPU，并且执行了ticket—，这时可能出现以上的情况。这种问题，几个窗口（线程）票数不同步了，这种问题成为线程不安全。</p><p><strong>解决方法</strong><br>在线程使用一个资源的时候加锁即可。当第一个线程访问的时候会加锁，其他线程就不能使用这个资源，直到前面的线程释放锁。</p><p>我简单叙述下这个案例的发生的流程：</p><ol><li>窗口1线程访问资源，发现没有锁，就会加锁。</li><li>窗口2线程访问资源，发现有锁，就会等待。</li><li>窗口1线程使用资源，使用完毕后会释放锁。</li><li>窗口2线程获得锁，使用资源。</li><li>如此往复，直到资源被使用完毕。</li></ol><h2 id="同步代码块"><a href="#同步代码块" class="headerlink" title="同步代码块"></a>同步代码块</h2><p>通过关键字<code>synchronized</code>来实现，就相当于给代码加锁了，括号中需要传入一个锁对象，可以任意的，但必须是唯一的，通常会使用Thread.class作为锁对象，因此字节码对象是唯一的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.iweb.test1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Ticket</span> <span class="keyword">implements</span>  <span class="title class_">Runnable</span> &#123;</span><br><span class="line">     <span class="comment">// 卖100张票</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> ticket=<span class="number">100</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="comment">// 同步代码块  需要一个对象作为锁</span></span><br><span class="line">          <span class="keyword">synchronized</span> (Thread.class)&#123;</span><br><span class="line">              <span class="keyword">if</span>(ticket&gt;<span class="number">0</span>)&#123;  <span class="comment">// 有票可以卖</span></span><br><span class="line">                  <span class="comment">// 模拟出票时间</span></span><br><span class="line">                  <span class="keyword">try</span> &#123;</span><br><span class="line">                      Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                  &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                      e.printStackTrace();</span><br><span class="line">                  &#125;</span><br><span class="line">                  System.out.println(Thread.currentThread().getName()+<span class="string">&quot;正在卖:&quot;</span>+ticket--);</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.iweb.test1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建线程任务对象</span></span><br><span class="line">        Ticket ticket=<span class="keyword">new</span> <span class="title class_">Ticket</span>();</span><br><span class="line">        <span class="comment">// 创建三个窗口</span></span><br><span class="line">        Thread t1=<span class="keyword">new</span> <span class="title class_">Thread</span>(ticket,<span class="string">&quot;窗口1&quot;</span>);</span><br><span class="line">        Thread t2=<span class="keyword">new</span> <span class="title class_">Thread</span>(ticket,<span class="string">&quot;窗口2&quot;</span>);</span><br><span class="line">        Thread t3=<span class="keyword">new</span> <span class="title class_">Thread</span>(ticket,<span class="string">&quot;窗口3&quot;</span>);</span><br><span class="line">        <span class="comment">// 同时卖票</span></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="同步方法"><a href="#同步方法" class="headerlink" title="同步方法"></a>同步方法</h2><p>把synchronized加在方法上就是同步方法，同步方法就是锁住方法里面的所有代码，这个同步方法锁的当前对象，也就是this对象。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.iweb.test1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Ticket</span> <span class="keyword">implements</span>  <span class="title class_">Runnable</span> &#123;</span><br><span class="line">     <span class="comment">// 卖100张票</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> ticket=<span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            func();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 同步方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span>  <span class="keyword">void</span> <span class="title function_">func</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(ticket&gt;<span class="number">0</span>)&#123;  <span class="comment">// 有票可以卖</span></span><br><span class="line">            <span class="comment">// 模拟出票时间</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">100</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;        System.out.println(Thread.currentThread().getName()+<span class="string">&quot;正在卖:&quot;</span>+ticket--);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h1><p>上面的同步代码块和同步方法，虽然也是起到了把一段代码加锁效果，但是并没有直接看出究竟在哪里加了锁，哪里释放了锁。为了更清晰的表达如何加锁和释放锁，JDK提供了一个新的锁对象Lock，Lock实现提供比synchronized方法和语句可以获得更广泛的锁定操作Lock也提供了获取锁和释放锁的方法。</p><blockquote><p>这里锁所涉及的部分可以理解为被<code>lock.lock(); // 加锁</code>和<code>lock.unlock(); // 释放锁</code>所包含的部分的代码被上锁了，只能被一个资源访问</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.iweb.test1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Lock;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Ticket</span> <span class="keyword">implements</span>  <span class="title class_">Runnable</span> &#123;</span><br><span class="line">     <span class="comment">// 卖100张票</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> ticket=<span class="number">100</span>;</span><br><span class="line">    <span class="comment">// 公用一把锁</span></span><br><span class="line">    Lock lock= <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">              lock.lock(); <span class="comment">// 加锁</span></span><br><span class="line">              <span class="keyword">if</span>(ticket&gt;<span class="number">0</span>)&#123;  <span class="comment">// 有票可以卖</span></span><br><span class="line">                  <span class="comment">// 模拟出票时间</span></span><br><span class="line">                  <span class="keyword">try</span> &#123;</span><br><span class="line">                      Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                  &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                      e.printStackTrace();</span><br><span class="line">                  &#125;</span><br><span class="line">                  System.out.println(Thread.currentThread().getName()+<span class="string">&quot;正在卖:&quot;</span>+ticket--);</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="comment">// 解锁</span></span><br><span class="line">             lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h2><p>指的是两个或多个线程在执行过程中，由于竞争资源而造成的一种阻塞现象，若外力作用，这些线程都将无法向前推进，死锁通常发生在两个或多个线程互相等待对象释放锁的情况，一般就是在锁的嵌套中容易发生，所以要避免这种写法。</p><blockquote><p>说人话就是A拿着B房间的钥匙，B拿着A房间的钥匙，谁都不松手谁都进不去，形成了一种僵直状态</p></blockquote><h2 id="解决死锁问题"><a href="#解决死锁问题" class="headerlink" title="解决死锁问题"></a>解决死锁问题</h2><blockquote><p>这个状态也很好解决，但凡有任何一方先释放资源即可</p></blockquote><p><strong>只有两种方式：</strong></p><ul><li>让当前拥有a对象的线程先等待，让出a锁</li><li>让当前拥有b对象的线程先等待，让出b锁<br><strong>等待唤醒机制</strong></li><li>public final void wait()：当前线程等待，直到被其他线程唤醒</li><li>public final void notify()：唤醒单个线程</li><li>public final void notifyAll()：唤醒所有线程</li></ul><p><strong>等待（wait）:</strong>当一个线程执行到某个对象的wait()方法时，它会释放当前持有的锁（如果有的话），并进入等待状态。此时线程不在参与CPU的调用，直到其他线程调用同一对象的notify&amp;notifyAll方法将其唤醒。<br><strong>唤醒（notify&amp;notifyAll）：</strong>唤醒在等待的某个线程，如果有多个线程在等待，那么具体唤醒哪一个是随机的。</p><p><strong>notifyAll：</strong>调用wait()方法的线程会释放其持有的锁，被唤醒的线程在执行之前，必须重新获取被释放的锁。<br><strong>MyThread</strong>让出了a对象锁，MyThread1就可以执行完毕。MyThread进入等待状态，直到其他线程调用同一对象的notify&amp;notifyAll方法将其唤醒。<br>以下是个小示例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.iweb.test1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建一个锁对象</span></span><br><span class="line">        Object lock=<span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">        <span class="comment">// 创建线程任务对象</span></span><br><span class="line">        Runnable runnable=<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (lock)&#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName()+<span class="string">&quot;开始等待&quot;</span>);</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        lock.wait();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName()+<span class="string">&quot;等待结束&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 创建线程对象</span></span><br><span class="line">        Thread t1=<span class="keyword">new</span> <span class="title class_">Thread</span>(runnable,<span class="string">&quot;线程1&quot;</span>);</span><br><span class="line">        Thread t2=<span class="keyword">new</span> <span class="title class_">Thread</span>(runnable,<span class="string">&quot;线程2&quot;</span>);</span><br><span class="line">        <span class="comment">// 启动线程</span></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        <span class="comment">// 唤醒线程1</span></span><br><span class="line">        t1.notify();</span><br><span class="line">        <span class="comment">// 唤醒线程2</span></span><br><span class="line">        t2.notify();</span><br><span class="line">        <span class="comment">// 等待线程1结束</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            t1.join();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 等待线程2结束</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            t2.join();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;程序结束&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h2><p>在之前我们写的代码中，用到线程就创建，用完之后线程就消失了，这样会浪费操作系统的资源，也存在一些弊端，通过线程池就可以解决这个问题。<br>线程池是一种线程使用模式，它维护着多个线程，等待监督管理者分配可并发执行的任务。</p><p><strong>线程池的原理</strong><br>创建一个空的线程池（容器），在没有任务时线程处于空闲状态，当请求到来；线程池给这个请求分配了一个空闲的线程，任务完成后回到线程池等待下此任务（不是销毁），这样就可以实现线程的重用。</p><h2 id="线程池的使用"><a href="#线程池的使用" class="headerlink" title="线程池的使用"></a>线程池的使用</h2><p>在java中，Executors提供了很多静态工厂方法来创建不同类型的线程池，学习线程池，Executors不可或缺的。</p><p><strong>PS:</strong><br>public static ExecutorService newFixedThreadPool(int nThreads)：用于创建一个固定大小的线程池，固定大小的线程池就是线程池中始终保持一定数据的线程，这些线程可以重复使用，执行多个任务。<br>public static ExecutorService newCachedThreadPool()：用于创建一个可缓存的线程池，可缓存的线程池就是线程池中的线程数量不确定，当有任务需要执行时，会创建新的线程，当没有任务需要执行时，会回收空闲的线程。<br>public static ExecutorService newSingleThreadExecutor()：用于创建一个单线程的线程池，单线程的线程池就是线程池中始终保持一个线程，这个线程可以重复使用，执行多个任务。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.iweb.test1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test4</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建只有一个线程的线程池</span></span><br><span class="line">        <span class="comment">// ExecutorService executorService = Executors.newSingleThreadExecutor();</span></span><br><span class="line">        <span class="comment">// 创建一个5个线程的线程池</span></span><br><span class="line">        <span class="comment">// ExecutorService service = Executors.newFixedThreadPool(5);</span></span><br><span class="line">        <span class="comment">// 创建一个带缓存线程的线程池</span></span><br><span class="line">        <span class="comment">// ExecutorService executorService = Executors.newCachedThreadPool();</span></span><br><span class="line">        <span class="comment">// 创建2个线程的线程池</span></span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">threadPool</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">2</span>);</span><br><span class="line">        <span class="comment">// 创建任务</span></span><br><span class="line">        Runnable  runnable=<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;任务被执行，线程&quot;</span>+Thread.currentThread().getName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">//线程池执行任务（一次添加4个任务）</span></span><br><span class="line">        <span class="comment">// 执行任务有两种方式：</span></span><br><span class="line">        threadPool.submit(runnable);</span><br><span class="line">        threadPool.execute(runnable);</span><br><span class="line">        threadPool.execute(runnable);</span><br><span class="line">        threadPool.execute(runnable);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从以上代码可以看出：</p><ul><li>线程池的submit方法和execute方法都是用来执行任务的，区别在于submit方法可以返回一个Future对象，Future对象可以用来获取任务的执行结果，而execute方法没有这个功能。</li><li>线程池的submit方法和execute方法都可以用来执行任务，但是submit方法可以用来执行Callable任务，而execute方法只能用来执行Runnable任务。</li><li>线程池的submit方法和execute方法都可以用来执行任务，但是submit方法可以用来执行Callable任务，而execute方法只能用来执行Runnable任务。</li></ul><p>施工中—————-</p>]]></content>
      
      
      <categories>
          
          <category> 结构速查 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>背书大纲（面试用）[JAVA截止面向对象部分]</title>
      <link href="/2025/07/09/%E8%83%8C%E4%B9%A6%E5%A4%A7%E7%BA%B2%EF%BC%88%E9%9D%A2%E8%AF%95%E7%94%A8%EF%BC%89%5BJAVA%E6%88%AA%E6%AD%A2%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%83%A8%E5%88%86%5D/"/>
      <url>/2025/07/09/%E8%83%8C%E4%B9%A6%E5%A4%A7%E7%BA%B2%EF%BC%88%E9%9D%A2%E8%AF%95%E7%94%A8%EF%BC%89%5BJAVA%E6%88%AA%E6%AD%A2%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%83%A8%E5%88%86%5D/</url>
      
        <content type="html"><![CDATA[<h1 id="这个没有先后顺序，就是个背书大纲（JAVA截止面向对象部分）"><a href="#这个没有先后顺序，就是个背书大纲（JAVA截止面向对象部分）" class="headerlink" title="这个没有先后顺序，就是个背书大纲（JAVA截止面向对象部分）"></a>这个没有先后顺序，就是个背书大纲（JAVA截止面向对象部分）</h1><ul><li>彩色文字<br>在一段话中方便插入各种颜色的标签，包括：<span class='p red'>红色</span>、<span class='p yellow'>黄色</span>、<span class='p green'>绿色</span>、<span class='p cyan'>青色</span>、<span class='p blue'>蓝色</span>、<span class='p gray'>灰色</span>。</li></ul><p>不同的颜色以为意味这不同的重点度，红色最高，意味着出现频率越高</p><p><strong>本文章基本为了快速通过面试和抽查，只收录了高频问题</strong><br>标签样式示例：<br><div class="note danger simple"><p>danger 提示块标签</p></div><br><div class="note warning simple"><p>warning 提示块标签</p></div><br><div class="note success simple"><p>success 提示块标签</p></div></p><h2 id="JAVA截止面向对象部分"><a href="#JAVA截止面向对象部分" class="headerlink" title="JAVA截止面向对象部分"></a>JAVA截止面向对象部分</h2><blockquote><p>我发现用单纯的颜色不太能很好的适应很多环境，所以这次大量的采用行外标签完成</p></blockquote><h3 id=""><a href="#" class="headerlink" title=""></a><div class="note danger simple"><p>什么是B/S架构？什么是C/S架构</p></div></h3><ol><li>B/S(Browser/Server)，浏览器/服务器程序</li><li>C/S(Client/Server)，客户端/\</li></ol><h3 id="-1"><a href="#-1" class="headerlink" title=""></a><div class="note danger simple"><p>Java都有那些开发平台？</p></div></h3><ol><li>JAVA SE：主要用在客户端开发</li><li>JAVA EE：主要用在web应用程序开发</li><li>JAVA ME：主要用在嵌入式应用程序开发</li></ol><h3 id="-2"><a href="#-2" class="headerlink" title=""></a><div class="note danger simple"><p>什么是JDK？什么是JRE? </p></div></h3><ol><li>JDK：java development kit：java开发工具包，是开发人员所需要安装的环境</li><li>JRE：java runtime environment：java运行环境，java程序运行所需要的环境</li><li>JVM：java virtual machine：java虚拟机，java程序运行的虚拟环境</li></ol><p>他们三个的包含关系为：JVM包含JRE，JRE包含JDK</p><h3 id="-3"><a href="#-3" class="headerlink" title=""></a><span class='p red'>Java语言有哪些特点</span></h3><ol><li>简单易学、有丰富的类库</li><li>面向对象（Java最重要的特性，让程序耦合度更低，内聚性更高）</li><li>与平台无关性（JVM是Java跨平台使用的根本）</li><li>可靠安全</li><li>支持多线程<h3 id="-4"><a href="#-4" class="headerlink" title=""></a><div class="note danger simple"><p>面向对象和面向过程的区别</p></div></h3></li><li>面向过程：<br>一种较早的编程思想，顾名思义就是该思想是站着过程的角度思考问题，强调的就是功能行为，功能的执行过程，即先后顺序，而每一个功能我们都使用函数（类似于方法）把这些步骤一步一步实现。使用的时候依次调用函数就可以了。</li><li>面向对象：<br>一种基于面向过程的新编程思想，顾名思义就是该思想是站在对象的角度思考问题，我们把多个功能合理放到不同对象里，强调的是具备某些功能的对象。 具备某种功能的实体，称为对象。面向对象最小的程序单元是：类。面向对象更加符合常规的思维方式，稳定性好，可重用性强，易<br>于开发大型软件产品，有良好的可维护性。 在软件工程上，面向对象可以使工程更加模块化，实现更低的耦合和更高的内聚。</li></ol><h3 id="-5"><a href="#-5" class="headerlink" title=""></a><div class="note danger simple"><p>什么是数据结构？</p></div></h3><p>计算机保存，组织数据的方式<br><span class='p red'>常见的数据结构有哪些？</span>：栈，队列，数组，链表，树，图，堆，散列表</p><h3 id="-6"><a href="#-6" class="headerlink" title=""></a><div class="note danger simple"><p>Java中有几种数据类型</p></div></h3><p>整形：byte,short,int,long<br>浮点型：ﬂoat,double<br>字符型：char<br>布尔型：</p><blockquote><p>感觉全是红色标签呢？！不好看也不想背</p></blockquote><h3 id="-7"><a href="#-7" class="headerlink" title=""></a><div class="note danger simple"><p>什么是隐式转换，什么是显式转换 </p></div></h3><p>显示转换就是类型强转，把一个大类型的数据强制赋值给小类型的数据；隐式转换就是大范围的变量能够接受小范围的数据；隐式转换和显<br>式转换其实就是自动类型转换和强制类型转换。</p><h3 id="-8"><a href="#-8" class="headerlink" title=""></a><div class="note danger simple"><p>Char类型能不能转成int类型？能不能转化成string类型，能不能转成double类型 </p></div></h3><p>Char在java中也是比较特殊的类型，它的int值从1开始，一共有2的16次方个数据；Char&lt;int&lt;long&lt;ﬂoat&lt;double；Char类型可以隐式转成int,double类型，但是不能隐式转换成string；如果char类型转成byte，short类型的时候，需要强转。</p><h3 id="-9"><a href="#-9" class="headerlink" title=""></a><div class="note danger simple"><p>什么是拆装箱？ </p></div></h3><ul><li>装箱就是自动将基本数据类型转换为包装器类型（int—&gt;Integer）；调用方法：Integer的valueOf(int) 方法</li><li>拆箱就是自动将包装器类型转换为基本数据类型（Integer—&gt;int）。调用方法：Integer的intValue方 法</li></ul><h3 id="-10"><a href="#-10" class="headerlink" title=""></a><span class='p red'>Java中的包装类都是那些？</span></h3><p>byte：Byte，short：Short，int：Integer，long：Long，ﬂoat：Float，double：Double，char：Character ，boolean：Boolean</p><h3 id="-11"><a href="#-11" class="headerlink" title=""></a><span class='p yellow'>一个java类中包含那些内容？</span></h3><p>属性、方法、内部类、构造方法、代码块</p><h3 id="-12"><a href="#-12" class="headerlink" title=""></a><div class="tip warning faa-horizontal animated"><p>面向对象的特征有哪些方面?</p></div></h3><p>抽象，继承，多态，封装<br><strong>抽象</strong>：抽象是将一类对象的共同特征总结出来构造类的过程。<br><strong>继承</strong>：子类继承父类的特征和行为，使得子类对象（实例）具有父类的实例域和方法，或子类从父类继承方法，使得子类具有父类相同的行为。<br><strong>封装</strong>：封装把一个对象的属性私有化，同时提供一些可以访问属性的方法。<br><strong>多态</strong>：多态是同一个行为具有多个不同表现形式或形态的能力。多态就是同一个接口，使用不同的实例而执行不同操作</p><h3 id="-13"><a href="#-13" class="headerlink" title=""></a><div class="note danger simple"><p>访问修饰符 public,private,protected,以及不写（默认） 时的区别？ </p></div></h3><p>类的成员不写访问修饰时默认为 default。默认对于同一个包中的其他类相当于公 开（public），对于不是同一个包中的其他类相当于私有（private）。受保护 （protected）对子类相当于公开，对不是同一包中的没有父子关系的类相当于私 有。Java 中，外部类的修饰符只能是 public 或默认，类的成员（包括内部类）的 修饰符可以是以上四种。</p><h3 id="-14"><a href="#-14" class="headerlink" title=""></a><span class='p red'>String 是最基本的数据类型吗？</span></h3><p>不是。Java 中的基本数据类型只有 8 个：byte、short、int、long、ﬂoat、double、 char、boolean；除了基本类型（primitive type），剩下的都是引用类型（reference type），Java 5 以后引入的枚举类型也算是一种比较特殊的引用类型。</p><h3 id="-15"><a href="#-15" class="headerlink" title=""></a><span class='p yellow'>short s1 = 1; s1 = s1 + 1;有错吗?short s1 = 1; s1 += 1; 有错吗？</span></h3><p>对于 short s1 = 1; s1 = s1 + 1;由于 1 是 int 类型，因此 s1+1 运算结果也是 int 型，需要强制转换类型才能赋值给 short 型。而 short s1 =1; s1 += 1;可以正确 编译，因为 s1+= 1;相当于 s1 = (short)(s1 + 1);其中有隐含的强制类型转换。</p><h3 id="-16"><a href="#-16" class="headerlink" title=""></a><div class="tip warning faa-horizontal animated"><p>重载和重写的区别 </p></div></h3><p>重载：发生在同一个类中，方法名相同，参数列表不同（参数的类型，个数，顺序不同），与返回值类型和访问修饰符无关。<br>重写：发生在子类和父类之间，方法名相同，参数列表相同（返回值类型可以不同）。</p><h3 id="-17"><a href="#-17" class="headerlink" title=""></a><div class="note danger simple"><p>equals与==的区别 </p></div></h3><p>== ：的作用是判断两个对象的地址是不是相等。即判断两个对象是不是同一个对象。基本数据类型比较的是值，引用数据类型比较的是内存地址。<br>equals()：用来比较两个独立对象的内容是否相同。就好比去比较两个人的长相是否相同，它比较的两个对象的地址是否相等。<br>注意：equals()方法不能作用于基本数据类型的变量。如果没有对equals()方法进行重写，则比较的是引用类型的变量所指向的对象的地址；而String、Date等类对equals()方法进行了重写的话，比较的是所指向的对象的内容。</p><h3 id="-18"><a href="#-18" class="headerlink" title=""></a><span class='p red'>String ++i与i++的区别</span></h3><p>i++：先赋值，后计算<br>++i：先计算，后赋值</p><h3 id="-19"><a href="#-19" class="headerlink" title=""></a><div class="note warning simple"><p>Java中各种数据默认值</p></div></h3><ul><li>Byte,short,int,long默认是都是0</li><li>Boolean默认值是false</li><li>Char类型的默认值是’’</li><li>Float与double类型的默认是0.0</li><li>对象类型的默认值是null</li></ul><h3 id="-20"><a href="#-20" class="headerlink" title=""></a><div class="note warning simple"><p>Java常用包有那些？</p></div></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Java.lang</span><br><span class="line">Java.io</span><br><span class="line">Java.sql</span><br><span class="line">Java.util</span><br><span class="line">Java.awt</span><br><span class="line">Java.net</span><br><span class="line">Java.math</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="-21"><a href="#-21" class="headerlink" title=""></a><div class="note success simple"><p>Object类常用方法有那些？</p></div></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Equals</span><br><span class="line">Hashcode</span><br><span class="line">toString</span><br><span class="line">wait</span><br><span class="line">notify</span><br><span class="line">clone</span><br><span class="line">getClass</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="-22"><a href="#-22" class="headerlink" title=""></a><span class='p red'>java中是值传递引用传递？</span></h3><p>论上说，java都是引用传递，对于基本数据类型，传递是值的副本，而不是值本身。对于象类型，传递是对象的引用，当在一个方法操作操作参数的时候，其实操作的是引用所指向的对象。</p><h3 id="-23"><a href="#-23" class="headerlink" title=""></a><span class='p green'>实例化数组后，能不能改变数组长度呢？</span></h3><p>不能，数组一旦实例化，它的长度就是固定的</p><h3 id="-24"><a href="#-24" class="headerlink" title=""></a><div class="note danger simple"><p>形参与实参区别 </p></div></h3><p><strong>实参(argument)</strong><br>全称为”实际参数”是在调用时传递给函数的参数. 实参可以是常量、变量、表达式、函数等， 无论实参是何种类型的量，在进行函数调用时，它们都必须具有确定的值， 以便把这些值传送给形参。 因此应预先用赋值，输入等办法使实参获得确定值。<br><strong>形参(parameter)：</strong><br>全称为”形式参数” 由于它不是实际存在变量，所以又称虚拟变量。是在定义函数名和函数体的时候使用的参数,目的是用来接收调用该函数时传入的参数.在调用函数时，实参将赋值给形参。因而，必须注意实参的个数，类型应与形参一一对应，并且实参必须要有确定的值。</p><p>形参出现在<strong>函数定义</strong>中，在整个函数体内都可以使用， 离开该函数则不能使用。实参出现在<strong>主调函数</strong>中，<strong>进入被调函数后，实参变量也不能使用。</strong> 形参和实参的功能是作数据传送。发生函数调用时， <strong>主调函数把实参的值传送给被调函数的形参从而实现主调函数向被调函数的数据传送。</strong></p><p>1.形参变量只有在被调用时才分配内存单元，<strong>在调用结束时， 即刻释放所分配的内存单元。</strong>因此，形参只有在函数内部有效。 函数调用结<br>束返回主调函数后则不能再使用该形参变量。<br>2.实参可以是常量、变量、表达式、函数等， 无论实参是何种类型的量，在进行函数调用时，它们都必须具有确定的值， 以便把这些值传<br>送给形参。 因此应预先用赋值，输入等办法使实参获得确定值。<br>3.实参和形参在数量上，类型上，顺序上应严格一致， 否则会发生“类型不匹配”的错误。<br>4.<strong>函数调用中发生的数据传送是单向的。</strong> 即只能把实参的值传送给形参，而不能把形参的值反向地传送给实参。 因此在函数调用过程中，形参的值发生改变，而实参中的值不会变化。<br>5.当形参和实参不是指针类型时，在该函数运行时，<strong>形参和实参是不同的变量，他们在内存中位于不同的位置，形参将实参的内容复制一份</strong>，在该函数运行结束的时候形参被释放，而实参内容不会改变。而<strong>如果函数的参数是指针类型变量,在调用该函数的过程中，传给函数的是实参的地址，在函数体内部使用的也是实参的地址，即使用的就是实参本身。</strong>所以在函数体内部可以改变实参的值。</p><h3 id="-25"><a href="#-25" class="headerlink" title=""></a><div class="note danger simple"><p>什么是方法重载？（又一个重复的）</p></div></h3><p>方法的重载就是在同一个类中允许同时存在一个以上的同名方法，只要它们的参数个数或者类型不同即可。在这种情况下，该方法就叫被重载了，个过程称为方法的重载（override）</p><h3 id="-26"><a href="#-26" class="headerlink" title=""></a><div class="note danger simple"><p>构造方法能不能重写？能不能重载？</p></div></h3><p>可以重载，但不能重写。</p><h3 id="-27"><a href="#-27" class="headerlink" title=""></a><div class="note warning simple"><p>内部类与静态内部类的区别？</p></div></h3><p>静态内部类相对与外部类是独立存在的，在静态内部类中无法直接访问外部类中变量、方法。如果要访问的话，必须要new一个外部类的对象，使用new出来的对象来访问。但是可以直接访问静态的变量、调用静态的方法；<br>普通内部类作为外部类一个成员而存在，在普通内部类中可以直接访问外部类属性，调用外部类的方法。<br>如果外部类要访问内部类的属性或者调用内部类的方法，必须要创建一个内部类的对象，使用该对象访问属性或者调用方法。<br>如果其他的类要访问普通内部类的属性或者调用普通内部类的方法，必须要在外部类中创建一个普通内部类的对象作为一个属性，外同类可<br>以通过该属性调用普通内部类的方法或者访问普通内部类的属性<br>如果其他的类要访问静态内部类的属性或者调用静态内部类的方法，直接创建一个静态内部类对象即可。</p><h3 id="-28"><a href="#-28" class="headerlink" title=""></a><div class="note danger simple"><p>Static关键字有什么作用？</p></div></h3><p>Static可以修饰内部类、方法、变量、代码块<br>Static修饰的类是静态内部类<br>Static修饰的方法是静态方法，表示该方法属于当前类的，而不属于某个对象的，静态方法也不能被重写，可以直接使用类名来调用。在static方法中不能使用this或者super关键字。<br>Static修饰变量是静态变量或者叫类变量，静态变量被所有实例所共享，不会依赖于对象。静态变量在内存中只有一份拷贝，在JVM加载类的时候，只为静态分配一次内存。<br>Static修饰的代码块叫静态代码块，通常用来做程序优化的。静态代码块中的代码在整个类加载的时候只会执行一次。静态代码块可以有多<br>个，如果有多个，按照先后顺序依次执行。</p><h3 id="-29"><a href="#-29" class="headerlink" title=""></a><div class="note danger simple"><p>ﬁnal在java中的作用，有哪些用法?</p></div></h3><ol><li>被ﬁﬁnal修饰的类不可以被继承</li><li>被ﬁﬁnal修饰的方法不可以被重写</li><li>被ﬁﬁnal修饰的变量不可以被改变.如果修饰引用,那么表示引用不可变,引用指向的内容可变. </li><li>被ﬁﬁnal修饰的方法,JVM会尝试将其内联,以提高运行效率</li><li>被ﬁﬁnal修饰的常量,在编译阶段会存入常量池中.</li></ol><h3 id="-30"><a href="#-30" class="headerlink" title=""></a><div class="note danger simple"><p>StringString StringBuﬀﬀer 和 StringBuilder 的区别是什么？</p></div></h3><p>StringBuﬀer与StringBuilder都继承了AbstractStringBulder类，而AbtractStringBuilder又实现了CharSequence接口，两个类都是用来进行字符串操作的。在做字符串拼接修改删除替换时，效率比string更高。</p><p>StringBuﬀer是线程安全的，Stringbuilder是非线程安全的。所以Stringbuilder比stringbuﬀer效率更高，StringBuﬀer的方法大多都加了synchronized关键字</p><h3 id="-31"><a href="#-31" class="headerlink" title=""></a><div class="note danger simple"><p>String str=”aaa”,与String str=new String(“aaa”)一样吗？</p></div></h3><p>一共有两个引用，三个对象。因为”aa”与”bb”都是常量，常量的值不能改变，当执行字符串拼接时候，会创建一个新的常量是” aabbb”,有将其到常量池中。</p><h3 id="-32"><a href="#-32" class="headerlink" title=""></a><div class="note danger simple"><p>String类的常用方法有那些？</p></div></h3><p>charAt：返回指定索引处的字符<br>indexOf()：返回指定字符的索引<br>replace()：字符串替换<br>trim()：去除字符串两端空白<br>split()：分割字符串，返回一个分割后的字符串数组<br>getBytes()：返回字符串的byte类型数组<br>length()：返回字符串长度<br>toLowerCase()：将字符串转成小写字母<br>toUpperCase()：将字符串转成大写字符<br>substring()：截取字符串<br>format()：格式化字符串</p><h3 id="-33"><a href="#-33" class="headerlink" title=""></a><div class="note danger simple"><p>Java中的继承是单继承还是多继承</p></div></h3><p>Java中既有单继承，又有多继承。对于java类来说只能有一个父类，对于接口来说可以同时继承多个接口</p><h3 id="-34"><a href="#-34" class="headerlink" title=""></a><div class="note danger simple"><p>Super与this表示什么？</p></div></h3><p>Super表示当前类的父类对象<br>This表示当前类的对象</p><h3 id="-35"><a href="#-35" class="headerlink" title=""></a><span class='p red'>普通类与抽象类有什么区别？</span></h3><p>普通类不能包含抽象方法，抽象类可以包含抽象方法<br>抽象类不能直接实例化，普通类可以直接实例化</p><h3 id="-36"><a href="#-36" class="headerlink" title=""></a><span class='p red'>什么是接口？为什么需要接口？接口有什么特点？</span></h3><p>接口就是某个事物对外提供的一些功能的声明，是一种特殊的java类，接口弥补了java单继承的缺点<br>接口中声明全是public static ﬁnal修饰的常量<br>接口中所有方法都是抽象方法<br>接口是没有构造方法的<br>接口也不能直接实例化<br>接口可以多继承</p><h3 id="-37"><a href="#-37" class="headerlink" title=""></a><div class="note danger simple"><p>抽象类和接口的区别?</p></div></h3><p><strong>抽象类：</strong></p><ol><li>抽象方法，只有行为的概念，没有具体的行为实现。使用abstract关键字修饰，没有方法体。子类必须重写这些抽象方法。</li><li>包含抽象方法的类，一定是抽象类。</li><li>抽象类只能被继承，一个类只能继承一个抽象类。<br><strong>接口：</strong></li><li>全部的方法都是抽象方法，属性都是常量</li><li>不能实例化，可以定义变量。</li><li>接口变量可以引用具体实现类的实例</li><li>接口只能被实现，一个具体类实现接口，必须实现全部的抽象方法</li><li>接口之间可以多实现</li><li>一个具体类可以实现多个接口，实现多继承现象</li></ol><h3 id="-38"><a href="#-38" class="headerlink" title=""></a><div class="note danger simple"><p>抽象类和接口的区别?</p></div></h3><p>java的集合有两类，一类是List，还有一类是Set。<strong>前者有序可重复，后者无序不重复。</strong>当我们在set中插入的时候怎么判断是否已经存在该<br>元素呢，可以通过equals方法。但是如果元素太多，用这样的方法就会比较满。</p><p>于是有人发明了哈希算法来提高集合中查找元素的效率。 这种方式将集合分成若干个存储区域，每个对象可以计算出一个哈希码，可以将哈希码分组，每组分别对应某个存储区域，根据一个对象的哈希码就可以确定该对象应该存储的那个区域。<br>hashCode方法可以这样理解：它返回的就是根据对象的内存地址换算出的一个值。这样一来，当集合要添加新的元素时，先调用这个元素的hashCode方法，就一下子能定位到它应该放置的物理位置上。如果这个位置上没有元素，它就可以直接存储在这个位置上，不用再进行任何比较了；如果这个位置上已经有元素了，就调用它的equals方法与新元素进行比较，相同的话就不存了，不相同就散列其它的地址。这样一来实际调用equals方法的次数就大大降低了，几乎只需要一两次</p><h3 id="-39"><a href="#-39" class="headerlink" title="### "></a>### <div class="note danger simple"><p>Java的四种引用，强弱软虚</p></div></h3><p><strong>强引用</strong><br>强引用是平常中使用最多的引用，强引用在程序内存不足（OOM）的时候也不会被回收<br><strong>软引用</strong><br>软引用在程序内存不足时，会被回收<br><strong>弱引用</strong><br>弱引用就是只要JVM垃圾回收器发现了它，就会将之回收<br><strong>虚引用</strong><br>虚引用的回收机制跟弱引用差不多，但是它被回收之前，会被放入ReferenceQueue中。注意哦，其它引用是被JVM回收后才被传入<br>ReferenceQueue中的。由于这个机制，所以虚引用大多被用于引用销毁前的处理工作。还有就是，虚引用创建的时候，必须带有<br>ReferenceQueue<br><strong>上诉所说的几类引用，都是指对象本身的引用，而不是指 Reference 的四个子类的引用</strong></p><h3 id="-40"><a href="#-40" class="headerlink" title=""></a><div class="note danger simple"><p>Java创建对象有几种方式？</p></div></h3><p>java中提供了以下四种创建对象的方式</p><ol><li>new创建新对象</li><li>通过反射机制</li><li>采用clone机制</li><li>通过序列化机制</li></ol><h3 id="-41"><a href="#-41" class="headerlink" title=""></a><div class="note danger simple"><p>有没有可能两个不相等的对象有相同的hashcode</p></div></h3><p>有可能.在产生hash冲突时,两个不相等的对象就会有相同的 hashcode 值.当hash冲突产生时,一般有以<br>下几种方式来处理</p><ol><li>拉链法:每个哈希表节点都有一个next指针,多个哈希表节点可以用next指针构成一个单向链表，被分配到同一个索引上的多个节点可以<br>用这个单向链表进行存储.</li><li>开放定址法:一旦发生了冲突,就去寻找下一个空的散列地址,只要散列表足够大,空的散列地址总能找到,并将记录存入</li><li>再哈希:又叫双哈希法,有多个不同的Hash函数.当发生冲突时,使用第二个,第三个….等哈希函数计算地址,直到无冲突.</li></ol><h3 id="-42"><a href="#-42" class="headerlink" title=""></a><div class="note danger simple"><p>拷贝和浅拷贝的区别是什么?</p></div></h3><p><strong>浅拷贝:</strong><br>被复制对象的所有变量都含有与原来的对象相同的值,而所有的对其他对象的引用仍然指向原来的对象.换言之,浅拷贝仅仅复制所考虑的对象,<br>而不复制它所引用的对象.</p><p><strong>深拷贝:</strong><br>被复制对象的所有变量都含有与原来的对象相同的值.而那些引用其他对象的变量将指向被复制过的新对象.而不再是原有的那些被引用的对<br>象.换言之.深拷贝把要复制的对象所引用的对象都复制了一遍. </p><h3 id="-43"><a href="#-43" class="headerlink" title=""></a><div class="note warning simple"><p>static都有哪些用法?</p></div></h3><p>static关键字这两个基本的用法:静态变量和静态方法.也就是被static所修饰的变量/方法都属于类的静态资源,类实例所共享.除了静态变量和静态方法之外,static也用于静态块,多用于初始化操作,此外static也多用于修饰内部类,此时称之为静态内部类.最后一种用法就是静态导包,即 import static .import static是在JDK 1.5之后引入的新特性,可以用来指定导入某个类中的静态资源,并且不需要使用类名,可以直接使用资源名</p><h3 id="-44"><a href="#-44" class="headerlink" title=""></a><div class="note danger simple"><p>ﬁnal、ﬁnalize()、ﬁnally</p></div></h3><p>性质不同</p><ol><li>ﬁnal为关键字；</li><li>ﬁnalize()为方法；</li><li>ﬁnally为区块标志，用于try语句中</li></ol><p>作用</p><ol><li>ﬁnal为用于标识常量的关键字，ﬁnal标识的关键字存储在常量池中（在这里ﬁnal常量的具体用法将在下面进行介绍）；</li><li>ﬁnalize()方法在Object中进行了定义，用于在对象“消失”时，由JVM进行调用用于对对象进行垃圾回收，类似于C++中的析构函数；用<br>户自定义时，用于释放对象占用的资源（比如进行I/0操作）；</li><li>ﬁnally{}用于标识代码块，与try{}进行配合，不论try中的代码执行完或没有执行完（这里指有异常），该代码块之中的程序必定会进<br>行；</li></ol><h3 id="-45"><a href="#-45" class="headerlink" title=""></a><div class="note danger simple"><p>JDBC操作的步骤</p></div></h3><p>加载数据库驱动类<br>打开数据库连接<br>执行sql语句<br>处理返回结果<br>关闭资源</p><h3 id="-46"><a href="#-46" class="headerlink" title=""></a><div class="note danger simple"><p>在使用jdbc的时候，如何防止出现sql注入的问题。</p></div></h3><p>使用PreparedStatement类，而不是使用Statement类</p><h3 id="-47"><a href="#-47" class="headerlink" title=""></a><div class="note danger simple"><p>是否了解连接池，使用连接池有什么好处？</p></div></h3><p>数据库连接是非常消耗资源的，影响到程序的性能指标。连接池是用来分配、管理、释放数据库连接的，可以使应用程序重复使用同一个数据库连接，而不是每次都创建一个新的数据库连接。通过释放空闲时间较长的数据库连接避免数据库因为创建太多的连接而造成的连接遗漏问题，提高了程序性能。</p><h3 id="-48"><a href="#-48" class="headerlink" title=""></a><div class="note danger simple"><p>你所了解的数据源技术有那些？使用数据源有什么好处？</p></div></h3><p>Dbcp,c3p0等，用的最多还是c3p0，因为c3p0比dbcp更加稳定，安全；通过配置文件的形式来维护数据库信息，而不是通过硬编码。当连<br>接的数据库信息发生改变时，不需要再更改程序代码就实现了数据库信息的更新。</p><h3 id="-49"><a href="#-49" class="headerlink" title=""></a><div class="note danger simple"><p>&amp;和&amp;&amp;的区别</p></div></h3><p>&amp;是位运算符。&amp;&amp;是布尔逻辑运算符，在进行逻辑判断时用&amp;处理的前面为false后面的内容仍需处理，用&amp;&amp;处理的前面为false不再处理后面的内容。</p><h3 id="-50"><a href="#-50" class="headerlink" title=""></a><div class="note warning simple"><p>静态内部类如何定义，什么是成员内部类</p></div></h3><p><strong>定义在类内部的静态类，就是静态内部类。</strong></p><ol><li>静态内部类可以访问外部类所有的静态变量和方法，即使是 private 的也一样。</li><li>静态内部类和一般类一致，可以定义静态变量、方法，构造方法等。</li><li>其它类使用静态内部类需要使用“外部类.静态内部类”方式，如下所示：Out.Inner inner = new Out.Inner();inner.print();</li><li>Java集合类HashMap内部就有一个静态内部类Entry。Entry是HashMap存放元素的抽象，HashMap 内部维护 Entry 数组用了存放元素，但是 Entry 对使用者是透明的。像这种和外部类关系密切的，且不依赖外部类实例的，都可以使用静态内部类。</li></ol><p><strong>定义在类内部的非静态类，就是成员内部类</strong>。成员内部类不能定义静态方法和变量（ﬁnal修饰的除外）。这是因为成员内部类是非静态的，<br>类初始化的时候先初始化静态成员，如果允许成员内部类定义静态变量，那么成员内部类的静态变量初始化顺序是有歧义的。</p><h3 id="-51"><a href="#-51" class="headerlink" title=""></a><div class="note warning simple"><p>数组有没有length()这个方法? String有没有length()这个方法</p></div></h3><p>数组没有length()这个方法，有length的属性。String有有length()这个方法</p><h3 id="-52"><a href="#-52" class="headerlink" title=""></a><div class="note danger simple"><p>用最有效率的方法算出2乘以8等於几</p></div></h3><p>2 &lt;&lt; 3</p><h3 id="-53"><a href="#-53" class="headerlink" title=""></a><div class="note danger simple"><p>排序都有哪几种方法？请列举</p></div></h3><p>排序的方法有：插入排序（直接插入排序、希尔排序），交换排序（冒泡排序、快速排序），选择排序（直接选择排序、堆排序），归并排序，分配排序（箱排序、基数排序）快速排序的伪代码。/ /使用快速排序方法对a[ 0 :n- 1 ]排序从a[ 0 :n- 1 ]中选择一个元素作为m i d d l e，该元素为支点把余下的元素分割为两段left 和r i g h t，使得l e f t中的元素都小于等于支点，而right 中的元素都大于等于支点递归地使用快速排序方法对left 进行排序递归地使用快速排序方法对right 进行排序所得结果为l e f t + m i d d l e + r i g h t</p><h3 id="-54"><a href="#-54" class="headerlink" title=""></a><div class="note danger simple"><p>说出一些常用的类，包，接口，请各举5个</p></div></h3><p>常用的类：BuﬀeredReader BuﬀeredWriter FileReader FileWirter String Integer常用的包：java.lang java.awt java.io java.util java.sql常用的接口：Remote List Map Document NodeList</p><h3 id="-55"><a href="#-55" class="headerlink" title=""></a><div class="note danger simple"><p>构造器（constructor）是否可被重写（override）？</p></div></h3><p>构造器不能被继承，因此不能被重写，但可以被重载。 </p><h3 id="-56"><a href="#-56" class="headerlink" title=""></a><div class="note danger simple"><p>两个对象值相同(x.equals(y) == true)，但却可有不同的hash code，这句话对不对？</p></div></h3><p>不对，如果两个对象 x 和 y 满足 x.equals(y) == true，它们的哈希码（hash code）应当相同。Java 对于 eqauls 方法和 hashCode 方法是这样规定的：<br>(1)如果两个 对象相同（equals 方法返回 true），那么它们的 hashCode 值一定要相同；<br>(2)如果两个对象的 hashCode 相同，它们并不一定相同。当然，你未必要按照要求去做，但是如果你违背了上述原则就会发现在使用容器时，相同的对象可以出现在 Set 集合中，同时增加新元素的效率会大大下降（对于使用哈希存储的系统，如果哈希码频繁的冲突将会造成存<br>取性能急剧下降）。</p><h3 id="-57"><a href="#-57" class="headerlink" title=""></a><div class="note danger simple"><p>是否可以继承 String 类？</p></div></h3><p>String 类是 ﬁnal 类，不可以被继承，继承 String 本身就是一个错误的行为，对 String 类型最好的重用方式是关联关系（Has-A）和依赖关系（Use-A）而不是继承关系（Is-A）。 </p><h3 id="-58"><a href="#-58" class="headerlink" title=""></a><div class="note danger simple"><p>当一个对象被当作参数传递到一个方法后，此方法可改变这个对象的属性，并可返回变化后的结果，那么这里到底是值传递还是引用传递？</p></div></h3><p>是值传递。Java 语言的方法调用只支持参数的值传递。当一个对象实例作为一个参数被传递到方法中时，参数的值就是对该对象的引用。对象的属性可以在被调用过程中被改变，但对对象引用的改变是不会影响到调用者的。C++和 C#中可以通过传引用或传输出参数来改变传入的参数的值。</p><h3 id="-59"><a href="#-59" class="headerlink" title=""></a><div class="note danger simple"><p>String 和 StringBuilder、StringBuﬀer 的区别？</p></div></h3><p>Java 平台提供了两种类型的字符串：String 和 StringBuﬀer/StringBuilder，它们可以储存和操作字符串。其中 String 是只读字符串，也就意味着 String 引用的字符串内容是不能被改变的。而 StringBuﬀer/StringBuilder 类表示的字符串对象可以直接进行修改。StringBuilder 是 Java 5 中引入的，它和 StringBuﬀer 的方法完全相同，区别在于它是在单线程环境下使用的，因为它的所有方面都没有被synchronized 修饰，因此它的效率也比 StringBuﬀer 要高。</p><h3 id="-60"><a href="#-60" class="headerlink" title=""></a><div class="note danger simple"><p>重载（Overload）和重写（Override）的区别。重载的方法能否根据返回类型进行区分？</p></div></h3><p>方法的重载和重写都是实现多态的方式，区别在于前者实现的是编译时的多态性，而后者实现的是运行时的多态性。重载发生在一个类中，<br>同名的方法如果有不同的参数列表（参数类型不同、参数个数不同或者二者都不同）则视为重载；重写发生在子类与父类之间，重写要求子<br>类被重写方法与父类被重写方法有相同的返回类型，比父类被重写方法更好访问，不能比父类被重写方法声明更多的异常（里氏代换原<br>则）。重载对返回类型没有特殊的要求。</p><h3 id="-61"><a href="#-61" class="headerlink" title=""></a><div class="note danger simple"><p>char 型变量中能不能存贮一个中文汉字，为什么？</p></div></h3><p>char 类型可以存储一个中文汉字，因为 Java 中使用的编码是 Unicode（不选择任何特定的编码，直接使用字符在字符集中的编号，这是统一的唯一方法），一个 char 类型占 2 个字节（16 比特），所以放一个中文是没问题的。</p><h3 id="-62"><a href="#-62" class="headerlink" title=""></a><div class="note warning simple"><p>抽象类（abstract class）和接口（interface）有什么异同</p></div></h3><p>抽象类和接口都不能够实例化，但可以定义抽象类和接口类型的引用。一个类如果继承了某个抽象类或者实现了某个接口都需要对其中的抽象方法全部进行实现，否则该类仍然需要被声明为抽象类。接口比抽象类更加抽象，因为抽象类中可以定义构造器，可以有抽象方法和具体方法，而接口中不能定义构造器而且其中的方法全部都是抽象方法。抽象类中的成员可以是 private、默认、protected、public 的，而接口中的成员全都是 public 的。抽象类中可以定义成员变量，而接口中定义的成员变量实际上都是常量。有抽象方法的类必须被声明为抽象类，而抽象类未必要有抽象方法。</p><h3 id="-63"><a href="#-63" class="headerlink" title=""></a><div class="note danger simple"><p>抽象的（abstract）方法是否可同时是静态的（static）,是否可同时是本地方法（native），是否可同时被 synchronized修饰？</p></div></h3><p>都不能。抽象方法需要子类重写，而静态的方法是无法被重写的，因此二者是矛盾的。本地方法是由本地代码（如 C 代码）实现的方法，而<br>抽象方法是没有实现的，也是矛盾的。synchronized 和方法的实现细节有关，抽象方法不涉及实现细节，因此也是相互矛盾的。</p><h3 id="-64"><a href="#-64" class="headerlink" title=""></a><div class="note danger simple"><p>如何实现对象克隆？</p></div></h3><p>有两种方式：</p><ol><li>实现 Cloneable 接口并重写 Object 类中的 clone()方法；</li><li>实现 Serializable 接口，通过对象的序列化和反序列化实现克隆，可以实现真</li></ol><h3 id="-65"><a href="#-65" class="headerlink" title=""></a><div class="note danger simple"><p>接口是否可继承（extends）接口？抽象类是否可实现（implements）接口？抽象类是否可继承具体类（concreteclass）？</p></div></h3><p>接口可以继承接口，抽象类可以实现接口，抽象类可以继承具体类。</p><h3 id="-66"><a href="#-66" class="headerlink" title=""></a><div class="note danger simple"><p>一个”.java”源文件中是否可以包含多个类（不是内部类）？有什么限制？</p></div></h3><p>可以，但一个源文件中最多只能有一个公开类（public class）而且文件名必须和公开类的类名完全保持一致</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>背书大纲（面试用）[数据库部分]</title>
      <link href="/2025/07/07/%E8%83%8C%E4%B9%A6%E5%A4%A7%E7%BA%B2%EF%BC%88%E9%9D%A2%E8%AF%95%E7%94%A8%EF%BC%89%5B%E6%95%B0%E6%8D%AE%E5%BA%93%E9%83%A8%E5%88%86%5D/"/>
      <url>/2025/07/07/%E8%83%8C%E4%B9%A6%E5%A4%A7%E7%BA%B2%EF%BC%88%E9%9D%A2%E8%AF%95%E7%94%A8%EF%BC%89%5B%E6%95%B0%E6%8D%AE%E5%BA%93%E9%83%A8%E5%88%86%5D/</url>
      
        <content type="html"><![CDATA[<h1 id="这个没有先后顺序，就是个背书大纲（数据库专项部分）"><a href="#这个没有先后顺序，就是个背书大纲（数据库专项部分）" class="headerlink" title="这个没有先后顺序，就是个背书大纲（数据库专项部分）"></a>这个没有先后顺序，就是个背书大纲（数据库专项部分）</h1><ul><li>彩色文字<br>在一段话中方便插入各种颜色的标签，包括：<span class='p red'>红色</span>、<span class='p yellow'>黄色</span>、<span class='p green'>绿色</span>、<span class='p cyan'>青色</span>、<span class='p blue'>蓝色</span>、<span class='p gray'>灰色</span>。</li></ul><p>不同的颜色以为意味这不同的重点度，红色最高，意味着出现频率越高</p><p><strong>本文章基本为了快速通过面试和抽查，只收录了高频问题</strong></p><h1 id="数据库部分-持续更新"><a href="#数据库部分-持续更新" class="headerlink" title="数据库部分(持续更新)"></a>数据库部分(持续更新)</h1><h2 id=""><a href="#" class="headerlink" title=""></a><span class='p red'>1、数据库存储引擎</span></h2><p>数据库存储引擎是数据库底层软件组织，数据库管理系统（DBMS）使用数据引擎进行创建、查询、更新和删除数据。不同的存储引擎提供不同的存储机制、索引技巧、锁定水平等功能，使用不同的存储引擎，还可以 获得特定的功能。现在许多不同的数据库管理系统都支持多<br>种不同的数据引擎。存储引擎主要有： 1. MyIsam , 2. InnoDB, 3. Memory, 4. Archive, 5. Federated </p><h2 id="-1"><a href="#-1" class="headerlink" title=""></a><span class='p red'>索引</span></h2><p>索引（Index）是帮助 MySQL 高效获取数据的数据结构。 常见的查询算法,顺序查找,二分查找,二叉排序树查找,哈希散列法,分块查找,平衡多路搜索树 B 树（B-tree） 索引是对数据库表中一个或多个列的值进行排序的结构，建立索引有助于快速获取信息。 </p><p>可以背诵这个<span class='p yellow'>索引就是加快检索表中数据的方法。数据库的索引类似于书籍的索引。在书籍中，索引允许用户不必翻阅完整个书就能 迅速地找到所需要的信息。在数据库中，索引也允许数据库程序迅速地找到表中的数据，而不必扫描整个数据库</span></p><p><strong>mysql 有4种不同的索引：</strong></p><ul><li><span class='p red'>主键索引（PRIMARY）</span></li><li><span class='p red'>唯一索引（UNIQUE）</span></li><li><span class='p red'>普通索引（INDEX）</span></li><li><span class='p red'>全文索引（FULLTEXT）</span></li></ul><p>注意背记<br><span class='p red'>索引并非是越多越好，创建索引也需要耗费资源，一是增加了数据库的存储空间，二是在插入和删除时要花费较多的时间维护索引 索引加快数据库的检索速度 索引降低了插入、删除、修改等维护任务的速度 唯一索引可以确保每一行数据的唯一性 通过使用索引，可以在查询的过程中使用优化隐藏器，提高系统的性能 索引需要占物理和数据空间</span></p><h2 id="-2"><a href="#-2" class="headerlink" title=""></a><span class='p cyan'>数据库的三范式是什么</span></h2><ul><li>第一范式：列不可再分</li><li>第二范式：行可以唯一区分，主键约束</li><li>第三范式：表的非主属性不能依赖与其他表的非主属性 外键约束<br>且三大范式是一级一级依赖的，第二范式建立在第一范式上，第三范式建立第一第二范式上 。</li></ul><h2 id="-3"><a href="#-3" class="headerlink" title=""></a><span class='p red'>数据库是事务</span></h2><p>事务(TRANSACTION)是作为单个逻辑工作单元执行的一系列操作， 这些操作作为一个整体一起向系统提交，要么都执行、要么都不执行 。<br>事务是一个不可分割的工作逻辑单元事务必须具备以下四个属性，简称 ACID 属性： </p><p><strong>原子性</strong></p><ol><li>事务是一个完整的操作。事务的各步操作是不可分的（原子的）；要么都执行，要么都不执行。<br><strong>一致性</strong></li><li>当事务完成时，数据必须处于一致状态。<br><strong>隔离性</strong></li><li>对数据进行修改的所有并发事务是彼此隔离的， 这表明事务必须是独立的，它不应以任何方式依赖于或影响其他事务。<br><strong>永久性</strong></li><li>事务完成后，它对数据库的修改被永久保持，事务日志能够保持事务的永久性</li></ol><h2 id="-4"><a href="#-4" class="headerlink" title=""></a><span class='p red'>SQL优化</span></h2><p>1、查询语句中不要使用select *<br>2、尽量减少子查询，使用关联查询（left join,right join,inner join）替代<br>3、减少使用IN或者NOT IN ,使用exists，not exists或者关联查询语句替代<br>4、or 的查询尽量用 union或者union all 代替(在确认没有重复数据或者不用剔除重复数据时，union all会更好)<br>5、应尽量避免在 where 子句中使用!=或&lt;&gt;<br>14、SQL优化<br>操作符，否则将引擎放弃使用索引而进行全表扫描。6、应尽量避免在 where 子句中对字段进行 null 值判断，否则将导致引擎放弃使用索引而进行全表扫描，如： select id from t where num<br>is null 可以在num上设置默认值0，确保表中num列没有null值，然后这样查询： select id from t where num=0</p><h2 id="-5"><a href="#-5" class="headerlink" title=""></a><span class='p red'>什么是视图</span></h2><p>视图是一种虚拟的表，具有和物理表相同的功能。可以对视图进行增，改，查，操作，试图通常是有一个表或者多个表的行或列的子集。对视图的修改不影响基本表。它使得我们获取数据更容易，相比多表查询</p><h2 id="-6"><a href="#-6" class="headerlink" title=""></a><span class='p red'>什么是内联接、左外联接、右外联接？</span></h2><ul><li>内联接（Inner Join）：匹配2张表中相关联的记录。</li><li>左外联接（Left Outer Join）：除了匹配2张表中相关联的记录外，还会匹配左表中剩余的记录，右表中未匹配到的字段用NULL表示。</li><li>右外联接（Right Outer Join）：除了匹配2张表中相关联的记录外，还会匹配右表中剩余的记录，左表中未匹配到的字段用NULL表示。在判定左表和右表时，要根据表名出现在Outer Join的左右位置关系</li></ul><h2 id="-7"><a href="#-7" class="headerlink" title=""></a><span class='p cyan'>并发事务带来哪些问题</span></h2><p><strong>脏读（Dirty read）:</strong>当一个事务正在访问数据并且对数据进行了修改，而这种修改还没有提交到数据库中，这时另外一个事务也访问了这个数据，然后使用了这个数据。因为这个数据是还没有提交的数据，那么另外一个事务读到的这个数据是“脏数据”，依据“脏数据”所做的操作可能是不正确的。<br><strong>丢失修改（Lost to modify）:</strong>指在一个事务读取一个数据时，另外一个事务也访问了该数据，那么在第一个事务中修改了这个数据后，第二个事务也修改了这个数据。这样第一个事务内的修改结果就被丢失，因此称为丢失修。 例如：事务1读取某表中的数据A=20，事务2也读取A=20，事务1修改A=A-1，事务2也修改A=A-1，最终结果A=19，事务1的修改被丢失。<br><strong>不可重复读（Unrepeatableread）:</strong>指在一个事务内多次读同一数据。在这个事务还没有结束时，另一个事务也访问该数据。那么，在第一个事务中的两次读数据之间，由于第二个事务的修改导致第一个事务两次读取的数据可能不太一样。这就发生了在一个事务内两次读到的数据是不一样的情况，因此称为不可重复读。<br><strong>幻读（Phantom read）:</strong>幻读与不可重复读类似。它发生在一个事务（T1）读取了几行数据，接着另一个并发事务（T2）插入了一些数据时。在随后的查询中，第一个事务（T1）就会发现多了一些原本不存在的记录，就好像发生了幻觉一样，所以称为幻读。<br><strong>不可重复读和幻读区别：</strong><br>不可重复读的重点是修改比如多次读取一条记录发现其中某些列的值被修改，幻读的重在于新增或者删除比如多次读取一条记录发现记录增多或减少了</p><h2 id="-8"><a href="#-8" class="headerlink" title=""></a><span class='p red'>事务隔离级别有哪些?MySQL的默认隔离级别是?</span></h2><p>SQL 标准定义了四个隔离级别：<br><strong>READ-UNCOMMITTED(读取未提交)：</strong> 最低的隔离级别，允许读取尚未提交的数据变更，可能会导致脏读、幻读或不可重复读。<br><strong>READ-COMMITTED(读取已提交)：</strong> 允许读取并发事务已经提交的数据，可以阻止脏读，但是幻读或不可重复读仍有可能发生。<br><strong>REPEATABLE-READ(可重复读)：</strong> 对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，可以阻止脏读和不可重复<br>读，但幻读仍有可能发生<br><strong>SERIALIZABLE(可串行化)：</strong> 最高的隔离级别，完全服从ACID的隔离级别。所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，该级别可以防止脏读、不可重复读以及幻读 </p><h2 id="-9"><a href="#-9" class="headerlink" title=""></a><span class='p yellow'>大表如何优化？</span></h2><p>当MySQL单表记录数过大时，数据库的CRUD性能会明显下降，一些常见的优化措施如下：<br><strong>限定数据的范围</strong><br>务必禁止不带任何限制数据范围条件的查询语句。比如：我们当用户在查询订单历史候，我们可以控制在一个月的范围内；<br><strong>读/写分离</strong><br>经典的数据库拆分方案，主库负责写，从库负责读；<br><strong>垂直分区</strong><br>根据数据库里面数据表的相关性进行拆分。 例如，用户表中既有用户的登录信息又有用户的基本信息，可以将用户表拆分成两个单独的表，甚至放到单独的库做分库。</p><h2 id="-10"><a href="#-10" class="headerlink" title=""></a><span class='p cyan'>MySQL 中有哪几种锁？</span></h2><p>1、表级锁：开销小，加锁快；不会出现死锁；锁定粒度大，发生锁冲突的概率最高，并发度最低。<br>2、行级锁：开销大，加锁慢；会出现死锁；锁定粒度最小，发生锁冲突的概率最低，并发度也最高。<br>3、页面锁：开销和加锁时间界于表锁和行锁之间；会出现死锁；锁定粒度界于表锁和行锁之间，并发度一般</p><h2 id="-11"><a href="#-11" class="headerlink" title=""></a><span class='p green'>MySQL 中 InnoDB 支持的四种事务隔离级别名称，以及逐级之间的区别？</span></h2><p>SQL 标准定义的四个隔离级别为：<br>1、read uncommited ：读到未提交数据<br>2、read committed：脏读，不可重复读<br>3、repeatable read：可重读<br>4、serializable ：串行事物 </p><h2 id="-12"><a href="#-12" class="headerlink" title=""></a><span class='p red'>CHAR 和 VARCHAR 的区别</span></h2><p>1、CHAR 和 VARCHAR 类型在存储和检索方面有所不同<br>2、CHAR 列长度固定为创建表时声明的长度，长度值范围是 1 到 255 当 CHAR值被存储时，它们被用空格填充到特定长度，检索 CHAR 值时需删除尾随空格。 </p><h2 id="-13"><a href="#-13" class="headerlink" title=""></a><span class='p green'>MySQL 中 InnoDB 主键和候选键有什么区别？</span></h2><p>表格的每一行都由主键唯一标识,一个表只有一个主键。<br>主键也是候选键。按照惯例，候选键可以被指定为主键，并且可以用于任何外键引用。</p><h2 id="-14"><a href="#-14" class="headerlink" title=""></a><span class='p green'>锁的优化策略</span></h2><p>1、读写分离<br>2、分段加锁<br>3、减少锁持有的时间<br>4.多个线程尽量以相同的顺序去获取资源不能将锁的粒度过于细化，不然可能会出现线程的加锁和释放次数过多，反而效率不如一次加一把大锁。 </p><h2 id="（理解性记忆）"><a href="#（理解性记忆）" class="headerlink" title="（理解性记忆）"></a><span class='p yellow'>简单描述 MySQL 中，索引，主键，唯一索引，联合索引的区别，对数据库的性能有什么影响（从读写两方面）</span>（理解性记忆）</h2><p><strong>索引是一种特殊的文件</strong>(InnoDB 数据表上的索引是表空间的一个组成部分)，它们包含着对数据表里所有记录的引用指针。<br><strong>普通索引</strong>(由关键字 KEY 或 INDEX 定义的索引)的唯一任务是加快对数据的访问速度。<br>普通索引允许被索引的数据列包含重复的值。如果能确定某个数据列将只包含彼此各不相同的值，在为这个数据列创建索引的时候就应该用<br><strong>关键字</strong> UNIQUE 把它定义为一个唯一索引。也就是说，唯一索引可以保证数据记录的唯一性。<br><strong>主键</strong>，是一种特殊的唯一索引，在一张表中只能定义一个主键索引，主键用于唯一标识一条记录，使用关键字 PRIMARY KEY 来创建。<br>索引可以覆盖多个数据列，如像 INDEX(columnA, columnB)索引，这就是联合索引。<br>索引可以极大的提高数据的查询速度，但是会降低插入、删除、更新表的速度，因为在执行这些写操作时，还要操作索引文件 </p><h2 id="（和上面的某一个问题的趋同性）"><a href="#（和上面的某一个问题的趋同性）" class="headerlink" title="（和上面的某一个问题的趋同性）"></a><span class='p red'>数据库中的事务是什么?</span>（和上面的某一个问题的趋同性）</h2><p>事务（transaction）是作为一个单元的一组有序的数据库操作。如果组中的所有操作都成功，则认为事务成功，即使只有一个操作失败，事务也不成功。如果所有操作完成，事务则提交，其修改将作用于所有其他数据库进程。如果一个操作失败，则事务将回滚，该事务所有操作的影响都将取消。</p><span class='p red'>事务特性：</span><p>1、原子性：即不可分割性，事务要么全部被执行，要么就全部不被执行。<br>2、一致性或可串性。事务的执行使得数据库从一种正确状态转换成另一种正确状态<br>3、隔离性。在事务正确提交之前，不允许把该事务对数据的任何改变提供给任何其他事物<br>4、持久性。事务正确提交后，其结果将永久保存在数据库中，即使在事务提交后有了其他故障，事务的处理结果也会得到保存。</p><blockquote><p>事务就是被绑定在一起作为一个逻辑工作单元的 SQL 语句分组，如果任何一个语句操作失败那么整个操作就被失败，以后操作就会回滚到操作前状态，或者是上有个节点。为了确保要么执行，要么不执行，就可以使用事务。要将有组语句作为事务考虑，就需要通过 ACID 测试，即原子性，一致性，隔离性和持久性。</p></blockquote><h2 id="-15"><a href="#-15" class="headerlink" title=""></a><span class='p red'>SQL 注入漏洞产生的原因？如何防止？</span></h2><p>SQL 注入产生的原因：程序开发过程中不注意规范书写 sql 语句和对特殊字符进行过滤，导致客户端可以通过全局变量 POST 和 GET 提交<br>一些 sql 语句正常执行。<br>防止 SQL 注入的方式：<br>开启配置文件中的 magic_quotes_gpc 和 magic_quotes_runtime 设置 执行 sql 语句时使用 addslashes 进行 sql 语句转换<br>Sql 语句书写尽量不要省略双引号和单引号。<br>过滤掉 sql 语句中的一些关键词：update、insert、delete、select、 * 。<br>提高数据库表和字段的命名技巧，对一些重要的字段根据程序的特点命名，取不易被猜到的。 </p><h2 id="-16"><a href="#-16" class="headerlink" title=""></a><span class='p yellow'>对于关系型数据库而言，索引是相当重要的概念，请回答有关索引的几个问题）</span></h2><p><strong>1、索引的目的是什么？</strong><br>快速访问数据表中的特定信息，提高检索速度<br>创建唯一性索引，保证数据库表中每一行数据的唯一性。<br>加速表和表之间的连接<br>使用分组和排序子句进行数据检索时，可以显著减少查询中分组和排序的时间<br><strong>2、索引对数据库系统的负面影响是什么？</strong><br>负面影响：<br>创建索引和维护索引需要耗费时间，这个时间随着数据量的增加而增加；索引需要占用物理空间，不光是表需要占用数据空间，每个索引也<br>需要占用物理空间；当对表进行增、删、改、的时候索引也要动态维护，这样就降低了数据的维护速度。<br><strong>3、为数据表建立索引的原则有哪些？</strong><br>在最频繁使用的、用以缩小查询范围的字段上建立索引。<br>在频繁使用的、需要排序的字段上建立索引<br><strong>4、什么情况下不宜建立索引？</strong><br>对于查询中很少涉及的列或者重复值比较多的列，不宜建立索引。<br>对于一些特殊的数据类型，不宜建立索引，比如文本字段（text）等 </p><h2 id="-17"><a href="#-17" class="headerlink" title=""></a><span class='p yellow'>解释 MySQL 外连接、内连接与自连接的区别）</span></h2><p>先说什么是交叉连接: 交叉连接又叫笛卡尔积，它是指不使用任何条件，直接将一个表的所有记录和另一个表中的所有记录一一匹配。<br>内连接 则是只有条件的交叉连接，根据某个条件筛选出符合条件的记录，不符合条件的记录不会出现在结果集中，即内连接只连接匹配的行。<br>外连接 其结果集中不仅包含符合连接条件的行，而且还会包括左表、右表或两个表中的所有数据行，这三种情况依次称之为左外连接，右外连接，和全外连接。<br>左外连接，也称左连接，左表为主表，左表中的所有记录都会出现在结果集中，对于那些在右表中并没有匹配的记录，仍然要显示，右边对应的那些字段值以NULL 来填充。右外连接，也称右连接，右表为主表，右表中的所有记录都会出现在结果集中。左连接和右连接可以互换，MySQL 目前还不支持全外连接。</p><h2 id="-18"><a href="#-18" class="headerlink" title=""></a><span class='p green'>Myql 中的事务回滚机制概述</span></h2><p>事务是用户定义的一个数据库操作序列，这些操作要么全做要么全不做，是一个不可分割的工作单位，事务回滚是指将该事务已经完成的对数据库的更新操作撤销。<br>要同时修改数据库中两个不同表时，如果它们不是一个事务的话，当第一个表修改完，可能第二个表修改过程中出现了异常而没能修改，此时就只有第二个表依旧是未修改之前的状态，而第一个表已经被修改完毕。而当你把它们设定为一个事务的时候，当第一个表修改完，第二<br>表修改出现异常而没能修改，第一个表和第二个表都要回到未修改的状态，这就是所谓的事务回滚 </p><h2 id="-19"><a href="#-19" class="headerlink" title=""></a><span class='p red'>SQL SQL 语言包括哪几部分？每部分都有哪些操作关键</span></h2><p>SQL 语言包括数据定义(DDL)、数据操纵(DML),数据控制(DCL)和数据查询（DQL）四个部分。<br>数据定义：Create Table,Alter Table,Drop Table, Craete/Drop Index 等<br>数据操纵：Select ,insert,update,delete,<br>数据控制：grant,revoke<br>数据查询：select </p><h2 id="-20"><a href="#-20" class="headerlink" title=""></a><span class='p yellow'>什么是锁？</span></h2><p>答：数据库是一个多用户使用的共享资源。当多个用户并发地存取数据时，在数据库中就会产生多个事务同时存取同一数据的情况。若对并发操作不加控制就可能会读取和存储不正确的数据，破坏数据库的一致性。<br>加锁是实现数据库并发控制的一个非常重要的技术。当事务在对某个数据对象进行操作前，先向系统发出请求，对其加锁。加锁后事务就对<br>该数据对象有了一定的控制，在该事务释放锁之前，其他的事务不能对此数据对象进行更新操作。<br><strong>基本锁类型：锁包括行级锁和表级锁</strong></p><h2 id="-21"><a href="#-21" class="headerlink" title=""></a><span class='p red'>什么叫视图？游标是什么？</span></h2><p>视图是一种虚拟的表，具有和物理表相同的功能。可以对视图进行增，改，查，操作，视图通常是有一个表或者多个表的行或列的子集。对<br>视图的修改不影响基本表。它使得我们获取数据更容易，相比多表查询。<br>游标：是对查询出来的结果集作为一个单元来有效的处理。游标可以定在该单元中的特定行，从结果集的当前行检索一行或多行。可以对结<br>果集当前行做修改。一般不使用游标，但是需要逐条处理数据的时候，游标显得十分重要。</p><h2 id="-22"><a href="#-22" class="headerlink" title=""></a><span class='p green'>试述视图的优点？</span></h2><p>(1) 视图能够简化用户的操作<br>(2) 视图使用户能以多种角度看待同一数据；<br>(3) 视图为数据库提供了一定程度的逻辑独立性；<br>(4) 视图能够对机密数据提供安全保护 </p><h2 id="-23"><a href="#-23" class="headerlink" title=""></a><span class='p yellow'>主键、外键和索引的区别？</span></h2><p>主键、外键和索引的区别<br>定义 ：<br>主键–唯一标识一条记录，不能有重复的，不允许为空<br>外键–表的外键是另一表的主键, 外键可以有重复的, 可以是空值<br>索引–该字段没有重复值，但可以有一个空值<br>作用：<br>主键–用来保证数据完整性<br>外键–用来和其他表建立联系用的<br>索引–是提高查询排序的速度<br>个数：<br>主键–主键只能有一个<br>外键–一个表可以有多个外键<br>索引–一个表可以有多个唯一索引 </p><h2 id="-24"><a href="#-24" class="headerlink" title=""></a><span class='p red'>说说对 SQL 语句优化有哪些方法？（选择几条）</span></h2><p>1、Where 子句中：where 表之间的连接必须写在其他 Where 条件之前，那些可以过滤掉最大数量记录的条件必须写在 Where 子句的末<br>尾.HAVING 最后。<br>2、用 EXISTS 替代 IN、用 NOT EXISTS 替代 NOT IN。<br>3、 避免在索引列上使用计算<br>4、避免在索引列上使用 IS NULL 和 IS NOT NULL<br>5、对查询进行优化，应尽量避免全表扫描，首先应考虑在 where 及 order by 涉及的列上建立索引。<br>6、应尽量避免在 where 子句中对字段进行 null 值判断，否则将导致引擎放弃使用索引而进行全表扫描<br>7、应尽量避免在 where 子句中对字段进行表达式操作，这将导致引擎放弃使用索引而进行全表扫描 </p><h2 id="-25"><a href="#-25" class="headerlink" title=""></a><span class='p green'>什么是时间戳</span></h2><p>时间戳就是在数据库表中单独加一列时间戳，比如“TimeStamp”， 每次读出来的时候，把该字段也读出来，当写回去的时候，把该字段加<br>1，提交之前 ，跟数据库的该字段比较一次，如果比数据库的值大的话，就允许保存，否则不允许保存，这种处理方法虽然不使用数据库系统提供的锁机制，但是这种方法可以大大提高数据库处理的并发量，以上悲观锁所说的加“锁”，其实分为几种锁，分别是： 排它锁（写锁）<br>和共享锁（读锁） 。</p><h2 id="-26"><a href="#-26" class="headerlink" title=""></a><span class='p green'>什么是行级锁</span></h2><p>行级锁是一种排他锁，防止其他事务修改此行；在使用以下语句时， Oracle 会自动应用行级锁：</p><ol><li>INSERT、 UPDATE、 DELETE、 SELECT … FOR UPDATE [OF columns] [WAIT n | NOWAIT];</li><li>SELECT … FOR UPDATE 语句允许用户一次锁定多条记录进行更新</li><li>使用 COMMIT 或 ROLLBACK 语句释放锁。</li></ol><h2 id="-27"><a href="#-27" class="headerlink" title=""></a><span class='p green'>什么是表级锁</span></h2><p>表示对当前操作的整张表加锁，它实现简单，资源消耗较少，被大部分 MySQL 引擎支持。最常使用的 MYISAM 与 INNODB 都支持表级锁<br>定。表级锁定分为表共享读锁（共享锁）与表独占写锁（排他锁）。 </p><h2 id="-28"><a href="#-28" class="headerlink" title=""></a><span class='p green'>什么是页级锁</span></h2><p>页级锁是 MySQL 中锁定粒度介于行级锁和表级锁中间的一种锁。表级锁速度快，但冲突多，行级冲突少，但速度慢。所以取了折衷的页<br>级，一次锁定相邻的一组记录。 BDB 支持页级锁 </p><p>—————————————-施工中———————————————</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java面试宝典</title>
      <link href="/2025/07/05/java%E9%9D%A2%E8%AF%95%E5%AE%9D%E5%85%B8/"/>
      <url>/2025/07/05/java%E9%9D%A2%E8%AF%95%E5%AE%9D%E5%85%B8/</url>
      
        <content type="html"><![CDATA[<h1 id="java面试宝典"><a href="#java面试宝典" class="headerlink" title="java面试宝典"></a>java面试宝典</h1><blockquote><p>这是首次尝试采用网站嵌入PDF编辑器的一次尝试，可直接查看背诵</p></blockquote><div class="row">    <embed src="/Java面试宝典/Java面试宝典.pdf" width="100%" height="550" type="application/pdf"></div>]]></content>
      
      
      <categories>
          
          <category> 面试大包 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一个相当简要的java要点总结</title>
      <link href="/2025/06/30/%E4%B8%80%E4%B8%AA%E7%9B%B8%E5%BD%93%E7%AE%80%E8%A6%81%E7%9A%84java%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/"/>
      <url>/2025/06/30/%E4%B8%80%E4%B8%AA%E7%9B%B8%E5%BD%93%E7%AE%80%E8%A6%81%E7%9A%84java%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="一个相当简要的java要点总结（这算摸鱼文吧）"><a href="#一个相当简要的java要点总结（这算摸鱼文吧）" class="headerlink" title="一个相当简要的java要点总结（这算摸鱼文吧）"></a>一个相当简要的java要点总结（这算摸鱼文吧）</h1><h2 id="一、Java语言深度解析"><a href="#一、Java语言深度解析" class="headerlink" title="一、Java语言深度解析"></a>一、Java语言深度解析</h2><blockquote><p>噗噗，这份笔记我有一个更好，更全的，这个只是为了快点背，如果要查看全面详细，费劲本大爷心思精细书写的请转《java快速学习速查》系列</p></blockquote><p>因为不想排版所以很多直接包裹在代码块里了，这篇文章更多的是为了测试mermaid是否可以正常渲染</p><h3 id="1-1-语言本质剖析"><a href="#1-1-语言本质剖析" class="headerlink" title="1.1 语言本质剖析"></a>1.1 语言本质剖析</h3><p>Java是一种严格遵循”Write Once, Run Anywhere”原则的<strong>高级编程语言</strong>，其核心特性包括：</p><ul><li><strong>跨平台性</strong>：通过JVM实现字节码的跨平台执行</li><li><strong>面向对象</strong>：完全基于对象的编程范式（封装/继承/多态）</li><li><strong>自动内存管理</strong>：垃圾回收机制(GC)自动处理内存分配与释放</li><li><strong>多线程支持</strong>：原生支持多线程并发编程</li></ul><h3 id="1-2-发展历程详解"><a href="#1-2-发展历程详解" class="headerlink" title="1.2 发展历程详解"></a>1.2 发展历程详解</h3><blockquote><p>有种写书人既视感，很啰嗦欸</p></blockquote><div class="table-container"><table><thead><tr><th>时间节点</th><th>重大事件</th><th>技术影响</th></tr></thead><tbody><tr><td>1991</td><td>Oak语言诞生</td><td>面向家电嵌入式系统</td></tr><tr><td>1995.5.23</td><td>正式更名Java</td><td>首个公开版本JDK 1.0a2</td></tr><tr><td>1998</td><td>J2SE 1.2发布</td><td>引入集合框架/JIT编译器</td></tr><tr><td>2004</td><td>J2SE 5.0</td><td>泛型/自动装箱/注解等革命性特性</td></tr><tr><td>2014</td><td>Java 8</td><td>Lambda表达式/Stream API</td></tr></tbody></table></div><h2 id="二、开发环境专业配置"><a href="#二、开发环境专业配置" class="headerlink" title="二、开发环境专业配置"></a>二、开发环境专业配置</h2><h3 id="2-1-JDK组件架构"><a href="#2-1-JDK组件架构" class="headerlink" title="2.1 JDK组件架构"></a>2.1 JDK组件架构</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">    JDK--&gt;开发工具(javac/javadoc/jdb)</span><br><span class="line">    JDK--&gt;JRE--&gt;JVM</span><br><span class="line">    JDK--&gt;JRE--&gt;核心类库(rt.jar等)</span><br></pre></td></tr></table></figure><p>这是个图（解析不出来算了，我也不想我也不想耗费资源）</p><h3 id="2-2-环境变量原理"><a href="#2-2-环境变量原理" class="headerlink" title="2.2 环境变量原理"></a>2.2 环境变量原理</h3><ul><li><strong>JAVA_HOME</strong>：指向JDK安装根目录<ul><li>示例：<code>C:\Program Files\Java\jdk-17.0.2</code></li></ul></li><li><strong>PATH</strong>：添加<code>%JAVA_HOME%\bin</code>使系统识别命令</li><li><strong>CLASSPATH</strong>（可选）：指定类加载路径</li></ul><p>验证命令示例：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看版本</span></span><br><span class="line">java -version</span><br><span class="line">javac -version</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看环境变量</span></span><br><span class="line"><span class="built_in">echo</span> %JAVA_HOME%</span><br></pre></td></tr></table></figure></p><h2 id="三、HelloWorld深度解读"><a href="#三、HelloWorld深度解读" class="headerlink" title="三、HelloWorld深度解读"></a>三、HelloWorld深度解读</h2><h3 id="3-1-程序结构分解"><a href="#3-1-程序结构分解" class="headerlink" title="3.1 程序结构分解"></a>3.1 程序结构分解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 类声明：访问修饰符 + class关键字 + 类名</span></span><br><span class="line"><span class="comment"> * 要求：类名与文件名严格一致（区分大小写）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 主方法：程序唯一入口</span></span><br><span class="line"><span class="comment">     * public static void 固定写法</span></span><br><span class="line"><span class="comment">     * String[] args 用于接收命令行参数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 系统输出语句</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Hello World!&quot;</span>); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-编译执行全流程"><a href="#3-2-编译执行全流程" class="headerlink" title="3.2 编译执行全流程"></a>3.2 编译执行全流程</h3><ol><li><p><strong>编译阶段</strong>（生成字节码）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javac -encoding UTF-8 HelloWorld.java</span><br></pre></td></tr></table></figure><ul><li>生成<code>HelloWorld.class</code>文件</li><li><code>-encoding</code>参数解决中文乱码</li></ul></li><li><p><strong>运行阶段</strong>（JVM解释执行）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java HelloWorld</span><br></pre></td></tr></table></figure><blockquote><p>注意：运行时不需要.class后缀</p></blockquote></li></ol><h2 id="四、代码规范最佳实践"><a href="#四、代码规范最佳实践" class="headerlink" title="四、代码规范最佳实践"></a>四、代码规范最佳实践</h2><h3 id="4-1-注释规范模板"><a href="#4-1-注释规范模板" class="headerlink" title="4.1 注释规范模板"></a>4.1 注释规范模板</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 单行注释：方法内部简短说明</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 多行注释：复杂逻辑说明</span></span><br><span class="line"><span class="comment"> * 第二行说明</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 类/方法文档注释（支持HTML标签）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 作者</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> 参数说明</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 返回值说明</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h3 id="4-2-命名规范细则"><a href="#4-2-命名规范细则" class="headerlink" title="4.2 命名规范细则"></a>4.2 命名规范细则</h3><div class="table-container"><table><thead><tr><th>元素类型</th><th>规范示例</th><th>错误示例</th></tr></thead><tbody><tr><td>类名</td><td><code>UserService</code></td><td><code>userService</code></td></tr><tr><td>方法名</td><td><code>getUserName()</code></td><td><code>GetUserName()</code></td></tr><tr><td>变量名</td><td><code>studentCount</code></td><td><code>StudentCount</code></td></tr><tr><td>常量名</td><td><code>MAX_SIZE</code></td><td><code>maxSize</code></td></tr></tbody></table></div><h2 id="五、数据类型系统详解"><a href="#五、数据类型系统详解" class="headerlink" title="五、数据类型系统详解"></a>五、数据类型系统详解</h2><h3 id="5-1-基本类型内存布局"><a href="#5-1-基本类型内存布局" class="headerlink" title="5.1 基本类型内存布局"></a>5.1 基本类型内存布局</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">pie</span><br><span class="line">    title 基本类型内存占比</span><br><span class="line">    &quot;byte&quot; : 1</span><br><span class="line">    &quot;short&quot; : 2</span><br><span class="line">    &quot;int&quot; : 4</span><br><span class="line">    &quot;long&quot; : 8</span><br><span class="line">    &quot;float&quot; : 4</span><br><span class="line">    &quot;double&quot; : 8</span><br><span class="line">    &quot;char&quot; : 2</span><br><span class="line">    &quot;boolean&quot; : 1</span><br></pre></td></tr></table></figure><p>这是个饼图你信不信，反正我是信了，解析的出来就解析出来，没有就罢了</p><h3 id="5-2-类型转换原理"><a href="#5-2-类型转换原理" class="headerlink" title="5.2 类型转换原理"></a>5.2 类型转换原理</h3><p><strong>自动转换规则</strong>（满足以下任一条件）：</p><ol><li>目标类型范围大于源类型<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"><span class="type">double</span> <span class="variable">d</span> <span class="operator">=</span> i;  <span class="comment">// 自动转换</span></span><br></pre></td></tr></table></figure></li><li>表达式中的自动提升<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">byte</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">r</span> <span class="operator">=</span> b + <span class="number">20</span>;  <span class="comment">// byte自动提升为int</span></span><br></pre></td></tr></table></figure></li></ol><p><strong>强制转换风险点</strong>：</p><p>掉精度警告，数据类型报错警告，类型组合相性警告</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">double</span> <span class="variable">price</span> <span class="operator">=</span> <span class="number">99.99</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">discount</span> <span class="operator">=</span> (<span class="type">int</span>)price;  <span class="comment">// 丢失小数部分（得99）</span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> (<span class="type">char</span>)<span class="number">1000</span>;  <span class="comment">// 可能产生意外字符</span></span><br></pre></td></tr></table></figure><h2 id="六、运算符高级应用"><a href="#六、运算符高级应用" class="headerlink" title="六、运算符高级应用"></a>六、运算符高级应用</h2><h3 id="6-1-位运算实战"><a href="#6-1-位运算实战" class="headerlink" title="6.1 位运算实战"></a>6.1 位运算实战</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 权限控制示例</span></span><br><span class="line"><span class="keyword">final</span> <span class="type">int</span> <span class="variable">READ</span> <span class="operator">=</span> <span class="number">1</span> &lt;&lt; <span class="number">0</span>;  <span class="comment">// 0001</span></span><br><span class="line"><span class="keyword">final</span> <span class="type">int</span> <span class="variable">WRITE</span> <span class="operator">=</span> <span class="number">1</span> &lt;&lt; <span class="number">1</span>; <span class="comment">// 0010</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">permission</span> <span class="operator">=</span> READ | WRITE;  <span class="comment">// 0011(3)</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">canRead</span> <span class="operator">=</span> (permission &amp; READ) != <span class="number">0</span>;</span><br></pre></td></tr></table></figure><h3 id="6-2-运算符优先级表"><a href="#6-2-运算符优先级表" class="headerlink" title="6.2 运算符优先级表"></a>6.2 运算符优先级表</h3><div class="table-container"><table><thead><tr><th>优先级</th><th>运算符</th><th>结合性</th></tr></thead><tbody><tr><td>1</td><td><code>() [] .</code></td><td>左→右</td></tr><tr><td>2</td><td><code>! ~ ++ --</code></td><td>右→左</td></tr><tr><td>3</td><td><code>* / %</code></td><td>左→右</td></tr><tr><td>4</td><td><code>+ -</code></td><td>左→右</td></tr><tr><td>5</td><td><code>&lt;&lt; &gt;&gt; &gt;&gt;&gt;</code></td><td>左→右</td></tr><tr><td>6</td><td><code>&lt; &lt;= &gt; &gt;=</code></td><td>左→右</td></tr></tbody></table></div><h2 id="七、企业级编码规范"><a href="#七、企业级编码规范" class="headerlink" title="七、企业级编码规范"></a>七、企业级编码规范</h2><ol><li><p><strong>防御式编程</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对象判空</span></span><br><span class="line"><span class="keyword">if</span> (obj == <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;参数不能为空&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>常量定义原则</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用枚举替代魔法数字</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">Color</span> &#123;</span><br><span class="line">    RED(<span class="string">&quot;#FF0000&quot;</span>), </span><br><span class="line">    GREEN(<span class="string">&quot;#00FF00&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String hexCode;</span><br><span class="line">    <span class="comment">// 构造方法...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>文档化要求</strong>：</p><ul><li>所有public类/方法必须包含JavaDoc</li><li>复杂算法需要添加实现思路说明</li><li>修改历史通过@since标记</li></ul></li></ol><p>没搞完喔，等着更新……，先用着</p>]]></content>
      
      
      <categories>
          
          <category> 要点总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL数据库系统学习笔记（3）</title>
      <link href="/2025/05/25/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%883%EF%BC%89/"/>
      <url>/2025/05/25/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%883%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="Oracle与MySQL一般性对比"><a href="#Oracle与MySQL一般性对比" class="headerlink" title="Oracle与MySQL一般性对比"></a>Oracle与MySQL一般性对比</h1><blockquote><p>只做大概性的罗列性质的大致化整理，后续部分有代码对比实例，仅做参考，请以更全面具体的专业性文章和手册为准</p></blockquote><h2 id="一、基础架构差异"><a href="#一、基础架构差异" class="headerlink" title="一、基础架构差异"></a>一、基础架构差异</h2><h3 id="1-数据库架构"><a href="#1-数据库架构" class="headerlink" title="1. 数据库架构"></a>1. 数据库架构</h3><p><strong>Oracle</strong>：</p><ul><li>采用”实例-数据库”的多租户架构</li><li>一个实例可管理多个PDB（可插拔数据库）</li><li>共享内存区域（SGA）设计复杂精细</li></ul><p><strong>MySQL</strong>：</p><ul><li>简单直接的”实例-数据库”架构</li><li>默认存储引擎InnoDB采用表空间管理</li><li>缓冲池(Buffer Pool)是主要内存区域</li></ul><h3 id="2-存储引擎"><a href="#2-存储引擎" class="headerlink" title="2. 存储引擎"></a>2. 存储引擎</h3><p><strong>Oracle</strong>：</p><ul><li>单一存储引擎架构</li><li>自动管理所有数据存储细节</li></ul><p><strong>MySQL</strong>：</p><ul><li>插件式存储引擎（InnoDB/MyISAM等）</li><li>不同引擎特性差异大（如事务支持、锁机制）</li></ul><h2 id="二、数据类型差异"><a href="#二、数据类型差异" class="headerlink" title="二、数据类型差异"></a>二、数据类型差异</h2><h3 id="1-数值类型"><a href="#1-数值类型" class="headerlink" title="1. 数值类型"></a>1. 数值类型</h3><div class="table-container"><table><thead><tr><th>类型</th><th>Oracle</th><th>MySQL</th></tr></thead><tbody><tr><td>整数</td><td>NUMBER(10)</td><td>INT/BIGINT</td></tr><tr><td>小数</td><td>NUMBER(10,2)</td><td>DECIMAL(10,2)</td></tr><tr><td>浮点数</td><td>BINARY_FLOAT</td><td>FLOAT/DOUBLE</td></tr></tbody></table></div><h3 id="2-字符串类型"><a href="#2-字符串类型" class="headerlink" title="2. 字符串类型"></a>2. 字符串类型</h3><div class="table-container"><table><thead><tr><th>类型</th><th>Oracle</th><th>MySQL</th></tr></thead><tbody><tr><td>定长字符串</td><td>CHAR(10)</td><td>CHAR(10)</td></tr><tr><td>变长字符串</td><td>VARCHAR2(4000)</td><td>VARCHAR(65535)</td></tr><tr><td>大文本</td><td>CLOB</td><td>LONGTEXT</td></tr></tbody></table></div><h2 id="三、SQL语法差异"><a href="#三、SQL语法差异" class="headerlink" title="三、SQL语法差异"></a>三、SQL语法差异</h2><h3 id="1-分页查询"><a href="#1-分页查询" class="headerlink" title="1. 分页查询"></a>1. 分页查询</h3><p><strong>Oracle</strong>：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> (</span><br><span class="line">  <span class="keyword">SELECT</span> t.<span class="operator">*</span>, ROWNUM rn <span class="keyword">FROM</span> employees t </span><br><span class="line">  <span class="keyword">WHERE</span> ROWNUM <span class="operator">&lt;=</span> <span class="number">20</span></span><br><span class="line">) <span class="keyword">WHERE</span> rn <span class="operator">&gt;</span> <span class="number">10</span>;</span><br></pre></td></tr></table></figure></p><p><strong>MySQL</strong>：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees LIMIT <span class="number">10</span>, <span class="number">10</span>;</span><br></pre></td></tr></table></figure></p><h3 id="2-日期处理"><a href="#2-日期处理" class="headerlink" title="2. 日期处理"></a>2. 日期处理</h3><p><strong>Oracle</strong>：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> TO_CHAR(SYSDATE, <span class="string">&#x27;YYYY-MM-DD HH24:MI:SS&#x27;</span>) <span class="keyword">FROM</span> dual;</span><br></pre></td></tr></table></figure></p><p><strong>MySQL</strong>：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> DATE_FORMAT(NOW(), <span class="string">&#x27;%Y-%m-%d %H:%i:%s&#x27;</span>);</span><br></pre></td></tr></table></figure></p><h2 id="四、事务与锁机制"><a href="#四、事务与锁机制" class="headerlink" title="四、事务与锁机制"></a>四、事务与锁机制</h2><h3 id="1-事务隔离级别"><a href="#1-事务隔离级别" class="headerlink" title="1. 事务隔离级别"></a>1. 事务隔离级别</h3><div class="table-container"><table><thead><tr><th>隔离级别</th><th>Oracle支持</th><th>MySQL支持</th></tr></thead><tbody><tr><td>READ UNCOMMITTED</td><td>❌</td><td>✅</td></tr><tr><td>READ COMMITTED</td><td>✅(默认)</td><td>✅</td></tr><tr><td>REPEATABLE READ</td><td>✅</td><td>✅(默认)</td></tr><tr><td>SERIALIZABLE</td><td>✅</td><td>✅</td></tr></tbody></table></div><h3 id="2-锁机制"><a href="#2-锁机制" class="headerlink" title="2. 锁机制"></a>2. 锁机制</h3><p><strong>Oracle</strong>：</p><ul><li>行级锁为主</li><li>自动升级锁粒度</li><li>支持多版本读一致性</li></ul><p><strong>MySQL(InnoDB)</strong>：</p><ul><li>行级锁+间隙锁</li><li>不自动升级锁粒度</li><li>MVCC实现机制不同</li></ul><h2 id="五、高可用方案"><a href="#五、高可用方案" class="headerlink" title="五、高可用方案"></a>五、高可用方案</h2><h3 id="Oracle高可用"><a href="#Oracle高可用" class="headerlink" title="Oracle高可用"></a>Oracle高可用</h3><ul><li>RAC (Real Application Clusters)</li><li>Data Guard</li><li>GoldenGate</li></ul><h3 id="MySQL高可用"><a href="#MySQL高可用" class="headerlink" title="MySQL高可用"></a>MySQL高可用</h3><ul><li>主从复制</li><li>Group Replication</li><li>InnoDB Cluster</li><li>MHA (Master High Availability)</li></ul><h2 id="六、备份恢复机制"><a href="#六、备份恢复机制" class="headerlink" title="六、备份恢复机制"></a>六、备份恢复机制</h2><h3 id="Oracle备份"><a href="#Oracle备份" class="headerlink" title="Oracle备份"></a>Oracle备份</h3><ul><li>RMAN (Recovery Manager)</li><li>支持块级别增量备份</li><li>时间点恢复精确到秒</li></ul><h3 id="MySQL备份"><a href="#MySQL备份" class="headerlink" title="MySQL备份"></a>MySQL备份</h3><ul><li>mysqldump逻辑备份</li><li>Percona XtraBackup物理备份</li><li>二进制日志(binlog)恢复</li></ul><h2 id="七、性能优化差异"><a href="#七、性能优化差异" class="headerlink" title="七、性能优化差异"></a>七、性能优化差异</h2><h3 id="Oracle优化"><a href="#Oracle优化" class="headerlink" title="Oracle优化"></a>Oracle优化</h3><ul><li>复杂的执行计划管理</li><li>丰富的统计信息收集</li><li>SQL Tuning Advisor</li></ul><h3 id="MySQL优化"><a href="#MySQL优化" class="headerlink" title="MySQL优化"></a>MySQL优化</h3><ul><li>EXPLAIN分析执行计划</li><li>慢查询日志分析</li><li>索引优化简单直接</li></ul><h2 id="八、适用场景建议"><a href="#八、适用场景建议" class="headerlink" title="八、适用场景建议"></a>八、适用场景建议</h2><h3 id="选择Oracle当："><a href="#选择Oracle当：" class="headerlink" title="选择Oracle当："></a>选择Oracle当：</h3><ol><li>企业级关键业务系统</li><li>需要复杂分析处理</li><li>极高可用性要求</li><li>大数据量高并发场景</li></ol><h3 id="选择MySQL当："><a href="#选择MySQL当：" class="headerlink" title="选择MySQL当："></a>选择MySQL当：</h3><ol><li>Web应用/互联网服务</li><li>快速迭代开发项目</li><li>中小规模数据量</li><li>成本敏感型项目</li></ol><h2 id="九、迁移注意事项"><a href="#九、迁移注意事项" class="headerlink" title="九、迁移注意事项"></a>九、迁移注意事项</h2><ol><li><strong>数据类型转换</strong>：特别注意NUMBER与DECIMAL的精度处理</li><li><strong>SQL重写</strong>：分页、序列、日期函数等语法差异</li><li><strong>事务处理</strong>：隔离级别和锁行为的差异</li><li><strong>性能调优</strong>：执行计划和索引策略需要重新评估</li></ol><h2 id="十、未来发展趋势"><a href="#十、未来发展趋势" class="headerlink" title="十、未来发展趋势"></a>十、未来发展趋势</h2><p><strong>Oracle</strong>：</p><ul><li>继续强化云服务(Oracle Cloud)</li><li>自动化运维方向</li><li>多模型数据库支持</li></ul><p><strong>MySQL</strong>：</p><ul><li>增强分析处理能力</li><li>改进Group Replication</li><li>更好的云原生支持</li></ul><h1 id="Oracle与MySQL常用语法对照手册"><a href="#Oracle与MySQL常用语法对照手册" class="headerlink" title="Oracle与MySQL常用语法对照手册"></a>Oracle与MySQL常用语法对照手册</h1><h2 id="一、分页查询语法对比"><a href="#一、分页查询语法对比" class="headerlink" title="一、分页查询语法对比"></a>一、分页查询语法对比</h2><h3 id="1-标准分页实现"><a href="#1-标准分页实现" class="headerlink" title="1. 标准分页实现"></a>1. 标准分页实现</h3><p><strong>Oracle</strong> (12c以下版本)：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 传统ROWNUM三层嵌套写法</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> t.<span class="operator">*</span>, ROWNUM <span class="keyword">AS</span> rn</span><br><span class="line">    <span class="keyword">FROM</span> (</span><br><span class="line">        <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees <span class="keyword">ORDER</span> <span class="keyword">BY</span> hire_date</span><br><span class="line">    ) t</span><br><span class="line">    <span class="keyword">WHERE</span> ROWNUM <span class="operator">&lt;=</span> <span class="number">20</span>  <span class="comment">-- 结束行</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">WHERE</span> rn <span class="operator">&gt;</span> <span class="number">10</span>;  <span class="comment">-- 起始行</span></span><br></pre></td></tr></table></figure></p><p><strong>MySQL</strong>：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 简洁的LIMIT语法</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> hire_date</span><br><span class="line">LIMIT <span class="number">10</span>, <span class="number">10</span>;  <span class="comment">-- 起始行, 行数</span></span><br></pre></td></tr></table></figure></p><h3 id="2-12c-Oracle新分页语法"><a href="#2-12c-Oracle新分页语法" class="headerlink" title="2. 12c+ Oracle新分页语法"></a>2. 12c+ Oracle新分页语法</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 12c开始支持的FETCH语法</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> hire_date</span><br><span class="line"><span class="keyword">OFFSET</span> <span class="number">10</span> <span class="keyword">ROWS</span> <span class="keyword">FETCH</span> NEXT <span class="number">10</span> <span class="keyword">ROWS</span> <span class="keyword">ONLY</span>;</span><br></pre></td></tr></table></figure><h2 id="二、序列操作对比"><a href="#二、序列操作对比" class="headerlink" title="二、序列操作对比"></a>二、序列操作对比</h2><h3 id="1-创建序列"><a href="#1-创建序列" class="headerlink" title="1. 创建序列"></a>1. 创建序列</h3><p><strong>Oracle</strong>：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> SEQUENCE emp_seq</span><br><span class="line"><span class="keyword">START</span> <span class="keyword">WITH</span> <span class="number">100</span></span><br><span class="line">INCREMENT <span class="keyword">BY</span> <span class="number">1</span></span><br><span class="line">MAXVALUE <span class="number">999999</span></span><br><span class="line">NOCYCLE</span><br><span class="line">CACHE <span class="number">20</span>;</span><br></pre></td></tr></table></figure></p><p><strong>MySQL</strong> (AUTO_INCREMENT)：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> employees (</span><br><span class="line">    id <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">    name <span class="type">VARCHAR</span>(<span class="number">100</span>),</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (id)</span><br><span class="line">) AUTO_INCREMENT <span class="operator">=</span> <span class="number">100</span>;</span><br></pre></td></tr></table></figure></p><h3 id="2-获取序列值"><a href="#2-获取序列值" class="headerlink" title="2. 获取序列值"></a>2. 获取序列值</h3><p><strong>Oracle</strong>：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 获取下一个值</span></span><br><span class="line"><span class="keyword">SELECT</span> emp_seq.NEXTVAL <span class="keyword">FROM</span> dual;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 获取当前值</span></span><br><span class="line"><span class="keyword">SELECT</span> emp_seq.CURRVAL <span class="keyword">FROM</span> dual;</span><br></pre></td></tr></table></figure></p><p><strong>MySQL</strong>：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 插入后获取最后ID</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> employees (name) <span class="keyword">VALUES</span> (<span class="string">&#x27;张三&#x27;</span>);</span><br><span class="line"><span class="keyword">SELECT</span> LAST_INSERT_ID();</span><br></pre></td></tr></table></figure></p><h2 id="三、日期处理对比"><a href="#三、日期处理对比" class="headerlink" title="三、日期处理对比"></a>三、日期处理对比</h2><h3 id="1-当前时间获取"><a href="#1-当前时间获取" class="headerlink" title="1. 当前时间获取"></a>1. 当前时间获取</h3><p><strong>Oracle</strong>：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> SYSDATE <span class="keyword">FROM</span> dual;          <span class="comment">-- 系统日期</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">FROM</span> dual; <span class="comment">-- 时间戳</span></span><br></pre></td></tr></table></figure></p><p><strong>MySQL</strong>：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> NOW();      <span class="comment">-- 当前日期时间</span></span><br><span class="line"><span class="keyword">SELECT</span> CURDATE();  <span class="comment">-- 当前日期</span></span><br><span class="line"><span class="keyword">SELECT</span> CURTIME();  <span class="comment">-- 当前时间</span></span><br></pre></td></tr></table></figure></p><h3 id="2-日期格式化"><a href="#2-日期格式化" class="headerlink" title="2. 日期格式化"></a>2. 日期格式化</h3><p><strong>Oracle</strong>：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> TO_CHAR(SYSDATE, <span class="string">&#x27;YYYY-MM-DD HH24:MI:SS&#x27;</span>) <span class="keyword">FROM</span> dual;</span><br></pre></td></tr></table></figure></p><p><strong>MySQL</strong>：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> DATE_FORMAT(NOW(), <span class="string">&#x27;%Y-%m-%d %H:%i:%s&#x27;</span>);</span><br></pre></td></tr></table></figure></p><h2 id="四、字符串处理对比"><a href="#四、字符串处理对比" class="headerlink" title="四、字符串处理对比"></a>四、字符串处理对比</h2><h3 id="1-字符串连接"><a href="#1-字符串连接" class="headerlink" title="1. 字符串连接"></a>1. 字符串连接</h3><p><strong>Oracle</strong>：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> first_name <span class="operator">||</span> <span class="string">&#x27; &#x27;</span> <span class="operator">||</span> last_name <span class="keyword">AS</span> full_name <span class="keyword">FROM</span> employees;</span><br><span class="line"><span class="comment">-- 或者使用CONCAT函数(只支持两个参数)</span></span><br><span class="line"><span class="keyword">SELECT</span> CONCAT(first_name, CONCAT(<span class="string">&#x27; &#x27;</span>, last_name)) <span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure></p><p><strong>MySQL</strong>：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> CONCAT(first_name, <span class="string">&#x27; &#x27;</span>, last_name) <span class="keyword">AS</span> full_name <span class="keyword">FROM</span> employees;</span><br><span class="line"><span class="comment">-- 或者使用更简洁的||(在ANSI模式下)</span></span><br></pre></td></tr></table></figure></p><h3 id="2-子字符串提取"><a href="#2-子字符串提取" class="headerlink" title="2. 子字符串提取"></a>2. 子字符串提取</h3><p><strong>Oracle</strong>：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> SUBSTR(<span class="string">&#x27;Oracle&#x27;</span>, <span class="number">2</span>, <span class="number">3</span>) <span class="keyword">FROM</span> dual;  <span class="comment">-- 输出&#x27;rac&#x27;</span></span><br></pre></td></tr></table></figure></p><p><strong>MySQL</strong>：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUBSTRING</span>(<span class="string">&#x27;MySQL&#x27;</span>, <span class="number">2</span>, <span class="number">3</span>);  <span class="comment">-- 输出&#x27;ySQ&#x27;</span></span><br><span class="line"><span class="comment">-- 或者简写</span></span><br><span class="line"><span class="keyword">SELECT</span> SUBSTR(<span class="string">&#x27;MySQL&#x27;</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure></p><h2 id="五、条件表达式对比"><a href="#五、条件表达式对比" class="headerlink" title="五、条件表达式对比"></a>五、条件表达式对比</h2><h3 id="1-CASE表达式"><a href="#1-CASE表达式" class="headerlink" title="1. CASE表达式"></a>1. CASE表达式</h3><p><strong>Oracle</strong>：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    employee_name,</span><br><span class="line">    <span class="keyword">CASE</span> </span><br><span class="line">        <span class="keyword">WHEN</span> salary <span class="operator">&gt;</span> <span class="number">10000</span> <span class="keyword">THEN</span> <span class="string">&#x27;高级&#x27;</span></span><br><span class="line">        <span class="keyword">WHEN</span> salary <span class="operator">&gt;</span> <span class="number">5000</span> <span class="keyword">THEN</span> <span class="string">&#x27;中级&#x27;</span></span><br><span class="line">        <span class="keyword">ELSE</span> <span class="string">&#x27;初级&#x27;</span></span><br><span class="line">    <span class="keyword">END</span> <span class="keyword">AS</span> level</span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure></p><p><strong>MySQL</strong> (语法相同)：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    employee_name,</span><br><span class="line">    <span class="keyword">CASE</span> </span><br><span class="line">        <span class="keyword">WHEN</span> salary <span class="operator">&gt;</span> <span class="number">10000</span> <span class="keyword">THEN</span> <span class="string">&#x27;高级&#x27;</span></span><br><span class="line">        <span class="keyword">WHEN</span> salary <span class="operator">&gt;</span> <span class="number">5000</span> <span class="keyword">THEN</span> <span class="string">&#x27;中级&#x27;</span></span><br><span class="line">        <span class="keyword">ELSE</span> <span class="string">&#x27;初级&#x27;</span></span><br><span class="line">    <span class="keyword">END</span> <span class="keyword">AS</span> level</span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure></p><h3 id="2-特有函数"><a href="#2-特有函数" class="headerlink" title="2. 特有函数"></a>2. 特有函数</h3><p><strong>Oracle特有</strong>：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- NVL空值处理</span></span><br><span class="line"><span class="keyword">SELECT</span> NVL(commission_pct, <span class="number">0</span>) <span class="keyword">FROM</span> employees;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- DECODE函数</span></span><br><span class="line"><span class="keyword">SELECT</span> DECODE(gender, <span class="string">&#x27;M&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;F&#x27;</span>, <span class="string">&#x27;女&#x27;</span>, <span class="string">&#x27;其他&#x27;</span>) <span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure></p><p><strong>MySQL特有</strong>：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- IFNULL空值处理</span></span><br><span class="line"><span class="keyword">SELECT</span> IFNULL(commission_pct, <span class="number">0</span>) <span class="keyword">FROM</span> employees;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- IF函数</span></span><br><span class="line"><span class="keyword">SELECT</span> IF(salary <span class="operator">&gt;</span> <span class="number">5000</span>, <span class="string">&#x27;高薪&#x27;</span>, <span class="string">&#x27;普通&#x27;</span>) <span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure></p><h2 id="六、分析函数对比"><a href="#六、分析函数对比" class="headerlink" title="六、分析函数对比"></a>六、分析函数对比</h2><h3 id="1-行号生成"><a href="#1-行号生成" class="headerlink" title="1. 行号生成"></a>1. 行号生成</h3><p><strong>Oracle</strong>：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    employee_name,</span><br><span class="line">    salary,</span><br><span class="line">    <span class="built_in">ROW_NUMBER</span>() <span class="keyword">OVER</span> (<span class="keyword">ORDER</span> <span class="keyword">BY</span> salary <span class="keyword">DESC</span>) <span class="keyword">AS</span> rank</span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure></p><p><strong>MySQL</strong> (8.0+)：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    employee_name,</span><br><span class="line">    salary,</span><br><span class="line">    <span class="built_in">ROW_NUMBER</span>() <span class="keyword">OVER</span> (<span class="keyword">ORDER</span> <span class="keyword">BY</span> salary <span class="keyword">DESC</span>) <span class="keyword">AS</span> rank</span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure></p><h3 id="2-分组排名"><a href="#2-分组排名" class="headerlink" title="2. 分组排名"></a>2. 分组排名</h3><p><strong>Oracle</strong>：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    department_id,</span><br><span class="line">    employee_name,</span><br><span class="line">    salary,</span><br><span class="line">    <span class="built_in">RANK</span>() <span class="keyword">OVER</span> (<span class="keyword">PARTITION</span> <span class="keyword">BY</span> department_id <span class="keyword">ORDER</span> <span class="keyword">BY</span> salary <span class="keyword">DESC</span>) <span class="keyword">AS</span> dept_rank</span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure></p><p><strong>MySQL</strong> (8.0+)：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    department_id,</span><br><span class="line">    employee_name,</span><br><span class="line">    salary,</span><br><span class="line">    <span class="built_in">RANK</span>() <span class="keyword">OVER</span> (<span class="keyword">PARTITION</span> <span class="keyword">BY</span> department_id <span class="keyword">ORDER</span> <span class="keyword">BY</span> salary <span class="keyword">DESC</span>) <span class="keyword">AS</span> dept_rank</span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure></p><h2 id="七、临时表对比"><a href="#七、临时表对比" class="headerlink" title="七、临时表对比"></a>七、临时表对比</h2><h3 id="1-创建临时表"><a href="#1-创建临时表" class="headerlink" title="1. 创建临时表"></a>1. 创建临时表</h3><p><strong>Oracle</strong>：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 事务级临时表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">GLOBAL</span> TEMPORARY <span class="keyword">TABLE</span> temp_emp (</span><br><span class="line">    emp_id NUMBER,</span><br><span class="line">    emp_name VARCHAR2(<span class="number">100</span>)</span><br><span class="line">) <span class="keyword">ON</span> <span class="keyword">COMMIT</span> <span class="keyword">DELETE</span> <span class="keyword">ROWS</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 会话级临时表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">GLOBAL</span> TEMPORARY <span class="keyword">TABLE</span> temp_emp_session (</span><br><span class="line">    emp_id NUMBER,</span><br><span class="line">    emp_name VARCHAR2(<span class="number">100</span>)</span><br><span class="line">) <span class="keyword">ON</span> <span class="keyword">COMMIT</span> PRESERVE <span class="keyword">ROWS</span>;</span><br></pre></td></tr></table></figure></p><p><strong>MySQL</strong>：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 会话级临时表</span></span><br><span class="line"><span class="keyword">CREATE</span> TEMPORARY <span class="keyword">TABLE</span> temp_emp (</span><br><span class="line">    emp_id <span class="type">INT</span>,</span><br><span class="line">    emp_name <span class="type">VARCHAR</span>(<span class="number">100</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p><h2 id="八、事务控制对比"><a href="#八、事务控制对比" class="headerlink" title="八、事务控制对比"></a>八、事务控制对比</h2><h3 id="1-事务语法"><a href="#1-事务语法" class="headerlink" title="1. 事务语法"></a>1. 事务语法</h3><p><strong>Oracle</strong>：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 默认每个DML语句就是一个事务(自动提交)</span></span><br><span class="line"><span class="comment">-- 显式事务</span></span><br><span class="line"><span class="keyword">SET</span> TRANSACTION READ WRITE;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> accounts <span class="keyword">VALUES</span> (...);</span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br><span class="line"><span class="comment">-- 或者</span></span><br><span class="line"><span class="keyword">ROLLBACK</span>;</span><br></pre></td></tr></table></figure></p><p><strong>MySQL</strong>：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 默认自动提交</span></span><br><span class="line"><span class="keyword">SET</span> autocommit <span class="operator">=</span> <span class="number">0</span>;  <span class="comment">-- 关闭自动提交</span></span><br><span class="line"><span class="keyword">START</span> TRANSACTION;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> accounts <span class="keyword">VALUES</span> (...);</span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br><span class="line"><span class="comment">-- 或者</span></span><br><span class="line"><span class="keyword">ROLLBACK</span>;</span><br></pre></td></tr></table></figure></p><h2 id="九、存储过程对比"><a href="#九、存储过程对比" class="headerlink" title="九、存储过程对比"></a>九、存储过程对比</h2><h3 id="1-基本结构"><a href="#1-基本结构" class="headerlink" title="1. 基本结构"></a>1. 基本结构</h3><p><strong>Oracle</strong>：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> REPLACE <span class="keyword">PROCEDURE</span> raise_salary (</span><br><span class="line">    p_emp_id <span class="keyword">IN</span> NUMBER,</span><br><span class="line">    p_amount <span class="keyword">IN</span> NUMBER</span><br><span class="line">) <span class="keyword">AS</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">UPDATE</span> employees </span><br><span class="line">    <span class="keyword">SET</span> salary <span class="operator">=</span> salary <span class="operator">+</span> p_amount</span><br><span class="line">    <span class="keyword">WHERE</span> employee_id <span class="operator">=</span> p_emp_id;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">COMMIT</span>;</span><br><span class="line">EXCEPTION</span><br><span class="line">    <span class="keyword">WHEN</span> OTHERS <span class="keyword">THEN</span></span><br><span class="line">        <span class="keyword">ROLLBACK</span>;</span><br><span class="line">        RAISE;</span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure></p><p><strong>MySQL</strong>：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> raise_salary (</span><br><span class="line">    <span class="keyword">IN</span> p_emp_id <span class="type">INT</span>,</span><br><span class="line">    <span class="keyword">IN</span> p_amount <span class="type">DECIMAL</span>(<span class="number">10</span>,<span class="number">2</span>)</span><br><span class="line">)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">DECLARE</span> EXIT HANDLER <span class="keyword">FOR</span> <span class="keyword">SQLEXCEPTION</span></span><br><span class="line">    <span class="keyword">BEGIN</span></span><br><span class="line">        <span class="keyword">ROLLBACK</span>;</span><br><span class="line">        RESIGNAL;</span><br><span class="line">    <span class="keyword">END</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">START</span> TRANSACTION;</span><br><span class="line">    <span class="keyword">UPDATE</span> employees </span><br><span class="line">    <span class="keyword">SET</span> salary <span class="operator">=</span> salary <span class="operator">+</span> p_amount</span><br><span class="line">    <span class="keyword">WHERE</span> employee_id <span class="operator">=</span> p_emp_id;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">COMMIT</span>;</span><br><span class="line"><span class="keyword">END</span> <span class="operator">/</span><span class="operator">/</span></span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure></p><hr><p>这篇技术手册详细对比了Oracle和MySQL在关键语法上的差异，特别是重点展示了分页查询的不同实现方式。实际开发中，这些语法差异是数据库迁移或跨数据库开发时需要特别注意的要点。。</p><h1 id="Oracle与MySQL面试问答示例"><a href="#Oracle与MySQL面试问答示例" class="headerlink" title="Oracle与MySQL面试问答示例"></a>Oracle与MySQL面试问答示例</h1><h2 id="问题1：请说明Oracle和MySQL在分页查询实现上的主要区别？"><a href="#问题1：请说明Oracle和MySQL在分页查询实现上的主要区别？" class="headerlink" title="问题1：请说明Oracle和MySQL在分页查询实现上的主要区别？"></a>问题1：请说明Oracle和MySQL在分页查询实现上的主要区别？</h2><p><strong>面试者回答</strong>：<br>“在分页查询方面，Oracle和MySQL有显著不同的实现方式：</p><ol><li><p><strong>MySQL</strong>使用非常简洁的LIMIT语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> products <span class="keyword">ORDER</span> <span class="keyword">BY</span> price <span class="keyword">DESC</span> LIMIT <span class="number">20</span>, <span class="number">10</span>;</span><br></pre></td></tr></table></figure><p>这表示跳过20条取10条，执行效率很高。</p></li><li><p><strong>Oracle 11g及以下版本</strong>需要使用三层嵌套ROWNUM：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> t.<span class="operator">*</span>, ROWNUM rn <span class="keyword">FROM</span> (</span><br><span class="line">        <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> products <span class="keyword">ORDER</span> <span class="keyword">BY</span> price <span class="keyword">DESC</span></span><br><span class="line">    ) t <span class="keyword">WHERE</span> ROWNUM <span class="operator">&lt;=</span> <span class="number">30</span></span><br><span class="line">) <span class="keyword">WHERE</span> rn <span class="operator">&gt;</span> <span class="number">20</span>;</span><br></pre></td></tr></table></figure><p>这种写法比较复杂，但12c版本开始支持了更简单的FETCH语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> products </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> price <span class="keyword">DESC</span></span><br><span class="line"><span class="keyword">OFFSET</span> <span class="number">20</span> <span class="keyword">ROWS</span> <span class="keyword">FETCH</span> NEXT <span class="number">10</span> <span class="keyword">ROWS</span> <span class="keyword">ONLY</span>;</span><br></pre></td></tr></table></figure></li></ol><p>实际项目中，MySQL的分页写法更受开发者欢迎，但在处理超大数据量分页时，两种数据库都需要特别注意性能优化。”</p><h2 id="问题2：Oracle的NUMBER类型和MySQL的数值类型如何对应？"><a href="#问题2：Oracle的NUMBER类型和MySQL的数值类型如何对应？" class="headerlink" title="问题2：Oracle的NUMBER类型和MySQL的数值类型如何对应？"></a>问题2：Oracle的NUMBER类型和MySQL的数值类型如何对应？</h2><p><strong>面试者回答</strong>：<br>“在数值类型存储方面，我有这样的理解：</p><p>Oracle的NUMBER类型是个”万能”类型，通过指定精度可以表示各种数值：</p><ul><li><code>NUMBER(10)</code>对应MySQL的<code>INT</code></li><li><code>NUMBER(10,2)</code>对应MySQL的<code>DECIMAL(10,2)</code></li></ul><p>但需要注意几个关键差异：</p><ol><li>Oracle NUMBER默认能存38位精度，而MySQL的DECIMAL最大支持65位</li><li>Oracle的NUMBER(5)和NUMBER(5,0)是不同的，前者可能存储小数</li><li>在迁移数据库时，特别要注意NUMBER不带精度的情况，需要评估实际数据范围</li></ol><p>在我的上一个项目中，我们就遇到过Oracle的NUMBER(10)迁移到MySQL时，因为实际数据超出INT范围而不得不改用BIGINT的情况。”</p><h2 id="问题3：解释下Oracle和MySQL事务隔离级别的实现差异？"><a href="#问题3：解释下Oracle和MySQL事务隔离级别的实现差异？" class="headerlink" title="问题3：解释下Oracle和MySQL事务隔离级别的实现差异？"></a>问题3：解释下Oracle和MySQL事务隔离级别的实现差异？</h2><p><strong>面试者回答</strong>：<br>“这个问题涉及到两个数据库的核心设计理念：</p><ol><li><strong>Oracle</strong>默认使用READ COMMITTED隔离级别，通过多版本并发控制(MVCC)实现：</li></ol><ul><li>查询只能看到已提交的数据</li><li>使用回滚段(Undo Segment)维护数据旧版本</li><li>读操作不会阻塞写操作</li></ul><ol><li><strong>MySQL(InnoDB)</strong>默认使用REPEATABLE READ，但通过独特的MVCC实现：</li></ol><ul><li>每个事务有自己的一致性视图</li><li>通过ReadView和undo log实现</li><li>通过间隙锁(Gap Lock)防止幻读</li></ul><p>一个重要的实践差异是：在Oracle中，同一个事务内多次查询可能看到不同结果(不可重复读)，而MySQL可以保证重复读结果一致。这在我们电商系统的库存控制中非常重要，MySQL的默认隔离级别更适合需要强一致性的场景。”</p><h2 id="问题4：如果要从Oracle迁移到MySQL，你会重点关注哪些方面？"><a href="#问题4：如果要从Oracle迁移到MySQL，你会重点关注哪些方面？" class="headerlink" title="问题4：如果要从Oracle迁移到MySQL，你会重点关注哪些方面？"></a>问题4：如果要从Oracle迁移到MySQL，你会重点关注哪些方面？</h2><p><strong>面试者回答</strong>：<br>“根据我的迁移经验，会重点关注以下方面：</p><ol><li><strong>SQL语法改写</strong>：</li></ol><ul><li>分页查询的重写</li><li>序列(Sequence)改为AUTO_INCREMENT</li><li>日期函数转换(如SYSDATE→NOW())</li></ul><ol><li><strong>数据类型映射</strong>：</li></ol><ul><li>VARCHAR2→VARCHAR</li><li>NUMBER→合适的数值类型</li><li>CLOB→LONGTEXT</li></ul><ol><li><strong>事务处理</strong>：</li></ol><ul><li>隔离级别差异的影响评估</li><li>锁机制差异导致的并发问题</li></ul><ol><li><strong>性能优化</strong>：</li></ol><ul><li>执行计划差异分析</li><li>索引策略调整</li><li>参数配置优化</li></ul><p>在我们最近的人力资源系统迁移项目中，就遇到了Oracle的复杂分析函数在MySQL中性能较差的问题，最终通过业务逻辑拆分和查询重写解决了。我的经验是先做小规模POC验证，再制定详细的迁移检查清单。”</p><p>以上内容仅做参考示例，一切以实际项目为准。</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql数据库学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL数据库系统学习笔记（2）</title>
      <link href="/2025/05/25/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%882%EF%BC%89/"/>
      <url>/2025/05/25/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%882%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="mysql数据库系统学习笔记（2）"><a href="#mysql数据库系统学习笔记（2）" class="headerlink" title="mysql数据库系统学习笔记（2）"></a>mysql数据库系统学习笔记（2）</h1><h2 id="mysql事物"><a href="#mysql事物" class="headerlink" title="mysql事物"></a>mysql事物</h2><p><strong>事物</strong>是一组完整操作的集合，事物是一个不可分割的操作序列，也是数据库并发控制的基本单位，其执行的结果必须使数据库从一个一致性状态变到另一个一致性状态。事物是逻辑上的一组操作要么都执行要么都不执行。</p><blockquote><p>在一组操作中任何一个环节出现问题都无法完成一个事物操作，例如转账操作，A给B转账，A没发出或者B没收到都不能构成一个事物</p></blockquote><ul><li>在 MySQL 中只有使用了<code>Innodb</code>数据库引擎的数据库或表才支持事务。</li><li><strong>事务处理可以用来维护数据库的完整性，保证成批的 SQL 语句要么全部执行，要么全部不执行。</strong></li><li>事务用来管理<code>insert、update、delete</code>语句</li></ul><h2 id="提交事物"><a href="#提交事物" class="headerlink" title="提交事物"></a>提交事物</h2><p>在mysql中有两种方式进行事物的操作</p><ul><li><strong>自动提交事物</strong><br>  在 MySQL 命令行的<strong>默认设置</strong>下，事务都是<strong>自动提交</strong>的，即执行 SQL 语句后就会马上执行<code>COMMIT</code> 操作。因此要显式地开启一个事务务须使用命令<code>BEGIN</code>或<code>START TRANSACTION</code>，或者执行命令<code>SET AUTOCOMMIT=0</code>，用来禁止使用当前会话的自动提交。<blockquote><p>理解为自动挡模式，自动帮你踩离合，其中的条件出现问题时候会自动回滚到事物条件前</p></blockquote></li></ul><p>AS:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-- 就像开自动挡汽车，MySQL帮你踩离合</span><br><span class="line">UPDATE 钱包表 SET 余额=余额-648 WHERE 用户=&#x27;氪金大佬&#x27;;  -- 首充</span><br><span class="line">UPDATE 装备表 SET 屠龙刀=1 WHERE 用户=&#x27;氪金大佬&#x27;;      -- 送神器</span><br><span class="line">-- 如果第二条SQL报错？系统自动帮你回滚到充钱前！</span><br></pre></td></tr></table></figure><br>小心别在AUTOCOMMIT=1时把每条SQL都变成独立事务</p><ul><li><strong>手动提交事务</strong><blockquote><p>理解为手动挡模式，每一个操作都是可以手动完成</p></blockquote></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">START TRANSACTION;  -- 游戏开始！</span><br><span class="line">INSERT INTO 抽奖记录 VALUES(&#x27;欧皇&#x27;, &#x27;SSR&#x27;);</span><br><span class="line">UPDATE 概率表 SET 剩余=剩余-1 WHERE 奖品=&#x27;SSR&#x27;;</span><br><span class="line">-- 突然发现概率表被锁了？</span><br><span class="line">ROLLBACK;  -- 大喊一声「时间回溯！」（抽奖记录消失）,回滚操作</span><br><span class="line">-- 或者成功时：</span><br><span class="line">COMMIT;    -- 全网广播我的欧气！</span><br></pre></td></tr></table></figure><h2 id="事物的四大特性"><a href="#事物的四大特性" class="headerlink" title="事物的四大特性"></a>事物的四大特性</h2><ul><li><p><strong>原子性</strong>：事务是最小的执行单位不允许风格事物，事物的原子性确保动作要么全部完成，要么完全不起作用</p></li><li><p><strong>一致性</strong>：执行事物前后，数据保持一致，对个实物对同一个数据的读取结果是相同的</p></li><li><p><strong>隔离性</strong>：并发访问数据库时，一个用户的事物不被其他事务所干扰，各并发事物之间的数据库是独立的</p></li><li><p><strong>持久性</strong>：一个事物被提交后，它对数据库中的数据改变是永久的，哪怕数据库发生故障也不应该对其造成影响</p></li></ul><h2 id="事物的隔离级别"><a href="#事物的隔离级别" class="headerlink" title="事物的隔离级别"></a>事物的隔离级别</h2><p>所有的事物之间保持隔离，互不影响，因为并发操作，多个用户同时访问同一个数据可能引发并发访问问题</p><h3 id="事务隔离级别的标准定义"><a href="#事务隔离级别的标准定义" class="headerlink" title="事务隔离级别的标准定义"></a><strong>事务隔离级别的标准定义</strong></h3><p>事务隔离级别用于控制多个并发事务之间的相互影响，主要解决以下问题：  </p><ol><li><strong>脏读（Dirty Read）</strong>：事务A读取了事务B未提交的数据，如果事务B回滚，事务A读到的就是无效数据。  </li><li><strong>不可重复读（Non-repeatable Read）</strong>：事务A多次读取同一数据，期间事务B修改并提交了该数据，导致事务A前后读取结果不一致。  </li><li><strong>幻读（Phantom Read）</strong>：事务A按条件查询数据，期间事务B插入或删除了符合条件的数据，导致事务A再次查询时结果集发生变化。  </li></ol><p>数据库提供四种隔离级别，按严格程度排序：  </p><div class="table-container"><table><thead><tr><th>隔离级别</th><th>脏读</th><th>不可重复读</th><th>幻读</th></tr></thead><tbody><tr><td><strong>读未提交</strong> (Read Uncommitted)</td><td>❌可能</td><td>❌可能</td><td>❌可能</td></tr><tr><td><strong>读已提交</strong> (Read Committed)</td><td>✅避免</td><td>❌可能</td><td>❌可能</td></tr><tr><td><strong>可重复读</strong> (Repeatable Read)</td><td>✅避免</td><td>✅避免</td><td>❌可能</td></tr><tr><td><strong>串行化</strong> (Serializable)</td><td>✅避免</td><td>✅避免</td><td>✅避免</td></tr></tbody></table></div><p>以下是我的抽象理解表示<br><strong>1. 读未提交（Read Uncommitted）</strong>  </p><ul><li><strong>场景</strong>：你偷看同桌的考试答案，但他可能正在涂改，答案可能是错的。  </li><li><strong>数据库行为</strong>：事务能读到其他事务未提交的数据（脏数据）。  </li></ul><p><strong>2. 读已提交（Read Committed）</strong>  </p><ul><li><strong>场景</strong>：你等同桌交卷后，才抄他的答案（确保答案已确认）。  </li><li><strong>数据库行为</strong>：事务只能读到已提交的数据，但同一事务内多次查询可能结果不同。  </li></ul><p><strong>3. 可重复读（Repeatable Read）</strong>  </p><ul><li><strong>场景</strong>：考试时你抄下答案后，老师不允许任何人修改答案（但可能有人偷偷塞新答案进来）。  </li><li><strong>数据库行为</strong>：事务内多次读取同一数据结果一致，但可能有新数据插入（幻读）。  </li></ul><p><strong>4. 串行化（Serializable）</strong>  </p><ul><li><strong>场景</strong>：考场一次只允许一个人答题，其他人排队等。  </li><li><strong>数据库行为</strong>：事务完全串行执行，杜绝所有并发问题，但性能最差。   </li></ul><p><strong>关键注意点</strong>  </p><ol><li><strong>隔离级别越高，安全性越强，性能越低</strong>。  </li><li><strong>MySQL默认是可重复读（但通过间隙锁避免了幻读）</strong>。  </li><li><strong>实际开发中常用读已提交或可重复读</strong>，串行化仅在极端场景使用。  </li></ol><h2 id="ER图数据库设计"><a href="#ER图数据库设计" class="headerlink" title="ER图数据库设计"></a>ER图数据库设计</h2><p><strong>主要组成元素</strong></p><ul><li>​实体​​：现实世界中可区分的对象（如：学生、课程）</li><li>​属性​​：实体的特征（如：学号、姓名）</li><li>​关系​​：实体间的联系（如：选课、授课）<br><strong>常用符号表示</strong></li><li>实体：矩形 □</li><li>属性：椭圆 ○</li><li>关系：菱形 ◇</li><li>主键：下划线 _</li><li>外键：虚线或特殊标记<br><del>建议对照一个er图来明确对应关系</del><br>这里只是给出每个形状所代指的关系部分，建议去找个图对照练习，不想录入图床了，懒</li></ul><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><p>MySQL 索引是一种<strong>数据结构</strong>，用于加快数据库查询的速度和性能。类似字典的目录，可以快速的定位到数据的位置，而不需要对整个表进行扫描</p><blockquote><p>MySQL 索引类似于书籍的索引，通过存储指向数据行的指针，可以快速定位和访问表中的特定数据。<br>打个比方，如果合理的设计且使用索引的 MySQL 是一辆兰博基尼的话，那么没有设计和使用索引的 MySQL 就是一个人力三轮车。</p></blockquote><p><strong>索引的数据结构</strong><br>数据结构的详情也可以在本站找到<br>hash索引，b_tree索引，full_text全文索引</p><h3 id="索引的分类"><a href="#索引的分类" class="headerlink" title="索引的分类"></a>索引的分类</h3><p>在mysql数据库中索引可以分为以下几类<br><em>主键索引，唯一索引，常规索引，全文索引</em></p><ul><li><strong>​主键索引​</strong>：唯一标识每行数据，不允许NULL值，每表只能有一个（如身份证号）<br>表中的列设定为主键后，数据库会自动建立主键索引，索引的列的值必须是唯一的，并且不允许为空值。</li><li><strong>​唯一索引​</strong>：确保列值唯一但允许NULL值，可多个（如用户邮箱）<br>表中的列创建了唯一约束时，数据库会自动建立唯一索引，索引的列的值必须是唯一的，但是允许为空值。</li><li><strong>​单列索引​</strong>：仅针对单个字段加速查询（如按姓名找人）<br>非主键的列创建的索引，一个索引只能包含单个列，一个表可以有多个单列索引。</li><li><strong> ​组合索引​</strong>：多字段联合索引，遵循最左匹配原则（如按省+市+区定位）<br>一个索引包含多个列，我们在查询的时候要查询多个字段，就可以为查询的多个字段创建一个复合索引，这样就可以加快查询速度。<h3 id="1-按功能特性分类"><a href="#1-按功能特性分类" class="headerlink" title="1.按功能特性分类"></a>1.按功能特性分类</h3></li></ul><h3 id="1-主键索引（PRIMARY-KEY）"><a href="#1-主键索引（PRIMARY-KEY）" class="headerlink" title="1. 主键索引（PRIMARY KEY）"></a>1. 主键索引（PRIMARY KEY）</h3><ul><li><strong>特点</strong>：<ul><li>每张表只能有一个主键索引</li><li>列值必须唯一且不能为NULL</li><li>物理存储按照主键顺序组织（聚集索引）</li></ul></li><li><strong>创建方式</strong>：<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> users (</span><br><span class="line">  id <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  name <span class="type">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (id)  <span class="comment">-- 主键索引</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-唯一索引（UNIQUE-KEY）"><a href="#2-唯一索引（UNIQUE-KEY）" class="headerlink" title="2. 唯一索引（UNIQUE KEY）"></a>2. 唯一索引（UNIQUE KEY）</h3><ul><li><strong>特点</strong>：<ul><li>保证列值的唯一性</li><li>允许NULL值（但只能有一个NULL值）</li><li>一张表可以有多个唯一索引</li></ul></li><li><strong>创建方式</strong>：<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> users (</span><br><span class="line">  email <span class="type">VARCHAR</span>(<span class="number">100</span>),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY (email)  <span class="comment">-- 唯一索引</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-常规索引（普通索引-INDEX）"><a href="#3-常规索引（普通索引-INDEX）" class="headerlink" title="3. 常规索引（普通索引/INDEX）"></a>3. 常规索引（普通索引/INDEX）</h3><ul><li><strong>特点</strong>：<ul><li>最基本的索引类型</li><li>仅加速查询，无约束功能</li><li>允许重复值和NULL值</li></ul></li><li><strong>创建方式</strong>：<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> INDEX idx_name <span class="keyword">ON</span> users(name);  <span class="comment">-- 常规索引</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="4-全文索引（FULLTEXT）"><a href="#4-全文索引（FULLTEXT）" class="headerlink" title="4. 全文索引（FULLTEXT）"></a>4. 全文索引（FULLTEXT）</h3><ul><li><strong>特点</strong>：<ul><li>专门用于全文搜索</li><li>仅适用于MyISAM和InnoDB引擎</li><li>只能创建在CHAR、VARCHAR或TEXT类型列上</li></ul></li><li><strong>创建方式</strong>：<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> FULLTEXT INDEX idx_content <span class="keyword">ON</span> articles(content);</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-按索引列数量分类"><a href="#2-按索引列数量分类" class="headerlink" title="2.按索引列数量分类"></a>2.按索引列数量分类</h3><h3 id="1-单列索引"><a href="#1-单列索引" class="headerlink" title="1. 单列索引"></a>1. 单列索引</h3><ul><li><strong>特点</strong>：<ul><li>只包含一个列的索引</li><li>可以是上述任意类型（主键、唯一、普通等）</li></ul></li><li><strong>示例</strong>：<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> INDEX idx_age <span class="keyword">ON</span> users(age);  <span class="comment">-- 单列索引</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="2-组合索引（复合索引）"><a href="#2-组合索引（复合索引）" class="headerlink" title="2. 组合索引（复合索引）"></a>2. 组合索引（复合索引）</h3><ul><li><strong>特点</strong>：<ul><li>包含两个或更多列的索引</li><li>遵循”最左前缀原则”</li></ul></li><li><strong>示例</strong>：<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> INDEX idx_name_age <span class="keyword">ON</span> users(name, age);  <span class="comment">-- 组合索引</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="索引的使用场景"><a href="#索引的使用场景" class="headerlink" title="索引的使用场景"></a>索引的使用场景</h3><p><strong>那些情况需要创建索引</strong></p><p>1.主键自动创建唯一索引<br>2.频繁作为查询条件的字段应该创建索引<br>3.查询中与其他表关联的字段，外键关系建立索引</p><p><strong>那些情况不需要创建索引</strong></p><ol><li>表的数据太少</li><li>经常增删改的表</li><li>where条件里用不到的字段不建立索引</li></ol><h3 id="索引的优缺点"><a href="#索引的优缺点" class="headerlink" title="索引的优缺点"></a>索引的优缺点</h3><p><strong>优点：</strong></p><ul><li>加快数据查询速度，类似字典的目录索引，体改数据查询的效率，</li></ul><p><strong>缺点：</strong></p><ul><li>创建索引和维护索引需要耗费时间，且伴随表中的数据增加，所消耗的时间也随之增加</li><li>索引需要占用磁盘空间</li><li>索引提高了查询的效率，但是同时会降低表更新的速度</li></ul><h2 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h2><p>视图是一个<strong>虚拟的表</strong>，它的内容是由<code>查询</code>定义的，而<strong>不是实际存储在数据库中的数据</strong>。它是基于一个或多个表的查询结果，并且可以像表一样进行查询和操作。内容是从其他表中选择，过滤，或者计算出来的。</p><p><strong>视图的作用</strong><br>将复杂的查询结果进行封装，简化查询操作，提高数据安全性，支持数据共享，减少重复查询，提高查询效率。</p><ul><li>简化复杂查询：可以将复杂的查询封装成视图，方便其他用户使用</li><li>提高数据安全性：可以通过视图限制用户对数据的访问权限 </li></ul><h2 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h2><p>在并发访问的情况下，多个用户同时对同一个数据进行操作，可能会导致数据不一致的情况，为了保证数据的一致性，数据库系统引入了锁机制。某些情况下，锁的应用必不可少。</p><p><strong>目的</strong><br>在mysql中，锁是数据库管理系统中用于控制并发访问的一种机制，用于确保在多个事务同时访问同一资源时，数据的一致性和完整性，mysql中的锁分为三类</p><ul><li><strong>全局锁</strong>（Global Lock）：</li><li><strong>表级锁</strong>（Table Lock）：</li><li><strong>行级锁</strong>（Row Lock）：</li></ul><h3 id="1-全局锁（Global-Lock）"><a href="#1-全局锁（Global-Lock）" class="headerlink" title="1. 全局锁（Global Lock）"></a>1. 全局锁（Global Lock）</h3><p>全局锁会让所有的表都加上一个读锁，阻止对这些表的写操作，包括增删改查，但是可以对表进行查询操作，这对于需要对整个数据库进行维护或者备份的场景非常有用。</p><blockquote><p>全局锁就像封城，什么都不可用，主要用于数据库备份和维护，但是备份完记得解封，要不然长期锁着，其他事务就无法进行操作了。（业务停滞）</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 加全局锁</span></span><br><span class="line">FLUSH TABLES <span class="keyword">WITH</span> READ LOCK;</span><br><span class="line"><span class="comment">-- 释放全局锁</span></span><br><span class="line">UNLOCK TABLES;</span><br></pre></td></tr></table></figure><h3 id="2-表级锁（Table-Lock）"><a href="#2-表级锁（Table-Lock）" class="headerlink" title="2. 表级锁（Table Lock）"></a>2. 表级锁（Table Lock）</h3><p>每次操作锁住整张表，其他事务不能对该表进行任何操作，包括增删改查，但是可以对表进行查询操作，这对于需要对整个表进行维护或者备份的场景非常有用。</p><blockquote><p>表锁就像上课锁门，别人不能干扰，但是可以旁听，但是不能上讲台，只能看。（业务停滞）</p></blockquote><p>分为两类：</p><ul><li><p>读锁(共享锁)：<br>  其他事务可以对表进行查询操作，但是不能对表进行增删改操作，常用于需要对表进行查询操作的场景</p><blockquote><p>公开课允许旁听，但不让改PPT</p></blockquote></li><li><p>写锁（排他锁）：<br>  其他事务不能对表进行任何操作，包括增删改查，但是可以对表进行查询操作，常用于需要对表进行维护或者备份的场景</p><blockquote><p>老师改卷子时锁门，谁都不让进</p></blockquote></li></ul><p><strong>读锁和写锁的区别在于，读锁可以同时被多个事务持有，而写锁只能被一个事务持有。</strong></p><p><strong>读锁</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 加表锁</span></span><br><span class="line">LOCK TABLES 表名 READ<span class="operator">/</span>WRITE;</span><br><span class="line"><span class="comment">-- 读锁</span></span><br><span class="line">LOCK TABLES 表名 READ;</span><br></pre></td></tr></table></figure><br><strong>写锁</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 加表锁</span></span><br><span class="line">LOCK TABLES 表名 READ<span class="operator">/</span>WRITE;</span><br><span class="line"><span class="comment">-- 写锁</span></span><br><span class="line">LOCK TABLES 表名 WRITE;</span><br><span class="line">```  </span><br><span class="line"><span class="operator">*</span><span class="operator">*</span>特点：<span class="operator">*</span><span class="operator">*</span></span><br><span class="line">排他性：写锁是排他的，意味着同一时刻只有一个事务可以持有写锁，其他事务或者会话都不能同时对该资源进行操作</span><br><span class="line"></span><br><span class="line">### <span class="number">3.</span> 行级锁（<span class="type">Row</span> Lock）</span><br><span class="line">每次操作锁住对应一行数据</span><br><span class="line"><span class="operator">&gt;</span>行锁就像图书馆抢座位，占座方式还有三大种</span><br><span class="line"></span><br><span class="line">行锁又分为：</span><br><span class="line"><span class="operator">*</span><span class="operator">*</span>行锁，间隙锁，临键锁<span class="operator">*</span><span class="operator">*</span></span><br><span class="line"></span><br><span class="line"><span class="operator">*</span><span class="operator">*</span>行锁：<span class="operator">*</span><span class="operator">*</span></span><br><span class="line">行锁是最基本的锁，锁定的是一行数据，其他事务不能对该行数据进行任何操作</span><br><span class="line"><span class="operator">&gt;</span>你占了<span class="number">3</span>号座（<span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">3</span>），别人不能坐但能坐<span class="number">4</span>号座</span><br><span class="line"></span><br><span class="line"><span class="operator">*</span><span class="operator">*</span>间隙锁：<span class="operator">*</span><span class="operator">*</span></span><br><span class="line">间隙锁是一种特殊的行锁，锁定的是一个区间，其他事务不能对该区间内的数据进行任何操作</span><br><span class="line"><span class="operator">&gt;</span>你占了<span class="number">3</span>号到<span class="number">5</span>号的座位，别人不能坐（这可以解决幻读问题）</span><br><span class="line"></span><br><span class="line"><span class="operator">*</span><span class="operator">*</span>临键锁：<span class="operator">*</span><span class="operator">*</span></span><br><span class="line">临键锁是行锁和间隙锁的结合，锁定的是一个区间，其他事务不能对该区间内的数据进行任何操作</span><br><span class="line"><span class="operator">&gt;</span>我把着<span class="number">3</span>号到<span class="number">5</span>号的座位，还顺便把插座给占了（锁定记录<span class="operator">+</span>间隙）</span><br><span class="line"></span><br><span class="line">显示隐式又分为两种类型：</span><br><span class="line"></span><br><span class="line"><span class="operator">*</span><span class="operator">*</span>显式锁（主动宣称）<span class="operator">*</span><span class="operator">*</span>使用<span class="keyword">SELECT</span> ... <span class="keyword">FOR</span> <span class="keyword">UPDATE</span> 或 <span class="keyword">SELECT</span> ... LOCK <span class="keyword">IN</span> SHARE MODE 这种通过在<span class="keyword">SQL</span>语句后添加关键字的的加锁形式，称为显式锁。</span><br><span class="line">```<span class="keyword">sql</span></span><br><span class="line"><span class="comment">-- 加行锁</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> 表名 <span class="keyword">WHERE</span> 条件 <span class="keyword">FOR</span> <span class="keyword">UPDATE</span>;</span><br><span class="line"><span class="comment">-- 霸道总裁式宣言：&quot;这排座位我包了！&quot;</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> orders <span class="keyword">WHERE</span> user_id<span class="operator">=</span><span class="number">1</span> <span class="keyword">FOR</span> <span class="keyword">UPDATE</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 温和派宣言：&quot;可以一起看，但不能改&quot;</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> products LOCK <span class="keyword">IN</span> SHARE MODE;</span><br></pre></td></tr></table></figure></p><p><strong>隐式锁（cos地雷，自动触发）</strong>使用UPDATE、DELETE、INSERT等操作时，Innodb会自动锁定涉及的记录常见的SQL语句，这种加锁方式称为隐式锁。</p><ul><li><strong>​UPDATE/DELETE​：</strong>像自动感应门，碰到就锁</li><li><strong>​INSERT​：</strong>像新人报到自动领座位牌</li></ul><p>以下是各种行锁的区别对照表，按照（SQL,行锁类型，备注）进行；</p><div class="table-container"><table><thead><tr><th>SQL语句</th><th>行锁类型</th><th>备注</th></tr></thead><tbody><tr><td>SELECT … FOR UPDATE</td><td>排他锁</td><td>会锁定查询到的所有行，其他事务不能对这些行进行修改或删除</td></tr><tr><td>SELECT… LOCK IN SHARE MODE</td><td>共享锁</td><td>会锁定查询到的所有行，其他事务可以对这些行进行读取，但不能修改或删除</td></tr><tr><td>UPDATE</td><td>排他锁</td><td>会锁定查询到的所有行，其他事务不能对这些行进行修改或删除</td></tr></tbody></table></div><p><strong>想用好锁的注意事项：</strong><br>1.锁的粒度越小越好（能用行锁不用表锁）<br>2.持有时间越短越好（快锁快放）<br>3.避免死锁就像避免厕所占坑打架：</p><ul><li>按固定顺序访问表</li><li>事务不要太长</li></ul><p>基本就到这里，有什么需要额外补充的地方我会后续更新</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql数据库学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL数据库系统学习笔记（1）</title>
      <link href="/2025/05/21/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%881%EF%BC%89/"/>
      <url>/2025/05/21/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%881%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL数据库系统学习笔记"><a href="#MySQL数据库系统学习笔记" class="headerlink" title="MySQL数据库系统学习笔记"></a>MySQL数据库系统学习笔记</h1><h2 id="一、数据库基础概念"><a href="#一、数据库基础概念" class="headerlink" title="一、数据库基础概念"></a>一、数据库基础概念</h2><h3 id="1-核心组件"><a href="#1-核心组件" class="headerlink" title="1. 核心组件"></a>1. 核心组件</h3><p><strong>数据库(DB)</strong>：存储数据的文件系统<br><strong>DBMS</strong>：数据库管理系统软件（如MySQL）<br><strong>SQL</strong>：结构化查询语言（操作数据库的标准）</p><h3 id="2-数据库分类"><a href="#2-数据库分类" class="headerlink" title="2. 数据库分类"></a>2. 数据库分类</h3><p><strong>关系型</strong>：MySQL/Oracle/SQL Server（二维表结构）<br><strong>非关系型</strong>：Redis/HBase（键值对/文档型）</p><h2 id="二、MySQL安装与登录"><a href="#二、MySQL安装与登录" class="headerlink" title="二、MySQL安装与登录"></a>二、MySQL安装与登录</h2><h3 id="1-命令行登录"><a href="#1-命令行登录" class="headerlink" title="1. 命令行登录"></a>1. 命令行登录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -proot</span><br><span class="line"><span class="comment"># -u 用户名</span></span><br><span class="line"><span class="comment"># -p 密码</span></span><br></pre></td></tr></table></figure><h2 id="三、SQL语言分类"><a href="#三、SQL语言分类" class="headerlink" title="三、SQL语言分类"></a>三、SQL语言分类</h2><blockquote><p>D：定义<br>M：操作<br>Q：查询<br>C：控制    </p></blockquote><p><strong><em>这部分很重要，重点记忆</em></strong></p><p><strong>DDL</strong>：数据<strong>定义</strong>语言，用来操作数据库对象（数据库，表，字段）</p><p><strong>DML</strong>：数据<strong>操作</strong>语言，用来对数据库中表的数据进行增删改</p><p><strong>DQL</strong>：数据<strong>查询</strong>语言，用来对数据库中表的数据进行查询操作</p><p><strong>DCL</strong>：数据<strong>控制</strong>语言，用来创建数据库用户，控制访问权限</p><h2 id="字符库意义对照表"><a href="#字符库意义对照表" class="headerlink" title="字符库意义对照表"></a>字符库意义对照表</h2><ul><li>SHOW[显示]</li><li>SELECT[查询]</li><li>DATABASE[数据库]</li><li>IF[如果]</li><li>NOT[没有]</li><li>EXISTS[存在]</li><li>DEFAULT[默认]</li><li>CHARSET[字符集]</li><li>UTF8[支持中文（万国码）]</li><li>DROP[删除]</li><li>IF EXISTS[如果存在]</li><li>TABLES[表]</li><li>DESC[描述]</li><li>CREATE[创建]</li><li>ALTER[修改]</li><li>ADD[添加]</li><li>TRUNCATE[截断，清除]</li></ul><h2 id="DDL部分（数据对象操作，数据库操作，表操作，字段操作）"><a href="#DDL部分（数据对象操作，数据库操作，表操作，字段操作）" class="headerlink" title="DDL部分（数据对象操作，数据库操作，表操作，字段操作）"></a>DDL部分（数据对象操作，数据库操作，表操作，字段操作）</h2><p>数据定义语言，用来操作数据库对象（数据库，表，字段）</p><h3 id="1-DDL（数据定义）"><a href="#1-DDL（数据定义）" class="headerlink" title="1. DDL（数据定义）"></a>1. DDL（数据定义）</h3><p><strong>查看所有数据库</strong><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-- 查看所有数据库</span><br><span class="line">-- show[显示]   databases[所有数据库]</span><br><span class="line">SHOW DATABASES;</span><br></pre></td></tr></table></figure><br><strong>查看当前数据库</strong><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-- 查看当前数据库</span><br><span class="line">-- select[查询]  DATABASE[数据库]</span><br><span class="line">SELECT DATABASE();</span><br></pre></td></tr></table></figure><br><strong>创建数据库</strong><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">-- 创建数据库</span><br><span class="line">-- 在同一个数据库服务器中，不能创建两个名字相同的数据库 </span><br><span class="line">-- create[创建] database[数据库]    db[数据库名] </span><br><span class="line">-- if[如果] not[没有] exists[存在]</span><br><span class="line">CREATE DATABASE IF NOT EXISTS shop</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- 创建数据库指定字符集</span><br><span class="line">-- default[默认]  charset[字符集]  utf8[支持中文]</span><br><span class="line">DEFAULT CHARSET utf8;</span><br><span class="line"></span><br><span class="line">create database if not exists db3 default charset utf8;</span><br></pre></td></tr></table></figure><br><strong>删除数据库</strong><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-- 删除数据库</span><br><span class="line">drop[删除]  if exists[如果存在]</span><br><span class="line">DROP DATABASE IF EXISTS test;</span><br></pre></td></tr></table></figure><br><strong>切换数据库</strong><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select database();</span><br><span class="line">use db;</span><br></pre></td></tr></table></figure></p><h3 id="2-表操作DDL"><a href="#2-表操作DDL" class="headerlink" title="2. 表操作DDL"></a>2. 表操作DDL</h3><p><strong>查看所有表</strong><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-- 查看所有表</span><br><span class="line">-- SHOW[显示]  tables[所有表]</span><br><span class="line">SHOW TABLES;</span><br></pre></td></tr></table></figure><br><strong>查看指定表的结构</strong><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-- 查看指定表的结构</span><br><span class="line">-- 查看表的字段，字段的类型，是否可以为null，是否有默认值</span><br><span class="line">-- desc[描述]  studentinfo[表名]</span><br><span class="line">desc studentinfo;</span><br></pre></td></tr></table></figure><br><strong>查看指定表的建表语句</strong><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-- 查看指定表的建表语句</span><br><span class="line">-- show[显示]  create[创建]  tables[表]   studentinfo[表名]</span><br><span class="line">show create table studentinfo;</span><br></pre></td></tr></table></figure></p><h3 id="3-数据类型详解"><a href="#3-数据类型详解" class="headerlink" title="3. 数据类型详解"></a>3. 数据类型详解</h3><h4 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型"></a>数值类型</h4><ul><li>int整数</li><li>float 小数(单精度)</li><li>double 小数(双精度)</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">INT         -- 整数</span><br><span class="line">FLOAT(7,2)  -- 单精度浮点</span><br><span class="line">DECIMAL(10,2) -- 精确小数</span><br></pre></td></tr></table></figure><h4 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CHAR(11)    -- 固定长度（适合身份证号）</span><br><span class="line">VARCHAR(50) -- 可变长度（适合姓名）</span><br><span class="line">TEXT        -- 大文本</span><br></pre></td></tr></table></figure><ul><li>char(需要指定长度)固定字符串</li><li>varchar(需要指定长度)可变字符串</li></ul><p><strong>存在面试题，见下</strong></p><h4 id="时间类型"><a href="#时间类型" class="headerlink" title="时间类型"></a>时间类型</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">DATE        -- 日期（YYYY-MM-DD）</span><br><span class="line">TIME        -- 时间（HH:MM:SS）</span><br><span class="line">DATETIME    -- 日期时间</span><br><span class="line">TIMESTAMP   -- 时间戳</span><br></pre></td></tr></table></figure><h3 id="4-完整表示例和表操作"><a href="#4-完整表示例和表操作" class="headerlink" title="4. 完整表示例和表操作"></a>4. 完整表示例和表操作</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE employees (</span><br><span class="line">    id INT PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">    name VARCHAR(30) NOT NULL,</span><br><span class="line">    gender CHAR(1) CHECK(gender IN(&#x27;男&#x27;,&#x27;女&#x27;)),</span><br><span class="line">    age INT DEFAULT 18,</span><br><span class="line">    salary DECIMAL(10,2),</span><br><span class="line">    hire_date DATE,</span><br><span class="line">    department_id INT,</span><br><span class="line">    CONSTRAINT fk_dept FOREIGN KEY(department_id) </span><br><span class="line">    REFERENCES departments(id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><strong>修改表</strong><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-- 修改表</span><br><span class="line">-- 添加一个新的字段 家庭住址 address </span><br><span class="line">-- alter[修改]  table[表]  emp[表名]  add[添加]  address[添加的字段名]</span><br><span class="line">alter table emp  add address varchar(50);</span><br></pre></td></tr></table></figure><br><strong>删除字段</strong><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-- 删除字段</span><br><span class="line">-- alter[修改]  table[表]  emp[表名] drop[删除] address[删除的字段名]</span><br><span class="line">alter table emp drop address;</span><br></pre></td></tr></table></figure><br><strong>两种删除表</strong><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-- 删除表</span><br><span class="line">drop table if exists emp;</span><br><span class="line"></span><br><span class="line">-- 删除表， 并重新创建表</span><br><span class="line">-- truncate[截断，清除]</span><br><span class="line">truncate table emp;</span><br></pre></td></tr></table></figure><br><strong>此处存在面试题，见下</strong></p><h2 id="四、DML数据操作"><a href="#四、DML数据操作" class="headerlink" title="四、DML数据操作"></a>四、DML数据操作</h2><p>DML数据操作语言，用于对数据库中的数据进行增删改操作。</p><ul><li>添加数据INSERT</li><li>修改数据UPDATE</li><li>删除数据DELETE</li></ul><h3 id="1-添加数据"><a href="#1-添加数据" class="headerlink" title="1. 添加数据"></a>1. 添加数据</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">-- 给指定字段添加数据</span><br><span class="line">insert into emp(eid,enumber,name,sex,age,sal,card,hiredate)</span><br><span class="line">values(1,&#x27;1001&#x27;,&#x27;jack&#x27;,&#x27;男&#x27;,21,3500,&#x27;4311&#x27;,&#x27;2025-5-1&#x27;);</span><br><span class="line"></span><br><span class="line">-- 给全部字段添加数据</span><br><span class="line">insert into emp values(2,&#x27;1002&#x27;,&#x27;tom&#x27;,&#x27;男&#x27;,21,2500,&#x27;4311&#x27;,&#x27;2025-5-1&#x27;);</span><br><span class="line"></span><br><span class="line">-- 批量添加数据</span><br><span class="line">insert into emp values(3,&#x27;1003&#x27;,&#x27;lucy&#x27;,&#x27;女&#x27;,20,2500,&#x27;4311&#x27;,&#x27;2025-5-11&#x27;),</span><br><span class="line">(4,&#x27;1004&#x27;,&#x27;rose&#x27;,&#x27;女&#x27;,19,1500,&#x27;4312&#x27;,&#x27;2025-5-13&#x27;),</span><br><span class="line">(5,&#x27;1005&#x27;,&#x27;piter&#x27;,&#x27;男&#x27;,22,2300,&#x27;4313&#x27;,&#x27;2025-5-15&#x27;);</span><br></pre></td></tr></table></figure><h3 id="2-修改数据"><a href="#2-修改数据" class="headerlink" title="2. 修改数据"></a>2. 修改数据</h3><p><strong>更新类别</strong><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-- 条件更新</span><br><span class="line">UPDATE employees SET salary = salary*1.1 WHERE department_id = 2;</span><br><span class="line"></span><br><span class="line">-- 全表更新</span><br><span class="line">UPDATE employees SET age = age + 1;</span><br></pre></td></tr></table></figure><br><strong>修改数据</strong><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-- 修改数据  </span><br><span class="line">-- 修改id为1的数据，将name修改为中文杰克</span><br><span class="line">-- where 用于指定条件 </span><br><span class="line">update emp set name=&#x27;JACK&#x27;,age=22  where eid=1;</span><br><span class="line">-- 修改语句的条件可以有，也可以没有，如果没有指定条件，则修改整张表的数据。</span><br></pre></td></tr></table></figure></p><h3 id="3-删除数据"><a href="#3-删除数据" class="headerlink" title="3. 删除数据"></a>3. 删除数据</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-- 条件删除</span><br><span class="line">DELETE FROM employees </span><br><span class="line">WHERE id = 5;</span><br><span class="line"></span><br><span class="line">-- 清空表</span><br><span class="line">TRUNCATE TABLE temp_employees;</span><br></pre></td></tr></table></figure><p>详细案例<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 删除数据</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> emp <span class="keyword">where</span> eid<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line"><span class="comment">-- 删除语句的条件可以有，也可以没有，如果没有指定条件，则删除整张表的数据。</span></span><br></pre></td></tr></table></figure></p><h2 id="五、DQL数据查询"><a href="#五、DQL数据查询" class="headerlink" title="五、DQL数据查询"></a>五、DQL数据查询</h2><p>DQL数据查询语言，用来查询数据库中表的数据</p><h2 id="语法结构顺序（强制性顺序，元素可以不存在，但是必须按照这个顺序）"><a href="#语法结构顺序（强制性顺序，元素可以不存在，但是必须按照这个顺序）" class="headerlink" title="语法结构顺序（强制性顺序，元素可以不存在，但是必须按照这个顺序）"></a>语法结构顺序（强制性顺序，元素可以不存在，但是必须按照这个顺序）</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">select  字段列表</span><br><span class="line">from   表名列表</span><br><span class="line">where  条件列表</span><br><span class="line">group by  分组字段列表</span><br><span class="line">having 分组后条件列表</span><br><span class="line">order by 排序字段列表</span><br><span class="line">limit 分页参数</span><br></pre></td></tr></table></figure><ul><li>基本查询（不带条件）</li><li>条件查询（where）</li><li>聚合函数（count、max、min、avg、sum）</li><li>分组查询（group by）</li><li>排序查询（order by）</li><li>分页查询（limit）</li></ul><h3 id="1-基础查询"><a href="#1-基础查询" class="headerlink" title="1. 基础查询"></a>1. 基础查询</h3><p>在基本查询的DQL语句中，不带任何的查询条件。<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">-- 查询指定列</span><br><span class="line">SELECT name, salary FROM employees;</span><br><span class="line"></span><br><span class="line">-- 别名查询</span><br><span class="line">SELECT name AS &#x27;姓名&#x27;, </span><br><span class="line">       salary*12 &#x27;年薪&#x27; </span><br><span class="line">FROM employees;</span><br><span class="line"></span><br><span class="line">-- 去重查询</span><br><span class="line">SELECT DISTINCT department_id </span><br><span class="line">FROM employees;</span><br></pre></td></tr></table></figure><br><strong>实战对照</strong><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">-- 查询多个字段</span><br><span class="line">-- 职员姓名，职员性别，职员工资，入职时间</span><br><span class="line">-- select[查询]  字段列表  from[来自]  emp[查询的表名]</span><br><span class="line">select name,sex,sal,hiredate from emp;</span><br><span class="line"> -- 查询所有字段   * 代表查询所有字段</span><br><span class="line"> select * from emp;</span><br><span class="line"> -- 字段取别名  as 取别名 as可以省略</span><br><span class="line"> select sal  &#x27;工资&#x27;,hiredate   &#x27;入职时间&#x27; from emp;</span><br><span class="line"> -- 查询员工的年龄有哪几种</span><br><span class="line"> -- distinct[去重复]</span><br><span class="line"> select distinct age from emp;</span><br></pre></td></tr></table></figure></p><h3 id="2-条件查询"><a href="#2-条件查询" class="headerlink" title="2. 条件查询"></a>2. 条件查询</h3><ul><li>比较运算符   &gt; &lt;  &gt;=  &lt;=  &lt;&gt;或 !=   between..and in </li><li>逻辑运算符   or 或者    and  并且   not   ! 非 不是</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">-- 比较查询</span><br><span class="line">SELECT * FROM products </span><br><span class="line">WHERE price &gt; 100 AND stock &lt; 50;</span><br><span class="line"></span><br><span class="line">-- 范围查询</span><br><span class="line">SELECT * FROM orders </span><br><span class="line">WHERE order_date BETWEEN &#x27;2023-01-01&#x27; AND &#x27;2023-03-31&#x27;;</span><br><span class="line"></span><br><span class="line">-- 模糊查询</span><br><span class="line">SELECT * FROM customers </span><br><span class="line">WHERE phone LIKE &#x27;138%&#x27;;</span><br></pre></td></tr></table></figure><p><strong>实战对照</strong><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">-- 查询年龄大于18岁的  </span><br><span class="line">select * from emp where age&gt;19;</span><br><span class="line">--  查询年龄小于20岁的</span><br><span class="line">select * from emp where age&lt;20;</span><br><span class="line">-- 查询没有身份证号的员工信息</span><br><span class="line">select * from emp where card is null;</span><br><span class="line">-- 查询有身份证的员工信息</span><br><span class="line">select * from emp where card is not null;</span><br><span class="line">-- 查询年龄在19(包括)和20(包括)岁之间的职员信息</span><br><span class="line">select * from emp where age&gt;=19 &amp;&amp; age&lt;=20;</span><br><span class="line">-- BETWEEN...and.. 在某个范围之间(最小值 and 最大值)</span><br><span class="line">select * from emp where age between 19 and 20;</span><br><span class="line"></span><br><span class="line">-- 查询性别为女，年龄小于20岁的职员信息</span><br><span class="line">select * from emp where sex=&#x27;女&#x27; and age&lt;20;</span><br><span class="line"></span><br><span class="line">-- 查询eid等于 2或者3或者6的员工信息</span><br><span class="line">select * from emp where eid=2 or eid=3 or eid=6;</span><br><span class="line">-- in 在in之后列表中的值  多选</span><br><span class="line">select * from emp where eid in(2,3,6);</span><br></pre></td></tr></table></figure><br><strong>like模糊查询模糊查询通过通配符实现字符串匹配 </strong><br><code>%</code> 表示任意长度的字符  1个或1个以上<br><code>_</code> 表示单个字符</p><p><strong>实战对照</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">-- 查询姓名为4个字的员工信息</span><br><span class="line">select * from emp where name like &#x27;____&#x27;;</span><br><span class="line"></span><br><span class="line">-- 查询姓名为l开头的4个字的员工信息</span><br><span class="line">select * from emp where name like &#x27;l___&#x27;;</span><br><span class="line"></span><br><span class="line">-- 查询名字包含o的员工信息</span><br><span class="line">select * from emp where name like &#x27;%o%&#x27;;</span><br><span class="line"></span><br><span class="line">-- 查询名字为l开头的员工信息</span><br><span class="line">select * from emp where name like &#x27;l%&#x27;;</span><br></pre></td></tr></table></figure><h3 id="3-聚合函数"><a href="#3-聚合函数" class="headerlink" title="3. 聚合函数"></a>3. 聚合函数</h3><p>可以理解为数学函数逻辑</p><ul><li>COUNT 统计数量</li><li>AVG 求平均</li><li>MAX 最大值</li><li>MIN 最小值</li><li>SUM 求和</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">-- 统计员工总数量</span><br><span class="line">SELECT COUNT(*) FROM emp;</span><br><span class="line">-- 统计的是card不为null的数据</span><br><span class="line">SELECT COUNT(card) FROM emp;</span><br><span class="line">-- 求员工的平均年龄</span><br><span class="line">SELECT AVG(age) FROM emp;</span><br><span class="line">-- 求员工的最大年龄</span><br><span class="line">SELECT MAX(age) FROM emp;</span><br><span class="line">-- 求员工的最小年龄</span><br><span class="line">SELECT MIN(age) FROM emp;</span><br><span class="line">-- 求员工的年龄综合</span><br><span class="line">SELECT SUM(age) FROM emp;</span><br></pre></td></tr></table></figure><h3 id="4-分组查询"><a href="#4-分组查询" class="headerlink" title="4. 分组查询"></a>4. 分组查询</h3><p>按照分组阶段将结果相同的内容作为一组，分组的目的是为了统计，所以一般情况会跟聚合函数一起使用。<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">-- 按照性别分组，统计男女职员各多少人</span><br><span class="line">select sex,count(*) from emp group by sex;</span><br><span class="line"></span><br><span class="line">-- 按照性别分组，统计男女员工的平均年龄</span><br><span class="line">select sex,avg(age) from emp group by sex;</span><br><span class="line"></span><br><span class="line">-- 按照性别分组，统计男女职员各多少人，小于2的不显示</span><br><span class="line">-- having 筛选  </span><br><span class="line">select sex,count(*) from emp group by sex having count(*)&gt;2;</span><br><span class="line"></span><br><span class="line">-- 查询年龄大于20岁，按性别分组，统计每组的人数，大于2显示</span><br><span class="line">select sex,count(*) from emp where age&gt;20 group by sex having count(*)&gt;2;</span><br></pre></td></tr></table></figure></p><h3 id="5-排序查询"><a href="#5-排序查询" class="headerlink" title="5. 排序查询"></a>5. 排序查询</h3><p>ORDER BY 语句对查询结果进行排序。</p><p>表达式后面可选<code>asc(升序)</code>或者<code>desc(降序)</code>来指定排序方向，如果没有指定方向，默认为<code>asc(升序)</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">--   按照年龄对员工进行升序</span><br><span class="line">SELECT * FROM emp ORDER BY age ASC;</span><br><span class="line"></span><br><span class="line">--  按照工资降序排序，按照名字排序(多字段排序)</span><br><span class="line">SELECT * FROM emp ORDER BY sal DESC,NAME;</span><br></pre></td></tr></table></figure><h3 id="6-分页查询limit"><a href="#6-分页查询limit" class="headerlink" title="6.分页查询limit"></a>6.分页查询limit</h3><p>用来限制select查询返回的行会，常用于分页，或提取部分数据，提供查询效率。<br>基本上所有的分页设计都是为了降低服务器负担，提高效率<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">--  0 开始索引, 查询3条  </span><br><span class="line">select * from emp limit 0,3;</span><br></pre></td></tr></table></figure><br><strong>注意：索引是按照提交数量定的，哪怕没提交成功报错了，但是执行了一次查询，索引仍然会增加</strong><br>解释：若是0,3，意思是从索引0开始，每次查询三条，若是成功查询，索引会变为3，哪怕出现报错查询则变为1</p><h3 id="查询练习实例"><a href="#查询练习实例" class="headerlink" title="查询练习实例"></a>查询练习实例</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">-- 查询年龄在20,21,23的员工信息</span><br><span class="line">SELECT * FROM emp WHERE age IN(20,21,23);</span><br><span class="line"></span><br><span class="line">-- 查询性别为男，年龄在20-22岁以内，名字为4个字的员工</span><br><span class="line">SELECT * FROM emp WHERE sex=&#x27;男&#x27; AND (age BETWEEN 20 AND 22) AND NAME LIKE &#x27;____&#x27;;</span><br><span class="line"></span><br><span class="line">-- 统计员工表中，年龄小于25岁的，男女员工各多少人</span><br><span class="line">SELECT sex,COUNT(*) FROM emp WHERE age&lt;25 GROUP BY sex;</span><br><span class="line"></span><br><span class="line">-- 查询所有年龄小于25岁的员工姓名和年龄，按照年龄升序，如果年龄相同，按照入职时间降序</span><br><span class="line">SELECT NAME,age FROM emp WHERE age&lt;25 ORDER BY age ASC,hiredate DESC;</span><br><span class="line"></span><br><span class="line">-- 查询性别为男，年龄在20-22岁以内的前2个员工信息，按照年龄升序</span><br><span class="line">SELECT * FROM emp WHERE sex=&#x27;男&#x27; AND (age BETWEEN 20 AND 22) ORDER BY age ASC LIMIT 2;</span><br></pre></td></tr></table></figure><h2 id="六、数据库设计"><a href="#六、数据库设计" class="headerlink" title="六、数据库设计"></a>六、数据库设计</h2><p><strong>何为范式</strong><br>好的数据库设计对数据库的存储性能和后期开发，都会产生重要的影响。建立规范的数据库需要满足一些规则来优化数据库的设计和存储，这些规则称为范式。</p><p>数据库三大范式就是设计表结构所遵循的规范，目的就是为了减少冗余，建立结构合理的数据库，而提高数据存储和使用的性能。</p><p><strong>三大范式之间是具有依赖关系的，比如第二范式需要在第一范式的基础上进行，第三范式需要在第二范式的基础上进行。</strong></p><h3 id="1-三大范式"><a href="#1-三大范式" class="headerlink" title="1. 三大范式"></a>1. 三大范式</h3><p><code>1NF：</code>字段原子性（不可再分）<br>遵循原子性。即表中字段的数据，不可以在拆分。</p><p><code>2NF：</code>消除部分依赖（有主键）<br>一个表只能描述一件事情。</p><p><code>3NF：</code>消除传递依赖（外键关联）<br>在满足第二范式的情况下，消除传递依赖。</p><h3 id="1-数据库约束"><a href="#1-数据库约束" class="headerlink" title="1.数据库约束"></a>1.数据库约束</h3><p>对表中的数据进行限制，保证数据的正确性、有效性和完整性。如果一个表添加了约束，不正确的数据将无法插入到表中。<br><del>有点像过滤器</del></p><h3 id="2-约束类型"><a href="#2-约束类型" class="headerlink" title="2. 约束类型"></a>2. 约束类型</h3><p>对表中的数据进行限制，保证数据的正确性、有效性和完整性。如果一个表添加了约束，不正确的数据将无法插入到表中。</p><ul><li>非空约束： 限制该字段的数据不能为NULL    <code>NOT NULL</code></li><li>唯一约束：限制该字段的数据都是唯一的，不重复    <code>UNIQUE</code></li><li>主键约束：主键是一行数据的唯一表示，非空且唯一  <code>PRIMARY KEY</code></li><li>检查约束(8.0之后的版本才有效)：保证字段满足某一个条件     <code>CHECK</code></li><li>默认约束：保存数据时，如果不指定该字段的值，则使用默认值  <code>DEFUALT</code></li><li>外键约束：用于让两张表的数据之间建立连接，保证数据的一致性   <code>FOREIGN    KEY</code></li></ul><h3 id="3-外键操作"><a href="#3-外键操作" class="headerlink" title="3. 外键操作"></a>3. 外键操作</h3><p><strong>创建外键约束</strong><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">-- 创建外键约束</span><br><span class="line">create table emp(</span><br><span class="line">id int primary key auto_increment,</span><br><span class="line">name varchar(20),</span><br><span class="line">dno int,  -- 外键（从表）</span><br><span class="line">-- constraint[约束] fk_dno[约束名] foreign key [外键约束](外键字段名)   references[引用] </span><br><span class="line">constraint fk_dno  foreign key(dno) references dept(dno)  on update cascade  on delete cascade</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">create table dept(</span><br><span class="line">dno int primary key auto_increment,-- 主键（主键）</span><br><span class="line">dname varchar(20)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">insert into emp values(null,&#x27;jack&#x27;,10);</span><br><span class="line">insert into emp values(null,&#x27;Tom&#x27;,10);</span><br><span class="line">insert into emp values(null,&#x27;Lucy&#x27;,20);</span><br></pre></td></tr></table></figure><br><strong>删除外键</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 删除外键</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> emp <span class="keyword">drop</span> <span class="keyword">foreign</span> key  fk_dno;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 在emp表存在的情况下添加外键</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> emp <span class="keyword">add</span> <span class="keyword">constraint</span> fk_dno <span class="keyword">foreign</span> key(dno) <span class="keyword">references</span> dept(dno);</span><br></pre></td></tr></table></figure></p><h3 id="级联操作"><a href="#级联操作" class="headerlink" title="级联操作"></a>级联操作</h3><p>级联操作指的是在数据库表之间建立起一种关联关系，使得对一个表的操作（如更新或删除）能够自动触发对相关联表中数据的相应操作。</p><ul><li>级联更新（ON UPDATE CASCADE）</li><li>级联删除（ON DELETE CASCADE）</li></ul><p>当设置了级联更新，如果主表（包含外键的表）中的数据发生变化，那么从表（被引用的表）中相应的数据也会自动更新。同样，当设置了级联删除，如果主表中的数据被删除，从表中相应的数据也会被自动删除。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建学生表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> stu(</span><br><span class="line">sid <span class="type">INT</span> UNSIGNED <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT,</span><br><span class="line">name <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line">) TYPE<span class="operator">=</span>InnoDB CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建成绩表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> sc(</span><br><span class="line">scid <span class="type">INT</span> UNSIGNED <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT,</span><br><span class="line">sid <span class="type">INT</span> UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">score <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span>,</span><br><span class="line">INDEX (sid), <span class="comment">-- 外键必须加索引</span></span><br><span class="line"><span class="keyword">FOREIGN</span> KEY (sid) <span class="keyword">REFERENCES</span> stu(sid) <span class="keyword">ON</span> <span class="keyword">DELETE</span> CASCADE <span class="keyword">ON</span> <span class="keyword">UPDATE</span> CASCADE</span><br><span class="line">) TYPE<span class="operator">=</span>InnoDB CHARSET<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure><p>通过FOREIGN KEY (sid) REFERENCES stu(sid)建立了外键关系，并通过ON DELETE CASCADE和ON UPDATE CASCADE指定了级联删除和级联更新的行为。</p><h3 id="SQL-多表连接分类详解"><a href="#SQL-多表连接分类详解" class="headerlink" title="SQL 多表连接分类详解"></a>SQL 多表连接分类详解</h3><h4 id="1-内连接-INNER-JOIN"><a href="#1-内连接-INNER-JOIN" class="headerlink" title="1. 内连接 (INNER JOIN)"></a>1. 内连接 (INNER JOIN)</h4><h5 id="显式内连接"><a href="#显式内连接" class="headerlink" title="显式内连接"></a>显式内连接</h5><p>使用 <code>INNER JOIN</code> 和 <code>ON</code> 关键字明确指定连接条件：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> s.StuName, c.ClassName</span><br><span class="line"><span class="keyword">FROM</span> StudentInfo s</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> ClassInfo c <span class="keyword">ON</span> s.SClassID <span class="operator">=</span> c.ClassID</span><br></pre></td></tr></table></figure></p><h5 id="隐式内连接"><a href="#隐式内连接" class="headerlink" title="隐式内连接"></a>隐式内连接</h5><p>使用 <code>WHERE</code> 子句指定连接条件（不推荐）：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> s.StuName, c.ClassName</span><br><span class="line"><span class="keyword">FROM</span> StudentInfo s, ClassInfo c</span><br><span class="line"><span class="keyword">WHERE</span> s.SClassID <span class="operator">=</span> c.ClassID</span><br></pre></td></tr></table></figure></p><p><strong>特点</strong>：</p><ul><li>只返回两表中匹配的行</li><li>显式写法更清晰，推荐使用</li></ul><h4 id="2-外连接-OUTER-JOIN"><a href="#2-外连接-OUTER-JOIN" class="headerlink" title="2. 外连接 (OUTER JOIN)"></a>2. 外连接 (OUTER JOIN)</h4><h5 id="左外连接-LEFT-JOIN"><a href="#左外连接-LEFT-JOIN" class="headerlink" title="左外连接 (LEFT JOIN)"></a>左外连接 (LEFT JOIN)</h5><p>返回左表所有行，右表无匹配则显示NULL：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> s.StuName, e.ExamName</span><br><span class="line"><span class="keyword">FROM</span> StudentInfo s</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> StudentExam e <span class="keyword">ON</span> s.StuID <span class="operator">=</span> e.EStuID</span><br></pre></td></tr></table></figure></p><h5 id="右外连接-RIGHT-JOIN"><a href="#右外连接-RIGHT-JOIN" class="headerlink" title="右外连接 (RIGHT JOIN)"></a>右外连接 (RIGHT JOIN)</h5><p>返回右表所有行，左表无匹配则显示NULL：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> s.StuName, e.ExamName</span><br><span class="line"><span class="keyword">FROM</span> StudentInfo s</span><br><span class="line"><span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> StudentExam e <span class="keyword">ON</span> s.StuID <span class="operator">=</span> e.EStuID</span><br></pre></td></tr></table></figure></p><h4 id="内外连接对比"><a href="#内外连接对比" class="headerlink" title="内外连接对比"></a>内外连接对比</h4><div class="table-container"><table><thead><tr><th>特性</th><th>内连接</th><th>外连接</th></tr></thead><tbody><tr><td>结果集</td><td>只返回匹配行</td><td>返回匹配行+未匹配行(补NULL)</td></tr><tr><td>性能</td><td>通常更快</td><td>稍慢</td></tr><tr><td>用途</td><td>需要精确匹配时</td><td>需要保留所有记录时</td></tr><tr><td>NULL处理</td><td>不包含NULL</td><td>包含NULL</td></tr></tbody></table></div><p><strong>特点</strong>：</p><ul><li>左连接保留左表全部数据</li><li>右连接保留右表全部数据</li><li>实际开发中左连接使用更频繁</li></ul><h4 id="3-自连接-SELF-JOIN"><a href="#3-自连接-SELF-JOIN" class="headerlink" title="3. 自连接 (SELF JOIN)"></a>3. 自连接 (SELF JOIN)</h4><p>表与自身连接，常用于层级数据查询：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询员工及其经理信息</span></span><br><span class="line"><span class="keyword">SELECT</span> e1.EmpName <span class="keyword">AS</span> 员工, e2.EmpName <span class="keyword">AS</span> 经理</span><br><span class="line"><span class="keyword">FROM</span> Employee e1</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> Employee e2 <span class="keyword">ON</span> e1.ManagerID <span class="operator">=</span> e2.EmpID</span><br></pre></td></tr></table></figure></p><p><strong>特点</strong>：</p><ul><li>必须使用表别名区分</li><li>常用于组织结构、分类层级等场景</li></ul><h4 id="4-交叉连接-CROSS-JOIN"><a href="#4-交叉连接-CROSS-JOIN" class="headerlink" title="4. 交叉连接 (CROSS JOIN)"></a>4. 交叉连接 (CROSS JOIN)</h4><p>返回两表的笛卡尔积（所有可能的组合）：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> s.StuName, c.ClassName</span><br><span class="line"><span class="keyword">FROM</span> StudentInfo s</span><br><span class="line"><span class="keyword">CROSS</span> <span class="keyword">JOIN</span> ClassInfo c</span><br></pre></td></tr></table></figure></p><p><strong>特点</strong>：</p><ul><li>结果行数 = 表1行数 × 表2行数</li><li>谨慎使用，可能产生大量数据</li></ul><h3 id="5-子查询-SUBQUERY"><a href="#5-子查询-SUBQUERY" class="headerlink" title="5. 子查询 (SUBQUERY)"></a>5. 子查询 (SUBQUERY)</h3><h4 id="WHERE-子句中的子查询"><a href="#WHERE-子句中的子查询" class="headerlink" title="WHERE 子句中的子查询"></a>WHERE 子句中的子查询</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询高于平均分的学员</span></span><br><span class="line"><span class="keyword">SELECT</span> StuName, Score</span><br><span class="line"><span class="keyword">FROM</span> StudentExam</span><br><span class="line"><span class="keyword">WHERE</span> Score <span class="operator">&gt;</span> (<span class="keyword">SELECT</span> <span class="built_in">AVG</span>(Score) <span class="keyword">FROM</span> StudentExam)</span><br></pre></td></tr></table></figure><h4 id="FROM-子句中的子查询（派生表）"><a href="#FROM-子句中的子查询（派生表）" class="headerlink" title="FROM 子句中的子查询（派生表）"></a>FROM 子句中的子查询（派生表）</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询每个班级的平均分</span></span><br><span class="line"><span class="keyword">SELECT</span> c.ClassName, t.AvgScore</span><br><span class="line"><span class="keyword">FROM</span> ClassInfo c</span><br><span class="line"><span class="keyword">JOIN</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> SClassID, <span class="built_in">AVG</span>(Score) <span class="keyword">AS</span> AvgScore</span><br><span class="line">    <span class="keyword">FROM</span> StudentInfo s</span><br><span class="line">    <span class="keyword">JOIN</span> StudentExam e <span class="keyword">ON</span> s.StuID <span class="operator">=</span> e.EStuID</span><br><span class="line">    <span class="keyword">GROUP</span> <span class="keyword">BY</span> SClassID</span><br><span class="line">) t <span class="keyword">ON</span> c.ClassID <span class="operator">=</span> t.SClassID</span><br></pre></td></tr></table></figure><h4 id="SELECT-子句中的子查询"><a href="#SELECT-子句中的子查询" class="headerlink" title="SELECT 子句中的子查询"></a>SELECT 子句中的子查询</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询学生及其班级平均分</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    s.StuName,</span><br><span class="line">    (<span class="keyword">SELECT</span> <span class="built_in">AVG</span>(Score) </span><br><span class="line">     <span class="keyword">FROM</span> StudentExam e </span><br><span class="line">     <span class="keyword">WHERE</span> e.EStuID <span class="keyword">IN</span> (</span><br><span class="line">         <span class="keyword">SELECT</span> StuID <span class="keyword">FROM</span> StudentInfo </span><br><span class="line">         <span class="keyword">WHERE</span> SClassID <span class="operator">=</span> s.SClassID</span><br><span class="line">     )) <span class="keyword">AS</span> ClassAvgScore</span><br><span class="line"><span class="keyword">FROM</span> StudentInfo s</span><br></pre></td></tr></table></figure><p><strong>子查询类型</strong>：<br>| 类型 | 说明 | 示例 |<br>|———|———|———|<br>| 标量子查询 | 返回单个值 | <code>SELECT ... WHERE col &gt; (SELECT AVG(col) FROM ...)</code> |<br>| 列子查询 | 返回单列多行 | <code>SELECT ... WHERE col IN (SELECT col FROM ...)</code> |<br>| 行子查询 | 返回单行多列 | <code>SELECT ... WHERE (col1,col2) = (SELECT col1,col2 FROM ...)</code> |<br>| 表子查询 | 返回多行多列 | <code>FROM (SELECT ...) AS t</code> |</p><h2 id="七、高级特性"><a href="#七、高级特性" class="headerlink" title="七、高级特性"></a>七、高级特性</h2><h3 id="1-事务控制"><a href="#1-事务控制" class="headerlink" title="1. 事务控制"></a>1. 事务控制</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">START TRANSACTION;</span><br><span class="line">UPDATE accounts SET balance = balance - 1000 </span><br><span class="line">WHERE user_id = 1;</span><br><span class="line">UPDATE accounts SET balance = balance + 1000 </span><br><span class="line">WHERE user_id = 2;</span><br><span class="line">COMMIT;</span><br><span class="line">-- 或 ROLLBACK;</span><br></pre></td></tr></table></figure><h3 id="2-视图创建"><a href="#2-视图创建" class="headerlink" title="2. 视图创建"></a>2. 视图创建</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CREATE VIEW emp_dept_view AS</span><br><span class="line">SELECT e.name, e.salary, d.department_name</span><br><span class="line">FROM employees e JOIN departments d</span><br><span class="line">ON e.department_id = d.id;</span><br></pre></td></tr></table></figure><h3 id="3-索引优化"><a href="#3-索引优化" class="headerlink" title="3. 索引优化"></a>3. 索引优化</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-- 创建索引</span><br><span class="line">CREATE INDEX idx_product_name </span><br><span class="line">ON products(name);</span><br><span class="line"></span><br><span class="line">-- 联合索引</span><br><span class="line">CREATE INDEX idx_emp_name_dept </span><br><span class="line">ON employees(name, department_id);</span><br></pre></td></tr></table></figure><h2 id="八、经典面试题"><a href="#八、经典面试题" class="headerlink" title="八、经典面试题"></a>八、经典面试题</h2><h3 id="1-CHAR-vs-VARCHAR"><a href="#1-CHAR-vs-VARCHAR" class="headerlink" title="1. CHAR vs VARCHAR"></a>1. CHAR vs VARCHAR</h3><p>char和varchar都可以描述字符串，char是固定字符串，无论使用几个字符串都占满全部。varchar可变字符串，使用几个字符串就占用几个。</p><ul><li>CHAR：固定长度，适合存储定长数据（如身份证号）</li><li>VARCHAR：可变长度，适合存储变长数据（如用户名）</li></ul><p><strong>例子：</strong><br>CHAR(11)    — 固定长度<br>一定要初始化一个长度，键入内容不到该长度会用空格补齐，不可超出定义长度，内存占用小<br>VARCHAR(50) — 可变长度<br>一定要初始化一个长度，用多少就分配多少长度，可以超出定义长度</p><h3 id="2-DELETE-vs-TRUNCATE"><a href="#2-DELETE-vs-TRUNCATE" class="headerlink" title="2. DELETE vs TRUNCATE"></a>2. DELETE vs TRUNCATE</h3><ul><li>DELETE：逐行删除，可回滚，不影响自增</li><li>TRUNCATE：整表删除，不可回滚，重置自增</li></ul><p>1.删除的方式不同</p><ul><li><p>​    delete命令执行的时候会产生数据的日志文件，而日志记录需要消耗时间，方便数据回滚恢复。</p></li><li><p>​    truncate命令执行的时候不回产生数据日志，因此比delete更快。</p></li></ul><p>2.表结构的影响</p><ul><li><p>​    delete不会影响表的结构。</p></li><li><p>​    truncate会把表的自增进行重置和索引恢复初始大小。</p></li></ul><h3 id="3-WHERE-vs-HAVING"><a href="#3-WHERE-vs-HAVING" class="headerlink" title="3. WHERE vs HAVING"></a>3. WHERE vs HAVING</h3><ul><li>WHERE：分组前过滤，不能使用聚合函数</li><li>HAVING：分组后过滤，可以使用聚合函数</li></ul><p><strong>执行时机不同</strong>： where是在分组之前进行过滤，不满足where条件，不参与分组，而having是分组之后对结果进行筛选。<br><strong>判断条件不同</strong>：where 不能对聚合函数进行判断，having是可以的</p><h2 id="九、实用技巧"><a href="#九、实用技巧" class="headerlink" title="九、实用技巧"></a>九、实用技巧</h2><h3 id="1-数据导出导入"><a href="#1-数据导出导入" class="headerlink" title="1. 数据导出导入"></a>1. 数据导出导入</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导出整个数据库</span></span><br><span class="line">mysqldump -uroot -p database &gt; backup.sql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入数据</span></span><br><span class="line">mysql -uroot -p database &lt; backup.sql</span><br></pre></td></tr></table></figure><h3 id="2-性能分析"><a href="#2-性能分析" class="headerlink" title="2. 性能分析"></a>2. 性能分析</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-- 查看执行计划</span><br><span class="line">EXPLAIN SELECT * FROM products WHERE price &gt; 100;</span><br><span class="line"></span><br><span class="line">-- 开启慢查询日志</span><br><span class="line">SET GLOBAL slow_query_log = &#x27;ON&#x27;;</span><br><span class="line">SET GLOBAL long_query_time = 2;</span><br></pre></td></tr></table></figure><h3 id="3-安全设置"><a href="#3-安全设置" class="headerlink" title="3. 安全设置"></a>3. 安全设置</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-- 创建用户并授权</span><br><span class="line">CREATE USER &#x27;app_user&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;password123&#x27;;</span><br><span class="line">GRANT SELECT, INSERT ON shop.* TO &#x27;app_user&#x27;@&#x27;%&#x27;;</span><br><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure><h2 id="十、实战练习"><a href="#十、实战练习" class="headerlink" title="十、实战练习"></a>十、实战练习</h2><h3 id="1-多表联合查询"><a href="#1-多表联合查询" class="headerlink" title="1. 多表联合查询"></a>1. 多表联合查询</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SELECT o.order_id, c.customer_name, p.product_name</span><br><span class="line">FROM orders o</span><br><span class="line">JOIN customers c ON o.customer_id = c.customer_id</span><br><span class="line">JOIN order_items oi ON o.order_id = oi.order_id</span><br><span class="line">JOIN products p ON oi.product_id = p.product_id</span><br><span class="line">WHERE o.order_date &gt; &#x27;2023-01-01&#x27;</span><br><span class="line">ORDER BY o.order_date DESC;</span><br></pre></td></tr></table></figure><h3 id="2-复杂统计报表"><a href="#2-复杂统计报表" class="headerlink" title="2. 复杂统计报表"></a>2. 复杂统计报表</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">SELECT </span><br><span class="line">    YEAR(order_date) AS &#x27;年份&#x27;,</span><br><span class="line">    MONTH(order_date) AS &#x27;月份&#x27;,</span><br><span class="line">    COUNT(*) AS &#x27;订单数&#x27;,</span><br><span class="line">    SUM(amount) AS &#x27;总金额&#x27;,</span><br><span class="line">    AVG(amount) AS &#x27;平均金额&#x27;</span><br><span class="line">FROM orders</span><br><span class="line">GROUP BY YEAR(order_date), MONTH(order_date)</span><br><span class="line">HAVING COUNT(*) &gt; 10</span><br><span class="line">ORDER BY 年份 DESC, 月份 ASC;</span><br></pre></td></tr></table></figure><h3 id="3-数据清洗转换"><a href="#3-数据清洗转换" class="headerlink" title="3. 数据清洗转换"></a>3. 数据清洗转换</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-- 将旧数据迁移到新表</span><br><span class="line">INSERT INTO new_employees(id, full_name, contact)</span><br><span class="line">SELECT </span><br><span class="line">    emp_id, </span><br><span class="line">    CONCAT(first_name, &#x27; &#x27;, last_name),</span><br><span class="line">    COALESCE(mobile, email, &#x27;无联系方式&#x27;)</span><br><span class="line">FROM old_employee_data</span><br><span class="line">WHERE status = &#x27;active&#x27;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql数据库学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>karword项目开发日志（1）</title>
      <link href="/2025/04/15/karword%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E6%97%A5%E5%BF%97/"/>
      <url>/2025/04/15/karword%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E6%97%A5%E5%BF%97/</url>
      
        <content type="html"><![CDATA[<h1 id="karword项目开发日志"><a href="#karword项目开发日志" class="headerlink" title="karword项目开发日志"></a>karword项目开发日志</h1><blockquote><p>该程序是一个卡片式树的综合多人辅助开发平台，内置功能，可视为迷你飞书</p></blockquote><h2 id="项目概述"><a href="#项目概述" class="headerlink" title="项目概述"></a>项目概述</h2><p>开发一个面向团队的知识管理协作平台，核心功能包括：</p><ul><li>卡片式文档管理系统</li><li>可视化图表编辑（流程图/结构图/甘特图）</li><li>实时团队协作</li><li>集成通讯功能</li></ul><h2 id="技术架构"><a href="#技术架构" class="headerlink" title="技术架构"></a>技术架构</h2><h3 id="前端技术栈"><a href="#前端技术栈" class="headerlink" title="前端技术栈"></a>前端技术栈</h3><div class="table-container"><table><thead><tr><th>模块</th><th>技术选型</th><th>备注</th></tr></thead><tbody><tr><td>框架</td><td>React 18 + TypeScript</td><td>使用Vite构建工具</td></tr><tr><td>状态管理</td><td>Redux Toolkit</td><td>配合RTK Query处理API</td></tr><tr><td>UI组件库</td><td>Ant Design 5.x</td><td>企业级UI组件</td></tr><tr><td>富文本编辑器</td><td>Tiptap</td><td>基于ProseMirror的现代编辑器</td></tr><tr><td>图表渲染</td><td>Mermaid + ECharts</td><td>Mermaid用于流程图/时序图</td></tr><tr><td>实时协作</td><td>Socket.IO Client</td><td>与后端WebSocket通信</td></tr><tr><td>拖拽交互</td><td>react-dnd</td><td>卡片和图表元素拖拽</td></tr></tbody></table></div><h3 id="后端技术栈"><a href="#后端技术栈" class="headerlink" title="后端技术栈"></a>后端技术栈</h3><div class="table-container"><table><thead><tr><th>模块</th><th>技术选型</th><th>备注</th></tr></thead><tbody><tr><td>主框架</td><td>Spring Boot 3.x</td><td>Java 17+</td></tr><tr><td>数据库</td><td>PostgreSQL 15</td><td>关系型数据库</td></tr><tr><td>ORM</td><td>Spring Data JPA</td><td>配合Hibernate</td></tr><tr><td>缓存</td><td>Redis 7</td><td>会话缓存和频繁访问数据</td></tr><tr><td>实时通讯</td><td>WebSocket (STOMP)</td><td>通过Spring Messaging实现</td></tr><tr><td>文件存储</td><td>MinIO</td><td>自托管对象存储</td></tr><tr><td>搜索</td><td>Elasticsearch 8.x</td><td>全文检索功能</td></tr><tr><td>安全</td><td>Spring Security + JWT</td><td>OAuth2.0备用方案</td></tr></tbody></table></div><p>以上为明确使用的技术栈，本篇日志为第一部分，暨搭建Karwork项目的基础框架，包括Spring Boot后端和React前端。</p><p>整体过程可以视为<br>Spring Boot后端搭建—&gt;React前端搭建—&gt;前后端连接（本项目不提前连接）</p><h2 id="Spring-Boot后端搭建"><a href="#Spring-Boot后端搭建" class="headerlink" title="Spring Boot后端搭建"></a>Spring Boot后端搭建</h2><h3 id="1-创建Spring-Boot项目"><a href="#1-创建Spring-Boot项目" class="headerlink" title="1. 创建Spring Boot项目"></a>1. 创建Spring Boot项目</h3><ol><li>打开IntelliJ IDEA，点击”New Project”</li><li>选择”Spring Initializr”</li><li>配置项目信息：<ul><li>Name: <code>karwork-backend</code></li><li>Location: 选择你的项目目录</li><li>Type: Maven</li><li>Language: Java</li><li>Group: <code>com.karwork</code></li><li>Artifact: <code>karwork-backend</code></li><li>Package name: <code>com.karwork</code></li><li>Java: 选择17或更高版本</li></ul></li></ol><blockquote><p>以上的是可选条目，告知详细操作过程</p></blockquote><h3 id="2-添加依赖"><a href="#2-添加依赖" class="headerlink" title="2. 添加依赖"></a>2. 添加依赖</h3><p>选择以下依赖：</p><ul><li>Spring Web</li><li>Spring Data JPA</li><li>PostgreSQL Driver</li><li>Lombok</li><li>Spring Security</li><li>Spring Boot DevTools</li></ul><p>点击”Create”完成项目创建。</p><h3 id="3-配置数据库"><a href="#3-配置数据库" class="headerlink" title="3. 配置数据库"></a>3. 配置数据库</h3><p>数据库需要提前配置，注意以下字段的’password=yourpassword’和’username=postgres’字段更改，检查5432端口是否被占用</p><blockquote><p>我会标记出所在项目的文件夹位置，帮助项目构建</p></blockquote><ol><li>在<code>src/main/resources/application.properties</code>中添加：<figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开发环境配置</span></span><br><span class="line"><span class="attr">spring.datasource.url</span>=<span class="string">jdbc:postgresql://localhost:5432/karwork</span></span><br><span class="line"><span class="attr">spring.datasource.username</span>=<span class="string">postgres</span></span><br><span class="line"><span class="attr">spring.datasource.password</span>=<span class="string">yourpassword</span></span><br><span class="line"><span class="attr">spring.datasource.driver-class-name</span>=<span class="string">org.postgresql.Driver</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># JPA配置</span></span><br><span class="line"><span class="attr">spring.jpa.hibernate.ddl-auto</span>=<span class="string">update</span></span><br><span class="line"><span class="attr">spring.jpa.show-sql</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">spring.jpa.properties.hibernate.format_sql</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 开发时关闭安全验证</span></span><br><span class="line"><span class="attr">spring.autoconfigure.exclude</span>=<span class="string">org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="4-创建基础包结构"><a href="#4-创建基础包结构" class="headerlink" title="4. 创建基础包结构"></a>4. 创建基础包结构</h3><p>&gt;</p><p>在<code>src/main/java/com/karwork</code>下创建以下包：</p><ul><li><code>config</code></li><li><code>controller</code></li><li><code>service</code></li><li><code>repository</code></li><li><code>model</code></li><li><code>dto</code></li><li><code>exception</code></li><li><code>websocket</code></li></ul><p>以上均为文件名，自行创建，也可以使用指令创建</p><h3 id="5-创建基础实体类"><a href="#5-创建基础实体类" class="headerlink" title="5. 创建基础实体类"></a>5. 创建基础实体类</h3><p>在<code>model</code>包中创建<code>User.java</code>：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.karwork.model;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.persistence.*;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.annotations.GenericGenerator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table(name = &quot;users&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue(generator = &quot;UUID&quot;)</span></span><br><span class="line">    <span class="meta">@GenericGenerator(name = &quot;UUID&quot;, strategy = &quot;org.hibernate.id.UUIDGenerator&quot;)</span></span><br><span class="line">    <span class="meta">@Column(updatable = false, nullable = false)</span></span><br><span class="line">    <span class="keyword">private</span> UUID userId;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(nullable = false, unique = true)</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(nullable = false, unique = true)</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(nullable = false)</span></span><br><span class="line">    <span class="keyword">private</span> String passwordHash;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(nullable = false, updatable = false)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">LocalDateTime</span> <span class="variable">createdAt</span> <span class="operator">=</span> LocalDateTime.now();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="6-创建Repository接口"><a href="#6-创建Repository接口" class="headerlink" title="6. 创建Repository接口"></a>6. 创建Repository接口</h3><p>在<code>repository</code>包中创建<code>UserRepository.java</code>：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.karwork.repository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.karwork.model.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.jpa.repository.JpaRepository;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Optional;</span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserRepository</span> <span class="keyword">extends</span> <span class="title class_">JpaRepository</span>&lt;User, UUID&gt; &#123;</span><br><span class="line">    Optional&lt;User&gt; <span class="title function_">findByUsername</span><span class="params">(String username)</span>;</span><br><span class="line">    Optional&lt;User&gt; <span class="title function_">findByEmail</span><span class="params">(String email)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="7-创建基础Controller"><a href="#7-创建基础Controller" class="headerlink" title="7. 创建基础Controller"></a>7. 创建基础Controller</h3><p>在<code>controller</code>包中创建<code>AuthController.java</code>：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.karwork.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/api/auth&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AuthController</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@GetMapping(&quot;/status&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">status</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Auth service is running&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="8-运行项目"><a href="#8-运行项目" class="headerlink" title="8. 运行项目"></a>8. 运行项目</h3><ol><li>确保PostgreSQL已安装并运行</li><li>创建名为<code>karwork</code>的数据库</li><li>右键点击<code>KarworkBackendApplication.java</code> -&gt; Run</li><li>访问<code>http://localhost:8080/api/auth/status</code>测试</li></ol><h2 id="React前端搭建"><a href="#React前端搭建" class="headerlink" title="React前端搭建"></a>React前端搭建</h2><h3 id="1-创建React项目"><a href="#1-创建React项目" class="headerlink" title="1. 创建React项目"></a>1. 创建React项目</h3><ol><li>打开终端，导航到你的项目目录</li><li>运行命令：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm create vite@latest karwork-frontend -- --template react-ts</span><br><span class="line"><span class="built_in">cd</span> karwork-frontend</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure></li></ol><h3 id="2-安装必要依赖"><a href="#2-安装必要依赖" class="headerlink" title="2. 安装必要依赖"></a>2. 安装必要依赖</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install @reduxjs/toolkit react-redux axios antd @ant-design/icons react-router-dom socket.io-client react-dnd react-dnd-html5-backend</span><br><span class="line">npm install --save-dev @types/react @types/react-dom @types/react-router-dom</span><br></pre></td></tr></table></figure><h3 id="3-配置项目结构"><a href="#3-配置项目结构" class="headerlink" title="3. 配置项目结构"></a>3. 配置项目结构</h3><p>按照以下结构组织你的前端项目：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">karwork-frontend/</span><br><span class="line">├── public/</span><br><span class="line">├── src/</span><br><span class="line">│   ├── api/</span><br><span class="line">│   ├── assets/</span><br><span class="line">│   ├── components/</span><br><span class="line">│   ├── features/</span><br><span class="line">│   │   ├── auth/</span><br><span class="line">│   │   ├── editor/</span><br><span class="line">│   │   ├── diagram/</span><br><span class="line">│   │   └── chat/</span><br><span class="line">│   ├── hooks/</span><br><span class="line">│   ├── stores/</span><br><span class="line">│   ├── types/</span><br><span class="line">│   ├── utils/</span><br><span class="line">│   ├── App.tsx</span><br><span class="line">│   ├── main.tsx</span><br><span class="line">│   └── vite-env.d.ts</span><br></pre></td></tr></table></figure></p><h3 id="4-创建基础Redux-Store"><a href="#4-创建基础Redux-Store" class="headerlink" title="4. 创建基础Redux Store"></a>4. 创建基础Redux Store</h3><p>在<code>stores</code>文件夹中创建<code>store.ts</code>：<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; configureStore &#125; <span class="keyword">from</span> <span class="string">&#x27;@reduxjs/toolkit&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">TypedUseSelectorHook</span>, useDispatch, useSelector &#125; <span class="keyword">from</span> <span class="string">&#x27;react-redux&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> store = <span class="title function_">configureStore</span>(&#123;</span><br><span class="line">  <span class="attr">reducer</span>: &#123;</span><br><span class="line">    <span class="comment">// 这里添加你的reducer</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> <span class="title class_">RootState</span> = <span class="title class_">ReturnType</span>&lt;<span class="keyword">typeof</span> store.<span class="property">getState</span>&gt;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> <span class="title class_">AppDispatch</span> = <span class="keyword">typeof</span> store.<span class="property">dispatch</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">useAppDispatch</span> = (<span class="params"></span>) =&gt; useDispatch&lt;<span class="title class_">AppDispatch</span>&gt;();</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="attr">useAppSelector</span>: <span class="title class_">TypedUseSelectorHook</span>&lt;<span class="title class_">RootState</span>&gt; = useSelector;</span><br></pre></td></tr></table></figure></p><h3 id="5-创建基础布局"><a href="#5-创建基础布局" class="headerlink" title="5. 创建基础布局"></a>5. 创建基础布局</h3><p>在<code>components</code>文件夹中创建<code>Layout.tsx</code>：<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Layout</span> <span class="keyword">as</span> <span class="title class_">AntdLayout</span>, <span class="title class_">Menu</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;antd&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Outlet</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">Header</span>, <span class="title class_">Content</span> &#125; = <span class="title class_">AntdLayout</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">Layout</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">AntdLayout</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">minHeight:</span> &#x27;<span class="attr">100vh</span>&#x27; &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Header</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">color:</span> &#x27;<span class="attr">white</span>&#x27; &#125;&#125;&gt;</span>Karwork<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Header</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Content</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">padding:</span> &#x27;<span class="attr">24px</span>&#x27; &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Outlet</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Content</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">AntdLayout</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h3 id="6-配置路由"><a href="#6-配置路由" class="headerlink" title="6. 配置路由"></a>6. 配置路由</h3><p>修改<code>App.tsx</code>：<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">BrowserRouter</span>, <span class="title class_">Routes</span>, <span class="title class_">Route</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Layout</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./components/Layout&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">HomePage</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./features/auth/HomePage&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">BrowserRouter</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Routes</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/&quot;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Layout</span> /&gt;</span>&#125;&gt;</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Route</span> <span class="attr">index</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">HomePage</span> /&gt;</span>&#125; /&gt;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Routes</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">BrowserRouter</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure></p><h3 id="7-创建首页"><a href="#7-创建首页" class="headerlink" title="7. 创建首页"></a>7. 创建首页</h3><p>在<code>features/auth</code>中创建<code>HomePage.tsx</code>：<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">HomePage</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Welcome to Karwork<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h3 id="8-配置API客户端"><a href="#8-配置API客户端" class="headerlink" title="8. 配置API客户端"></a>8. 配置API客户端</h3><p>在<code>api</code>文件夹中创建<code>client.ts</code>：<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> apiClient = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">  <span class="attr">baseURL</span>: <span class="string">&#x27;http://localhost:8080/api&#x27;</span>,</span><br><span class="line">  <span class="attr">withCredentials</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h3 id="9-运行前端项目"><a href="#9-运行前端项目" class="headerlink" title="9. 运行前端项目"></a>9. 运行前端项目</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure><p>访问<code>http://localhost:5173</code>测试</p><p>到此为止基本已完成前后端的框架构建，以下是可能遇见的问题</p><h2 id="1-时刻校验准备项目结构清单"><a href="#1-时刻校验准备项目结构清单" class="headerlink" title="1.时刻校验准备项目结构清单"></a>1.时刻校验准备项目结构清单</h2><pre><code>这是项目标准化的重要工作，这个项目本身就是在简化这个过程，一定时刻确认项目结构清单</code></pre><h2 id="2-清理依赖，用到的时候再启动"><a href="#2-清理依赖，用到的时候再启动" class="headerlink" title="2.清理依赖，用到的时候再启动"></a>2.清理依赖，用到的时候再启动</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;!-- Web核心 --&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 数据访问（保留JPA或MyBatis任选其一） --&gt;</span><br><span class="line">    &lt;!-- 选项1：使用JPA --&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;!-- 选项2：使用MyBatis（注释掉JPA） --&gt;</span><br><span class="line">    &lt;!--</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;3.0.4&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 数据库驱动（只保留你实际使用的） --&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.postgresql&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;postgresql&lt;/artifactId&gt;</span><br><span class="line">        &lt;scope&gt;runtime&lt;/scope&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;!-- 如果使用MySQL，注释掉PostgreSQL --&gt;</span><br><span class="line">    &lt;!--</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;com.mysql&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;mysql-connector-j&lt;/artifactId&gt;</span><br><span class="line">        &lt;scope&gt;runtime&lt;/scope&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 开发工具 --&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;</span><br><span class="line">        &lt;scope&gt;runtime&lt;/scope&gt;</span><br><span class="line">        &lt;optional&gt;true&lt;/optional&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- Lombok --&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">        &lt;optional&gt;true&lt;/optional&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 测试 --&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">        &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><p>防止xml文件污染，适当截取</p><h2 id="3-确认包扫描路径找到，必要时请使用标签标注"><a href="#3-确认包扫描路径找到，必要时请使用标签标注" class="headerlink" title="3.确认包扫描路径找到，必要时请使用标签标注"></a>3.确认包扫描路径找到，必要时请使用标签标注</h2><p>所遇到的问题，我之后会单独拉一个页面来展示</p>]]></content>
      
      
      <categories>
          
          <category> 开发日志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目开发日志 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法与数据结构核心思想与解题蓝图</title>
      <link href="/2025/04/02/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%A0%B8%E5%BF%83%E6%80%9D%E6%83%B3%E4%B8%8E%E8%A7%A3%E9%A2%98%E8%93%9D%E5%9B%BE/"/>
      <url>/2025/04/02/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%A0%B8%E5%BF%83%E6%80%9D%E6%83%B3%E4%B8%8E%E8%A7%A3%E9%A2%98%E8%93%9D%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<h1 id="算法与数据结构核心思想与解题蓝图"><a href="#算法与数据结构核心思想与解题蓝图" class="headerlink" title="算法与数据结构核心思想与解题蓝图"></a>算法与数据结构核心思想与解题蓝图</h1><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ol><li><a href="#哈希hash">哈希(Hash)</a></li><li><a href="#双指针two-pointers">双指针(Two Pointers)</a></li><li><a href="#滑动窗口sliding-window">滑动窗口(Sliding Window)</a></li><li><a href="#子串substring">子串(Substring)</a></li><li><a href="#普通数组array">普通数组(Array)</a></li><li><a href="#矩阵matrix">矩阵(Matrix)</a></li><li><a href="#链表linked-list">链表(Linked List)</a></li><li><a href="#二叉树binary-tree">二叉树(Binary Tree)</a></li><li><a href="#图论graph-theory">图论(Graph Theory)</a></li><li><a href="#回溯backtracking">回溯(Backtracking)</a></li><li><a href="#二分查找binary-search">二分查找(Binary Search)</a></li><li><a href="#栈stack">栈(Stack)</a></li><li><a href="#贪心算法greedy">贪心算法(Greedy)</a></li><li><a href="#动态规划dp">动态规划(DP)</a></li><li><a href="#多维动态规划multi-dimensional-dp">多维动态规划(Multi-dimensional DP)</a></li><li><a href="#技巧tricks">技巧(Tricks)</a></li></ol><p>接下来我将简单介绍以上16种算法思想及其使用场景</p><p>哈希：快速查找和存储数据<br>双指针：有序数组/链表问题<br>滑动窗口：子数组/子串问题<br>子串：字符串匹配问题<br>普通数组：数组遍历、查找<br>矩阵：二维数组遍历<br>链表：遍历、反转<br>二叉树：遍历、搜索<br>图论：图的遍历<br>回溯：组合、排列<br>二分查找：有序数组查找<br>栈：逆序遍历<br>贪心算法：局部最优解<br>动态规划：最优解<br>多维动态规划：多维数组问题<br>技巧：位运算、前缀和 </p><hr><h2 id="哈希-Hash"><a href="#哈希-Hash" class="headerlink" title="哈希(Hash)"></a>哈希(Hash)</h2><p><strong>核心思想</strong>：利用哈希表(O(1)时间复杂度)快速查找和存储数据<br><strong>适用场景</strong>：需要快速查找/去重的场景，如两数之和、重复元素检测</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 哈希表基本操作</span></span><br><span class="line">Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">map.put(key, value);       <span class="comment">// 存储</span></span><br><span class="line"><span class="type">int</span> <span class="variable">val</span> <span class="operator">=</span> map.get(key);     <span class="comment">// 获取</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">exists</span> <span class="operator">=</span> map.containsKey(key); <span class="comment">// 检查存在</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 典型问题：两数之和</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] twoSum(<span class="type">int</span>[] nums, <span class="type">int</span> target) &#123;</span><br><span class="line">    Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">complement</span> <span class="operator">=</span> target - nums[i];</span><br><span class="line">        <span class="keyword">if</span> (map.containsKey(complement)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;map.get(complement), i&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        map.put(nums[i], i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 哈希集合去重</span></span><br><span class="line">Set&lt;Integer&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">    <span class="keyword">if</span> (set.contains(num)) &#123;</span><br><span class="line">        <span class="comment">// 发现重复</span></span><br><span class="line">    &#125;</span><br><span class="line">    set.add(num);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="双指针-Two-Pointers"><a href="#双指针-Two-Pointers" class="headerlink" title="双指针(Two Pointers)"></a>双指针(Two Pointers)</h2><p><strong>核心思想</strong>：使用两个指针协同遍历数据结构<br><strong>适用场景</strong>：有序数组/链表问题，如归并数组、判断回文</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 左右指针模板（如反转数组）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reverse</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>, right = nums.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> nums[left];</span><br><span class="line">        nums[left++] = nums[right];</span><br><span class="line">        nums[right--] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 快慢指针模板（如链表环检测）</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasCycle</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">slow</span> <span class="operator">=</span> head, fast = head;</span><br><span class="line">    <span class="keyword">while</span> (fast != <span class="literal">null</span> &amp;&amp; fast.next != <span class="literal">null</span>) &#123;</span><br><span class="line">        slow = slow.next;</span><br><span class="line">        fast = fast.next.next;</span><br><span class="line">        <span class="keyword">if</span> (slow == fast) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 三数之和问题</span></span><br><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">threeSum</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    Arrays.sort(nums);</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length - <span class="number">2</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; nums[i] == nums[i-<span class="number">1</span>]) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> i+<span class="number">1</span>, right = nums.length-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> nums[i] + nums[left] + nums[right];</span><br><span class="line">            <span class="keyword">if</span> (sum == <span class="number">0</span>) &#123;</span><br><span class="line">                res.add(Arrays.asList(nums[i], nums[left], nums[right]));</span><br><span class="line">                <span class="keyword">while</span> (left &lt; right &amp;&amp; nums[left] == nums[left+<span class="number">1</span>]) left++;</span><br><span class="line">                <span class="keyword">while</span> (left &lt; right &amp;&amp; nums[right] == nums[right-<span class="number">1</span>]) right--;</span><br><span class="line">                left++; right--;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sum &lt; <span class="number">0</span>) left++;</span><br><span class="line">            <span class="keyword">else</span> right--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="滑动窗口-Sliding-Window"><a href="#滑动窗口-Sliding-Window" class="headerlink" title="滑动窗口(Sliding Window)"></a>滑动窗口(Sliding Window)</h2><p><strong>核心思想</strong>：维护一个可变大小的窗口在数据结构上滑动<br><strong>适用场景</strong>：子数组/子串问题，如最小覆盖子串、最长无重复子串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 滑动窗口模板</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">slidingWindowTemplate</span><span class="params">(String s)</span> &#123;</span><br><span class="line">    Map&lt;Character, Integer&gt; window = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>, right = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">maxLen</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (right &lt; s.length()) &#123;</span><br><span class="line">        <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> s.charAt(right++);</span><br><span class="line">        window.put(c, window.getOrDefault(c, <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (<span class="comment">/* 窗口需要收缩的条件 */</span>) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">d</span> <span class="operator">=</span> s.charAt(left++);</span><br><span class="line">            window.put(d, window.get(d) - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (window.get(d) == <span class="number">0</span>) window.remove(d);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        maxLen = Math.max(maxLen, right - left);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxLen;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最长无重复字符子串</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">lengthOfLongestSubstring</span><span class="params">(String s)</span> &#123;</span><br><span class="line">    Map&lt;Character, Integer&gt; window = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>, right = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">maxLen</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (right &lt; s.length()) &#123;</span><br><span class="line">        <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> s.charAt(right++);</span><br><span class="line">        window.put(c, window.getOrDefault(c, <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (window.get(c) &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">d</span> <span class="operator">=</span> s.charAt(left++);</span><br><span class="line">            window.put(d, window.get(d) - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        maxLen = Math.max(maxLen, right - left);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxLen;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="子串-Substring"><a href="#子串-Substring" class="headerlink" title="子串(Substring)"></a>子串(Substring)</h2><p><strong>核心思想</strong>：处理字符串中的连续字符序列问题<br><strong>适用场景</strong>：字符串匹配、子串查找、回文子串等</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 最长回文子串（中心扩展法）</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">longestPalindrome</span><span class="params">(String s)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (s == <span class="literal">null</span> || s.length() &lt; <span class="number">1</span>) <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> <span class="number">0</span>, end = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len1</span> <span class="operator">=</span> expandAroundCenter(s, i, i);    <span class="comment">// 奇数长度</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">len2</span> <span class="operator">=</span> expandAroundCenter(s, i, i + <span class="number">1</span>); <span class="comment">// 偶数长度</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> Math.max(len1, len2);</span><br><span class="line">        <span class="keyword">if</span> (len &gt; end - start) &#123;</span><br><span class="line">            start = i - (len - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">            end = i + len / <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s.substring(start, end + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="title function_">expandAroundCenter</span><span class="params">(String s, <span class="type">int</span> left, <span class="type">int</span> right)</span> &#123;</span><br><span class="line">    <span class="keyword">while</span> (left &gt;= <span class="number">0</span> &amp;&amp; right &lt; s.length() &amp;&amp; s.charAt(left) == s.charAt(right)) &#123;</span><br><span class="line">        left--;</span><br><span class="line">        right++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> right - left - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// KMP算法（字符串匹配）</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">strStr</span><span class="params">(String haystack, String needle)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (needle.isEmpty()) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span>[] lps = computeLPSArray(needle);</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; haystack.length()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (haystack.charAt(i) == needle.charAt(j)) &#123;</span><br><span class="line">            i++; j++;</span><br><span class="line">            <span class="keyword">if</span> (j == needle.length()) <span class="keyword">return</span> i - j;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (j != <span class="number">0</span>) j = lps[j-<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">else</span> i++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span>[] computeLPSArray(String pattern) &#123;</span><br><span class="line">    <span class="type">int</span>[] lps = <span class="keyword">new</span> <span class="title class_">int</span>[pattern.length()];</span><br><span class="line">    <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> <span class="number">0</span>, i = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; pattern.length()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (pattern.charAt(i) == pattern.charAt(len)) &#123;</span><br><span class="line">            lps[i++] = ++len;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (len != <span class="number">0</span>) len = lps[len-<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">else</span> lps[i++] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> lps;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="普通数组-Array"><a href="#普通数组-Array" class="headerlink" title="普通数组(Array)"></a>普通数组(Array)</h2><p><strong>核心思想</strong>：利用数组索引和元素关系解决问题<br><strong>适用场景</strong>：元素操作、排序、搜索等基础问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数组反转</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reverseArray</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length / <span class="number">2</span>; i++) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> nums[i];</span><br><span class="line">        nums[i] = nums[nums.length - <span class="number">1</span> - i];</span><br><span class="line">        nums[nums.length - <span class="number">1</span> - i] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 荷兰国旗问题（三向切分）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sortColors</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">low</span> <span class="operator">=</span> <span class="number">0</span>, high = nums.length - <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= high) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums[i] == <span class="number">0</span>) &#123;</span><br><span class="line">            swap(nums, low++, i++);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[i] == <span class="number">2</span>) &#123;</span><br><span class="line">            swap(nums, i, high--);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> nums[i];</span><br><span class="line">    nums[i] = nums[j];</span><br><span class="line">    nums[j] = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 前缀和数组</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PrefixSum</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span>[] prefix;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">PrefixSum</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        prefix = <span class="keyword">new</span> <span class="title class_">int</span>[nums.length + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            prefix[i + <span class="number">1</span>] = prefix[i] + nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sumRange</span><span class="params">(<span class="type">int</span> left, <span class="type">int</span> right)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> prefix[right + <span class="number">1</span>] - prefix[left];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="矩阵-Matrix"><a href="#矩阵-Matrix" class="headerlink" title="矩阵(Matrix)"></a>矩阵(Matrix)</h2><p><strong>核心思想</strong>：二维数组的特殊遍历和操作技巧<br><strong>适用场景</strong>：图像处理、矩阵运算、二维搜索等</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 螺旋矩阵遍历</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">spiralOrder</span><span class="params">(<span class="type">int</span>[][] matrix)</span> &#123;</span><br><span class="line">    List&lt;Integer&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">if</span> (matrix == <span class="literal">null</span> || matrix.length == <span class="number">0</span>) <span class="keyword">return</span> res;</span><br><span class="line">    <span class="type">int</span> <span class="variable">top</span> <span class="operator">=</span> <span class="number">0</span>, bottom = matrix.length - <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>, right = matrix[<span class="number">0</span>].length - <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="comment">// 从左到右</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> left; i &lt;= right; i++) res.add(matrix[top][i]);</span><br><span class="line">        <span class="keyword">if</span> (++top &gt; bottom) <span class="keyword">break</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 从上到下</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> top; i &lt;= bottom; i++) res.add(matrix[i][right]);</span><br><span class="line">        <span class="keyword">if</span> (--right &lt; left) <span class="keyword">break</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 从右到左</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> right; i &gt;= left; i--) res.add(matrix[bottom][i]);</span><br><span class="line">        <span class="keyword">if</span> (--bottom &lt; top) <span class="keyword">break</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 从下到上</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> bottom; i &gt;= top; i--) res.add(matrix[i][left]);</span><br><span class="line">        <span class="keyword">if</span> (++left &gt; right) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 旋转图像（原地旋转90度）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rotate</span><span class="params">(<span class="type">int</span>[][] matrix)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> matrix.length;</span><br><span class="line">    <span class="comment">// 先转置矩阵</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i; j &lt; n; j++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> matrix[i][j];</span><br><span class="line">            matrix[i][j] = matrix[j][i];</span><br><span class="line">            matrix[j][i] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 再翻转每一行</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n / <span class="number">2</span>; j++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> matrix[i][j];</span><br><span class="line">            matrix[i][j] = matrix[i][n - <span class="number">1</span> - j];</span><br><span class="line">            matrix[i][n - <span class="number">1</span> - j] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 岛屿数量（DFS）</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">numIslands</span><span class="params">(<span class="type">char</span>[][] grid)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (grid == <span class="literal">null</span> || grid.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; grid.length; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; grid[<span class="number">0</span>].length; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (grid[i][j] == <span class="string">&#x27;1&#x27;</span>) &#123;</span><br><span class="line">                dfs(grid, i, j);</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">char</span>[][] grid, <span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (i &lt; <span class="number">0</span> || j &lt; <span class="number">0</span> || i &gt;= grid.length || j &gt;= grid[<span class="number">0</span>].length || grid[i][j] != <span class="string">&#x27;1&#x27;</span>) <span class="keyword">return</span>;</span><br><span class="line">    grid[i][j] = <span class="string">&#x27;0&#x27;</span>; <span class="comment">// 标记为已访问</span></span><br><span class="line">    dfs(grid, i + <span class="number">1</span>, j);</span><br><span class="line">    dfs(grid, i - <span class="number">1</span>, j);</span><br><span class="line">    dfs(grid, i, j + <span class="number">1</span>);</span><br><span class="line">    dfs(grid, i, j - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="链表-Linked-List"><a href="#链表-Linked-List" class="headerlink" title="链表(Linked List)"></a>链表(Linked List)</h2><p><strong>核心思想</strong>：指针操作和虚拟头节点技巧<br><strong>适用场景</strong>：链表反转、环检测、节点操作等</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 链表节点定义</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ListNode</span> &#123;</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    ListNode next;</span><br><span class="line">    ListNode(<span class="type">int</span> x) &#123; val = x; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 反转链表（迭代）</span></span><br><span class="line"><span class="keyword">public</span> ListNode <span class="title function_">reverseList</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">prev</span> <span class="operator">=</span> <span class="literal">null</span>, curr = head;</span><br><span class="line">    <span class="keyword">while</span> (curr != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">nextTemp</span> <span class="operator">=</span> curr.next;</span><br><span class="line">        curr.next = prev;</span><br><span class="line">        prev = curr;</span><br><span class="line">        curr = nextTemp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> prev;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 反转链表（递归）</span></span><br><span class="line"><span class="keyword">public</span> ListNode <span class="title function_">reverseListRecursive</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (head == <span class="literal">null</span> || head.next == <span class="literal">null</span>) <span class="keyword">return</span> head;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">p</span> <span class="operator">=</span> reverseListRecursive(head.next);</span><br><span class="line">    head.next.next = head;</span><br><span class="line">    head.next = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 合并两个有序链表</span></span><br><span class="line"><span class="keyword">public</span> ListNode <span class="title function_">mergeTwoLists</span><span class="params">(ListNode l1, ListNode l2)</span> &#123;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">dummy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">curr</span> <span class="operator">=</span> dummy;</span><br><span class="line">    <span class="keyword">while</span> (l1 != <span class="literal">null</span> &amp;&amp; l2 != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (l1.val &lt; l2.val) &#123;</span><br><span class="line">            curr.next = l1;</span><br><span class="line">            l1 = l1.next;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            curr.next = l2;</span><br><span class="line">            l2 = l2.next;</span><br><span class="line">        &#125;</span><br><span class="line">        curr = curr.next;</span><br><span class="line">    &#125;</span><br><span class="line">    curr.next = l1 != <span class="literal">null</span> ? l1 : l2;</span><br><span class="line">    <span class="keyword">return</span> dummy.next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检测链表环并找到入口</span></span><br><span class="line"><span class="keyword">public</span> ListNode <span class="title function_">detectCycle</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">slow</span> <span class="operator">=</span> head, fast = head;</span><br><span class="line">    <span class="keyword">while</span> (fast != <span class="literal">null</span> &amp;&amp; fast.next != <span class="literal">null</span>) &#123;</span><br><span class="line">        slow = slow.next;</span><br><span class="line">        fast = fast.next.next;</span><br><span class="line">        <span class="keyword">if</span> (slow == fast) &#123;</span><br><span class="line">            <span class="type">ListNode</span> <span class="variable">ptr</span> <span class="operator">=</span> head;</span><br><span class="line">            <span class="keyword">while</span> (ptr != slow) &#123;</span><br><span class="line">                ptr = ptr.next;</span><br><span class="line">                slow = slow.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> ptr;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="二叉树-Binary-Tree"><a href="#二叉树-Binary-Tree" class="headerlink" title="二叉树(Binary Tree)"></a>二叉树(Binary Tree)</h2><p><strong>核心思想</strong>：递归和迭代遍历，分治思想<br><strong>适用场景</strong>：树结构相关问题，如遍历、构造、属性判断等</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 二叉树节点定义</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TreeNode</span> &#123;</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    TreeNode left, right;</span><br><span class="line">    TreeNode(<span class="type">int</span> x) &#123; val = x; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 前序遍历（递归）</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">preorderTraversal</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    List&lt;Integer&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    preorder(root, res);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">preorder</span><span class="params">(TreeNode node, List&lt;Integer&gt; res)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (node == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">    res.add(node.val);</span><br><span class="line">    preorder(node.left, res);</span><br><span class="line">    preorder(node.right, res);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 中序遍历（迭代）</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">inorderTraversal</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    List&lt;Integer&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">    <span class="type">TreeNode</span> <span class="variable">curr</span> <span class="operator">=</span> root;</span><br><span class="line">    <span class="keyword">while</span> (curr != <span class="literal">null</span> || !stack.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">while</span> (curr != <span class="literal">null</span>) &#123;</span><br><span class="line">            stack.push(curr);</span><br><span class="line">            curr = curr.left;</span><br><span class="line">        &#125;</span><br><span class="line">        curr = stack.pop();</span><br><span class="line">        res.add(curr.val);</span><br><span class="line">        curr = curr.right;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 层次遍历（BFS）</span></span><br><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">levelOrder</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span> res;</span><br><span class="line">    Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    queue.offer(root);</span><br><span class="line">    <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">levelSize</span> <span class="operator">=</span> queue.size();</span><br><span class="line">        List&lt;Integer&gt; level = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; levelSize; i++) &#123;</span><br><span class="line">            <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> queue.poll();</span><br><span class="line">            level.add(node.val);</span><br><span class="line">            <span class="keyword">if</span> (node.left != <span class="literal">null</span>) queue.offer(node.left);</span><br><span class="line">            <span class="keyword">if</span> (node.right != <span class="literal">null</span>) queue.offer(node.right);</span><br><span class="line">        &#125;</span><br><span class="line">        res.add(level);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 二叉树的最大深度</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxDepth</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> + Math.max(maxDepth(root.left), maxDepth(root.right));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="图论-Graph-Theory"><a href="#图论-Graph-Theory" class="headerlink" title="图论(Graph Theory)"></a>图论(Graph Theory)</h2><p><strong>核心思想</strong>：DFS/BFS遍历，并查集，最短路径算法<br><strong>适用场景</strong>：网络结构、路径查找、连通性问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 图的邻接表表示</span></span><br><span class="line">List&lt;List&lt;Integer&gt;&gt; graph = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">// DFS遍历</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> node, <span class="type">boolean</span>[] visited, List&lt;List&lt;Integer&gt;&gt; graph)</span> &#123;</span><br><span class="line">    visited[node] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> neighbor : graph.get(node)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!visited[neighbor]) &#123;</span><br><span class="line">            dfs(neighbor, visited, graph);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// BFS遍历</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">bfs</span><span class="params">(<span class="type">int</span> start, List&lt;List&lt;Integer&gt;&gt; graph)</span> &#123;</span><br><span class="line">    <span class="type">boolean</span>[] visited = <span class="keyword">new</span> <span class="title class_">boolean</span>[graph.size()];</span><br><span class="line">    Queue&lt;Integer&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    queue.offer(start);</span><br><span class="line">    visited[start] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">node</span> <span class="operator">=</span> queue.poll();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> neighbor : graph.get(node)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!visited[neighbor]) &#123;</span><br><span class="line">                visited[neighbor] = <span class="literal">true</span>;</span><br><span class="line">                queue.offer(neighbor);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Dijkstra算法（最短路径）</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] dijkstra(List&lt;List&lt;<span class="type">int</span>[]&gt;&gt; graph, <span class="type">int</span> start) &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> graph.size();</span><br><span class="line">    <span class="type">int</span>[] dist = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">    Arrays.fill(dist, Integer.MAX_VALUE);</span><br><span class="line">    dist[start] = <span class="number">0</span>;</span><br><span class="line">    PriorityQueue&lt;<span class="type">int</span>[]&gt; pq = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;((a, b) -&gt; a[<span class="number">1</span>] - b[<span class="number">1</span>]);</span><br><span class="line">    pq.offer(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;start, <span class="number">0</span>&#125;);</span><br><span class="line">    <span class="keyword">while</span> (!pq.isEmpty()) &#123;</span><br><span class="line">        <span class="type">int</span>[] curr = pq.poll();</span><br><span class="line">        <span class="type">int</span> <span class="variable">u</span> <span class="operator">=</span> curr[<span class="number">0</span>], d = curr[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span> (d &gt; dist[u]) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] edge : graph.get(u)) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">v</span> <span class="operator">=</span> edge[<span class="number">0</span>], w = edge[<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> (dist[v] &gt; dist[u] + w) &#123;</span><br><span class="line">                dist[v] = dist[u] + w;</span><br><span class="line">                pq.offer(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;v, dist[v]&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dist;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 并查集实现</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UnionFind</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span>[] parent;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UnionFind</span><span class="params">(<span class="type">int</span> size)</span> &#123;</span><br><span class="line">        parent = <span class="keyword">new</span> <span class="title class_">int</span>[size];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i++) parent[i] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">find</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (parent[x] != x) parent[x] = find(parent[x]);</span><br><span class="line">        <span class="keyword">return</span> parent[x];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">union</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line">        parent[find(x)] = find(y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="回溯-Backtracking"><a href="#回溯-Backtracking" class="headerlink" title="回溯(Backtracking)"></a>回溯(Backtracking)</h2><p><strong>核心思想</strong>：尝试-回溯-剪枝，系统性地搜索解空间<br><strong>适用场景</strong>：排列组合、子集、棋盘类问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 回溯模板</span></span><br><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">backtrack</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    backtrackHelper(res, <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(), nums, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">backtrackHelper</span><span class="params">(List&lt;List&lt;Integer&gt;&gt; res, List&lt;Integer&gt; temp, <span class="type">int</span>[] nums, <span class="type">int</span> start)</span> &#123;</span><br><span class="line">    <span class="comment">// 满足条件时加入结果</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="comment">/* 终止条件 */</span>) &#123;</span><br><span class="line">        res.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(temp));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> start; i &lt; nums.length; i++) &#123;</span><br><span class="line">        <span class="comment">// 剪枝条件</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="comment">/* 剪枝 */</span>) <span class="keyword">continue</span>;</span><br><span class="line">        temp.add(nums[i]); <span class="comment">// 做选择</span></span><br><span class="line">        backtrackHelper(res, temp, nums, i + <span class="number">1</span>); <span class="comment">// 递归</span></span><br><span class="line">        temp.remove(temp.size() - <span class="number">1</span>); <span class="comment">// 撤销选择</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 全排列</span></span><br><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">permute</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    backtrack(nums, <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(), res);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">backtrack</span><span class="params">(<span class="type">int</span>[] nums, List&lt;Integer&gt; temp, List&lt;List&lt;Integer&gt;&gt; res)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (temp.size() == nums.length) &#123;</span><br><span class="line">        res.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(temp));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (temp.contains(nums[i])) <span class="keyword">continue</span>; <span class="comment">// 剪枝</span></span><br><span class="line">        temp.add(nums[i]);</span><br><span class="line">        backtrack(nums, temp, res);</span><br><span class="line">        temp.remove(temp.size() - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// N皇后问题</span></span><br><span class="line"><span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; <span class="title function_">solveNQueens</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">    List&lt;List&lt;String&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="type">char</span>[][] board = <span class="keyword">new</span> <span class="title class_">char</span>[n][n];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">char</span>[] row : board) Arrays.fill(row, <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">    backtrack(res, board, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">backtrack</span><span class="params">(List&lt;List&lt;String&gt;&gt; res, <span class="type">char</span>[][] board, <span class="type">int</span> row)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (row == board.length) &#123;</span><br><span class="line">        res.add(construct(board));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">col</span> <span class="operator">=</span> <span class="number">0</span>; col &lt; board.length; col++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (isValid(board, row, col)) &#123;</span><br><span class="line">            board[row][col] = <span class="string">&#x27;Q&#x27;</span>;</span><br><span class="line">            backtrack(res, board, row + <span class="number">1</span>);</span><br><span class="line">            board[row][col] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(<span class="type">char</span>[][] board, <span class="type">int</span> row, <span class="type">int</span> col)</span> &#123;</span><br><span class="line">    <span class="comment">// 检查列</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; row; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (board[i][col] == <span class="string">&#x27;Q&#x27;</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 检查左上对角线</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> row-<span class="number">1</span>, j = col-<span class="number">1</span>; i &gt;=<span class="number">0</span> &amp;&amp; j &gt;=<span class="number">0</span>; i--, j--) &#123;</span><br><span class="line">        <span class="keyword">if</span> (board[i][j] == <span class="string">&#x27;Q&#x27;</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 检查右上对角线</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> row-<span class="number">1</span>, j = col+<span class="number">1</span>; i &gt;=<span class="number">0</span> &amp;&amp; j &lt; board.length; i--, j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (board[i][j] == <span class="string">&#x27;Q&#x27;</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> List&lt;String&gt; <span class="title function_">construct</span><span class="params">(<span class="type">char</span>[][] board)</span> &#123;</span><br><span class="line">    List&lt;String&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">char</span>[] row : board) &#123;</span><br><span class="line">        res.add(<span class="keyword">new</span> <span class="title class_">String</span>(row));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="二分查找-Binary-Search"><a href="#二分查找-Binary-Search" class="headerlink" title="二分查找(Binary Search)"></a>二分查找(Binary Search)</h2><p><strong>核心思想</strong>：每次将搜索范围减半，高效查找<br><strong>适用场景</strong>：有序数据查找，边界查找，旋转数组问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 标准二分查找</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">binarySearch</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>, right = nums.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> left + (right - left) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (nums[mid] == target) <span class="keyword">return</span> mid;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; target) left = mid + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> right = mid - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查找左边界</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">leftBound</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>, right = nums.length;</span><br><span class="line">    <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> left + (right - left) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (nums[mid] &gt;= target) right = mid;</span><br><span class="line">        <span class="keyword">else</span> left = mid + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> left &lt; nums.length &amp;&amp; nums[left] == target ? left : -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查找右边界</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">rightBound</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>, right = nums.length;</span><br><span class="line">    <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> left + (right - left) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (nums[mid] &lt;= target) left = mid + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> right = mid;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> left &gt; <span class="number">0</span> &amp;&amp; nums[left-<span class="number">1</span>] == target ? left-<span class="number">1</span> : -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 旋转数组查找</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">searchInRotatedArray</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>, right = nums.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> left + (right - left) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (nums[mid] == target) <span class="keyword">return</span> mid;</span><br><span class="line">        <span class="comment">// 左半部分有序</span></span><br><span class="line">        <span class="keyword">if</span> (nums[left] &lt;= nums[mid]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[left] &lt;= target &amp;&amp; target &lt; nums[mid]) right = mid - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="comment">// 右半部分有序</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] &lt; target &amp;&amp; target &lt;= nums[right]) left = mid + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> right = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="栈-Stack"><a href="#栈-Stack" class="headerlink" title="栈(Stack)"></a>栈(Stack)</h2><p><strong>核心思想</strong>：LIFO特性，用于处理对称、嵌套类问题<br><strong>适用场景</strong>：括号匹配、表达式求值、单调栈问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 括号匹配</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(String s)</span> &#123;</span><br><span class="line">    Stack&lt;Character&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">char</span> c : s.toCharArray()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">&#x27;(&#x27;</span>) stack.push(<span class="string">&#x27;)&#x27;</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">&#x27;[&#x27;</span>) stack.push(<span class="string">&#x27;]&#x27;</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">&#x27;&#123;&#x27;</span>) stack.push(<span class="string">&#x27;&#125;&#x27;</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (stack.isEmpty() || stack.pop() != c) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> stack.isEmpty();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 单调栈模板（下一个更大元素）</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] nextGreaterElement(<span class="type">int</span>[] nums) &#123;</span><br><span class="line">    <span class="type">int</span>[] res = <span class="keyword">new</span> <span class="title class_">int</span>[nums.length];</span><br><span class="line">    Stack&lt;Integer&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> nums.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">while</span> (!stack.isEmpty() &amp;&amp; stack.peek() &lt;= nums[i]) &#123;</span><br><span class="line">            stack.pop();</span><br><span class="line">        &#125;</span><br><span class="line">        res[i] = stack.isEmpty() ? -<span class="number">1</span> : stack.peek();</span><br><span class="line">        stack.push(nums[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算器（表达式求值）</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">calculate</span><span class="params">(String s)</span> &#123;</span><br><span class="line">    Stack&lt;Integer&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">    <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">0</span>, res = <span class="number">0</span>, sign = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">char</span> c : s.toCharArray()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (Character.isDigit(c)) &#123;</span><br><span class="line">            num = num * <span class="number">10</span> + (c - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">&#x27;+&#x27;</span>) &#123;</span><br><span class="line">            res += sign * num;</span><br><span class="line">            num = <span class="number">0</span>;</span><br><span class="line">            sign = <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">&#x27;-&#x27;</span>) &#123;</span><br><span class="line">            res += sign * num;</span><br><span class="line">            num = <span class="number">0</span>;</span><br><span class="line">            sign = -<span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">            stack.push(res);</span><br><span class="line">            stack.push(sign);</span><br><span class="line">            res = <span class="number">0</span>;</span><br><span class="line">            sign = <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">&#x27;)&#x27;</span>) &#123;</span><br><span class="line">            res += sign * num;</span><br><span class="line">            num = <span class="number">0</span>;</span><br><span class="line">            res *= stack.pop(); <span class="comment">// sign</span></span><br><span class="line">            res += stack.pop(); <span class="comment">// previous res</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (num != <span class="number">0</span>) res += sign * num;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="贪心算法-Greedy"><a href="#贪心算法-Greedy" class="headerlink" title="贪心算法(Greedy)"></a>贪心算法(Greedy)</h2><p><strong>核心思想</strong>：局部最优选择希望导致全局最优<br><strong>适用场景</strong>：区间调度、分配问题、跳跃游戏等</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 区间调度问题（最多不重叠区间）</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">intervalSchedule</span><span class="params">(<span class="type">int</span>[][] intervals)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (intervals.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 按结束时间排序</span></span><br><span class="line">    Arrays.sort(intervals, (a, b) -&gt; a[<span class="number">1</span>] - b[<span class="number">1</span>]);</span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">end</span> <span class="operator">=</span> intervals[<span class="number">0</span>][<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span>[] interval : intervals) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> interval[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">if</span> (start &gt;= end) &#123;</span><br><span class="line">            count++;</span><br><span class="line">            end = interval[<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 跳跃游戏</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">canJump</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">farthest</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &gt; farthest) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        farthest = Math.max(farthest, i + nums[i]);</span><br><span class="line">        <span class="keyword">if</span> (farthest &gt;= nums.length - <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 分发饼干</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findContentChildren</span><span class="params">(<span class="type">int</span>[] g, <span class="type">int</span>[] s)</span> &#123;</span><br><span class="line">    Arrays.sort(g);</span><br><span class="line">    Arrays.sort(s);</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; g.length &amp;&amp; j &lt; s.length) &#123;</span><br><span class="line">        <span class="keyword">if</span> (s[j] &gt;= g[i]) i++;</span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="动态规划-DP"><a href="#动态规划-DP" class="headerlink" title="动态规划(DP)"></a>动态规划(DP)</h2><p><strong>核心思想</strong>：将问题分解为子问题，存储中间结果避免重复计算<br><strong>适用场景</strong>：最优化问题，如最长子序列、背包问题、路径问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 斐波那契数列（记忆化递归）</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">fib</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] memo = <span class="keyword">new</span> <span class="title class_">int</span>[n + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">return</span> helper(n, memo);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="title function_">helper</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span>[] memo)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">1</span>) <span class="keyword">return</span> n;</span><br><span class="line">    <span class="keyword">if</span> (memo[n] != <span class="number">0</span>) <span class="keyword">return</span> memo[n];</span><br><span class="line">    memo[n] = helper(n - <span class="number">1</span>, memo) + helper(n - <span class="number">2</span>, memo);</span><br><span class="line">    <span class="keyword">return</span> memo[n];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 斐波那契数列（迭代）</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">fibIterative</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">1</span>) <span class="keyword">return</span> n;</span><br><span class="line">    <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">0</span>, b = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> a + b;</span><br><span class="line">        a = b;</span><br><span class="line">        b = c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最长递增子序列</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">lengthOfLIS</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[nums.length];</span><br><span class="line">    Arrays.fill(dp, <span class="number">1</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] &gt; nums[j]) &#123;</span><br><span class="line">                dp[i] = Math.max(dp[i], dp[j] + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        max = Math.max(max, dp[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 0-1背包问题</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">knapsack</span><span class="params">(<span class="type">int</span> W, <span class="type">int</span>[] wt, <span class="type">int</span>[] val)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> wt.length;</span><br><span class="line">    <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[n + <span class="number">1</span>][W + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">w</span> <span class="operator">=</span> <span class="number">1</span>; w &lt;= W; w++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (wt[i - <span class="number">1</span>] &lt;= w) &#123;</span><br><span class="line">                dp[i][w] = Math.max(val[i - <span class="number">1</span>] + dp[i - <span class="number">1</span>][w - wt[i - <span class="number">1</span>]], dp[i - <span class="number">1</span>][w]);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                dp[i][w] = dp[i - <span class="number">1</span>][w];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[n][W];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 编辑距离</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minDistance</span><span class="params">(String word1, String word2)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> word1.length(), n = word2.length();</span><br><span class="line">    <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[m + <span class="number">1</span>][n + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= m; i++) dp[i][<span class="number">0</span>] = i;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt;= n; j++) dp[<span class="number">0</span>][j] = j;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (word1.charAt(i - <span class="number">1</span>) == word2.charAt(j - <span class="number">1</span>)) &#123;</span><br><span class="line">                dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                dp[i][j] = <span class="number">1</span> + Math.min(dp[i - <span class="number">1</span>][j - <span class="number">1</span>], </span><br><span class="line">                    Math.min(dp[i][j - <span class="number">1</span>], dp[i - <span class="number">1</span>][j]));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[m][n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="多维动态规划-Multi-dimensional-DP"><a href="#多维动态规划-Multi-dimensional-DP" class="headerlink" title="多维动态规划(Multi-dimensional DP)"></a>多维动态规划(Multi-dimensional DP)</h2><p><strong>核心思想</strong>：扩展DP状态到多个维度<br><strong>适用场景</strong>：复杂约束条件的最优化问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 股票买卖问题（含冷冻期）</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxProfit</span><span class="params">(<span class="type">int</span>[] prices)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (prices == <span class="literal">null</span> || prices.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> prices.length;</span><br><span class="line">    <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[n][<span class="number">3</span>];</span><br><span class="line">    <span class="comment">// dp[i][0]: 持有股票</span></span><br><span class="line">    <span class="comment">// dp[i][1]: 不持有股票，处于冷冻期</span></span><br><span class="line">    <span class="comment">// dp[i][2]: 不持有股票，不处于冷冻期</span></span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">0</span>] = -prices[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">        dp[i][<span class="number">0</span>] = Math.max(dp[i - <span class="number">1</span>][<span class="number">0</span>], dp[i - <span class="number">1</span>][<span class="number">2</span>] - prices[i]);</span><br><span class="line">        dp[i][<span class="number">1</span>] = dp[i - <span class="number">1</span>][<span class="number">0</span>] + prices[i];</span><br><span class="line">        dp[i][<span class="number">2</span>] = Math.max(dp[i - <span class="number">1</span>][<span class="number">1</span>], dp[i - <span class="number">1</span>][<span class="number">2</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Math.max(dp[n - <span class="number">1</span>][<span class="number">1</span>], dp[n - <span class="number">1</span>][<span class="number">2</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正则表达式匹配</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isMatch</span><span class="params">(String s, String p)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> s.length(), n = p.length();</span><br><span class="line">    <span class="type">boolean</span>[][] dp = <span class="keyword">new</span> <span class="title class_">boolean</span>[m + <span class="number">1</span>][n + <span class="number">1</span>];</span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (p.charAt(j - <span class="number">1</span>) == <span class="string">&#x27;*&#x27;</span>) &#123;</span><br><span class="line">            dp[<span class="number">0</span>][j] = dp[<span class="number">0</span>][j - <span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s.charAt(i - <span class="number">1</span>) == p.charAt(j - <span class="number">1</span>) || p.charAt(j - <span class="number">1</span>) == <span class="string">&#x27;.&#x27;</span>) &#123;</span><br><span class="line">                dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (p.charAt(j - <span class="number">1</span>) == <span class="string">&#x27;*&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (s.charAt(i - <span class="number">1</span>) == p.charAt(j - <span class="number">2</span>) || p.charAt(j - <span class="number">2</span>) == <span class="string">&#x27;.&#x27;</span>) &#123;</span><br><span class="line">                    dp[i][j] = dp[i][j - <span class="number">2</span>] || dp[i - <span class="number">1</span>][j];</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    dp[i][j] = dp[i][j - <span class="number">2</span>];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[m][n];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最大正方形面积</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maximalSquare</span><span class="params">(<span class="type">char</span>[][] matrix)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (matrix == <span class="literal">null</span> || matrix.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> matrix.length, n = matrix[<span class="number">0</span>].length;</span><br><span class="line">    <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[m + <span class="number">1</span>][n + <span class="number">1</span>];</span><br><span class="line">    <span class="type">int</span> <span class="variable">maxLen</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (matrix[i - <span class="number">1</span>][j - <span class="number">1</span>] == <span class="string">&#x27;1&#x27;</span>) &#123;</span><br><span class="line">                dp[i][j] = Math.min(dp[i - <span class="number">1</span>][j - <span class="number">1</span>], Math.min(dp[i - <span class="number">1</span>][j], dp[i][j - <span class="number">1</span>])) + <span class="number">1</span>;</span><br><span class="line">                maxLen = Math.max(maxLen, dp[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxLen * maxLen;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="技巧-Tricks"><a href="#技巧-Tricks" class="headerlink" title="技巧(Tricks)"></a>技巧(Tricks)</h2><p><strong>核心思想</strong>：各种实用技巧和小算法<br><strong>适用场景</strong>：位操作、数学技巧、随机化等</p><p>```java<br>// 位操作技巧<br>public int hammingWeight(int n) {<br>    int count = 0;<br>    while (n != 0) {<br>        n &amp;= (n - 1); // 清除最低位的1<br>        count++;<br>    }<br>    return count;<br>}</p><p>// 洗牌算法（Fisher-Yates）<br>public void shuffle(int[] nums) {<br>    Random rand = new Random();<br>    for (int i = nums.length - 1; i &gt; 0; i—) {<br>        int j = rand.nextInt(i + 1);<br>        swap(nums, i, j);<br>    }<br>}</p><p>// 蓄水池抽样<br>public int getRandom(ListNode head) {<br>    Random rand = new Random();<br>    int res = 0, i = 1;<br>    ListNode curr = head;<br>    while (curr != null) {<br>        if (rand.nextInt(i) == 0) {<br>            res = curr.val;<br>        }<br>        i++;<br>        curr = curr.next;<br>    }<br>    return res;<br>}</p><p>// 摩尔投票法（多数元素）<br>public int majorityElement(int[] nums) {<br>    int count = 0, candidate = 0;<br>    for (int num : nums) {<br>        if (count == 0) candidate = num;<br>        count += (num == candidate) ? 1 : -1;<br>    }<br>    return candidate;<br>}</p><p>// 快速幂<br>public double myPow(double x, int n) {<br>    long N = n;<br>    if (N &lt; 0) {<br>        x = 1 / x;<br>        N = -N;<br>    }<br>    double res = 1;</p>]]></content>
      
      
      <categories>
          
          <category> 结构速查 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构和算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java快速学习速查（5）</title>
      <link href="/2025/04/01/java%E5%BF%AB%E9%80%9F%E5%AD%A6%E4%B9%A0%E9%80%9F%E6%9F%A5%EF%BC%885%EF%BC%89/"/>
      <url>/2025/04/01/java%E5%BF%AB%E9%80%9F%E5%AD%A6%E4%B9%A0%E9%80%9F%E6%9F%A5%EF%BC%885%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="java快速学习速查（5）"><a href="#java快速学习速查（5）" class="headerlink" title="java快速学习速查（5）"></a>java快速学习速查（5）</h1><blockquote><p>这个部分包含了Java面向对象部分的全部数据类型，继承，重载，多态，抽象类，封装，接口，枚举，包，反射</p></blockquote><p>这里先简单的理解下关系：</p><ul><li>​封装​ 让各部门各司其职，不暴露内部细节。</li><li>​抽象类/接口​ 定义岗位职责（做什么）。</li><li>​继承​ 建立上下级关系（技术部→开发组）。</li><li>​重写​ 让不同岗位对同一任务有不同的执行方式。</li><li>​多态​ 让总经理只需喊“开始工作”，不同员工自动做正确的事。</li></ul><p>接下来是详解部分：</p><h1 id="Java-继承全面解析"><a href="#Java-继承全面解析" class="headerlink" title="Java 继承全面解析"></a>Java 继承全面解析</h1><p>继承是面向对象编程的三大特性之一（封装、继承、多态），下面我将系统地讲解 Java 继承的各种功能和使用场景。</p><h2 id="一、继承基础"><a href="#一、继承基础" class="headerlink" title="一、继承基础"></a>一、继承基础</h2><h3 id="1-基本语法"><a href="#1-基本语法" class="headerlink" title="1. 基本语法"></a>1. 基本语法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Animal</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;正在吃东西&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String breed;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Dog</span><span class="params">(String name, String breed)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name);  <span class="comment">// 调用父类构造方法</span></span><br><span class="line">        <span class="built_in">this</span>.breed = breed;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">bark</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;汪汪叫&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 方法重写</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(getName() + <span class="string">&quot;(&quot;</span> + breed + <span class="string">&quot;)正在啃骨头&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getBreed</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> breed;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-继承的特点"><a href="#2-继承的特点" class="headerlink" title="2. 继承的特点"></a>2. 继承的特点</h3><ol><li>子类拥有父类非 private 的属性和方法</li><li>子类可以添加自己的属性和方法</li><li>子类可以重写父类的方法</li><li>Java 是单继承，一个类只能直接继承一个父类</li><li>构造方法不能被继承，但可以通过 super 调用</li></ol><h2 id="二、方法重写-Override"><a href="#二、方法重写-Override" class="headerlink" title="二、方法重写(Override)"></a>二、方法重写(Override)</h2><h3 id="1-重写规则"><a href="#1-重写规则" class="headerlink" title="1. 重写规则"></a>1. 重写规则</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;绘制形状&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getArea</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0.0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span> <span class="keyword">extends</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> radius;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Circle</span><span class="params">(<span class="type">double</span> radius)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.radius = radius;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;绘制圆形，半径: &quot;</span> + radius);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getArea</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Math.PI * radius * radius;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>重写规则</strong>：</p><ol><li>方法名和参数列表必须相同</li><li>返回类型可以相同或是父类返回类型的子类</li><li>访问修饰符不能比父类更严格</li><li>不能抛出比父类更宽泛的异常</li></ol><h3 id="2-Override-注解"><a href="#2-Override-注解" class="headerlink" title="2. @Override 注解"></a>2. @Override 注解</h3><ul><li>不是必须的，但建议使用</li><li>帮助编译器检查是否满足重写条件</li><li>提高代码可读性</li></ul><h2 id="三、super-关键字"><a href="#三、super-关键字" class="headerlink" title="三、super 关键字"></a>三、super 关键字</h2><h3 id="1-使用场景"><a href="#1-使用场景" class="headerlink" title="1. 使用场景"></a>1. 使用场景</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Vehicle</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> String brand;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Vehicle</span><span class="params">(String brand)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.brand = brand;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;车辆启动&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span> <span class="keyword">extends</span> <span class="title class_">Vehicle</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> year;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Car</span><span class="params">(String brand, <span class="type">int</span> year)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(brand);  <span class="comment">// 调用父类构造方法</span></span><br><span class="line">        <span class="built_in">this</span>.year = year;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.start();  <span class="comment">// 调用父类方法</span></span><br><span class="line">        System.out.println(year + <span class="string">&quot;年款&quot;</span> + brand + <span class="string">&quot;汽车启动&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;品牌: &quot;</span> + <span class="built_in">super</span>.brand + <span class="string">&quot;, 年份: &quot;</span> + year);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四、继承中的构造方法"><a href="#四、继承中的构造方法" class="headerlink" title="四、继承中的构造方法"></a>四、继承中的构造方法</h2><h3 id="1-构造方法调用顺序"><a href="#1-构造方法调用顺序" class="headerlink" title="1. 构造方法调用顺序"></a>1. 构造方法调用顺序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">GrandParent</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">GrandParent</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;GrandParent构造方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Parent</span> <span class="keyword">extends</span> <span class="title class_">GrandParent</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Parent</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Parent构造方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Child</span> <span class="keyword">extends</span> <span class="title class_">Parent</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Child</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Child构造方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConstructorTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Child</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">输出:</span></span><br><span class="line"><span class="comment">GrandParent构造方法</span></span><br><span class="line"><span class="comment">Parent构造方法</span></span><br><span class="line"><span class="comment">Child构造方法</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="2-super-使用规则"><a href="#2-super-使用规则" class="headerlink" title="2. super() 使用规则"></a>2. super() 使用规则</h3><ol><li>必须出现在子类构造方法的第一行</li><li>如果没有显式调用 super()，编译器会自动添加无参 super()</li><li>如果父类没有无参构造方法，子类必须显式调用 super(参数)</li></ol><h2 id="五、final-关键字"><a href="#五、final-关键字" class="headerlink" title="五、final 关键字"></a>五、final 关键字</h2><p>ﬁnal可以用于修饰符类，方法和变量。</p><ul><li>类：被修饰的类，不能被继承。</li><li>方法：被修饰的方法，不能被重写。</li><li>变量：被修饰符的变量，不能被修改。</li></ul><h3 id="1-final-用法"><a href="#1-final-用法" class="headerlink" title="1. final 用法"></a>1. final 用法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">CannotInherit</span> &#123;  <span class="comment">// 不能被继承</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MAX_VALUE</span> <span class="operator">=</span> <span class="number">100</span>;  <span class="comment">// 常量</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">cannotOverride</span><span class="params">()</span> &#123;  <span class="comment">// 不能被子类重写</span></span><br><span class="line">        System.out.println(<span class="string">&quot;这是最终方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// class TryExtend extends CannotInherit &#123;&#125;  // 编译错误</span></span><br></pre></td></tr></table></figure><h2 id="六、Object-类"><a href="#六、Object-类" class="headerlink" title="六、Object 类"></a>六、Object 类</h2><p>Object 类是 Java 中所有类的超类，它定义了所有类的默认行为。</p><h3 id="1-常用方法"><a href="#1-常用方法" class="headerlink" title="1. 常用方法"></a>1. 常用方法</h3><p>以下是常用的方法</p><div class="table-container"><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><code>equals()</code></td><td>比较对象是否相等</td></tr><tr><td><code>hashCode()</code></td><td>获取对象的哈希码</td></tr><tr><td><code>toString()</code></td><td>返回对象的字符串表示</td></tr><tr><td><code>clone()</code></td><td>克隆对象</td></tr><tr><td><code>finalize()</code></td><td>垃圾回收前调用</td></tr><tr><td><code>wait()</code></td><td>线程等待</td></tr><tr><td><code>notify()</code></td><td>线程通知</td></tr><tr><td><code>notifyAll()</code></td><td>线程通知所有</td></tr></tbody></table></div><p>由于toString方法的访问结果是对象的哈希码，所以在实际开发中，通常需要重写toString方法，以便返回有意义的字符串表示。</p><blockquote><p>在重写的时候可以自动拼接，无需手动书写show方法，在idea中键入toString即可</p></blockquote><p>equals和 == 的区别：<br>重写equals前和==的区别和重写equals后和==的区别</p><ul><li>重写equals前和==的区别：<ul><li>==：比较的是两个对象的地址值</li><li>equals：默认比较的也是两个对象的地址值</li></ul></li><li>重写equals后和==的区别：<ul><li>==：比较的是两个对象的地址值</li><li>equals：比较的是两个对象的内容是否相同</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span> == obj) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (obj == <span class="literal">null</span> || getClass() != obj.getClass()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> (Person) obj;</span><br><span class="line">        <span class="keyword">return</span> age == person.age &amp;&amp; name.equals(person.name);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.hash(name, age);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;name=&#x27;&quot;</span> + name + <span class="string">&quot;&#x27;, age=&quot;</span> + age + <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="七、抽象类与继承"><a href="#七、抽象类与继承" class="headerlink" title="七、抽象类与继承"></a>七、抽象类与继承</h2><h3 id="1-抽象类示例"><a href="#1-抽象类示例" class="headerlink" title="1. 抽象类示例"></a>1. 抽象类示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> String name;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Animal</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">makeSound</span><span class="params">()</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;正在睡觉&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Cat</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">makeSound</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;说: 喵喵~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="八、继承与多态"><a href="#八、继承与多态" class="headerlink" title="八、继承与多态"></a>八、继承与多态</h2><h3 id="1-多态示例"><a href="#1-多态示例" class="headerlink" title="1. 多态示例"></a>1. 多态示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Employee</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> String name;</span><br><span class="line">    <span class="keyword">protected</span> <span class="type">double</span> salary;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Employee</span><span class="params">(String name, <span class="type">double</span> salary)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.salary = salary;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">calculateBonus</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> salary * <span class="number">0.1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Manager</span> <span class="keyword">extends</span> <span class="title class_">Employee</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> bonus;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Manager</span><span class="params">(String name, <span class="type">double</span> salary, <span class="type">double</span> bonus)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name, salary);</span><br><span class="line">        <span class="built_in">this</span>.bonus = bonus;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">calculateBonus</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> salary * <span class="number">0.15</span> + bonus;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">manageTeam</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;正在管理团队&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PolymorphismDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Employee</span> <span class="variable">emp1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&quot;张三&quot;</span>, <span class="number">5000</span>);</span><br><span class="line">        <span class="type">Employee</span> <span class="variable">emp2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Manager</span>(<span class="string">&quot;李四&quot;</span>, <span class="number">8000</span>, <span class="number">2000</span>);</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;张三的奖金: &quot;</span> + emp1.calculateBonus());</span><br><span class="line">        System.out.println(<span class="string">&quot;李四的奖金: &quot;</span> + emp2.calculateBonus());</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// emp2.manageTeam();  // 编译错误，Employee类型没有manageTeam方法</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (emp2 <span class="keyword">instanceof</span> Manager) &#123;</span><br><span class="line">            <span class="type">Manager</span> <span class="variable">manager</span> <span class="operator">=</span> (Manager) emp2;</span><br><span class="line">            manager.manageTeam();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="九、继承最佳实践"><a href="#九、继承最佳实践" class="headerlink" title="九、继承最佳实践"></a>九、继承最佳实践</h2><h3 id="1-设计原则"><a href="#1-设计原则" class="headerlink" title="1. 设计原则"></a>1. 设计原则</h3><ol><li><strong>里氏替换原则</strong>：子类应该能够替换父类而不影响程序正确性</li><li><strong>优先使用组合而非继承</strong>：除非确实是”is-a”关系，否则考虑使用组合</li><li><strong>避免过深的继承层次</strong>：通常不超过3层</li><li><strong>将通用方法放在高层类</strong>：提高代码复用性</li><li><strong>使用抽象类定义接口</strong>：为子类提供通用实现</li></ol><h3 id="2-示例：图形类继承体系"><a href="#2-示例：图形类继承体系" class="headerlink" title="2. 示例：图形类继承体系"></a>2. 示例：图形类继承体系</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> String color;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Shape</span><span class="params">(String color)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="type">double</span> <span class="title function_">getArea</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="type">double</span> <span class="title function_">getPerimeter</span><span class="params">()</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Shape[color=&quot;</span> + color + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span> <span class="keyword">extends</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> radius;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Circle</span><span class="params">(String color, <span class="type">double</span> radius)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(color);</span><br><span class="line">        <span class="built_in">this</span>.radius = radius;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getArea</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Math.PI * radius * radius;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getPerimeter</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span> * Math.PI * radius;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Circle[&quot;</span> + <span class="built_in">super</span>.toString() + <span class="string">&quot;,radius=&quot;</span> + radius + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Rectangle</span> <span class="keyword">extends</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> length;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> width;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Rectangle</span><span class="params">(String color, <span class="type">double</span> length, <span class="type">double</span> width)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(color);</span><br><span class="line">        <span class="built_in">this</span>.length = length;</span><br><span class="line">        <span class="built_in">this</span>.width = width;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getArea</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> length * width;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getPerimeter</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span> * (length + width);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Rectangle[&quot;</span> + <span class="built_in">super</span>.toString() + </span><br><span class="line">               <span class="string">&quot;,length=&quot;</span> + length + <span class="string">&quot;,width=&quot;</span> + width + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShapeDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Shape[] shapes = &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Circle</span>(<span class="string">&quot;Red&quot;</span>, <span class="number">5.0</span>),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Rectangle</span>(<span class="string">&quot;Blue&quot;</span>, <span class="number">4.0</span>, <span class="number">6.0</span>)</span><br><span class="line">        &#125;;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (Shape shape : shapes) &#123;</span><br><span class="line">            System.out.println(shape);</span><br><span class="line">            System.out.println(<span class="string">&quot;Area: &quot;</span> + shape.getArea());</span><br><span class="line">            System.out.println(<span class="string">&quot;Perimeter: &quot;</span> + shape.getPerimeter());</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="十、常见面试问题"><a href="#十、常见面试问题" class="headerlink" title="十、常见面试问题"></a>十、常见面试问题</h2><ol><li><p><strong>继承和接口的区别</strong>？</p><ul><li>继承：is-a关系，单继承，可以包含实现</li><li>接口：can-do关系，多实现，只有抽象方法(Java 8前)</li></ul></li><li><p><strong>什么时候用继承</strong>？</p><ul><li>当两个类之间有明显的is-a关系时</li><li>需要复用父类代码时</li><li>需要实现多态时</li></ul></li><li><p><strong>为什么Java不支持多继承</strong>？</p><ul><li>避免”钻石问题”（菱形继承问题）</li><li>简化语言设计，减少复杂性</li></ul></li><li><p><strong>构造方法能否被重写</strong>？</p><ul><li>不能，构造方法不是成员方法</li><li>子类构造方法必须调用父类构造方法</li></ul></li><li><p><strong>如何防止类被继承</strong>？</p><ul><li>使用final修饰类</li><li>将构造方法设为private，并提供静态工厂方法</li></ul></li></ol><h1 id="Java-重写-Override-与重载-Overload-全面解析"><a href="#Java-重写-Override-与重载-Overload-全面解析" class="headerlink" title="Java 重写(Override)与重载(Overload)全面解析"></a>Java 重写(Override)与重载(Overload)全面解析</h1><p>下面我将系统地讲解 Java 中方法重写和方法重载的核心概念、使用场景和实际应用。</p><h2 id="一、方法重写-Override-深度解析"><a href="#一、方法重写-Override-深度解析" class="headerlink" title="一、方法重写(Override)深度解析"></a>一、方法重写(Override)深度解析</h2><h3 id="1-重写基础示例"><a href="#1-重写基础示例" class="headerlink" title="1. 重写基础示例"></a>1. 重写基础示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">makeSound</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;动物发出声音&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">protected</span> String <span class="title function_">getInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;动物基本信息&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="comment">// 正确重写 - 相同方法签名</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">makeSound</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;喵喵叫&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 正确重写 - 返回类型是父类返回类型的子类</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;猫的信息: &quot;</span> + <span class="built_in">super</span>.getInfo();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 编译错误 - 不能缩小访问权限</span></span><br><span class="line">    <span class="comment">// @Override</span></span><br><span class="line">    <span class="comment">// void makeSound() &#123; ... &#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OverrideDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Animal</span> <span class="variable">myCat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line">        myCat.makeSound();  <span class="comment">// 输出&quot;喵喵叫&quot;</span></span><br><span class="line">        System.out.println(myCat.getInfo());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-重写规则详解"><a href="#2-重写规则详解" class="headerlink" title="2. 重写规则详解"></a>2. 重写规则详解</h3><ol><li><strong>方法签名必须相同</strong>：方法名、参数列表完全一致</li><li><strong>返回类型协变</strong>：Java 5+ 允许子类方法返回父类方法返回类型的子类</li><li><strong>访问修饰符不能更严格</strong>：可以更宽松但不能更严格</li><li><strong>异常限制</strong>：<ul><li>不能抛出新的检查异常</li><li>不能抛出比父类更宽泛的检查异常</li><li>可以抛出更具体的检查异常或不抛出异常</li><li>可以抛出任何非检查异常</li></ul></li><li><strong>不能重写 final/static/private 方法</strong></li></ol><h3 id="3-Override-注解的重要性"><a href="#3-Override-注解的重要性" class="headerlink" title="3. @Override 注解的重要性"></a>3. @Override 注解的重要性</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Parent</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Parent: &quot;</span> + msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Child</span> <span class="keyword">extends</span> <span class="title class_">Parent</span> &#123;</span><br><span class="line">    <span class="comment">// 本意是重写，但拼写错误导致成为新方法</span></span><br><span class="line">    <span class="meta">@Override</span>  <span class="comment">// 加上这个注解会立即发现错误</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sho</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Child: &quot;</span> + msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二、方法重载-Overload-深度解析"><a href="#二、方法重载-Overload-深度解析" class="headerlink" title="二、方法重载(Overload)深度解析"></a>二、方法重载(Overload)深度解析</h2><h3 id="1-重载基础示例"><a href="#1-重载基础示例" class="headerlink" title="1. 重载基础示例"></a>1. 重载基础示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Calculator</span> &#123;</span><br><span class="line">    <span class="comment">// 方法1</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 重载方法2 - 参数个数不同</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a + b + c;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 重载方法3 - 参数类型不同</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">add</span><span class="params">(<span class="type">double</span> a, <span class="type">double</span> b)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 重载方法4 - 参数顺序不同</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">add</span><span class="params">(String s, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> s + n;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">add</span><span class="params">(<span class="type">int</span> n, String s)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> n + s;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 不是重载 - 仅返回类型不同会导致编译错误</span></span><br><span class="line">    <span class="comment">// public double add(int a, int b) &#123; return a + b; &#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OverloadDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Calculator</span> <span class="variable">calc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Calculator</span>();</span><br><span class="line">        System.out.println(calc.add(<span class="number">5</span>, <span class="number">3</span>));        <span class="comment">// 调用方法1</span></span><br><span class="line">        System.out.println(calc.add(<span class="number">5</span>, <span class="number">3</span>, <span class="number">2</span>));     <span class="comment">// 调用方法2</span></span><br><span class="line">        System.out.println(calc.add(<span class="number">2.5</span>, <span class="number">3.7</span>));    <span class="comment">// 调用方法3</span></span><br><span class="line">        System.out.println(calc.add(<span class="string">&quot;ID&quot;</span>, <span class="number">100</span>));   <span class="comment">// 调用方法4</span></span><br><span class="line">        System.out.println(calc.add(<span class="number">100</span>, <span class="string">&quot;ID&quot;</span>));   <span class="comment">// 调用方法5</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-重载规则详解"><a href="#2-重载规则详解" class="headerlink" title="2. 重载规则详解"></a>2. 重载规则详解</h3><ol><li><strong>必须改变参数列表</strong>：<ul><li>参数数量不同</li><li>参数类型不同</li><li>参数顺序不同</li></ul></li><li><strong>可以改变的内容</strong>：<ul><li>返回类型</li><li>访问修饰符</li><li>抛出异常</li></ul></li><li><strong>不能仅靠返回类型区分重载</strong></li><li><strong>自动类型转换影响重载解析</strong></li></ol><h3 id="3-重载解析过程"><a href="#3-重载解析过程" class="headerlink" title="3. 重载解析过程"></a>3. 重载解析过程</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">OverloadResolution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">process</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;处理整数: &quot;</span> + i);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">process</span><span class="params">(<span class="type">double</span> d)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;处理浮点数: &quot;</span> + d);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">process</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;处理字符串: &quot;</span> + s);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">OverloadResolution</span> <span class="variable">resolver</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OverloadResolution</span>();</span><br><span class="line">        resolver.process(<span class="number">10</span>);     <span class="comment">// 调用process(int)</span></span><br><span class="line">        resolver.process(<span class="number">10.0</span>);   <span class="comment">// 调用process(double)</span></span><br><span class="line">        resolver.process(<span class="string">&quot;10&quot;</span>);   <span class="comment">// 调用process(String)</span></span><br><span class="line">        resolver.process(<span class="string">&#x27;A&#x27;</span>);    <span class="comment">// 调用process(int) - char自动转为int</span></span><br><span class="line">        resolver.process(<span class="number">10L</span>);    <span class="comment">// 调用process(double) - long转为double</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、重写与重载对比"><a href="#三、重写与重载对比" class="headerlink" title="三、重写与重载对比"></a>三、重写与重载对比</h2><h3 id="1-核心区别对照表"><a href="#1-核心区别对照表" class="headerlink" title="1. 核心区别对照表"></a>1. 核心区别对照表</h3><div class="table-container"><table><thead><tr><th>特性</th><th>方法重写(Override)</th><th>方法重载(Overload)</th></tr></thead><tbody><tr><td>发生位置</td><td>子类与父类之间</td><td>同一个类或父子类之间</td></tr><tr><td>方法签名</td><td>必须相同</td><td>必须不同</td></tr><tr><td>返回类型</td><td>相同或子类(协变返回)</td><td>可以不同</td></tr><tr><td>访问修饰符</td><td>不能比父类更严格</td><td>可以不同</td></tr><tr><td>异常抛出</td><td>不能更宽泛</td><td>可以不同</td></tr><tr><td>调用机制</td><td>运行时根据对象类型决定</td><td>编译时根据参数类型决定</td></tr><tr><td>多态性体现</td><td>子类替换父类行为</td><td>同一方法名处理不同类型参数</td></tr></tbody></table></div><h3 id="2-典型场景示例"><a href="#2-典型场景示例" class="headerlink" title="2. 典型场景示例"></a>2. 典型场景示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">OverrideVsOverload</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Base</span> &#123;</span><br><span class="line">        <span class="comment">// 可重载方法</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">(<span class="type">int</span> num)</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Base execute with int: &quot;</span> + num);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 可重写方法</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Base show&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Derived</span> <span class="keyword">extends</span> <span class="title class_">Base</span> &#123;</span><br><span class="line">        <span class="comment">// 重载父类方法</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">(String str)</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Derived execute with String: &quot;</span> + str);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 重写父类方法</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Derived show&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Base</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Derived</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 重载方法调用 - 编译时决定</span></span><br><span class="line">        <span class="comment">// obj.execute(&quot;test&quot;); // 编译错误，Base没有execute(String)</span></span><br><span class="line">        ((Derived)obj).execute(<span class="string">&quot;test&quot;</span>); <span class="comment">// 需要向下转型</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 重写方法调用 - 运行时决定</span></span><br><span class="line">        obj.show(); <span class="comment">// 输出&quot;Derived show&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四、高级话题与应用场景"><a href="#四、高级话题与应用场景" class="headerlink" title="四、高级话题与应用场景"></a>四、高级话题与应用场景</h2><h3 id="1-构造方法的重载"><a href="#1-构造方法的重载" class="headerlink" title="1. 构造方法的重载"></a>1. 构造方法的重载</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 构造方法重载</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(<span class="string">&quot;无名氏&quot;</span>, <span class="number">18</span>); <span class="comment">// 调用另一个构造方法</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(name, <span class="number">18</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 方法重载</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">introduce</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是&quot;</span> + name + <span class="string">&quot;，今年&quot;</span> + age + <span class="string">&quot;岁&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">introduce</span><span class="params">(String greeting)</span> &#123;</span><br><span class="line">        System.out.println(greeting + <span class="string">&quot;，我是&quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConstructorOverload</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;李四&quot;</span>, <span class="number">25</span>);</span><br><span class="line">        </span><br><span class="line">        p1.introduce();</span><br><span class="line">        p2.introduce(<span class="string">&quot;你好&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-重写-equals-和-hashCode"><a href="#2-重写-equals-和-hashCode" class="headerlink" title="2. 重写 equals 和 hashCode"></a>2. 重写 equals 和 hashCode</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String id, String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="comment">// 1. 检查是否同一对象</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span> == o) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">// 2. 检查是否为null或类不同</span></span><br><span class="line">        <span class="keyword">if</span> (o == <span class="literal">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">// 3. 类型转换</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> (Student) o;</span><br><span class="line">        <span class="comment">// 4. 比较关键字段</span></span><br><span class="line">        <span class="keyword">return</span> id.equals(student.id) &amp;&amp; name.equals(student.name);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.hash(id, name);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;id=&#x27;&quot;</span> + id + <span class="string">&quot;&#x27;, name=&#x27;&quot;</span> + name + <span class="string">&quot;&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ObjectMethodOverride</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;1001&quot;</span>, <span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        <span class="type">Student</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;1001&quot;</span>, <span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        <span class="type">Student</span> <span class="variable">s3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;1002&quot;</span>, <span class="string">&quot;李四&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;s1.equals(s2): &quot;</span> + s1.equals(s2)); <span class="comment">// true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;s1.equals(s3): &quot;</span> + s1.equals(s3)); <span class="comment">// false</span></span><br><span class="line">        System.out.println(<span class="string">&quot;s1 hashCode: &quot;</span> + s1.hashCode());</span><br><span class="line">        System.out.println(<span class="string">&quot;s2 hashCode: &quot;</span> + s2.hashCode());</span><br><span class="line">        System.out.println(<span class="string">&quot;s1 toString: &quot;</span> + s1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-桥接方法与重写"><a href="#3-桥接方法与重写" class="headerlink" title="3. 桥接方法与重写"></a>3. 桥接方法与重写</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Processor</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">process</span><span class="params">(T t)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">StringProcessor</span> <span class="keyword">implements</span> <span class="title class_">Processor</span>&lt;String&gt; &#123;</span><br><span class="line">    <span class="comment">// 编译器会生成桥接方法 void process(Object)</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">process</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;处理字符串: &quot;</span> + s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BridgeMethod</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Processor&lt;String&gt; processor = <span class="keyword">new</span> <span class="title class_">StringProcessor</span>();</span><br><span class="line">        processor.process(<span class="string">&quot;测试&quot;</span>); <span class="comment">// 实际调用process(String)</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 通过反射查看方法</span></span><br><span class="line">        <span class="keyword">for</span> (Method method : StringProcessor.class.getMethods()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (method.getName().equals(<span class="string">&quot;process&quot;</span>)) &#123;</span><br><span class="line">                System.out.println(method + <span class="string">&quot; is bridge: &quot;</span> + method.isBridge());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="五、常见问题与最佳实践"><a href="#五、常见问题与最佳实践" class="headerlink" title="五、常见问题与最佳实践"></a>五、常见问题与最佳实践</h2><h3 id="1-常见陷阱"><a href="#1-常见陷阱" class="headerlink" title="1. 常见陷阱"></a>1. 常见陷阱</h3><ol><li><p><strong>意外重载而非重写</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Parent</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">doSomething</span><span class="params">(List&lt;String&gt; list)</span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Child</span> <span class="keyword">extends</span> <span class="title class_">Parent</span> &#123;</span><br><span class="line">    <span class="comment">// 实际是重载而不是重写</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">doSomething</span><span class="params">(ArrayList&lt;String&gt; list)</span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>静态方法”重写”</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Parent</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">staticMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Parent static&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Child</span> <span class="keyword">extends</span> <span class="title class_">Parent</span> &#123;</span><br><span class="line">    <span class="comment">// 这是隐藏(hiding)而不是重写</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">staticMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Child static&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="2-最佳实践"><a href="#2-最佳实践" class="headerlink" title="2. 最佳实践"></a>2. 最佳实践</h3><ol><li><strong>总是使用 @Override 注解</strong>：避免意外重载而非重写</li><li><strong>保持重写方法行为一致</strong>：遵守里氏替换原则</li><li><strong>谨慎重载可变参数方法</strong>：容易导致混淆</li><li><strong>避免过度重载</strong>：考虑使用不同方法名提高可读性</li><li><strong>文档化重写方法</strong>：说明与父类方法的差异</li></ol><h1 id="面向对象编程"><a href="#面向对象编程" class="headerlink" title="面向对象编程"></a>面向对象编程</h1><p><strong>面向对象思想</strong><br>java是一种面向对象的程序设计语言，我们在面向对象的思想的指引下编写程序。</p><p><strong>面向过程（pop）</strong></p><ul><li>这是一种以过程为中心的编程思想。把事情拆成几个步骤然后按照一定的顺序执行。（强调过程）</li></ul><p><strong>面向对象（oop）</strong></p><ul><li>面向对象就是把现实世界的事物抽象成对象，这些对象都是唯一的并且都拥有自己的属性和行为。我们就可以通过调用这些对象的方法，属性去调用对象（强调对象）</li></ul><p><strong>区别：</strong></p><ul><li>面向过程：强调的是功能行为</li><li>面向对象：强调具备功能的对象</li></ul><p><strong>面向对象的三大特征：</strong></p><ul><li>封装</li><li>继承</li><li>多态</li></ul><p>类和对象是面向对象的核心概念。具体使用方式见：[类和对象详解]（<a href="http://xhayane.top/2025/03/31/java%E5%BF%AB%E9%80%9F%E5%AD%A6%E4%B9%A0%E9%80%9F%E6%9F%A5%EF%BC%881%EF%BC%89/）">http://xhayane.top/2025/03/31/java%E5%BF%AB%E9%80%9F%E5%AD%A6%E4%B9%A0%E9%80%9F%E6%9F%A5%EF%BC%881%EF%BC%89/）</a></p><p><strong>什么是类</strong><br>类是对一类事物的描述，是抽象的、概念上的定义。例如：猫，狗，人，手机，电脑，电视，书，学生，老师，等等。</p><p><strong>什么是对象</strong><br>对象是实际存在的该类事物的每个个体，因而也称为实例(instance)。例如：张三，李四，王五，小明，小红，小绿，等等。</p><p><strong>类和对象的关系</strong><br>类是对象的模板，对象是类的实例。<br>-类是对一类事物的描述，是<code>抽象</code>的、概念上的定义<br>-对象是一类实例化的存在，是<code>具体</code>的、可以操作的。</p><p>其余内容请跳转[类和对象详解]（<a href="http://xhayane.top/2025/03/31/java%E5%BF%AB%E9%80%9F%E5%AD%A6%E4%B9%A0%E9%80%9F%E6%9F%A5%EF%BC%881%EF%BC%89/）**java对象和类的全面解析**">http://xhayane.top/2025/03/31/java%E5%BF%AB%E9%80%9F%E5%AD%A6%E4%B9%A0%E9%80%9F%E6%9F%A5%EF%BC%881%EF%BC%89/）**java对象和类的全面解析**</a></p><h1 id="Java-面向对象核心特性全面解析（多态、抽象类、封装和接口这四大面向对象特性）"><a href="#Java-面向对象核心特性全面解析（多态、抽象类、封装和接口这四大面向对象特性）" class="headerlink" title="Java 面向对象核心特性全面解析（多态、抽象类、封装和接口这四大面向对象特性）"></a>Java 面向对象核心特性全面解析（多态、抽象类、封装和接口这四大面向对象特性）</h1><p><strong>下面我将依次详细讲解Java面向对象编程的四大核心特性：多态、抽象类、封装和接口</strong>。</p><p>问到三大特性就把接口去掉就行</p><h2 id="一、多态-Polymorphism"><a href="#一、多态-Polymorphism" class="headerlink" title="一、多态(Polymorphism)"></a>一、多态(Polymorphism)</h2><h3 id="1-多态基础"><a href="#1-多态基础" class="headerlink" title="1. 多态基础"></a>1. 多态基础</h3><p>多态（对象的多种状态）同一个行为具有不同的表现形态的能力，对象多种表现形态的能力</p><p>多态的前提：<br>1.要有继承关系<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">MyInterFace</span> &#123;</span><br><span class="line">    <span class="comment">// CTRL+SHIFT+X 大小写转换</span></span><br><span class="line">    String USERNAME=<span class="string">&quot;admin123&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>2.子类要重写父类的方法<br>3.父类引用指向子类对象</p><p><strong>多态的好处，体现再可以使程序编写的更加简单，并且有良好的扩展性。</strong></p><h3 id="多态的理解"><a href="#多态的理解" class="headerlink" title="多态的理解"></a>多态的理解</h3><p><strong>老板不需要知道每个人具体怎么工作，他只需要发同一个指令，不同员工会自动做自己该做的事。这就是多态！</strong></p><p><strong>继承 + 方法重写（最常见）</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">class 员工 &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> 工作() &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;处理行政事务&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class 程序员 extends 员工 &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> 工作() &#123;  <span class="comment">// 重写父类方法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;写代码&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class 销售 extends 员工 &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> 工作() &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;拜访客户&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 多态的体现：父类引用指向子类对象</span></span><br><span class="line">员工 员工<span class="number">1</span> = <span class="keyword">new</span> 程序员();</span><br><span class="line">员工 员工<span class="number">2</span> = <span class="keyword">new</span> 销售();</span><br><span class="line"></span><br><span class="line">员工<span class="number">1.</span>工作(); <span class="comment">// 实际调用的是 程序员.工作() → 输出&quot;写代码&quot;</span></span><br><span class="line">员工<span class="number">2.</span>工作(); <span class="comment">// 实际调用的是 销售.工作() → 输出&quot;拜访客户&quot;</span></span><br></pre></td></tr></table></figure><br><strong>关键点：</strong>  </p><ul><li>编译时（写代码时）：<code>员工1.工作()</code> 看起来调用的是父类方法。  </li><li>运行时（实际执行时）：JVM 会根据对象的实际类型（<code>程序员</code> 或 <code>销售</code>）调用对应的方法。  </li></ul><p><strong>接口实现</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">interface 可演讲 &#123;</span><br><span class="line">    <span class="keyword">void</span> 演讲();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class 程序员 implements 可演讲 &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> 演讲() &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;讲技术方案&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class 销售 implements 可演讲 &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> 演讲() &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;讲产品优势&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 多态的体现：接口引用指向实现类对象</span></span><br><span class="line">可演讲 人<span class="number">1</span> = <span class="keyword">new</span> 程序员();</span><br><span class="line">可演讲 人<span class="number">2</span> = <span class="keyword">new</span> 销售();</span><br><span class="line"></span><br><span class="line">人<span class="number">1.</span>演讲(); <span class="comment">// 输出&quot;讲技术方案&quot;</span></span><br><span class="line">人<span class="number">2.</span>演讲(); <span class="comment">// 输出&quot;讲产品优势&quot;</span></span><br></pre></td></tr></table></figure></p><h3 id="多态的操作应用"><a href="#多态的操作应用" class="headerlink" title="多态的操作应用"></a>多态的操作应用</h3><p><strong>引用类型转换</strong><br>多态的转型分为向上转型和向下转型两种：</p><ul><li>向上转型<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">父类 对象名=new 子类();</span><br></pre></td></tr></table></figure>父类引用指向子类实例，这种转换其实就是上面的多态写法，创建一个子类的对象，我们把它当作父类<br>来看待，我们创建一个学生，把他当作人来看待，这种肯定使可以的。</li></ul><p><strong>注意事项</strong></p><p>向上转向是安全的，对象的范围有小变大的，弊端是<code>子类特有的方法无法调用</code>，类似于我们基本数据类<br>型中的自动转换。</p><ul><li>向下转型父类类型向子类类型向下转换的过程，这个过程是强制的。（类似强制类型转换）<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">子类 对象名=(子类)父类</span><br></pre></td></tr></table></figure><strong>类型转换异常</strong><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Animal</span> <span class="variable">a</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line">        <span class="comment">// 向下转型</span></span><br><span class="line">        Cat c=(Cat)a;</span><br><span class="line">        Dog d=(Dog)a;</span><br><span class="line">        d.eat();</span><br><span class="line">        d.kanMen();</span><br></pre></td></tr></table></figure>如上所示：<br>这段代码可以通过编译，但是运行的时间，却报错了 <code>ClassCastException</code> ,类型转换异常，这是因为<br>明明创建了Cat类型对象，运行时，当然不能转换为Dog对象，这两个类型并没有任何继承关系，不符<br>合类型转换的定义。为了避免 <code>ClassCastException</code> 的发生，java提供了<code>instanceof</code>关键字，给引用变<br>量做类型校验<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">变量名 instanceof   数据类型</span><br><span class="line">如果变量属于该数据类型，返回true，如果变量不属于该数据类型，返回false</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Animal</span> <span class="variable">a</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line">      <span class="comment">// 向下转型</span></span><br><span class="line">        <span class="keyword">if</span>(a <span class="keyword">instanceof</span>  Cat)&#123;</span><br><span class="line">            Cat c=(Cat)a;</span><br><span class="line">            c.eat();</span><br><span class="line">            c.zhuaLaoShu();</span><br><span class="line">       &#125;<span class="keyword">else</span> <span class="keyword">if</span>(a <span class="keyword">instanceof</span>  Dog)&#123;</span><br><span class="line">            Dog d=(Dog)a;</span><br><span class="line">            d.eat();</span><br><span class="line">            d.kanMen();</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure>== 实战部分在最后 ==<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">makeSound</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;动物发出声音&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">makeSound</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;汪汪叫&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fetch</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;叼回飞盘&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">makeSound</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;喵喵叫&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">scratch</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;挠沙发&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PolymorphismDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 编译时类型为Animal，运行时类型为具体子类</span></span><br><span class="line">        <span class="type">Animal</span> <span class="variable">myPet1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">        <span class="type">Animal</span> <span class="variable">myPet2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line">        </span><br><span class="line">        myPet1.makeSound();  <span class="comment">// 输出&quot;汪汪叫&quot;</span></span><br><span class="line">        myPet2.makeSound();  <span class="comment">// 输出&quot;喵喵叫&quot;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// myPet1.fetch();  // 编译错误，Animal类没有fetch方法</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (myPet1 <span class="keyword">instanceof</span> Dog) &#123;</span><br><span class="line">            ((Dog)myPet1).fetch();  <span class="comment">// 向下转型后调用子类特有方法</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 多态方法参数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">animalSound</span><span class="params">(Animal animal)</span> &#123;</span><br><span class="line">        animal.makeSound();  <span class="comment">// 根据实际对象类型调用相应方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-多态实现形式"><a href="#2-多态实现形式" class="headerlink" title="2. 多态实现形式"></a>2. 多态实现形式</h3><ol><li><strong>方法重写(Override)</strong>：子类重写父类方法</li><li><strong>方法重载(Overload)</strong>：同名不同参</li><li><strong>接口实现</strong>：不同类实现同一接口</li><li><strong>抽象类和抽象方法</strong>：提供统一接口，具体实现由子类完成</li></ol><h3 id="3-多态的优势"><a href="#3-多态的优势" class="headerlink" title="3. 多态的优势"></a>3. 多态的优势</h3><ol><li><strong>可替换性</strong>：子类对象可以替换父类对象</li><li><strong>可扩展性</strong>：新增子类不影响已有代码</li><li><strong>灵活性</strong>：同一方法不同表现</li><li><strong>简化性</strong>：统一接口处理不同对象</li></ol><h2 id="二、抽象类-Abstract-Class"><a href="#二、抽象类-Abstract-Class" class="headerlink" title="二、抽象类(Abstract Class)"></a>二、抽象类(Abstract Class)</h2><h3 id="1-抽象类基础"><a href="#1-抽象类基础" class="headerlink" title="1. 抽象类基础"></a>1. 抽象类基础</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 抽象类</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> String color;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Shape</span><span class="params">(String color)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 抽象方法 - 无实现体</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="type">double</span> <span class="title function_">getArea</span><span class="params">()</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 具体方法</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getColor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> color;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 可以包含静态方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printShapeInfo</span><span class="params">(Shape shape)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;颜色: &quot;</span> + shape.color);</span><br><span class="line">        System.out.println(<span class="string">&quot;面积: &quot;</span> + shape.getArea());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span> <span class="keyword">extends</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> radius;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Circle</span><span class="params">(String color, <span class="type">double</span> radius)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(color);</span><br><span class="line">        <span class="built_in">this</span>.radius = radius;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getArea</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Math.PI * radius * radius;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Rectangle</span> <span class="keyword">extends</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> length;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> width;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Rectangle</span><span class="params">(String color, <span class="type">double</span> length, <span class="type">double</span> width)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(color);</span><br><span class="line">        <span class="built_in">this</span>.length = length;</span><br><span class="line">        <span class="built_in">this</span>.width = width;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getArea</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> length * width;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AbstractClassDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Shape</span> <span class="variable">circle</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Circle</span>(<span class="string">&quot;红色&quot;</span>, <span class="number">5.0</span>);</span><br><span class="line">        <span class="type">Shape</span> <span class="variable">rectangle</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Rectangle</span>(<span class="string">&quot;蓝色&quot;</span>, <span class="number">4.0</span>, <span class="number">6.0</span>);</span><br><span class="line">        </span><br><span class="line">        Shape.printShapeInfo(circle);</span><br><span class="line">        Shape.printShapeInfo(rectangle);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Shape shape = new Shape(&quot;绿色&quot;);  // 编译错误，抽象类不能实例化</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-抽象类特点"><a href="#2-抽象类特点" class="headerlink" title="2. 抽象类特点"></a>2. 抽象类特点</h3><ol><li><strong>不能被实例化</strong>：只能被继承</li><li><strong>可以包含抽象方法</strong>：没有实现的方法，必须被子类实现</li><li><strong>可以包含具体方法</strong>：有实现的方法，子类可以直接使用或重写</li><li><strong>可以包含成员变量</strong>：可以是各种访问修饰符</li><li><strong>构造方法</strong>：虽然不能实例化，但可以有构造方法供子类调用</li></ol><h3 id="3-抽象类应用场景"><a href="#3-抽象类应用场景" class="headerlink" title="3. 抽象类应用场景"></a>3. 抽象类应用场景</h3><ol><li><strong>定义通用接口</strong>：为相关类提供统一的操作规范</li><li><strong>部分实现</strong>：提供部分通用实现，子类完成剩余部分</li><li><strong>模板方法模式</strong>：定义算法骨架，具体步骤由子类实现</li></ol><h2 id="三、封装-Encapsulation"><a href="#三、封装-Encapsulation" class="headerlink" title="三、封装(Encapsulation)"></a>三、封装(Encapsulation)</h2><h3 id="1-封装基础实现"><a href="#1-封装基础实现" class="headerlink" title="1. 封装基础实现"></a>1. 封装基础实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">BankAccount</span> &#123;</span><br><span class="line">    <span class="comment">// 私有字段 - 数据隐藏</span></span><br><span class="line">    <span class="keyword">private</span> String accountNumber;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> balance;</span><br><span class="line">    <span class="keyword">private</span> String owner;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 构造方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BankAccount</span><span class="params">(String accountNumber, String owner, <span class="type">double</span> initialBalance)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.accountNumber = accountNumber;</span><br><span class="line">        <span class="built_in">this</span>.owner = owner;</span><br><span class="line">        <span class="built_in">this</span>.balance = initialBalance;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 公共方法 - 控制访问</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deposit</span><span class="params">(<span class="type">double</span> amount)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (amount &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            balance += amount;</span><br><span class="line">            System.out.println(<span class="string">&quot;存款成功，当前余额: &quot;</span> + balance);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;存款金额必须大于0&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">withdraw</span><span class="params">(<span class="type">double</span> amount)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (amount &gt; <span class="number">0</span> &amp;&amp; amount &lt;= balance) &#123;</span><br><span class="line">            balance -= amount;</span><br><span class="line">            System.out.println(<span class="string">&quot;取款成功，当前余额: &quot;</span> + balance);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;取款失败，金额无效或余额不足&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Getter方法 - 受控访问私有字段</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getBalance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> balance;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getAccountNumber</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> accountNumber;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getOwner</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> owner;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Setter方法 - 受控修改私有字段</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setOwner</span><span class="params">(String owner)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (owner != <span class="literal">null</span> &amp;&amp; !owner.trim().isEmpty()) &#123;</span><br><span class="line">            <span class="built_in">this</span>.owner = owner;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 不提供setBalance方法，防止随意修改余额</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EncapsulationDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">BankAccount</span> <span class="variable">account</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BankAccount</span>(<span class="string">&quot;123456789&quot;</span>, <span class="string">&quot;张三&quot;</span>, <span class="number">1000</span>);</span><br><span class="line">        </span><br><span class="line">        account.deposit(<span class="number">500</span>);  <span class="comment">// 存款成功，当前余额: 1500.0</span></span><br><span class="line">        account.withdraw(<span class="number">200</span>); <span class="comment">// 取款成功，当前余额: 1300.0</span></span><br><span class="line">        account.withdraw(<span class="number">2000</span>); <span class="comment">// 取款失败，金额无效或余额不足</span></span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;账户余额: &quot;</span> + account.getBalance());</span><br><span class="line">        <span class="comment">// account.balance = 10000;  // 编译错误，balance是私有的</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-封装原则"><a href="#2-封装原则" class="headerlink" title="2. 封装原则"></a>2. 封装原则</h3><ol><li><strong>最小访问原则</strong>：使用最严格的访问修饰符</li><li><strong>数据隐藏</strong>：字段通常设为private</li><li><strong>受控访问</strong>：通过public方法暴露必要操作</li><li><strong>不变性保护</strong>：对不应修改的字段不提供setter</li></ol><h3 id="3-封装优势"><a href="#3-封装优势" class="headerlink" title="3. 封装优势"></a>3. 封装优势</h3><ol><li><strong>安全性</strong>：防止外部直接访问内部数据</li><li><strong>灵活性</strong>：可以修改内部实现而不影响外部代码</li><li><strong>可维护性</strong>：易于修改和扩展</li><li><strong>数据验证</strong>：可以在方法中添加业务规则验证</li></ol><h2 id="四、接口-Interface"><a href="#四、接口-Interface" class="headerlink" title="四、接口(Interface)"></a>四、接口(Interface)</h2><h3 id="1-接口基础"><a href="#1-接口基础" class="headerlink" title="1. 接口基础"></a>1. 接口基础</h3><p>先补充个东西：大小写切换快捷键为<code>Ctrl+Shift+CapsLk</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 基本接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Switchable</span> &#123;</span><br><span class="line">    <span class="comment">// 常量 (默认 public static final)</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">MAX_BRIGHTNESS</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 抽象方法 (默认 public abstract)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">turnOn</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">turnOff</span><span class="params">()</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Java 8+ 默认方法</span></span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">adjustBrightness</span><span class="params">(<span class="type">int</span> level)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;调整亮度至: &quot;</span> + Math.min(level, MAX_BRIGHTNESS));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Java 8+ 静态方法</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printMaxBrightness</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;最大亮度: &quot;</span> + MAX_BRIGHTNESS);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接口继承</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">SmartDevice</span> <span class="keyword">extends</span> <span class="title class_">Switchable</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">connectToWifi</span><span class="params">(String ssid)</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">runApp</span><span class="params">(String appName)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 类实现接口</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LightBulb</span> <span class="keyword">implements</span> <span class="title class_">Switchable</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">turnOn</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;灯泡亮起&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">turnOff</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;灯泡熄灭&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SmartTV</span> <span class="keyword">implements</span> <span class="title class_">SmartDevice</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">turnOn</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;智能电视开机&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">turnOff</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;智能电视关机&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">connectToWifi</span><span class="params">(String ssid)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;连接到WiFi: &quot;</span> + ssid);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">runApp</span><span class="params">(String appName)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;运行应用: &quot;</span> + appName);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 覆盖默认方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">adjustBrightness</span><span class="params">(<span class="type">int</span> level)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;智能电视亮度调节至: &quot;</span> + level);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InterfaceDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Switchable</span> <span class="variable">bulb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LightBulb</span>();</span><br><span class="line">        bulb.turnOn();</span><br><span class="line">        bulb.adjustBrightness(<span class="number">80</span>);  <span class="comment">// 使用默认方法</span></span><br><span class="line">        bulb.turnOff();</span><br><span class="line">        </span><br><span class="line">        <span class="type">SmartTV</span> <span class="variable">tv</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SmartTV</span>();</span><br><span class="line">        tv.turnOn();</span><br><span class="line">        tv.connectToWifi(<span class="string">&quot;HomeWiFi&quot;</span>);</span><br><span class="line">        tv.runApp(<span class="string">&quot;Netflix&quot;</span>);</span><br><span class="line">        tv.adjustBrightness(<span class="number">60</span>);    <span class="comment">// 使用重写的默认方法</span></span><br><span class="line">        tv.turnOff();</span><br><span class="line">        </span><br><span class="line">        Switchable.printMaxBrightness();  <span class="comment">// 调用接口静态方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-接口特性"><a href="#2-接口特性" class="headerlink" title="2. 接口特性"></a>2. 接口特性</h3><ol><li><strong>多继承</strong>：一个类可以实现多个接口</li><li><strong>默认方法</strong>：Java 8+ 允许接口包含具体实现的方法</li><li><strong>静态方法</strong>：Java 8+ 允许接口包含静态方法</li><li><strong>私有方法</strong>：Java 9+ 允许接口包含私有方法</li><li><strong>常量定义</strong>：接口中定义的变量默认是public static final</li></ol><h3 id="3-接口与抽象类对比"><a href="#3-接口与抽象类对比" class="headerlink" title="3. 接口与抽象类对比"></a>3. 接口与抽象类对比</h3><div class="table-container"><table><thead><tr><th>特性</th><th>接口(Interface)</th><th>抽象类(Abstract Class)</th></tr></thead><tbody><tr><td>实例化</td><td>不能</td><td>不能</td></tr><tr><td>方法实现</td><td>Java 8+ 可以有默认方法</td><td>可以有具体方法</td></tr><tr><td>字段</td><td>只能是常量(public static final)</td><td>可以是普通成员变量</td></tr><tr><td>构造方法</td><td>没有</td><td>有</td></tr><tr><td>多继承</td><td>一个类可实现多个接口</td><td>一个类只能继承一个抽象类</td></tr><tr><td>访问修饰符</td><td>方法默认public</td><td>方法可以有各种访问修饰符</td></tr><tr><td>设计目的</td><td>定义行为规范</td><td>提供通用实现和规范</td></tr></tbody></table></div><h2 id="五、四大特性综合应用"><a href="#五、四大特性综合应用" class="headerlink" title="五、四大特性综合应用"></a>五、四大特性综合应用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 封装 - 隐藏实现细节</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Vehicle</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String model;  <span class="comment">// 私有字段</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">protected</span> <span class="title function_">Vehicle</span><span class="params">(String model)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.model = model;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Getter方法控制访问</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getModel</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> model;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 抽象方法 - 多态基础</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">stop</span><span class="params">()</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 具体方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">displayInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;车型: &quot;</span> + model);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接口定义额外能力</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Electric</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">charge</span><span class="params">()</span>;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">getBatteryLevel</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体类实现多态</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ElectricCar</span> <span class="keyword">extends</span> <span class="title class_">Vehicle</span> <span class="keyword">implements</span> <span class="title class_">Electric</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> batteryLevel;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ElectricCar</span><span class="params">(String model)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(model);</span><br><span class="line">        <span class="built_in">this</span>.batteryLevel = <span class="number">100</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(getModel() + <span class="string">&quot;电动车静音启动&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">stop</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(getModel() + <span class="string">&quot;电动车再生制动停止&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">charge</span><span class="params">()</span> &#123;</span><br><span class="line">        batteryLevel = <span class="number">100</span>;</span><br><span class="line">        System.out.println(getModel() + <span class="string">&quot;已充满电&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getBatteryLevel</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> batteryLevel;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 特有方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">autoPilot</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(getModel() + <span class="string">&quot;自动驾驶模式激活&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OOPIntegration</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Vehicle[] vehicles = &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">ElectricCar</span>(<span class="string">&quot;Tesla Model S&quot;</span>),</span><br><span class="line">            <span class="comment">// 可以添加其他Vehicle子类</span></span><br><span class="line">        &#125;;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (Vehicle vehicle : vehicles) &#123;</span><br><span class="line">            vehicle.displayInfo();</span><br><span class="line">            vehicle.start();</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (vehicle <span class="keyword">instanceof</span> Electric) &#123;</span><br><span class="line">                <span class="type">Electric</span> <span class="variable">electric</span> <span class="operator">=</span> (Electric) vehicle;</span><br><span class="line">                System.out.println(<span class="string">&quot;电量: &quot;</span> + electric.getBatteryLevel() + <span class="string">&quot;%&quot;</span>);</span><br><span class="line">                electric.charge();</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (vehicle <span class="keyword">instanceof</span> ElectricCar) &#123;</span><br><span class="line">                ((ElectricCar)vehicle).autoPilot();</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            vehicle.stop();</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="六、设计原则与最佳实践"><a href="#六、设计原则与最佳实践" class="headerlink" title="六、设计原则与最佳实践"></a>六、设计原则与最佳实践</h2><h3 id="1-SOLID原则"><a href="#1-SOLID原则" class="headerlink" title="1. SOLID原则"></a>1. SOLID原则</h3><ol><li><strong>单一职责原则(SRP)</strong>：一个类只负责一个功能领域</li><li><strong>开闭原则(OCP)</strong>：对扩展开放，对修改关闭</li><li><strong>里氏替换原则(LSP)</strong>：子类必须能替换父类</li><li><strong>接口隔离原则(ISP)</strong>：客户端不应依赖它不需要的接口</li><li><p><strong>依赖倒置原则(DIP)</strong>：依赖抽象而非具体实现</p></li><li><p><strong>迪米特法则</strong>：一个对象应当对其他对象有最少的了解</p></li><li><strong>合成复用原则</strong>：优先使用组合而非继承</li></ol><h3 id="2-面向对象设计技巧"><a href="#2-面向对象设计技巧" class="headerlink" title="2. 面向对象设计技巧"></a>2. 面向对象设计技巧</h3><ol><li><strong>优先使用组合而非继承</strong>：除非明确is-a关系</li><li><strong>面向接口编程</strong>：提高灵活性和可扩展性</li><li><strong>合理使用访问控制</strong>：遵循最小权限原则</li><li><strong>避免过度设计</strong>：根据实际需求设计类结构</li><li><strong>保持类和方法小巧</strong>：单一职责，高内聚低耦合</li></ol><h1 id="Java-枚举、包与反射全面解析"><a href="#Java-枚举、包与反射全面解析" class="headerlink" title="Java 枚举、包与反射全面解析"></a>Java 枚举、包与反射全面解析</h1><p>下面我将系统地讲解 Java 中枚举、包和反射的核心概念与使用场景。</p><h2 id="一、枚举-Enum"><a href="#一、枚举-Enum" class="headerlink" title="一、枚举(Enum)"></a>一、枚举(Enum)</h2><h3 id="1-枚举基础"><a href="#1-枚举基础" class="headerlink" title="1. 枚举基础"></a>1. 枚举基础</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 基本枚举定义</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">Day</span> &#123;</span><br><span class="line">    MONDAY, </span><br><span class="line">    TUESDAY, </span><br><span class="line">    WEDNESDAY, </span><br><span class="line">    THURSDAY, </span><br><span class="line">    FRIDAY, </span><br><span class="line">    SATURDAY, </span><br><span class="line">    SUNDAY</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 带属性的枚举</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">Planet</span> &#123;</span><br><span class="line">    MERCURY(<span class="number">3.303e+23</span>, <span class="number">2.4397e6</span>),</span><br><span class="line">    VENUS(<span class="number">4.869e+24</span>, <span class="number">6.0518e6</span>),</span><br><span class="line">    EARTH(<span class="number">5.976e+24</span>, <span class="number">6.37814e6</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">double</span> mass;   <span class="comment">// in kilograms</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">double</span> radius; <span class="comment">// in meters</span></span><br><span class="line">    </span><br><span class="line">    Planet(<span class="type">double</span> mass, <span class="type">double</span> radius) &#123;</span><br><span class="line">        <span class="built_in">this</span>.mass = mass;</span><br><span class="line">        <span class="built_in">this</span>.radius = radius;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">surfaceGravity</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">6.67300E-11</span> * mass / (radius * radius);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">surfaceWeight</span><span class="params">(<span class="type">double</span> otherMass)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> otherMass * surfaceGravity();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EnumDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 基本使用</span></span><br><span class="line">        <span class="type">Day</span> <span class="variable">today</span> <span class="operator">=</span> Day.WEDNESDAY;</span><br><span class="line">        System.out.println(<span class="string">&quot;Today is: &quot;</span> + today);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 遍历枚举</span></span><br><span class="line">        System.out.println(<span class="string">&quot;All days:&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Day day : Day.values()) &#123;</span><br><span class="line">            System.out.println(day);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 带属性的枚举使用</span></span><br><span class="line">        <span class="type">double</span> <span class="variable">earthWeight</span> <span class="operator">=</span> <span class="number">70</span>; <span class="comment">// kg</span></span><br><span class="line">        <span class="type">double</span> <span class="variable">mass</span> <span class="operator">=</span> earthWeight / Planet.EARTH.surfaceGravity();</span><br><span class="line">        <span class="keyword">for</span> (Planet p : Planet.values()) &#123;</span><br><span class="line">            System.out.printf(<span class="string">&quot;Your weight on %s is %f%n&quot;</span>,</span><br><span class="line">                p, p.surfaceWeight(mass));</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// switch语句中使用枚举</span></span><br><span class="line">        <span class="keyword">switch</span> (today) &#123;</span><br><span class="line">            <span class="keyword">case</span> MONDAY:</span><br><span class="line">                System.out.println(<span class="string">&quot;星期一综合症&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> FRIDAY:</span><br><span class="line">                System.out.println(<span class="string">&quot;感谢上帝，今天是星期五&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;普通工作日&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-枚举高级特性"><a href="#2-枚举高级特性" class="headerlink" title="2. 枚举高级特性"></a>2. 枚举高级特性</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">Operation</span> &#123;</span><br><span class="line">    PLUS(<span class="string">&quot;+&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">apply</span><span class="params">(<span class="type">double</span> x, <span class="type">double</span> y)</span> &#123; <span class="keyword">return</span> x + y; &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    MINUS(<span class="string">&quot;-&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">apply</span><span class="params">(<span class="type">double</span> x, <span class="type">double</span> y)</span> &#123; <span class="keyword">return</span> x - y; &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    TIMES(<span class="string">&quot;*&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">apply</span><span class="params">(<span class="type">double</span> x, <span class="type">double</span> y)</span> &#123; <span class="keyword">return</span> x * y; &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    DIVIDE(<span class="string">&quot;/&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">apply</span><span class="params">(<span class="type">double</span> x, <span class="type">double</span> y)</span> &#123; <span class="keyword">return</span> x / y; &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String symbol;</span><br><span class="line">    </span><br><span class="line">    Operation(String symbol) &#123;</span><br><span class="line">        <span class="built_in">this</span>.symbol = symbol;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> symbol;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="type">double</span> <span class="title function_">apply</span><span class="params">(<span class="type">double</span> x, <span class="type">double</span> y)</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 根据符号查找枚举</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Operation <span class="title function_">fromSymbol</span><span class="params">(String symbol)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (Operation op : Operation.values()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (op.symbol.equals(symbol)) &#123;</span><br><span class="line">                <span class="keyword">return</span> op;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;未知运算符: &quot;</span> + symbol);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AdvancedEnum</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">double</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">10.5</span>;</span><br><span class="line">        <span class="type">double</span> <span class="variable">y</span> <span class="operator">=</span> <span class="number">2.5</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (Operation op : Operation.values()) &#123;</span><br><span class="line">            System.out.printf(<span class="string">&quot;%f %s %f = %f%n&quot;</span>, </span><br><span class="line">                x, op, y, op.apply(x, y));</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="type">Operation</span> <span class="variable">op</span> <span class="operator">=</span> Operation.fromSymbol(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;10 * 5 = &quot;</span> + op.apply(<span class="number">10</span>, <span class="number">5</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-枚举最佳实践"><a href="#3-枚举最佳实践" class="headerlink" title="3. 枚举最佳实践"></a>3. 枚举最佳实践</h3><ol><li><strong>单例模式实现</strong>：枚举是实现单例的最佳方式</li><li><strong>策略模式</strong>：利用枚举的抽象方法实现策略模式</li><li><strong>状态机</strong>：适合用枚举实现有限状态机</li><li><strong>替代常量</strong>：比常量类更类型安全</li></ol><h2 id="二、包-Package"><a href="#二、包-Package" class="headerlink" title="二、包(Package)"></a>二、包(Package)</h2><h3 id="1-包基础使用"><a href="#1-包基础使用" class="headerlink" title="1. 包基础使用"></a>1. 包基础使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 文件: com/example/utils/MathUtils.java</span></span><br><span class="line"><span class="keyword">package</span> com.example.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MathUtils</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">factorial</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (n &lt;= <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> n * factorial(n - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 文件: com/example/Main.java</span></span><br><span class="line"><span class="keyword">package</span> com.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.utils.MathUtils;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.example.utils.MathUtils.add; <span class="comment">// 静态导入</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 使用完全限定名</span></span><br><span class="line">        System.out.println(com.example.utils.MathUtils.factorial(<span class="number">5</span>));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 使用import后的类名</span></span><br><span class="line">        System.out.println(MathUtils.add(<span class="number">3</span>, <span class="number">4</span>));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 使用静态导入的方法</span></span><br><span class="line">        System.out.println(add(<span class="number">5</span>, <span class="number">6</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-包的组织原则"><a href="#2-包的组织原则" class="headerlink" title="2. 包的组织原则"></a>2. 包的组织原则</h3><ol><li><strong>功能相关性</strong>：相同功能的类放在同一包中</li><li><strong>层次结构</strong>：按功能模块分层，如com.公司名.项目名.模块名</li><li><strong>访问控制</strong>：利用包级私有(package-private)保护实现细节</li><li><strong>避免循环依赖</strong>：包之间不应有循环依赖关系</li></ol><h3 id="3-JDK常用包"><a href="#3-JDK常用包" class="headerlink" title="3. JDK常用包"></a>3. JDK常用包</h3><div class="table-container"><table><thead><tr><th>包名</th><th>描述</th></tr></thead><tbody><tr><td>java.lang</td><td>核心类(自动导入)</td></tr><tr><td>java.util</td><td>工具类和集合框架</td></tr><tr><td>java.io</td><td>输入输出相关</td></tr><tr><td>java.net</td><td>网络编程</td></tr><tr><td>java.sql</td><td>数据库操作</td></tr><tr><td>java.time</td><td>日期时间API</td></tr></tbody></table></div><h2 id="三、反射-Reflection"><a href="#三、反射-Reflection" class="headerlink" title="三、反射(Reflection)"></a>三、反射(Reflection)</h2><h3 id="1-反射基础"><a href="#1-反射基础" class="headerlink" title="1. 反射基础"></a>1. 反射基础</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReflectionBasics</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 获取Class对象的三种方式</span></span><br><span class="line">        Class&lt;?&gt; stringClass1 = String.class;</span><br><span class="line">        Class&lt;?&gt; stringClass2 = <span class="string">&quot;Hello&quot;</span>.getClass();</span><br><span class="line">        Class&lt;?&gt; stringClass3 = Class.forName(<span class="string">&quot;java.lang.String&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        System.out.println(stringClass1 == stringClass2); <span class="comment">// true</span></span><br><span class="line">        System.out.println(stringClass2 == stringClass3); <span class="comment">// true</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 获取类信息</span></span><br><span class="line">        System.out.println(<span class="string">&quot;类名: &quot;</span> + stringClass1.getName());</span><br><span class="line">        System.out.println(<span class="string">&quot;简单类名: &quot;</span> + stringClass1.getSimpleName());</span><br><span class="line">        System.out.println(<span class="string">&quot;是否是接口: &quot;</span> + stringClass1.isInterface());</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 获取修饰符</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">modifiers</span> <span class="operator">=</span> stringClass1.getModifiers();</span><br><span class="line">        System.out.println(<span class="string">&quot;修饰符: &quot;</span> + Modifier.toString(modifiers));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 获取父类</span></span><br><span class="line">        Class&lt;?&gt; superClass = stringClass1.getSuperclass();</span><br><span class="line">        System.out.println(<span class="string">&quot;父类: &quot;</span> + superClass.getName());</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 获取实现的接口</span></span><br><span class="line">        Class&lt;?&gt;[] interfaces = stringClass1.getInterfaces();</span><br><span class="line">        System.out.println(<span class="string">&quot;实现的接口:&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Class&lt;?&gt; iface : interfaces) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;  &quot;</span> + iface.getName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-反射操作类成员"><a href="#2-反射操作类成员" class="headerlink" title="2. 反射操作类成员"></a>2. 反射操作类成员</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">privateMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;私有方法被调用&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReflectionMembers</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Class&lt;?&gt; personClass = Person.class;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 获取构造方法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;构造方法:&quot;</span>);</span><br><span class="line">        Constructor&lt;?&gt;[] constructors = personClass.getConstructors();</span><br><span class="line">        <span class="keyword">for</span> (Constructor&lt;?&gt; c : constructors) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;  &quot;</span> + c);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 创建实例</span></span><br><span class="line">        Constructor&lt;?&gt; constructor = personClass.getConstructor(String.class, <span class="type">int</span>.class);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">person</span> <span class="operator">=</span> constructor.newInstance(<span class="string">&quot;张三&quot;</span>, <span class="number">25</span>);</span><br><span class="line">        System.out.println(((Person)person).getName());</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 获取字段</span></span><br><span class="line">        System.out.println(<span class="string">&quot;\n字段:&quot;</span>);</span><br><span class="line">        Field[] fields = personClass.getDeclaredFields();</span><br><span class="line">        <span class="keyword">for</span> (Field field : fields) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;  &quot;</span> + field);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 访问私有字段</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">nameField</span> <span class="operator">=</span> personClass.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        nameField.setAccessible(<span class="literal">true</span>); <span class="comment">// 设置可访问</span></span><br><span class="line">        nameField.set(person, <span class="string">&quot;李四&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;修改后name: &quot;</span> + nameField.get(person));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 获取方法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;\n方法:&quot;</span>);</span><br><span class="line">        Method[] methods = personClass.getDeclaredMethods();</span><br><span class="line">        <span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;  &quot;</span> + method);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 调用方法</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">getNameMethod</span> <span class="operator">=</span> personClass.getMethod(<span class="string">&quot;getName&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;调用getName: &quot;</span> + getNameMethod.invoke(person));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 调用私有方法</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">privateMethod</span> <span class="operator">=</span> personClass.getDeclaredMethod(<span class="string">&quot;privateMethod&quot;</span>);</span><br><span class="line">        privateMethod.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        privateMethod.invoke(person);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-反射应用场景"><a href="#3-反射应用场景" class="headerlink" title="3. 反射应用场景"></a>3. 反射应用场景</h3><ol><li><strong>动态代理</strong>：AOP实现的基础</li><li><strong>注解处理</strong>：框架中处理自定义注解</li><li><strong>类浏览器/IDE</strong>：获取类结构信息</li><li><strong>序列化/反序列化</strong>：JSON/XML库的实现</li><li><strong>插件架构</strong>：动态加载类</li><li><strong>测试工具</strong>：Mock框架的实现</li></ol><h3 id="4-反射性能与安全"><a href="#4-反射性能与安全" class="headerlink" title="4. 反射性能与安全"></a>4. 反射性能与安全</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReflectionPerformance</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">ITERATIONS</span> <span class="operator">=</span> <span class="number">1000000</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 直接调用</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.nanoTime();</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; ITERATIONS; i++) &#123;</span><br><span class="line">            person.getName();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> <span class="variable">directTime</span> <span class="operator">=</span> System.nanoTime() - start;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 反射调用</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">getNameMethod</span> <span class="operator">=</span> Person.class.getMethod(<span class="string">&quot;getName&quot;</span>);</span><br><span class="line">        start = System.nanoTime();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; ITERATIONS; i++) &#123;</span><br><span class="line">            getNameMethod.invoke(person);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> <span class="variable">reflectionTime</span> <span class="operator">=</span> System.nanoTime() - start;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 反射调用(设置accessible)</span></span><br><span class="line">        getNameMethod.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        start = System.nanoTime();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; ITERATIONS; i++) &#123;</span><br><span class="line">            getNameMethod.invoke(person);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> <span class="variable">reflectionAccessibleTime</span> <span class="operator">=</span> System.nanoTime() - start;</span><br><span class="line">        </span><br><span class="line">        System.out.printf(<span class="string">&quot;直接调用耗时: %,d ns%n&quot;</span>, directTime);</span><br><span class="line">        System.out.printf(<span class="string">&quot;反射调用耗时: %,d ns%n&quot;</span>, reflectionTime);</span><br><span class="line">        System.out.printf(<span class="string">&quot;反射(setAccessible)调用耗时: %,d ns%n&quot;</span>, reflectionAccessibleTime);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 安全考虑</span></span><br><span class="line">        <span class="type">SecurityManager</span> <span class="variable">sm</span> <span class="operator">=</span> System.getSecurityManager();</span><br><span class="line">        <span class="keyword">if</span> (sm != <span class="literal">null</span>) &#123;</span><br><span class="line">            sm.checkPermission(<span class="keyword">new</span> <span class="title class_">ReflectPermission</span>(<span class="string">&quot;suppressAccessChecks&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>性能提示</strong>：</p><ol><li>反射操作比直接调用慢</li><li>通过setAccessible(true)可以提升性能</li><li>缓存Method/Field/Constructor对象避免重复查找</li></ol><p><strong>安全考虑</strong>：</p><ol><li>反射可以绕过访问控制检查</li><li>安全管理器可以限制反射操作</li><li>生产环境应谨慎使用反射</li></ol><h2 id="四、综合应用示例"><a href="#四、综合应用示例" class="headerlink" title="四、综合应用示例"></a>四、综合应用示例</h2><h3 id="1-注解处理器"><a href="#1-注解处理器" class="headerlink" title="1. 注解处理器"></a>1. 注解处理器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.annotation.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"><span class="meta">@interface</span> Test &#123;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">priority</span><span class="params">()</span> <span class="keyword">default</span> <span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestRunner</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">runTests</span><span class="params">(Class&lt;?&gt; testClass)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">testInstance</span> <span class="operator">=</span> testClass.getDeclaredConstructor().newInstance();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 获取所有方法并按优先级排序</span></span><br><span class="line">        Method[] methods = testClass.getDeclaredMethods();</span><br><span class="line">        Arrays.sort(methods, (m1, m2) -&gt; &#123;</span><br><span class="line">            <span class="type">Test</span> <span class="variable">t1</span> <span class="operator">=</span> m1.getAnnotation(Test.class);</span><br><span class="line">            <span class="type">Test</span> <span class="variable">t2</span> <span class="operator">=</span> m2.getAnnotation(Test.class);</span><br><span class="line">            <span class="type">int</span> <span class="variable">p1</span> <span class="operator">=</span> t1 != <span class="literal">null</span> ? t1.priority() : <span class="number">0</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">p2</span> <span class="operator">=</span> t2 != <span class="literal">null</span> ? t2.priority() : <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">return</span> Integer.compare(p2, p1); <span class="comment">// 降序</span></span><br><span class="line">        &#125;);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 执行测试方法</span></span><br><span class="line">        <span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">            <span class="keyword">if</span> (method.getAnnotation(Test.class) != <span class="literal">null</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Running test: &quot;</span> + method.getName());</span><br><span class="line">                method.invoke(testInstance);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyTests</span> &#123;</span><br><span class="line">    <span class="meta">@Test(priority = 1)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFeatureA</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Testing important feature A&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test(priority = 3)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFeatureB</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Testing feature B&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span> <span class="comment">// 默认优先级5</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFeatureC</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Testing feature C&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">helperMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 不会被测试运行器执行</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AnnotationProcessor</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        TestRunner.runTests(MyTests.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-简单DI容器"><a href="#2-简单DI容器" class="headerlink" title="2. 简单DI容器"></a>2. 简单DI容器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.annotation.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@interface</span> Inject &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SimpleDIContainer</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;Class&lt;?&gt;, Object&gt; instances = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">register</span><span class="params">(Class&lt;?&gt; clazz)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Constructor&lt;?&gt;[] constructors = clazz.getConstructors();</span><br><span class="line">        <span class="keyword">if</span> (constructors.length != <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;类必须有且只有一个公共构造方法&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        Constructor&lt;?&gt; constructor = constructors[<span class="number">0</span>];</span><br><span class="line">        Object[] params = Arrays.stream(constructor.getParameterTypes())</span><br><span class="line">            .map(paramType -&gt; &#123;</span><br><span class="line">                <span class="keyword">if</span> (!instances.containsKey(paramType)) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;未注册的依赖类型: &quot;</span> + paramType);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> instances.get(paramType);</span><br><span class="line">            &#125;)</span><br><span class="line">            .toArray();</span><br><span class="line">        </span><br><span class="line">        <span class="type">Object</span> <span class="variable">instance</span> <span class="operator">=</span> constructor.newInstance(params);</span><br><span class="line">        instances.put(clazz, instance);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; T <span class="title function_">getInstance</span><span class="params">(Class&lt;T&gt; clazz)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> clazz.cast(instances.get(clazz));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">injectFields</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">for</span> (Field field : obj.getClass().getDeclaredFields()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (field.isAnnotationPresent(Inject.class)) &#123;</span><br><span class="line">                field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                Class&lt;?&gt; fieldType = field.getType();</span><br><span class="line">                <span class="keyword">if</span> (!instances.containsKey(fieldType)) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;未注册的依赖类型: &quot;</span> + fieldType);</span><br><span class="line">                &#125;</span><br><span class="line">                field.set(obj, instances.get(fieldType));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ServiceA</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;ServiceA executed&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ServiceB</span> &#123;</span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    <span class="keyword">private</span> ServiceA serviceA;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doWork</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;ServiceB starting work&quot;</span>);</span><br><span class="line">        serviceA.execute();</span><br><span class="line">        System.out.println(<span class="string">&quot;ServiceB finished work&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DIContainerDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">SimpleDIContainer</span> <span class="variable">container</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDIContainer</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 注册组件</span></span><br><span class="line">        container.register(ServiceA.class);</span><br><span class="line">        container.register(ServiceB.class);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 获取实例并使用</span></span><br><span class="line">        <span class="type">ServiceB</span> <span class="variable">serviceB</span> <span class="operator">=</span> container.getInstance(ServiceB.class);</span><br><span class="line">        serviceB.doWork();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="五、关键知识点总结"><a href="#五、关键知识点总结" class="headerlink" title="五、关键知识点总结"></a>五、关键知识点总结</h2><ol><li><p><strong>枚举</strong>：</p><ul><li>类型安全的常量集合</li><li>可以包含字段、方法和构造方法</li><li>适合实现单例、策略模式等</li></ul></li><li><p><strong>包</strong>：</p><ul><li>组织类和接口的命名空间</li><li>控制访问权限（包级私有）</li><li>避免命名冲突</li></ul></li><li><p><strong>反射</strong>：</p><ul><li>运行时检查和操作类、方法、字段</li><li>强大的但应谨慎使用</li><li>性能开销较大，适合框架开发</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 结构速查 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java操作蓝图：常用数据结构与方法</title>
      <link href="/2025/04/01/java%E6%93%8D%E4%BD%9C%E8%93%9D%E5%9B%BE/"/>
      <url>/2025/04/01/java%E6%93%8D%E4%BD%9C%E8%93%9D%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<h1 id="Java操作蓝图：常用数据结构与方法"><a href="#Java操作蓝图：常用数据结构与方法" class="headerlink" title="Java操作蓝图：常用数据结构与方法"></a>Java操作蓝图：常用数据结构与方法</h1><blockquote><p>这是为了可以快速使用各种常用数据结构和方法的蓝图集合，通过给出一个空框架，提高效率。</p></blockquote><p>最近刷题陷入了迷茫，往往不知道该用什么数据结构，所以我决定写一个蓝图，方便以后使用。</p><div class="note warning modern"><p><a href="http://xhayane.top/2025/04/02/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%A0%B8%E5%BF%83%E6%80%9D%E6%83%B3%E4%B8%8E%E8%A7%A3%E9%A2%98%E8%93%9D%E5%9B%BE/">阅读该文章一定结合该链接一同食用</a></p></div><p>数据结构及其应用<br>数据结构是计算机存储和组织数据的方式，在工作中，我们通常会直接调用已经封装好的集合API，这样可以更高效的存储和访问数据，提高程序效率</p><p>我们的开发学习过程中需要和大量的数据打交道，一般使用集合容器完成</p><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ol><li><a href="#数组array">数组(Array)</a></li><li><a href="#列表listarraylist">列表(List/ArrayList)</a></li><li><a href="#链表linkedlist">链表(LinkedList)</a></li><li><a href="#栈stack">栈(Stack)</a></li><li><a href="#队列queue">队列(Queue)</a></li><li><a href="#优先队列priorityqueue">优先队列(PriorityQueue)</a></li><li><a href="#集合sethashset">集合(Set/HashSet)</a></li><li><a href="#有序集合treeset">有序集合(TreeSet)</a></li><li><a href="#映射maphashmap">映射(Map/HashMap)</a></li><li><a href="#有序映射treemap">有序映射(TreeMap)</a></li><li><a href="#字符串操作string">字符串操作(String)</a></li><li><a href="#工具类collectionsarrays">工具类(Collections/Arrays)</a></li></ol><p>接下来我对以上12个常用数据结构的用途做下简单的描述<br><strong>数组：</strong></p><ul><li>用途：固定大小的连续内存空间，存储相同类型元素</li><li>解决问题：快速随机访问，内存紧凑</li></ul><p><strong>列表：</strong></p><ul><li>用途：动态数组，自动扩容</li><li>解决问题：需要动态调整大小的数组</li></ul><p><strong>链表：</strong></p><ul><li>用途：双向链表实现，高效插入删除</li><li>解决问题：频繁在列表中间进行插入/删除操作</li></ul><p><strong>栈：</strong></p><ul><li>用途：后进先出(LIFO)结构</li><li>解决问题：需要后进先出逻辑的场景，如撤销操作、括号匹配</li></ul><p><strong>队列：</strong></p><ul><li>用途：先进先出(FIFO)结构</li><li>解决问题：任务调度、广度优先搜索等</li></ul><p><strong>优先队列：</strong></p><ul><li>用途：元素按照优先级排序的队列</li><li>解决问题：需要按照优先级处理元素的场景</li></ul><p><strong>集合：</strong></p><ul><li>用途：存储唯一元素的集合</li><li>解决问题：去重、查找</li></ul><p><strong>有序集合：</strong></p><ul><li>用途：元素按照自然顺序或自定义顺序排序的集合</li><li>解决问题：需要元素有序的场景</li></ul><p><strong>映射：</strong></p><ul><li>用途：键值对存储</li><li>解决问题：根据键快速查找值</li></ul><p><strong>有序映射：</strong></p><ul><li>用途：键值对按照键的自然顺序或自定义顺序排序</li><li>解决问题：需要键值对有序的场景</li></ul><p><strong>树：</strong></p><ul><li>用途：有序二叉树实现，高效查找</li><li>解决问题：有序键值对的集合</li></ul><p><strong>字符串操作：</strong></p><ul><li>用途：处理文本数据</li><li>解决问题：字符串拼接、查找、替换</li></ul><p><strong>工具类：</strong></p><ul><li>用途：提供各种常用操作的静态方法</li><li>解决问题：简化常见操作，如排序、查找、比较等</li></ul><hr><h2 id="集合容器（collection）"><a href="#集合容器（collection）" class="headerlink" title="集合容器（collection）"></a>集合容器（collection）</h2><p>集合容器是Java中用于存储和操作对象的容器，主要包括List、Set、Map等接口和它们的实现类。集合容器提供了丰富的方法来添加、删除、查找和操作元素，并且可以根据需要自动调整大小。</p><p>collection：集合类的父类（接口）包含了集合框架的基本操作</p><p><strong>List接口：</strong></p><ul><li>有序集合：List中的每个元素都有（下标）索引，可以根据索引访问元素</li><li>允许重复元素</li><li>常用实现类：ArrayList、LinkedList<br><strong>Set接口：</strong></li><li>不允许重复元素</li><li>常用实现类：HashSet、TreeSet<br><strong>Map接口：</strong></li><li>键值对存储</li><li>键不允许重复</li><li>常用实现类：HashMap、TreeMap</li></ul><h3 id="collection中的常用方法"><a href="#collection中的常用方法" class="headerlink" title="collection中的常用方法"></a>collection中的常用方法</h3><blockquote><p>我先用个大表来整理出来方法摘要,数据类型包括在里面的，方法摘要包括返回值，方法名，参数，作用，并用所属接口来分类（List,Set,Map）。</p></blockquote><div class="table-container"><table><thead><tr><th>方法摘要</th><th>返回值</th><th>方法名</th><th>参数</th><th>作用</th><th>所属接口</th></tr></thead><tbody><tr><td>boolean add(E e)</td><td>boolean</td><td>添加元素</td><td>E e</td><td>将指定元素添加到集合中</td><td>List,Set</td></tr><tr><td>void clear()</td><td>void</td><td>清空集合</td><td></td><td>移除集合中的所有元素</td><td>List,Set</td></tr><tr><td>boolean contains(Object o)</td><td>boolean</td><td>包含元素</td><td>Object o</td><td>判断集合是否包含指定元素</td><td>List,Set</td></tr><tr><td>boolean equals(Object o)</td><td>boolean</td><td>比较相等</td><td>Object o</td><td>比较集合与指定对象是否相等</td><td>List,Set</td></tr><tr><td>int hashCode()</td><td>int</td><td>哈希码</td><td></td><td>返回集合的哈希码值</td><td>List,Set</td></tr><tr><td>boolean isEmpty()</td><td>boolean</td><td>为空</td><td></td><td>判断集合是否为空</td><td>List,Set</td></tr><tr><td>int size()</td><td>int</td><td>大小</td><td></td><td>返回集合中的元素数量</td><td>List,Set</td></tr><tr><td>Object[] toArray()</td><td>Object[]</td><td>数组</td><td></td><td>返回包含集合中所有元素的数组</td><td>List,Set</td></tr><tr><td>boolean remove(Object o)</td><td>boolean</td><td>移除元素</td><td>Object o</td><td>移除集合中指定元素</td><td>List,Set</td></tr><tr><td>boolean containsAll(Collection&lt;?&gt; c)</td><td>boolean</td><td>包含所有</td><td>Collection&lt;?&gt; c</td><td>判断集合是否包含指定集合的所有元素</td><td>List,Set</td></tr><tr><td>boolean removeAll(Collection&lt;?&gt; c)</td><td>boolean</td><td>移除所有</td><td>Collection&lt;?&gt; c</td><td>移除集合中包含指定集合的所有元素</td><td>List,Set</td></tr><tr><td>boolean retainAll(Collection&lt;?&gt; c)</td><td>boolean</td><td>保留所有</td><td>Collection&lt;?&gt; c</td><td>仅保留集合中包含指定集合的元素</td><td>List,Set</td></tr><tr><td>default Stream<E> parallelStream()</td><td>Stream<E></td><td>并行流操作</td><td></td><td>返回集合的并行流，用于并发操作</td><td>List,Set</td></tr><tr><td>default Stream<E> stream()</td><td>Stream<E></td><td>顺序流操作</td><td></td><td>返回集合的顺序流，用于顺序操作</td><td>List,Set</td></tr><tr><td>default void forEach(Consumer&lt;? super E&gt; action)</td><td>void</td><td>遍历操作</td><td>Consumer&lt;? super E&gt; action</td><td>对集合中的每个元素执行指定操作</td><td>List,Set</td></tr><tr><td>default Spliterator<E> spliterator()</td><td>Spliterator<E></td><td>拆分迭代器</td><td></td><td>返回集合的拆分迭代器，用于并行操作</td><td>List,Set</td></tr><tr><td>default boolean removeIf(Predicate&lt;? super E&gt; filter)</td><td>boolean</td><td>移除满足条件</td><td>Predicate&lt;? super E&gt; filter</td><td>移除满足指定条件的元素</td><td>List</td></tr></tbody></table></div><p>不行再去查api文档喔</p><p>由于collection是接口无法使用，并且List,set,map都是collection的子接口，所以我们在使用的时候都是用它的实现类。ArrayList,LinkedList,HashSet,TreeSet,HashMap,TreeMap等。</p><div class="note info simple"><p>info 由于collection是接口无法使用，并且List,set,map都是collection的子接口，所以我们在使用的时候都是用它的实现类。ArrayList,LinkedList,HashSet,TreeSet,HashMap,TreeMap等。</p></div><h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3><p>List接口：有序集合，每个元素都有索引，可以根据索引访问元素。常用实现类有ArrayList和LinkedList，Vector。</p><ul><li>ArrayList：基于动态数组实现，支持随机访问，适用于频繁读取元素。</li><li>LinkedList：基于双向链表实现，适用于频繁插入/删除元素。</li><li>Vector：<strong>与ArrayList类似，但<code>线程安全</code>，适用于多线程环境</strong>。</li></ul><p>简单使用方法的蓝图：</p><p><strong>在使用List时候，请尽量避免在一个方法中使用多种数据类型，用泛型进行限定。</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个ArrayList</span></span><br><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"><span class="comment">// 添加元素</span></span><br><span class="line">list.add(<span class="string">&quot;元素1&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;元素2&quot;</span>);</span><br><span class="line"><span class="comment">// 获取元素</span></span><br><span class="line"><span class="type">String</span> <span class="variable">element</span> <span class="operator">=</span> list.get(<span class="number">0</span>);</span><br><span class="line"><span class="comment">//检查是否为空</span></span><br><span class="line"><span class="keyword">if</span>(list.isEmpty())&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;列表为空&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//集合中元素的数量</span></span><br><span class="line"><span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> list.size();</span><br><span class="line"><span class="comment">//判断包含某个元素</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">contains</span> <span class="operator">=</span> list.contains(<span class="string">&quot;元素1&quot;</span>);</span><br><span class="line"><span class="comment">//遍历列表</span></span><br><span class="line"><span class="keyword">for</span> (String item : list) &#123;</span><br><span class="line">    System.out.println(item);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//遍历列表（2）</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">    System.out.println(list.get(i));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//删除元素</span></span><br><span class="line">list.remove(<span class="string">&quot;元素1&quot;</span>);</span><br><span class="line"><span class="comment">//将列表转换为数组</span></span><br><span class="line">Object[] array = list.toArray();</span><br><span class="line"><span class="comment">//数组排序</span></span><br><span class="line">Arrays.sort(array);</span><br><span class="line"><span class="comment">//数组转换为列表</span></span><br><span class="line">List&lt;String&gt; sortedList = Arrays.asList(array);</span><br><span class="line"></span><br></pre></td></tr></table></figure><br><strong>自定义泛型</strong>（想看就看，不看也就讲究理解下）<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ListConom;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.classTestingPackage.Class.MyDate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomGeneric</span>&lt;E&gt; &#123;</span><br><span class="line">    <span class="comment">// 数组容器</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">DEFAULT_CAPACITY</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="comment">// 定义Object数组</span></span><br><span class="line">    <span class="keyword">private</span> Object[] array;</span><br><span class="line">    <span class="comment">// 当前元素数量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造函数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CustomGeneric</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.array = <span class="keyword">new</span> <span class="title class_">Object</span>[DEFAULT_CAPACITY];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CustomGeneric</span><span class="params">(<span class="type">int</span> capacity)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.array = <span class="keyword">new</span> <span class="title class_">Object</span>[capacity &gt; <span class="number">0</span> ? capacity : DEFAULT_CAPACITY];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 指定位置插入数据</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> index, E element)</span> &#123;</span><br><span class="line">        checkIndexForAdd(index);</span><br><span class="line">        ensureCapacity(size + <span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 移动元素</span></span><br><span class="line">        System.arraycopy(array, index, array, index + <span class="number">1</span>, size - index);</span><br><span class="line">        array[index] = element;</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 数组末尾添加数据</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(E element)</span> &#123;</span><br><span class="line">        ensureCapacity(size + <span class="number">1</span>);</span><br><span class="line">        array[size++] = element;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 数组中获得数据</span></span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">get</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        checkIndex(index);</span><br><span class="line">        <span class="keyword">return</span> (E) array[index];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取当前元素数量</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 扩容检查</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">ensureCapacity</span><span class="params">(<span class="type">int</span> minCapacity)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (minCapacity &gt; array.length) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">newCapacity</span> <span class="operator">=</span> array.length * <span class="number">2</span>;</span><br><span class="line">            Object[] newArray = <span class="keyword">new</span> <span class="title class_">Object</span>[newCapacity];</span><br><span class="line">            System.arraycopy(array, <span class="number">0</span>, newArray, <span class="number">0</span>, size);</span><br><span class="line">            array = newArray;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 索引检查</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">checkIndex</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt;= size) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IndexOutOfBoundsException</span>(<span class="string">&quot;Index: &quot;</span> + index + <span class="string">&quot;, Size: &quot;</span> + size);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加操作的索引检查</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">checkIndexForAdd</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt; size) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IndexOutOfBoundsException</span>(<span class="string">&quot;Index: &quot;</span> + index + <span class="string">&quot;, Size: &quot;</span> + size);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 自定义集合</span></span><br><span class="line">        CustomGeneric&lt;String&gt; array = <span class="keyword">new</span> <span class="title class_">CustomGeneric</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// 插入数据</span></span><br><span class="line">        array.add(<span class="number">0</span>, <span class="string">&quot;jack&quot;</span>);</span><br><span class="line">        array.add(<span class="number">1</span>, <span class="string">&quot;tom&quot;</span>);</span><br><span class="line">        array.add(<span class="string">&quot;jerry&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        System.out.println(array.get(<span class="number">0</span>)); <span class="comment">// 输出: jack</span></span><br><span class="line">        System.out.println(array.size()); <span class="comment">// 输出: 3</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><p>Set接口：不允许重复元素，常用实现类有HashSet和TreeSet。</p><ul><li>HashSet：基于哈希表实现，不保证有序，不允许重复元素。</li><li>TreeSet：基于红黑树实现，有序集合，不允许重复元素。</li></ul><h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><p>Map接口：键值对存储，键不允许重复，常用实现类有HashMap和TreeMap。</p><ul><li>HashMap：基于哈希表实现，键无序，不允许重复键。</li><li>TreeMap：基于红黑树实现，键有序，不允许重复键。</li><li>Hashtable：和HashMap类似，但线程安全，不允许null键或值。F</li></ul><h2 id="三个非常近似的数据结构（数组，列表，链表）"><a href="#三个非常近似的数据结构（数组，列表，链表）" class="headerlink" title="三个非常近似的数据结构（数组，列表，链表）"></a>三个非常近似的数据结构（数组，列表，链表）</h2><p>表格区分下这几个结构的区别：</p><div class="table-container"><table><thead><tr><th>数据结构</th><th>存储方式</th><th>插入/删除效率</th><th>查找效率</th><th>适用场景</th></tr></thead><tbody><tr><td>数组</td><td>连续内存</td><td>低</td><td>高</td><td>固定大小，随机访问</td></tr><tr><td>列表</td><td>离散内存</td><td>中</td><td>低</td><td>动态大小，顺序访问</td></tr><tr><td>链表</td><td>离散内存</td><td>高</td><td>低</td><td>动态大小，任意访问</td></tr></tbody></table></div><p>说人话理解就是：</p><div class="note success simple"><p><strong>数组</strong>：就像一排整齐的盒子，每个盒子都有固定的位置。你可以根据盒子的编号（索引）快速找到特定的盒子。但是，如果你需要在中间添加或删除盒子，效率会很低，因为你需要移动其他盒子的位置。<br><strong>列表</strong>：就像一个队伍，每个人都有自己的位置，但不一定是按顺序排的。如果你需要找排在第3位的人，你只能一个一个人往后面数。但是，如果你需要在队伍中间加入一个人，你可以直接让他站在第3位，而其他人不需要改变位置。<br><strong>链表</strong>：就像一列火车，每节车厢都有自己的位置，但是车厢之间通过钩钩连接。你可以随时在任何车厢之间加入或移除车厢，而不需要改变其他车厢的位置。</p></div><p><strong>那么我什么时候用什么呢？</strong><br><div class="note info simple"><p>info 提示块标签</p></div></p><h2 id="数组-Array"><a href="#数组-Array" class="headerlink" title="数组(Array)"></a>数组(Array)</h2><p>数组是一种线性数据结构，用于存储相同类型的元素。数组的特点是：</p><ol><li>元素有序：数组中的元素按照索引顺序存储，每个元素都有一个唯一的位置。</li><li>固定大小：数组一旦创建，其大小就不能改变。</li><li>随机访问：可以通过索引直接访问数组中的任意元素。</li></ol><p><strong>和链表和列表做出区别：</strong></p><ol><li>存储方式：数组在内存中是连续存储的，而链表和列表通常是离散存储的。</li><li>插入/删除效率：在数组中间插入或删除元素需要移动后续元素，效率较低，而链表和列表可以在常数时间内完成这些操作。</li><li>查找效率：数组支持随机访问，通过索引可以在常数时间内找到任意元素，而链表和列表通常需要线性查找。</li></ol><p><strong>用途</strong>：固定大小的连续内存空间，存储相同类型元素<br><strong>解决问题</strong>：快速随机访问，内存紧凑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明与初始化</span></span><br><span class="line"><span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>];  <span class="comment">// 声明长度为10的整型数组</span></span><br><span class="line"><span class="type">int</span>[] arr2 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;   <span class="comment">// 声明并初始化</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 常用操作</span></span><br><span class="line">arr[<span class="number">0</span>] = <span class="number">5</span>;               <span class="comment">// 赋值</span></span><br><span class="line"><span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> arr.length;  <span class="comment">// 获取长度(不是方法，是属性)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历数组</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    System.out.println(arr[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 增强for循环</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> num : arr) &#123;</span><br><span class="line">    System.out.println(num);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 多维数组</span></span><br><span class="line"><span class="type">int</span>[][] matrix = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>][<span class="number">3</span>];</span><br><span class="line">matrix[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//扩容操作</span></span><br><span class="line"><span class="type">int</span>[] arr = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">arr = Arrays.copyOf(arr, arr.length * <span class="number">2</span>);  <span class="comment">// 扩容到当前长度的2倍</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//如果用循环的方式来实现扩容操作</span></span><br><span class="line"><span class="type">int</span>[] arr = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line"><span class="type">int</span>[] newArr = <span class="keyword">new</span> <span class="title class_">int</span>[arr.length * <span class="number">2</span>];  <span class="comment">// 新数组长度为旧数组的倍</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    newArr[i] = arr[i];  <span class="comment">// 复制旧数组元素</span></span><br><span class="line">&#125;</span><br><span class="line">arr = newArr;  <span class="comment">// 新数组替换旧数组</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 常用方法</span></span><br><span class="line">Arrays.sort(arr);  <span class="comment">// 数组排序</span></span><br><span class="line">Arrays.equals(arr1, arr2);  <span class="comment">// 比较数组内容</span></span><br><span class="line">Arrays.toString(arr);  <span class="comment">// 数组转字符串</span></span><br><span class="line">System.arraycopy(arr1, <span class="number">0</span>, arr2, <span class="number">0</span>, arr1.length);  <span class="comment">// 数组复制</span></span><br><span class="line">Arrays.binarySearch(arr, <span class="number">5</span>);  <span class="comment">// 二分查找 (数组必须有序)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组转换为列表</span></span><br><span class="line">List&lt;Integer&gt; list = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"><span class="comment">// 注意：转换后的列表不能添加或删除元素，否则会抛出UnsupportedOperationException异常</span></span><br><span class="line"><span class="comment">// 如果需要修改列表，建议先复制到新列表</span></span><br><span class="line">List&lt;Integer&gt; modifiableList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(list);</span><br><span class="line">modifiableList.add(<span class="number">4</span>);  <span class="comment">// 添加元素</span></span><br></pre></td></tr></table></figure><p>ArrayList底层使用数组来存储元素，所以它的随机访问效率高，但在列表中间插入/删除元素的效率较低。线程不安全</p><blockquote><p>从代码可以发现底层使用Object数组来存储元素，初始化长度大小为10，ArrayList的存储操作都是围绕着这个数组来进行的，但是数组的长度固定，为了无需指定长度，每次添加元素时，都需要判断数组是否已满，如果已满则需要扩容，扩容的大小为原来的1.5倍，然后将原数组的元素复制到新数组中，来实现扩容。</p></blockquote><hr><h2 id="列表-List-ArrayList"><a href="#列表-List-ArrayList" class="headerlink" title="列表(List/ArrayList)"></a>列表(List/ArrayList)</h2><p>列表是一种有序的集合，允许重复元素。列表的主要实现类是ArrayList，它提供了动态数组的功能。</p><p><strong>和数组做出区别：</strong></p><ol><li>长度可变：数组长度固定，而列表长度可变。</li><li>存储类型：数组可以存储基本类型和引用类型，而列表只能存储引用类型。</li><li>性能：在列表中间插入/删除元素的性能通常比数组差，因为需要移动后续元素。而随机访问元素的性能与数组相同。</li></ol><p><strong>用途</strong>：动态数组，自动扩容<br><strong>解决问题</strong>：需要动态调整大小的数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建ArrayList</span></span><br><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();  <span class="comment">// 推荐使用接口类型声明</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加元素</span></span><br><span class="line">list.add(<span class="string">&quot;Apple&quot;</span>);</span><br><span class="line">list.add(<span class="number">0</span>, <span class="string">&quot;Banana&quot;</span>);  <span class="comment">// 在指定位置插入</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取元素</span></span><br><span class="line"><span class="type">String</span> <span class="variable">fruit</span> <span class="operator">=</span> list.get(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改元素</span></span><br><span class="line">list.set(<span class="number">0</span>, <span class="string">&quot;Orange&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除元素</span></span><br><span class="line">list.remove(<span class="number">0</span>);         <span class="comment">// 按索引删除</span></span><br><span class="line">list.remove(<span class="string">&quot;Orange&quot;</span>);  <span class="comment">// 按元素删除</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 大小检查</span></span><br><span class="line"><span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> list.size();</span><br><span class="line"><span class="type">boolean</span> <span class="variable">isEmpty</span> <span class="operator">=</span> list.isEmpty();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 包含检查</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">contains</span> <span class="operator">=</span> list.contains(<span class="string">&quot;Apple&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历</span></span><br><span class="line"><span class="keyword">for</span> (String item : list) &#123;</span><br><span class="line">    System.out.println(item);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用迭代器</span></span><br><span class="line">Iterator&lt;String&gt; it = list.iterator();</span><br><span class="line"><span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">    System.out.println(it.next());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 转换为数组</span></span><br><span class="line">String[] array = list.toArray(<span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 常用方法</span></span><br><span class="line">list.add(<span class="string">&quot;Cherry&quot;</span>);  <span class="comment">// 添加元素</span></span><br><span class="line">list.remove(<span class="string">&quot;Apple&quot;</span>);  <span class="comment">// 删除元素</span></span><br><span class="line">list.contains(<span class="string">&quot;Banana&quot;</span>);  <span class="comment">// 检查元素是否存在</span></span><br><span class="line">list.size();  <span class="comment">// 获取大小</span></span><br><span class="line">list.isEmpty();  <span class="comment">// 检查是否为空</span></span><br><span class="line">list.get(<span class="number">0</span>);  <span class="comment">// 获取元素</span></span><br><span class="line">list.set(<span class="number">0</span>, <span class="string">&quot;New&quot;</span>);  <span class="comment">// 修改元素</span></span><br><span class="line">list.indexOf(<span class="string">&quot;Cherry&quot;</span>);  <span class="comment">// 查找元素索引</span></span><br><span class="line">list.subList(<span class="number">1</span>, <span class="number">3</span>);  <span class="comment">// 获取子列表</span></span><br><span class="line">list.clear();  <span class="comment">// 清空列表</span></span><br><span class="line">list.add(<span class="string">&quot;Apple&quot;</span>);  <span class="comment">// 添加元素</span></span><br><span class="line">list.add(<span class="string">&quot;Banana&quot;</span>);  <span class="comment">// 添加元素</span></span><br><span class="line">list.add(<span class="string">&quot;Cherry&quot;</span>);  <span class="comment">// 添加元素</span></span><br><span class="line">list.add(<span class="string">&quot;Apple&quot;</span>);  <span class="comment">// 添加元素</span></span><br><span class="line">list.remove(<span class="string">&quot;Apple&quot;</span>);  <span class="comment">// 删除第一个匹配项</span></span><br><span class="line">list.removeAll(Collections.singleton(<span class="string">&quot;Apple&quot;</span>));  <span class="comment">// 删除所有匹配项</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="链表-LinkedList"><a href="#链表-LinkedList" class="headerlink" title="链表(LinkedList)"></a>链表(LinkedList)</h2><p>链表是一种常见的动态数据结构，由节点组成，每个节点包含数据和指向下一个节点的引用。把它当成火车皮，每一个节点可以接在其他节点后</p><p>和列表的区别：</p><ol><li>存储方式：链表节点离散存储，而列表通常是连续存储的。</li><li>插入/删除效率：在链表中间插入或删除元素只需改变引用，而列表需要移动后续元素。</li><li>查找效率：链表通常需要线性查找，而列表支持随机访问。</li></ol><p><strong>用途</strong>：双向链表实现，高效插入删除<br><strong>解决问题</strong>：频繁在列表中间进行插入/删除操作</p><p>下面是代码实现：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建LinkedList</span></span><br><span class="line">List&lt;String&gt; linkedList = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加元素 (与ArrayList类似)</span></span><br><span class="line">linkedList.add(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">linkedList.addFirst(<span class="string">&quot;B&quot;</span>);  <span class="comment">// 特有方法</span></span><br><span class="line">linkedList.addLast(<span class="string">&quot;C&quot;</span>);   <span class="comment">// 特有方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取元素</span></span><br><span class="line"><span class="type">String</span> <span class="variable">first</span> <span class="operator">=</span> linkedList.getFirst();</span><br><span class="line"><span class="type">String</span> <span class="variable">last</span> <span class="operator">=</span> linkedList.getLast();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除元素</span></span><br><span class="line">linkedList.removeFirst();</span><br><span class="line">linkedList.removeLast();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 作为队列使用</span></span><br><span class="line">Queue&lt;String&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">queue.offer(<span class="string">&quot;A&quot;</span>);  <span class="comment">// 入队</span></span><br><span class="line">queue.poll();      <span class="comment">// 出队</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 作为栈使用 (推荐)</span></span><br><span class="line">Deque&lt;String&gt; stack = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">stack.push(<span class="string">&quot;A&quot;</span>);  <span class="comment">// 压栈</span></span><br><span class="line">stack.pop();     <span class="comment">// 出栈</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 常用方法</span></span><br><span class="line">linkedList.contains(<span class="string">&quot;B&quot;</span>);  <span class="comment">// 检查元素是否存在</span></span><br><span class="line">linkedList.size();  <span class="comment">// 获取大小</span></span><br><span class="line">linkedList.isEmpty();  <span class="comment">// 检查是否为空</span></span><br><span class="line">linkedList.get(<span class="number">0</span>);  <span class="comment">// 获取元素 (性能低，不推荐)</span></span><br><span class="line">linkedList.set(<span class="number">0</span>, <span class="string">&quot;New&quot;</span>);  <span class="comment">// 修改元素 (性能低，不推荐)</span></span><br><span class="line">linkedList.indexOf(<span class="string">&quot;B&quot;</span>);  <span class="comment">// 查找元素索引 (性能低，不推荐)</span></span><br><span class="line">linkedList.subList(<span class="number">1</span>, <span class="number">3</span>);  <span class="comment">// 获取子列表 (性能低，不推荐)</span></span><br><span class="line">linkedList.clear();  <span class="comment">// 清空列表</span></span><br><span class="line">linkedList.add(<span class="string">&quot;Apple&quot;</span>);  <span class="comment">// 添加元素</span></span><br><span class="line">linkedList.remove(<span class="string">&quot;Apple&quot;</span>);  <span class="comment">// 删除第一个匹配项</span></span><br><span class="line">linkedList.removeAll(Collections.singleton(<span class="string">&quot;Apple&quot;</span>));  <span class="comment">// 删除所有匹配项</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></p><hr><h2 id="栈-Stack"><a href="#栈-Stack" class="headerlink" title="栈(Stack)"></a>栈(Stack)</h2><blockquote><p>弹匣结构理解</p></blockquote><p>栈结构：<br>栈是一种线性数据结构，它的特点是只能在栈顶进行插入和删除操作。栈的操作只能从栈顶进行，这意味着最后一个放入栈中的元素是第一个被弹出的。栈通常用于需要后进先出(LIFO)逻辑的场景，如撤销操作、括号匹配等。</p><p>栈的主要操作包括：</p><ol><li><strong>压栈（Push）</strong>：将元素放入栈顶。</li><li><strong>弹栈（Pop）</strong>：移除栈顶元素。</li><li><strong>查看栈顶元素（Peek）</strong>：返回栈顶元素，但不弹出。</li></ol><p><strong>用途</strong>：后进先出(LIFO)结构<br><strong>解决问题</strong>：需要后进先出逻辑的场景，如撤销操作、括号匹配</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建栈 (推荐使用Deque实现)</span></span><br><span class="line">Deque&lt;Integer&gt; stack = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压栈</span></span><br><span class="line">stack.push(<span class="number">1</span>);</span><br><span class="line">stack.push(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 弹栈</span></span><br><span class="line"><span class="type">int</span> <span class="variable">top</span> <span class="operator">=</span> stack.pop();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查看栈顶元素</span></span><br><span class="line"><span class="type">int</span> <span class="variable">peek</span> <span class="operator">=</span> stack.peek();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查是否为空</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">empty</span> <span class="operator">=</span> stack.isEmpty();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 栈大小</span></span><br><span class="line"><span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> stack.size();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历栈 (不推荐)</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> item : stack) &#123;</span><br><span class="line">    System.out.println(item);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 清空栈</span></span><br><span class="line">stack.clear();</span><br></pre></td></tr></table></figure><hr><h2 id="队列-Queue"><a href="#队列-Queue" class="headerlink" title="队列(Queue)"></a>队列(Queue)</h2><blockquote><p>水管结构理解</p></blockquote><p>队列结构：<br>队列是一种线性数据结构，它的特点是只能在队尾插入元素，在队首删除元素。队列的操作只能从队首进行，这意味着最早进入队列的元素是第一个被移除的。队列通常用于需要先进先出(FIFO)逻辑的场景，如任务调度、广度优先搜索等。</p><p><strong>用途</strong>：先进先出(FIFO)结构<br><strong>解决问题</strong>：任务调度、广度优先搜索等</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建队列 (LinkedList实现)</span></span><br><span class="line">Queue&lt;String&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 入队</span></span><br><span class="line">queue.offer(<span class="string">&quot;A&quot;</span>);  <span class="comment">// 推荐使用offer而不是add(不抛异常)</span></span><br><span class="line">queue.add(<span class="string">&quot;B&quot;</span>);    <span class="comment">// 可能抛出异常</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 出队</span></span><br><span class="line"><span class="type">String</span> <span class="variable">item</span> <span class="operator">=</span> queue.poll();  <span class="comment">// 返回并移除队首，队列为空返回null</span></span><br><span class="line"><span class="type">String</span> <span class="variable">item2</span> <span class="operator">=</span> queue.remove(); <span class="comment">// 队列为空抛出异常</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 查看队首</span></span><br><span class="line"><span class="type">String</span> <span class="variable">head</span> <span class="operator">=</span> queue.peek();  <span class="comment">// 队列为空返回null</span></span><br><span class="line"><span class="type">String</span> <span class="variable">head2</span> <span class="operator">=</span> queue.element(); <span class="comment">// 队列为空抛出异常</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 大小</span></span><br><span class="line"><span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> queue.size();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历队列 (不推荐)</span></span><br><span class="line"><span class="keyword">for</span> (String item : queue) &#123;</span><br><span class="line">    System.out.println(item);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 清空队列</span></span><br><span class="line">queue.clear();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 常用方法</span></span><br><span class="line">queue.contains(<span class="string">&quot;B&quot;</span>);  <span class="comment">// 检查元素是否存在</span></span><br><span class="line">queue.size();  <span class="comment">// 获取大小</span></span><br><span class="line">queue.isEmpty();  <span class="comment">// 检查是否为空</span></span><br><span class="line">queue.offer(<span class="string">&quot;C&quot;</span>);  <span class="comment">// 入队</span></span><br><span class="line">queue.poll();     <span class="comment">// 出队</span></span><br><span class="line">queue.peek();     <span class="comment">// 查看队首 (不删除)</span></span><br></pre></td></tr></table></figure><hr><h2 id="优先队列-PriorityQueue"><a href="#优先队列-PriorityQueue" class="headerlink" title="优先队列(PriorityQueue)"></a>优先队列(PriorityQueue)</h2><p>优先队列结构：<br>优先队列是一种特殊的队列，它的元素按照优先级进行排序。每个元素都有一个与之关联的优先级，当从队列中取出元素时，具有最高优先级的元素先被取出。优先队列通常用于需要按<strong>优先级顺序</strong>处理元素的场景，如任务调度、最短路径算法等。</p><p><strong>用途</strong>：按优先级出队的队列<br><strong>解决问题</strong>：需要按特定顺序处理元素的场景，如任务调度</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建优先队列 (默认最小堆)</span></span><br><span class="line">PriorityQueue&lt;Integer&gt; pq = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义比较器 (最大堆)</span></span><br><span class="line">PriorityQueue&lt;Integer&gt; maxHeap = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;((a, b) -&gt; b - a);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加元素</span></span><br><span class="line">pq.offer(<span class="number">5</span>);</span><br><span class="line">pq.add(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取并移除队首(最小元素)</span></span><br><span class="line"><span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> pq.poll();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查看队首</span></span><br><span class="line"><span class="type">int</span> <span class="variable">peek</span> <span class="operator">=</span> pq.peek();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 大小</span></span><br><span class="line"><span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> pq.size();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历 (不推荐)</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> item : pq) &#123;</span><br><span class="line">    System.out.println(item);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 清空队列</span></span><br><span class="line">pq.clear();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 常用方法</span></span><br><span class="line">pq.contains(<span class="number">3</span>);  <span class="comment">// 检查元素是否存在</span></span><br><span class="line">pq.size();  <span class="comment">// 获取大小</span></span><br><span class="line">pq.isEmpty();  <span class="comment">// 检查是否为空</span></span><br><span class="line">pq.offer(<span class="number">4</span>);  <span class="comment">// 入队</span></span><br><span class="line">pq.poll();     <span class="comment">// 出队</span></span><br><span class="line">pq.peek();     <span class="comment">// 查看队首 (不删除)</span></span><br><span class="line">pq.remove(<span class="number">3</span>);  <span class="comment">// 删除元素</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="集合-Set-HashSet"><a href="#集合-Set-HashSet" class="headerlink" title="集合(Set/HashSet)"></a>集合(Set/HashSet)</h2><p>集合结构：<br>集合是一种用于<strong>存储不重复元素</strong>的数据结构。集合通常用于需要去重或快速成员检查的场景。</p><p><strong>用途</strong>：不包含重复元素的集合<br><strong>解决问题</strong>：去重、快速成员检查</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建HashSet</span></span><br><span class="line">Set&lt;String&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加元素</span></span><br><span class="line">set.add(<span class="string">&quot;Apple&quot;</span>);</span><br><span class="line">set.add(<span class="string">&quot;Banana&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查存在</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">hasApple</span> <span class="operator">=</span> set.contains(<span class="string">&quot;Apple&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除元素</span></span><br><span class="line">set.remove(<span class="string">&quot;Apple&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 大小</span></span><br><span class="line"><span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> set.size();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历</span></span><br><span class="line"><span class="keyword">for</span> (String item : set) &#123;</span><br><span class="line">    System.out.println(item);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//迭代器</span></span><br><span class="line">Iterator&lt;String&gt; iterator = set.iterator();</span><br><span class="line"><span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">item</span> <span class="operator">=</span> iterator.next();</span><br><span class="line">    System.out.println(item);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//增强for循环和迭代器结合</span></span><br><span class="line"><span class="keyword">for</span> (Iterator&lt;String&gt; iter = set.iterator(); iter.hasNext();) &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">item</span> <span class="operator">=</span> iter.next();</span><br><span class="line">    System.out.println(item);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 集合运算</span></span><br><span class="line">Set&lt;String&gt; otherSet = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;(Arrays.asList(<span class="string">&quot;Banana&quot;</span>, <span class="string">&quot;Orange&quot;</span>));</span><br><span class="line"></span><br><span class="line">set.retainAll(otherSet);  <span class="comment">// 交集</span></span><br><span class="line">set.addAll(otherSet);      <span class="comment">// 并集</span></span><br><span class="line">set.removeAll(otherSet);   <span class="comment">// 差集</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 清空集合</span></span><br><span class="line">set.clear();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 常用方法</span></span><br><span class="line">set.contains(<span class="string">&quot;Apple&quot;</span>);  <span class="comment">// 检查元素是否存在</span></span><br><span class="line">set.size();  <span class="comment">// 获取大小</span></span><br><span class="line">set.isEmpty();  <span class="comment">// 检查是否为空</span></span><br><span class="line">set.add(<span class="string">&quot;Cherry&quot;</span>);  <span class="comment">// 添加元素</span></span><br><span class="line">set.remove(<span class="string">&quot;Apple&quot;</span>);  <span class="comment">// 删除元素</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历 (不推荐)</span></span><br><span class="line"><span class="keyword">for</span> (String item : set) &#123;</span><br><span class="line">    System.out.println(item);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note info simple"><p>如果我要在HashSet中比较两个对象是否相等，我需要重写equals方法，因为默认的equals方法是比较对象的地址是否相等 </p></div><p>以下是equals方法的重写，针对setHashSet,作用是判断两个对象是否相等，相等的标准是对象的属性值是否相等，<br>如果不重写equals方法，那么默认是比较对象的<code>地址</code>是否相等，即是否是同一个对象，<br>如果重写equals方法，那么就可以比较对象的<code>属性值</code>是否相等，即是否是同一个对象。</p><p>示例代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">equalreturn</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">equalreturn</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">equalreturn</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//重写equals方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span> &#123;<span class="comment">//判断是否为同一个对象</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span> == o) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="literal">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//判断对象是否为对应类型</span></span><br><span class="line">        <span class="type">equalreturn</span> <span class="variable">that</span> <span class="operator">=</span> (equalreturn) o;<span class="comment">//类型转换</span></span><br><span class="line">        <span class="keyword">return</span> age == that.age &amp;&amp; Objects.equals(name, that.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.hash(name, age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;equalreturn&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><hr><h2 id="有序集合-TreeSet"><a href="#有序集合-TreeSet" class="headerlink" title="有序集合(TreeSet)"></a>有序集合(TreeSet)</h2><p>有序集合结构：<br>有序集合是一种特殊的集合，它的元素按照自然顺序或自定义顺序进行排序。<strong>有序集合中的元素是唯一的，不允许重复。</strong>有序集合通常用于需要有序遍历或范围查询的场景，如字典、排行榜等。</p><p><strong>用途</strong>：保持元素有序的集合<br><strong>解决问题</strong>：需要有序遍历或范围查询的场景</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建TreeSet</span></span><br><span class="line">Set&lt;Integer&gt; treeSet = <span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义排序</span></span><br><span class="line">Set&lt;Integer&gt; descSet = <span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;&gt;((a, b) -&gt; b - a);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加元素 (自动排序)</span></span><br><span class="line">treeSet.add(<span class="number">3</span>);</span><br><span class="line">treeSet.add(<span class="number">1</span>);</span><br><span class="line">treeSet.add(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取第一个和最后一个</span></span><br><span class="line"><span class="type">int</span> <span class="variable">first</span> <span class="operator">=</span> ((TreeSet&lt;Integer&gt;) treeSet).first();</span><br><span class="line"><span class="type">int</span> <span class="variable">last</span> <span class="operator">=</span> ((TreeSet&lt;Integer&gt;) treeSet).last();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 范围查询</span></span><br><span class="line">Set&lt;Integer&gt; subset = ((TreeSet&lt;Integer&gt;) treeSet).subSet(<span class="number">1</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure><hr><h2 id="映射-Map-HashMap"><a href="#映射-Map-HashMap" class="headerlink" title="映射(Map/HashMap)"></a>映射(Map/HashMap)</h2><p>映射是一种键值对存储结构，每个元素包含一个键和一个对应的值。通过键可以找到值，Map存储的是键值对，键和值可以是任意类型的对象，键是唯一的，不能重复，如果插入重复的键，则会将其原有的键覆盖掉，值可以重复</p><p><strong>用途</strong>：键值对存储结构<br><strong>解决问题</strong>：快速键值查找、关联数据存储</p><div class="note warning simple"><p>Map不能直接使用迭代器遍历，得转换为Set集合，才能使用迭代器遍历</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Set&lt;Map.Entry&lt;String,Integer&gt;&gt; entrySet = map.entrySet();</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建HashMap</span></span><br><span class="line">Map&lt;String, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加键值对</span></span><br><span class="line">map.put(<span class="string">&quot;Apple&quot;</span>, <span class="number">10</span>);</span><br><span class="line">map.put(<span class="string">&quot;Banana&quot;</span>, <span class="number">20</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取值</span></span><br><span class="line"><span class="type">int</span> <span class="variable">appleCount</span> <span class="operator">=</span> map.get(<span class="string">&quot;Apple&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查键存在</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">hasApple</span> <span class="operator">=</span> map.containsKey(<span class="string">&quot;Apple&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取全部的键</span></span><br><span class="line">Set&lt;String&gt; keys = map.keySet();</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取键值对所有的键值对的集合</span></span><br><span class="line">Set&lt;Map.Entry&lt;K,V&gt;&gt;entrySet();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查值存在</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">has10</span> <span class="operator">=</span> map.containsValue(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断是否为空</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">empty</span> <span class="operator">=</span> map.isEmpty();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除键值对</span></span><br><span class="line">map.remove(<span class="string">&quot;Apple&quot;</span>);<span class="comment">//删除键，会将值返回给你一次</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历键</span></span><br><span class="line"><span class="keyword">for</span> (String key : map.keySet()) &#123;</span><br><span class="line">    System.out.println(key);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历值</span></span><br><span class="line"><span class="keyword">for</span> (Integer value : map.values()) &#123;</span><br><span class="line">    System.out.println(value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历键值对</span></span><br><span class="line"><span class="keyword">for</span> (Map.Entry&lt;String, Integer&gt; entry : map.entrySet()) &#123;</span><br><span class="line">    System.out.println(entry.getKey() + <span class="string">&quot;: &quot;</span> + entry.getValue());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取或默认值</span></span><br><span class="line"><span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> map.getOrDefault(<span class="string">&quot;Orange&quot;</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 合并操作</span></span><br><span class="line">map.merge(<span class="string">&quot;Apple&quot;</span>, <span class="number">1</span>, Integer::sum);  <span class="comment">// 如果存在则相加，否则put 1</span></span><br></pre></td></tr></table></figure><p><strong>Entry键值对对象</strong></p><p>在Map集合中提供了获取所有Entry(每个键值对对象)对象的方法，获取所有键值对对象的集合。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// entrySet 所有的键值对对象，返回的是一个Set集合</span></span><br><span class="line">Set&lt;Map.Entry&lt;String,Integer&gt;&gt; entrySet = map.entrySet();</span><br><span class="line">    <span class="comment">// 遍历entrySet集合，得到里面的每个键值对对象(Entry对象)</span></span><br><span class="line">    <span class="keyword">for</span> (Map.Entry&lt;String,Integer&gt; entry : entrySet)&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">Key</span> <span class="operator">=</span> entry.getKey();</span><br><span class="line">        <span class="comment">// 从entry中获取键值对</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">value</span> <span class="operator">=</span> entry.getValue();</span><br><span class="line">        System.out.println(Key + <span class="string">&quot;\t&quot;</span> + value);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><h2 id="有序映射-TreeMap"><a href="#有序映射-TreeMap" class="headerlink" title="有序映射(TreeMap)"></a>有序映射(TreeMap)</h2><p>SortedMap是接口，TreeMap是它的实现类。</p><p><strong>用途</strong>：保持键有序的映射<br><strong>解决问题</strong>：需要按键顺序遍历或范围查询的场景</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建TreeMap</span></span><br><span class="line">Map&lt;String, Integer&gt; treeMap = <span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义排序</span></span><br><span class="line">Map&lt;String, Integer&gt; descMap = <span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;&gt;(Comparator.reverseOrder());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加元素 (按键排序)</span></span><br><span class="line">treeMap.put(<span class="string">&quot;Banana&quot;</span>, <span class="number">20</span>);</span><br><span class="line">treeMap.put(<span class="string">&quot;Apple&quot;</span>, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取第一个和最后一个键</span></span><br><span class="line"><span class="type">String</span> <span class="variable">firstKey</span> <span class="operator">=</span> ((TreeMap&lt;String, Integer&gt;) treeMap).firstKey();</span><br><span class="line"><span class="type">String</span> <span class="variable">lastKey</span> <span class="operator">=</span> ((TreeMap&lt;String, Integer&gt;) treeMap).lastKey();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 范围视图</span></span><br><span class="line">Map&lt;String, Integer&gt; subMap = ((TreeMap&lt;String, Integer&gt;) treeMap).subMap(<span class="string">&quot;A&quot;</span>, <span class="string">&quot;C&quot;</span>);</span><br></pre></td></tr></table></figure><hr><h2 id="哈希表（HashTable）"><a href="#哈希表（HashTable）" class="headerlink" title="哈希表（HashTable）"></a>哈希表（HashTable）</h2><p>哈希表（Hash Table）是一种根据键（Key）直接访问值（Value）的数据结构。它通过哈希函数将键映射到数组的索引位置，实现快速的插入、删除和查找操作。哈希表通常用于需要快速查找、插入和删除操作的数据场景，如缓存、索引和字典等。</p><p><strong>用途</strong>：快速查找、插入和删除<br><strong>解决问题</strong>：需要快速查找、插入和删除操作的数据场景</p><blockquote><p>这玩意和HashMap的用法基本一致，只是Hashtable是线程安全的，HashMap不是线程安全的。</p></blockquote><p>它添加了synchronizd关键字，所以在多线程环境下，它是安全的。但是在单线程环境下，它的效率比HashMap低。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建Hashtable</span></span><br><span class="line">Hashtable&lt;String, Integer&gt; hashTable = <span class="keyword">new</span> <span class="title class_">Hashtable</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加键值对</span></span><br><span class="line">hashTable.put(<span class="string">&quot;Apple&quot;</span>, <span class="number">10</span>);</span><br><span class="line">hashTable.put(<span class="string">&quot;Banana&quot;</span>, <span class="number">20</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取值</span></span><br><span class="line"><span class="type">int</span> <span class="variable">appleCount</span> <span class="operator">=</span> hashTable.get(<span class="string">&quot;Apple&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查键存在</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">hasApple</span> <span class="operator">=</span> hashTable.containsKey(<span class="string">&quot;Apple&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除键值对</span></span><br><span class="line">hashTable.remove(<span class="string">&quot;Apple&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历键</span></span><br><span class="line"><span class="keyword">for</span> (String key : hashTable.keySet()) &#123;</span><br><span class="line">    System.out.println(key);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历值</span></span><br><span class="line"><span class="keyword">for</span> (Integer value : hashTable.values()) &#123;</span><br><span class="line">    System.out.println(value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历键值对</span></span><br><span class="line"><span class="keyword">for</span> (Map.Entry&lt;String, Integer&gt; entry : hashTable.entrySet()) &#123;</span><br><span class="line">    System.out.println(entry.getKey() + <span class="string">&quot;: &quot;</span> + entry.getValue());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="树-Tree"><a href="#树-Tree" class="headerlink" title="树(Tree)"></a>树(Tree)</h2><p>树是一种非线性数据结构，由节点和边组成。每个节点可以有零个或多个子节点，除了根节点外，每个节点都有一个父节点。树的顶部是根节点，底部是叶节点。<br><strong>用途</strong>：表示层次关系、有序集合<br><strong>解决问题</strong>：组织和导航数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 树节点定义</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TreeNode</span> &#123;</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    TreeNode left;</span><br><span class="line">    TreeNode right;</span><br><span class="line">    TreeNode(<span class="type">int</span> x) &#123; val = x; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 树示例</span></span><br><span class="line"><span class="type">TreeNode</span> <span class="variable">root</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">1</span>);</span><br><span class="line">root.left = <span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">2</span>);</span><br><span class="line">root.right = <span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">3</span>);</span><br><span class="line">root.left.left = <span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">4</span>);</span><br><span class="line">root.left.right = <span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 树遍历示例</span></span><br><span class="line"><span class="comment">// 中序遍历</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">inorderTraversal</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (root != <span class="literal">null</span>) &#123;</span><br><span class="line">        inorderTraversal(root.left);</span><br><span class="line">        System.out.print(root.val + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        inorderTraversal(root.right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 前序遍历</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">preorderTraversal</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (root != <span class="literal">null</span>) &#123;</span><br><span class="line">        System.out.print(root.val + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        preorderTraversal(root.left);</span><br><span class="line">        preorderTraversal(root.right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 后序遍历</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">postorderTraversal</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (root != <span class="literal">null</span>) &#123;</span><br><span class="line">        postorderTraversal(root.left);</span><br><span class="line">        postorderTraversal(root.right);</span><br><span class="line">        System.out.print(root.val + <span class="string">&quot; &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 层序遍历</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">levelOrderTraversal</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">    Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    queue.offer(root);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> queue.poll();</span><br><span class="line">        System.out.print(node.val + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (node.left != <span class="literal">null</span>) &#123;</span><br><span class="line">            queue.offer(node.left);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (node.right != <span class="literal">null</span>) &#123;</span><br><span class="line">            queue.offer(node.right);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 树高度</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">getTreeHeight</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">leftHeight</span> <span class="operator">=</span> getTreeHeight(root.left);</span><br><span class="line">    <span class="type">int</span> <span class="variable">rightHeight</span> <span class="operator">=</span> getTreeHeight(root.right);</span><br><span class="line">    <span class="keyword">return</span> Math.max(leftHeight, rightHeight) + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 树节点数量</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">getNodeCount</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> + getNodeCount(root.left) + getNodeCount(root.right);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这要下去没完没了了QAQ</p><p>辨析几种树去吧：<br>红黑树，B树，二叉树，AVL树，B+树，B-树，Trie树，哈夫曼树，字典树，后缀树区分（用表格描述）：<br>| 树类型 | 特点 | 应用场景 |<br>| ——— | —— | ———— |<br>| 红黑树 | 自平衡二叉查找树，每个节点有颜色（红黑） | Java 中的 TreeMap 和 TreeSet |<br>| B 树 | 多路自平衡搜索树，适用于外存索引 | 数据库索引、文件系统 |<br>| 二叉树 | 每个节点最多有两个子节点 | 表达式树、二叉堆 |<br>| AVL 树 | 自平衡二叉查找树，通过旋转保持平衡 | 数据库索引 |<br>| B+ 树 | 多路自平衡搜索树，适用于外存索引 | 数据库索引、文件系统 |</p><p>一句话总结特点：</p><ul><li>红黑树：自平衡，每个节点颜色表示，适用于外存索引</li><li>B树：多路自平衡搜索树，适用于外存索引</li><li>二叉树：每个节点最多有两个子节点，适用于表达式树、二叉堆</li><li>AVL树：自平衡二叉查找树，通过旋转保持平衡，适用于数据库索引</li><li>B+树：多路自平衡搜索树，适用于外存索引，数据库索引、文件系统</li><li>B-树：多路自平衡搜索树，适用于数据库索引</li><li>Trie树：前缀树，适用于文本搜索</li><li>哈夫曼树：用于数据压缩，根据字符频率构建编码树</li></ul><p><strong>请针对对应词条前往浏览器搜索其特性</strong><br>我这里只对红黑树进行细节描述：红黑树特征就是：</p><ol><li>每个节点非红即黑</li><li>根节点总是黑色的</li><li>如果节点是红色的，则它的子节点必须是黑色的（反之不一定）</li><li>从根节点到叶节点或空子节点的每条路径，必须包含相同数目的黑色节点（即相同的黑色高度）</li></ol><h2 id="非常适合索引，内存中快速访问数据等"><a href="#非常适合索引，内存中快速访问数据等" class="headerlink" title="非常适合索引，内存中快速访问数据等"></a>非常适合索引，内存中快速访问数据等</h2><h2 id="字符串操作-String"><a href="#字符串操作-String" class="headerlink" title="字符串操作(String)"></a>字符串操作(String)</h2><p><strong>用途</strong>：文本处理和操作<br><strong>解决问题</strong>：各种字符串处理需求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建字符串</span></span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;Hello, World!&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 基本操作</span></span><br><span class="line"><span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> str.length();</span><br><span class="line"><span class="type">char</span> <span class="variable">ch</span> <span class="operator">=</span> str.charAt(<span class="number">0</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">sub</span> <span class="operator">=</span> str.substring(<span class="number">0</span>, <span class="number">5</span>);  <span class="comment">// &quot;Hello&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 查找</span></span><br><span class="line"><span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> str.indexOf(<span class="string">&quot;World&quot;</span>);  <span class="comment">// 7</span></span><br><span class="line"><span class="type">int</span> <span class="variable">lastIndex</span> <span class="operator">=</span> str.lastIndexOf(<span class="string">&quot;o&quot;</span>); <span class="comment">// 8</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 替换</span></span><br><span class="line"><span class="type">String</span> <span class="variable">newStr</span> <span class="operator">=</span> str.replace(<span class="string">&quot;World&quot;</span>, <span class="string">&quot;Java&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 分割</span></span><br><span class="line">String[] parts = str.split(<span class="string">&quot;,&quot;</span>);  <span class="comment">// [&quot;Hello&quot;, &quot; World!&quot;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 连接</span></span><br><span class="line"><span class="type">String</span> <span class="variable">joined</span> <span class="operator">=</span> String.join(<span class="string">&quot;-&quot;</span>, <span class="string">&quot;A&quot;</span>, <span class="string">&quot;B&quot;</span>, <span class="string">&quot;C&quot;</span>);  <span class="comment">// &quot;A-B-C&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 格式化</span></span><br><span class="line"><span class="type">String</span> <span class="variable">formatted</span> <span class="operator">=</span> String.format(<span class="string">&quot;Name: %s, Age: %d&quot;</span>, <span class="string">&quot;Alice&quot;</span>, <span class="number">25</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 大小写转换</span></span><br><span class="line"><span class="type">String</span> <span class="variable">upper</span> <span class="operator">=</span> str.toUpperCase();</span><br><span class="line"><span class="type">String</span> <span class="variable">lower</span> <span class="operator">=</span> str.toLowerCase();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 去除空格</span></span><br><span class="line"><span class="type">String</span> <span class="variable">trimmed</span> <span class="operator">=</span> <span class="string">&quot;  hello  &quot;</span>.trim();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构建字符串 (高效)</span></span><br><span class="line"><span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">sb.append(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">sb.append(<span class="string">&quot;, &quot;</span>);</span><br><span class="line">sb.append(<span class="string">&quot;World!&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> sb.toString();</span><br></pre></td></tr></table></figure><hr><h2 id="工具类-Collections-Arrays"><a href="#工具类-Collections-Arrays" class="headerlink" title="工具类(Collections/Arrays)"></a>工具类(Collections/Arrays)</h2><p><strong>用途</strong>：提供集合和数组的常用工具方法<br><strong>解决问题</strong>：简化集合和数组操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Arrays工具类</span></span><br><span class="line"><span class="type">int</span>[] nums = &#123;<span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>&#125;;</span><br><span class="line"></span><br><span class="line">Arrays.sort(nums);  <span class="comment">// 排序</span></span><br><span class="line"><span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> Arrays.binarySearch(nums, <span class="number">2</span>);  <span class="comment">// 二分查找</span></span><br><span class="line"><span class="type">int</span>[] copy = Arrays.copyOf(nums, nums.length);</span><br><span class="line"><span class="type">boolean</span> <span class="variable">equal</span> <span class="operator">=</span> Arrays.equals(nums, <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;);</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> Arrays.toString(nums);  <span class="comment">// &quot;[1, 2, 3]&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Collections工具类</span></span><br><span class="line"><span class="comment">//可以如此安排</span></span><br><span class="line">ArrayList&lt;Object&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"><span class="comment">//标准化格式</span></span><br><span class="line">List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(Arrays.asList(<span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">Collections.sort(list);  <span class="comment">// 排序</span></span><br><span class="line">Collections.reverse(list);  <span class="comment">// 反转</span></span><br><span class="line">Collections.shuffle(list);  <span class="comment">// 随机打乱</span></span><br><span class="line"><span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> Collections.max(list);</span><br><span class="line"><span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> Collections.min(list);</span><br><span class="line">Collections.fill(list, <span class="number">0</span>);  <span class="comment">// 填充</span></span><br><span class="line">Collections.swap(list, <span class="number">0</span>, <span class="number">1</span>);  <span class="comment">// 交换</span></span><br><span class="line">Collection.addAll(list,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>);<span class="comment">//添加多个元素</span></span><br><span class="line">Collection.add(lise,<span class="number">1</span>);<span class="comment">//添加</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 不可变集合</span></span><br><span class="line">List&lt;Integer&gt; unmodifiable = Collections.unmodifiableList(list);</span><br><span class="line">Set&lt;Integer&gt; singleton = Collections.singleton(<span class="number">1</span>);  <span class="comment">// 单元素集合</span></span><br></pre></td></tr></table></figure><h3 id="Iterator迭代器"><a href="#Iterator迭代器" class="headerlink" title="Iterator迭代器"></a>Iterator迭代器</h3><p><strong>用途</strong>：遍历集合元素<br><strong>解决问题</strong>：统一访问集合元素的方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 迭代器遍历</span></span><br><span class="line">Iterator&lt;String&gt; iterator = list.iterator();</span><br><span class="line"><span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">element</span> <span class="operator">=</span> iterator.next();</span><br><span class="line">    System.out.println(element);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Comparable和Comparator比较器"><a href="#Comparable和Comparator比较器" class="headerlink" title="Comparable和Comparator比较器"></a>Comparable和Comparator比较器</h3><p>比较器是用来定义对象比较规则的，比较器有两种：</p><ul><li>Comparable接口：定义在类本身，在类本身实现接口，类实现Comparable接口，重写compareTo方法，是内部比较器</li><li>Comparator接口：定义在外部，需要时传入比较器对象，重写compare方法</li></ul><p>实现接口名称也不同</p><ul><li>Comparable接口：compareTo(UserInfo o)</li><li>Comparator接口：compare(UserInfo o1,UserInfo o2)</li></ul><p>所属的包也不同</p><ul><li>Comparable接口：java.lang.Comparable</li><li>Comparator接口：java.util.Comparator</li></ul><p><strong>用途</strong>：定义对象比较规则<br><strong>解决问题</strong>：排序、集合元素比较等</p><p><strong>典型实例</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">// Comparable</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">UserInfo</span> <span class="keyword">implements</span> <span class="title class_">Comparable</span>&lt;UserInfo&gt;&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> uid;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">UserInfo</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">UserInfo</span><span class="params">(<span class="type">int</span> uid, <span class="type">int</span> age, String name)</span> &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;UserInfo&#123;&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;uid=&quot;</span> + uid +</span><br><span class="line">                    <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                    <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                    <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//具体实现方法部分</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(UserInfo o)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.age-o.age;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getUid</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> uid;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUid</span><span class="params">(<span class="type">int</span> uid)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.uid = uid;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> age;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.age = age;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Comparator</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test3</span> <span class="keyword">implements</span> <span class="title class_">Comparator</span>&lt;Test2.UserInfo&gt; &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Test2.UserInfo o1, Test2.UserInfo o2)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> o1.getName().compareTo(o2.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试类调用</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test2_1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;Test2.UserInfo&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        Collections.addAll(list,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Test2</span>.UserInfo(<span class="number">1</span>,<span class="number">21</span>,<span class="string">&quot;jack&quot;</span>),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Test2</span>.UserInfo(<span class="number">2</span>,<span class="number">34</span>,<span class="string">&quot;tom&quot;</span>)</span><br><span class="line">                );</span><br><span class="line">        Collections.sort(list);</span><br><span class="line">        <span class="keyword">for</span> (Test2.UserInfo user :list)&#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><p>后续持续更新………………</p>]]></content>
      
      
      <categories>
          
          <category> 蓝图模板 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java快速学习速查（4）</title>
      <link href="/2025/04/01/java%E5%BF%AB%E9%80%9F%E5%AD%A6%E4%B9%A0%E9%80%9F%E6%9F%A5%EF%BC%884%EF%BC%89/"/>
      <url>/2025/04/01/java%E5%BF%AB%E9%80%9F%E5%AD%A6%E4%B9%A0%E9%80%9F%E6%9F%A5%EF%BC%884%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="java快速学习速查（4）"><a href="#java快速学习速查（4）" class="headerlink" title="java快速学习速查（4）"></a>java快速学习速查（4）</h1><blockquote><p>尽快吧，这个毕竟得快点做完，本章是初级部分最后一篇了<br>主要内容为数组，日期时间，正则表达式，方法，构造方法，Stream和File和IO，scanner类，异常处理</p></blockquote><p>这页面很多理论知识和即系并没有，我打算进行一些补充操作，你猜为什么我不拉快速跳转链接，我才不会告诉你我的文章链接长过头了</p><h1 id="Java-数组全面解析"><a href="#Java-数组全面解析" class="headerlink" title="Java 数组全面解析"></a>Java 数组全面解析</h1><p>数组是 Java 中存储固定大小同类型元素的数据结构。下面我将系统地讲解 Java 数组的各种功能和使用场景。</p><h2 id="一、数组基础"><a href="#一、数组基础" class="headerlink" title="一、数组基础"></a>一、数组基础</h2><h3 id="1-声明和初始化数组"><a href="#1-声明和初始化数组" class="headerlink" title="1. 声明和初始化数组"></a>1. 声明和初始化数组</h3><p><strong>数组</strong>：是一种容器，可以同时存放多个数据值。</p><p><strong>数组的特点</strong>：</p><ul><li>数组是存储多个变量 (元素) 的容器。</li><li>数组里面的变量 (元素) 数据类型要一致。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明数组的两种方式</span></span><br><span class="line"><span class="type">int</span>[] numbers1;   <span class="comment">// 推荐方式</span></span><br><span class="line"><span class="type">int</span> numbers2[];   <span class="comment">// C风格，不推荐</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建数组的三种方式</span></span><br><span class="line"><span class="type">int</span>[] arr1 = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">5</span>];          <span class="comment">// 长度为5的数组，元素初始为0</span></span><br><span class="line"><span class="type">int</span>[] arr2 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;     <span class="comment">// 直接初始化</span></span><br><span class="line"><span class="type">int</span>[] arr3 = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;  <span class="comment">// 匿名数组初始化</span></span><br></pre></td></tr></table></figure><h3 id="2-访问数组元素"><a href="#2-访问数组元素" class="headerlink" title="2. 访问数组元素"></a>2. 访问数组元素</h3><p><strong>索引</strong>；每一个存储到数组的元素，都会自动的拥有一个编号，从0开始，这个自动编号称为数组索引 (index)，可以通过数组的索引访问到数组中的元素。</p><p><strong>数组的长度属性</strong>：每个数组都具有长度，而且是固定的，Java中赋予了数组一个属性，可以获取到数组的长度，语句为：<code>数组名.length</code> ，属性length的执行结果是数组的长度，int类型结果。由次可以推断出，数组的最大索引值为<code>数组名.length-1</code> 。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] numbers = &#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取数组长度</span></span><br><span class="line"><span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> numbers.length;  <span class="comment">// 5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 访问元素</span></span><br><span class="line"><span class="type">int</span> <span class="variable">first</span> <span class="operator">=</span> numbers[<span class="number">0</span>];  <span class="comment">// 10</span></span><br><span class="line"><span class="type">int</span> <span class="variable">last</span> <span class="operator">=</span> numbers[numbers.length - <span class="number">1</span>];  <span class="comment">// 50</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改元素</span></span><br><span class="line">numbers[<span class="number">1</span>] = <span class="number">25</span>;  <span class="comment">// 数组变为 &#123;10, 25, 30, 40, 50&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>若是要通过Scanner类来获取数组的元素，需要使用循环来获取，因为Scanner类只能获取一个元素，而数组是多个元素的集合，所以需要使用循环来获取。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"><span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;请输入第&quot;</span> + (i + <span class="number">1</span>) + <span class="string">&quot;个元素：&quot;</span>);</span><br><span class="line">    arr[i] = sc.nextInt();<span class="comment">// 输入元素sc是Scanner类的对象，arr是数组名，i是数组的索引，arr[i]是数组的元素，sc.nextInt()是Scanner类的方法，用于获取输入的整数。</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二、数组操作"><a href="#二、数组操作" class="headerlink" title="二、数组操作"></a>二、数组操作</h2><p>重复操作请交给循环完成，数组的操作主要包括遍历数组、复制数组、排序数组、搜索数组等。基本上都是通过循环来完成的。</p><blockquote><p>但是很多东西都是有现成的轮子的，所以我们在使用的时候，尽量使用现成的方法，而不是自己去写，这样可以提高效率，减少错误。</p></blockquote><p>我这里先展示一些常用的函数：</p><ul><li><code>Arrays.toString()</code>：将数组转换为字符串。</li><li><code>Arrays.sort()</code>：对数组进行排序。</li><li><code>Arrays.binarySearch()</code>：在已排序的数组中进行二分查找。</li><li><code>Arrays.fill()</code>：填充数组。</li><li><code>Arrays.copyOf()</code>：复制数组。</li><li><code>System.arraycopy()</code>：复制数组的一部分。</li><li><code>Arrays.equals()</code>：比较两个数组是否相等。</li><li><code>Arrays.asList()</code>：将数组转换为列表。</li></ul><h3 id="1-遍历数组"><a href="#1-遍历数组" class="headerlink" title="1. 遍历数组"></a>1. 遍历数组</h3><p>可以使用for循环，也可以使用增强for循环，也可以使用Arrays.toString()方法，但是要注意，增强for循环只能遍历数组，不能修改数组元素。你若是要修改数组元素，还是使用for循环。</p><blockquote><p>注意：增强for循环只能遍历数组，不能修改数组元素。<br>解决方法：使用普通for循环或使用Arrays.asList()方法将数组转换为列表。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] numbers = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 基本for循环</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; numbers.length; i++) &#123;</span><br><span class="line">    System.out.println(numbers[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 增强for循环 (for-each)</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> num : numbers) &#123;</span><br><span class="line">    System.out.println(num);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 使用Arrays.toString()</span></span><br><span class="line">System.out.println(Arrays.toString(numbers));</span><br></pre></td></tr></table></figure><h3 id="2-数组复制"><a href="#2-数组复制" class="headerlink" title="2. 数组复制"></a>2. 数组复制</h3><p>他的意义是为了避免直接使用<code>=</code>进行赋值，因为这样会导致两个变量指向同一个数组，修改其中一个会影响另一个。数组复制的结果是一个新的数组，包含了原数组的所有元素，但它们是独立的，可以安全地修改而不会影响原数组。</p><blockquote><p>注意：数组是引用类型，直接赋值会导致两个变量指向同一个数组。<br>解决方法：使用<code>Arrays.copyOf()</code>或<code>System.arraycopy()</code>等方法创建新的数组。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] source = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 使用System.arraycopy()</span></span><br><span class="line"><span class="type">int</span>[] dest1 = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">5</span>];</span><br><span class="line">System.arraycopy(source, <span class="number">0</span>, dest1, <span class="number">0</span>, source.length);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 使用Arrays.copyOf()</span></span><br><span class="line"><span class="type">int</span>[] dest2 = Arrays.copyOf(source, source.length);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 使用clone()</span></span><br><span class="line"><span class="type">int</span>[] dest3 = source.clone();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 手动复制</span></span><br><span class="line"><span class="type">int</span>[] dest4 = <span class="keyword">new</span> <span class="title class_">int</span>[source.length];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; source.length; i++) &#123;</span><br><span class="line">    dest4[i] = source[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-数组排序和搜索"><a href="#3-数组排序和搜索" class="headerlink" title="3. 数组排序和搜索"></a>3. 数组排序和搜索</h3><p>算法基操，掉头发的开端，现在回来看还是万恶之源，其实可以直接使用Arrays.sort()和Arrays.binarySearch()方法，但是要注意，这两个方法只能用于已排序的数组。</p><blockquote><p>注意：Arrays.sort()和Arrays.binarySearch()只能用于已排序的数组。<br>解决方法：使用Arrays.sort()方法对数组进行排序，然后使用Arrays.binarySearch()方法进行搜索。</p></blockquote><p>我们先来几个<strong>土方法</strong>来排序和搜索：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 冒泡排序</span></span><br><span class="line"><span class="comment">//冒泡排序原理是：</span></span><br><span class="line"><span class="comment">//1. 比较相邻的元素。如果第一个比第二个大，就交换他们两个。</span></span><br><span class="line"><span class="comment">//2. 对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。这步做完后，最后的元素会是最大的数。</span></span><br><span class="line"><span class="comment">//3. 针对所有的元素重复以上的步骤，除了最后一个。</span></span><br><span class="line"><span class="comment">//4. 持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。</span></span><br><span class="line"><span class="comment">//冒泡排序的时间复杂度是O(n^2)，空间复杂度是O(1)。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">bubbleSort</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; arr.length - <span class="number">1</span> - i; j++) &#123;<span class="comment">// 这里的-1是因为j+1会越界，-i是因为每次循环都会有一个元素排好序，所以不需要再比较</span></span><br><span class="line">            <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[j];</span><br><span class="line">                arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">                arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 选择排序</span></span><br><span class="line"><span class="comment">//选择排序原理是：</span></span><br><span class="line"><span class="comment">//1. 在未排序序列中找到最小（大）元素，存放到排序序列的起始位置。</span></span><br><span class="line"><span class="comment">//2. 再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。</span></span><br><span class="line"><span class="comment">//3. 重复第二步，直到所有元素均排序完毕。</span></span><br><span class="line"><span class="comment">//选择排序的时间复杂度是O(n^2)，空间复杂度是O(1)。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">selectionSort</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">minIndex</span> <span class="operator">=</span> i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i + <span class="number">1</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[j] &lt; arr[minIndex]) &#123;</span><br><span class="line">                minIndex = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (minIndex != i) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[i];</span><br><span class="line">            arr[i] = arr[minIndex];</span><br><span class="line">            arr[minIndex] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 反转排序</span></span><br><span class="line"><span class="comment">//反转排序原理是：</span></span><br><span class="line"><span class="comment">//1. 从数组的两端开始，分别定义两个指针（i 和 j）。</span></span><br><span class="line"><span class="comment">//2. 交换指针所指向的元素。</span></span><br><span class="line"><span class="comment">//3. 指针向中间移动，直到相遇。</span></span><br><span class="line"><span class="comment">//反转排序的时间复杂度是O(n)，空间复杂度是O(1)。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">reverseSort</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, j = arr.length - <span class="number">1</span>; i &lt; j; i++, j--) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[i];</span><br><span class="line">        arr[i] = arr[j];</span><br><span class="line">        arr[j] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 直接插入排序</span></span><br><span class="line"><span class="comment">//直接插入排序原理是：</span></span><br><span class="line"><span class="comment">//1. 从第一个元素开始，该元素可以认为已经被排序。</span></span><br><span class="line"><span class="comment">//2. 取出下一个元素，在已经排序的元素序列中从后向前扫描。</span></span><br><span class="line"><span class="comment">//3. 如果该元素（已排序）大于新元素，将该元素移到下一位置。</span></span><br><span class="line"><span class="comment">//4. 重复步骤3，直到找到已排序的元素小于或者等于新元素的位置。</span></span><br><span class="line"><span class="comment">//5. 将新元素插入到该位置后。</span></span><br><span class="line"><span class="comment">//6. 重复步骤2~5。</span></span><br><span class="line"><span class="comment">//直接插入排序的时间复杂度是O(n^2)，空间复杂度是O(1)。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">insertionSort</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">key</span> <span class="operator">=</span> arr[i];</span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (j &gt;= <span class="number">0</span> &amp;&amp; arr[j] &gt; key) &#123;</span><br><span class="line">            arr[j + <span class="number">1</span>] = arr[j];</span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">        arr[j + <span class="number">1</span>] = key;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] arr = &#123;<span class="number">5</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">7</span>&#125;;</span><br><span class="line">    </span><br><span class="line">    System.out.println(<span class="string">&quot;原始数组: &quot;</span> + Arrays.toString(arr));</span><br><span class="line">    </span><br><span class="line">    bubbleSort(arr);</span><br><span class="line">    System.out.println(<span class="string">&quot;冒泡排序后: &quot;</span> + Arrays.toString(arr));</span><br><span class="line">    </span><br><span class="line">    arr = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">5</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">7</span>&#125;;</span><br><span class="line">    selectionSort(arr);</span><br><span class="line">    System.out.println(<span class="string">&quot;选择排序后: &quot;</span> + Arrays.toString(arr));</span><br><span class="line">    </span><br><span class="line">    arr = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">5</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">7</span>&#125;;</span><br><span class="line">    reverseSort(arr);</span><br><span class="line">    System.out.println(<span class="string">&quot;反转排序后: &quot;</span> + Arrays.toString(arr));</span><br><span class="line">    </span><br><span class="line">    arr = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">5</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">7</span>&#125;;</span><br><span class="line">    insertionSort(arr);</span><br><span class="line">    System.out.println(<span class="string">&quot;插入排序后: &quot;</span> + Arrays.toString(arr));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">然后我们用现成的轮子：</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line"><span class="type">int</span>[] numbers = &#123;<span class="number">5</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">7</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 排序数组</span></span><br><span class="line">Arrays.sort(numbers);  <span class="comment">// &#123;1, 3, 5, 7, 9&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 二分查找 (数组必须已排序)</span></span><br><span class="line"><span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> Arrays.binarySearch(numbers, <span class="number">5</span>);  <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 填充数组</span></span><br><span class="line">Arrays.fill(numbers, <span class="number">0</span>);  <span class="comment">// 所有元素变为0</span></span><br></pre></td></tr></table></figure><p>Arrays.sort()方法和Arrays.binarySearch()方法的作用和用法</p><ul><li><code>Arrays.sort()</code>：对数组进行排序。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] numbers = &#123;<span class="number">5</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">7</span>&#125;;</span><br><span class="line">Arrays.sort(numbers);  <span class="comment">// &#123;1, 3, 5, 7, 9&#125;</span></span><br></pre></td></tr></table></figure></li><li><code>Arrays.binarySearch()</code>：在已排序的数组中进行二分查找。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] numbers = &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>&#125;;</span><br><span class="line"><span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> Arrays.binarySearch(numbers, <span class="number">5</span>);  <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><h2 id="数组原理和内存分配"><a href="#数组原理和内存分配" class="headerlink" title="数组原理和内存分配"></a>数组原理和内存分配</h2><h3 id="1-数组原理"><a href="#1-数组原理" class="headerlink" title="1. 数组原理"></a>1. 数组原理</h3></li></ul><p>数组是一种数据结构，用于存储相同类型的多个元素。在内存中，数组是一块连续的内存空间，每个元素占用相同的内存空间。数组内存空间占用大小和数组类型和数组长度有关</p><h3 id="2-内存分配"><a href="#2-内存分配" class="headerlink" title="2. 内存分配"></a>2. 内存分配</h3><ol><li><strong>静态分配</strong>：在编译时就确定数组的大小，数组的大小在程序运行期间不会改变。</li><li><strong>动态分配</strong>：在程序运行期间确定数组的大小，可以使用<code>new</code>关键字来动态分配数组。</li></ol><p><strong>*分配图和在内存中的运行方式</strong>(我很少用图，不是自己做的就随便搞)</p><p><img src="https://i-blog.csdnimg.cn/direct/646745a6aac84c359770d1d8b05cb00d.png" alt="image.png"></p><p>两个数组指向不同的空间:<br><img src="https://i-blog.csdnimg.cn/direct/bafc0e80474d4c10968c4a1d09109dee.png" alt="image.png"></p><p>两个数组执行同一个空间:<br><img src="https://i-blog.csdnimg.cn/direct/0e963a3260934156a996e5620af2f5b8.png" alt="image.png"></p><h3 id="3-数组的内存布局"><a href="#3-数组的内存布局" class="headerlink" title="3. 数组的内存布局"></a>3. 数组的内存布局</h3><p>数组的内存布局如下：</p><ul><li><strong>数组名</strong>：指向数组的首地址。</li><li><strong>元素</strong>：数组中的每个元素占用相同的内存空间。</li><li><strong>索引</strong>：数组中的每个元素都有一个索引，索引从0开始，最大索引为数组长度减1。</li></ul><h2 id="三、多维数组"><a href="#三、多维数组" class="headerlink" title="三、多维数组"></a>三、多维数组</h2><h3 id="1-二维数组"><a href="#1-二维数组" class="headerlink" title="1. 二维数组"></a>1. 二维数组</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明和初始化二维数组</span></span><br><span class="line"><span class="type">int</span>[][] matrix1 = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>][<span class="number">4</span>];  <span class="comment">// 3行4列</span></span><br><span class="line"><span class="type">int</span>[][] matrix2 = &#123;&#123;<span class="number">1</span>, <span class="number">2</span>&#125;, &#123;<span class="number">3</span>, <span class="number">4</span>&#125;, &#123;<span class="number">5</span>, <span class="number">6</span>&#125;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不规则数组</span></span><br><span class="line"><span class="type">int</span>[][] irregular = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>][];</span><br><span class="line">irregular[<span class="number">0</span>] = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>];</span><br><span class="line">irregular[<span class="number">1</span>] = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>];</span><br><span class="line">irregular[<span class="number">2</span>] = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 访问二维数组元素</span></span><br><span class="line"><span class="type">int</span> <span class="variable">value</span> <span class="operator">=</span> matrix2[<span class="number">1</span>][<span class="number">1</span>];  <span class="comment">// 4</span></span><br></pre></td></tr></table></figure><h3 id="2-多维数组遍历"><a href="#2-多维数组遍历" class="headerlink" title="2. 多维数组遍历"></a>2. 多维数组遍历</h3><p>有些时候对自己好点，不是矩阵就尽量不要用嵌套循环，因为嵌套循环会导致代码可读性下降，而且效率也不高。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[][] matrix = &#123;&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;, &#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;, &#123;<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>&#125;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 嵌套for循环遍历</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; matrix.length; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; matrix[i].length; j++) &#123;</span><br><span class="line">        System.out.print(matrix[i][j] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 增强for循环遍历</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span>[] row : matrix) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> num : row) &#123;</span><br><span class="line">        System.out.print(num + <span class="string">&quot; &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四、Arrays-工具类"><a href="#四、Arrays-工具类" class="headerlink" title="四、Arrays 工具类"></a>四、Arrays 工具类</h2><p>Arrays 类是 Java 中用于操作数组的工具类，位于 java.util 包中。它提供了一系列静态方法，用于对数组进行排序、搜索、复制、比较等操作。</p><h3 id="1-常用方法"><a href="#1-常用方法" class="headerlink" title="1. 常用方法"></a>1. 常用方法</h3><div class="table-container"><table><thead><tr><th>方法</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td><code>sort()</code></td><td>数组排序</td><td><code>Arrays.sort(arr)</code></td></tr><tr><td><code>binarySearch()</code></td><td>二分查找</td><td><code>Arrays.binarySearch(arr, key)</code></td></tr><tr><td><code>equals()</code></td><td>比较数组</td><td><code>Arrays.equals(arr1, arr2)</code></td></tr><tr><td><code>fill()</code></td><td>填充数组</td><td><code>Arrays.fill(arr, value)</code></td></tr><tr><td><code>copyOf()</code></td><td>复制数组</td><td><code>Arrays.copyOf(arr, newLength)</code></td></tr><tr><td><code>toString()</code></td><td>数组转字符串</td><td><code>Arrays.toString(arr)</code></td></tr><tr><td><code>asList()</code></td><td>数组转List</td><td><code>Arrays.asList(arr)</code></td></tr></tbody></table></div><p>这是不是重复了，但是没问题，反正是速查</p><h3 id="2-使用示例"><a href="#2-使用示例" class="headerlink" title="2. 使用示例"></a>2. 使用示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] numbers = &#123;<span class="number">5</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">7</span>&#125;;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 排序</span></span><br><span class="line">        Arrays.sort(numbers);  <span class="comment">// [1, 3, 5, 7, 9]</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 搜索</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> Arrays.binarySearch(numbers, <span class="number">5</span>);  <span class="comment">// 2</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 比较</span></span><br><span class="line">        <span class="type">int</span>[] copy = Arrays.copyOf(numbers, numbers.length);</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isEqual</span> <span class="operator">=</span> Arrays.equals(numbers, copy);  <span class="comment">// true</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 填充</span></span><br><span class="line">        Arrays.fill(copy, <span class="number">0</span>);  <span class="comment">// [0, 0, 0, 0, 0]</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 转字符串</span></span><br><span class="line">        System.out.println(Arrays.toString(numbers));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="五、实际应用示例"><a href="#五、实际应用示例" class="headerlink" title="五、实际应用示例"></a>五、实际应用示例</h2><h3 id="1-查找数组中的最大值"><a href="#1-查找数组中的最大值" class="headerlink" title="1. 查找数组中的最大值"></a>1. 查找数组中的最大值</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayMax</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">findMax</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr == <span class="literal">null</span> || arr.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;数组不能为空&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> arr[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[i] &gt; max) &#123;</span><br><span class="line">                max = arr[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] numbers = &#123;<span class="number">12</span>, <span class="number">45</span>, <span class="number">67</span>, <span class="number">89</span>, <span class="number">34</span>, <span class="number">23</span>&#125;;</span><br><span class="line">        System.out.println(<span class="string">&quot;最大值: &quot;</span> + findMax(numbers));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>举一反三：</strong></p><ol><li>查找数组中的最小值</li><li>计算数组元素的平均值</li><li>查找数组中的某个元素</li><li>检查数组是否包含某个元素</li><li>统计数组中某个元素的出现次数</li><li>查找数组中的重复元素</li><li>查找数组中的缺失元素</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 查找数组中的最小值</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">findMin</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr == <span class="literal">null</span> || arr.length == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;数组不能为空&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> arr[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] &lt; min) &#123;</span><br><span class="line">            min = arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> min;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 计算数组元素的平均值</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">average</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr == <span class="literal">null</span> || arr.length == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;数组不能为空&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">double</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> num : arr) &#123;</span><br><span class="line">        sum += num;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum / arr.length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 查找数组中的某个元素</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">indexOf</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] == target) &#123;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>; <span class="comment">// 未找到</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 检查数组是否包含某个元素</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">contains</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> indexOf(arr, target) != -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5. 统计数组中某个元素的出现次数</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">countOccurrences</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> num : arr) &#123;</span><br><span class="line">        <span class="keyword">if</span> (num == target) &#123;</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 6. 查找数组中的重复元素</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Set&lt;Integer&gt; <span class="title function_">findDuplicates</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">    Set&lt;Integer&gt; seen = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">    Set&lt;Integer&gt; duplicates = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> num : arr) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!seen.add(num)) &#123;</span><br><span class="line">            duplicates.add(num);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> duplicates;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 7. 查找数组中的缺失元素（假设数组应包含1到n的所有数字）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;Integer&gt; <span class="title function_">findMissingNumbers</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="type">boolean</span>[] present = <span class="keyword">new</span> <span class="title class_">boolean</span>[n + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> num : arr) &#123;</span><br><span class="line">        present[num] = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    List&lt;Integer&gt; missing = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!present[i]) &#123;</span><br><span class="line">            missing.add(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> missing;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了方便使用，主函数调用以上函数也在这里提供：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] numbers = &#123;<span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">5</span>&#125;;</span><br><span class="line">System.out.println(<span class="string">&quot;最小值: &quot;</span> + findMin(numbers));</span><br><span class="line">System.out.println(<span class="string">&quot;平均值: &quot;</span> + average(numbers));</span><br><span class="line">System.out.println(<span class="string">&quot;5的位置: &quot;</span> + indexOf(numbers, <span class="number">5</span>));</span><br><span class="line">System.out.println(<span class="string">&quot;包含4吗? &quot;</span> + contains(numbers, <span class="number">4</span>));</span><br><span class="line">System.out.println(<span class="string">&quot;1出现的次数: &quot;</span> + countOccurrences(numbers, <span class="number">1</span>));</span><br><span class="line">System.out.println(<span class="string">&quot;重复元素: &quot;</span> + findDuplicates(numbers));</span><br><span class="line">System.out.println(<span class="string">&quot;缺失数字(1-9): &quot;</span> + findMissingNumbers(numbers, <span class="number">9</span>));</span><br></pre></td></tr></table></figure><br>典型案例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test24</span> &#123;</span><br><span class="line">    <span class="comment">//循环录入五个人的成绩，保存到数组中</span></span><br><span class="line">    <span class="comment">//求总分，最高分，平均分，最低分</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//最大值</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">finMax</span><span class="params">(<span class="type">int</span> arr[])</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr == <span class="literal">null</span> || arr.length == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;数组为空提示&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> arr[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; arr.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[i] &gt; max)&#123;</span><br><span class="line">                max = arr[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//最小值</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">findMin</span><span class="params">(<span class="type">int</span> arr[])</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr == <span class="literal">null</span> || arr.length == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;数组为空提示&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> arr[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;i &lt; arr.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[i] &lt; min)&#123;</span><br><span class="line">                min = arr[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> min;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//总分</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">sumMAX</span><span class="params">(<span class="type">int</span> arr[])</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr == <span class="literal">null</span> || arr.length == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;数组为空提示&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; arr.length;i++)&#123;</span><br><span class="line">            sum += arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//平均分</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">average</span><span class="params">(<span class="type">int</span> arr[])</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="type">double</span>)sumMAX(arr) / arr.length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> arr[] = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">5</span>];</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 循环录入成绩</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            System.out.print(<span class="string">&quot;请输入第&quot;</span> + (i+<span class="number">1</span>) + <span class="string">&quot;个成绩: &quot;</span>);</span><br><span class="line">            arr[i] = scanner.nextInt();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输出结果</span></span><br><span class="line">        System.out.println(<span class="string">&quot;最高分: &quot;</span> + finMax(arr));</span><br><span class="line">        System.out.println(<span class="string">&quot;最低分: &quot;</span> + findMin(arr));</span><br><span class="line">        System.out.println(<span class="string">&quot;总分: &quot;</span> + sumMAX(arr));</span><br><span class="line">        System.out.println(<span class="string">&quot;平均分: &quot;</span> + average(arr));</span><br><span class="line"></span><br><span class="line">        scanner.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="2-数组反转"><a href="#2-数组反转" class="headerlink" title="2. 数组反转"></a>2. 数组反转</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayReverse</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">reverse</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, j = arr.length - <span class="number">1</span>; i &lt; j; i++, j--) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[i];</span><br><span class="line">            arr[i] = arr[j];</span><br><span class="line">            arr[j] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] numbers = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line">        System.out.println(<span class="string">&quot;原始数组: &quot;</span> + Arrays.toString(numbers));</span><br><span class="line">        reverse(numbers);</span><br><span class="line">        System.out.println(<span class="string">&quot;反转后: &quot;</span> + Arrays.toString(numbers));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-矩阵转置"><a href="#3-矩阵转置" class="headerlink" title="3. 矩阵转置"></a>3. 矩阵转置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MatrixTranspose</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[][] transpose(<span class="type">int</span>[][] matrix) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">rows</span> <span class="operator">=</span> matrix.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">cols</span> <span class="operator">=</span> matrix[<span class="number">0</span>].length;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span>[][] result = <span class="keyword">new</span> <span class="title class_">int</span>[cols][rows];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; rows; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; cols; j++) &#123;</span><br><span class="line">                result[j][i] = matrix[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[][] matrix = &#123;&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;, &#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;&#125;;</span><br><span class="line">        System.out.println(<span class="string">&quot;原始矩阵:&quot;</span>);</span><br><span class="line">        printMatrix(matrix);</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span>[][] transposed = transpose(matrix);</span><br><span class="line">        System.out.println(<span class="string">&quot;转置矩阵:&quot;</span>);</span><br><span class="line">        printMatrix(transposed);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printMatrix</span><span class="params">(<span class="type">int</span>[][] matrix)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] row : matrix) &#123;</span><br><span class="line">            System.out.println(Arrays.toString(row));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="六、注意事项与最佳实践"><a href="#六、注意事项与最佳实践" class="headerlink" title="六、注意事项与最佳实践"></a>六、注意事项与最佳实践</h2><p>这里的操作都是些好习惯，建议提前判断</p><ol><li><p><strong>数组边界检查</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">5</span>];</span><br><span class="line"><span class="comment">// arr[5] = 10;  // 会抛出ArrayIndexOutOfBoundsException</span></span><br></pre></td></tr></table></figure></li><li><p><strong>数组长度固定</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数组创建后长度不可变</span></span><br><span class="line"><span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">5</span>];</span><br><span class="line"><span class="comment">// arr.length = 10;  // 编译错误</span></span><br></pre></td></tr></table></figure></li><li><p><strong>默认初始化值</strong>：</p><ul><li>数值类型：0</li><li>boolean：false</li><li>对象引用：null</li></ul></li><li><p><strong>数组与集合的选择</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 固定大小、性能要求高 → 使用数组</span></span><br><span class="line"><span class="comment">// 需要动态大小、丰富操作 → 使用ArrayList等集合</span></span><br></pre></td></tr></table></figure></li><li><p><strong>多维数组内存布局</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Java中的多维数组实际上是数组的数组</span></span><br><span class="line"><span class="type">int</span>[][] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>][];</span><br><span class="line">arr[<span class="number">0</span>] = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>];</span><br><span class="line">arr[<span class="number">1</span>] = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>];</span><br><span class="line">arr[<span class="number">2</span>] = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">4</span>];</span><br></pre></td></tr></table></figure></li><li><p><strong>数组性能考虑</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 访问数组元素是O(1)时间复杂度</span></span><br><span class="line"><span class="comment">// 连续内存分配，缓存友好</span></span><br><span class="line"><span class="comment">// 适合数值计算等高性能场景</span></span><br></pre></td></tr></table></figure></li></ol><p>通过合理使用数组和Arrays工具类，可以高效地处理各种数据集合操作。对于<strong>固定大小的同类型数据集合</strong>，数组是最佳选择；对于需要动态调整大小的场景，应考虑使用Java集合框架中的类。</p><h1 id="Java-日期时间全面解析"><a href="#Java-日期时间全面解析" class="headerlink" title="Java 日期时间全面解析"></a>Java 日期时间全面解析</h1><p>Java 提供了多种处理日期和时间的类，包括传统的 <code>Date</code>、<code>Calendar</code> 和现代的 <code>java.time</code> 包（Java 8+）。下面我将系统地讲解 Java 日期时间处理的各种功能和使用场景。</p><h2 id="一、传统日期时间类"><a href="#一、传统日期时间类" class="headerlink" title="一、传统日期时间类"></a>一、传统日期时间类</h2><h3 id="1-Date-类"><a href="#1-Date-类" class="headerlink" title="1. Date 类"></a>1. Date 类</h3><p><code>Date</code> 类表示特定的瞬间，精确到毫秒。</p><p>目前Date构造方法里面有两个方法推荐使用：<br>Date: 使用构造函数创建对象可以获取本地的当前时间。<br>Date(long date):表示从1970年1月1日0时0分0秒开始经过参数Date指定的毫秒数。</p><p>以下检举了典型构造方式<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 构造方式一：创建日期对象，获得系统当前时间</span></span><br><span class="line">        <span class="type">Date</span> <span class="variable">d</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        System.out.println(d);</span><br><span class="line">        <span class="comment">// 构造方式二 System.currentTimeMillis()</span></span><br><span class="line">        <span class="comment">// 从1970-01-01 00:00:00:000 到当前时间的毫秒数</span></span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="title class_">Date</span>(System.currentTimeMillis()));</span><br><span class="line">        <span class="comment">// 获得当前时间的毫秒数</span></span><br><span class="line">        System.out.println(d.getTime());</span><br><span class="line">        System.out.println(System.currentTimeMillis());</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><br>我们直接打印Date的时候，会调用其重写的toString方法，得到日期格式是： Mon Jul 07 11:44:31 CST 2025 ，这种输出对一般人来说可能看不懂，所以需要特殊处理。<br>2025年7月7日 11:44:31 星期一 ，这种需要完成字符串到日期对象的转换，需要使用到 DateFormat</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DateExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建当前日期时间的Date对象</span></span><br><span class="line">        <span class="type">Date</span> <span class="variable">now</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        System.out.println(<span class="string">&quot;当前时间: &quot;</span> + now);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 创建指定时间戳的Date对象</span></span><br><span class="line">        <span class="type">Date</span> <span class="variable">specificDate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">1620000000000L</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;特定时间: &quot;</span> + specificDate);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 比较日期</span></span><br><span class="line">        System.out.println(<span class="string">&quot;now after specificDate? &quot;</span> + now.after(specificDate));</span><br><span class="line">        System.out.println(<span class="string">&quot;now before specificDate? &quot;</span> + now.before(specificDate));</span><br><span class="line">        System.out.println(<span class="string">&quot;now equals specificDate? &quot;</span> + now.equals(specificDate));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 获取时间戳</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">timestamp</span> <span class="operator">=</span> now.getTime();</span><br><span class="line">        System.out.println(<span class="string">&quot;时间戳: &quot;</span> + timestamp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-SimpleDateFormat-类"><a href="#2-SimpleDateFormat-类" class="headerlink" title="2. SimpleDateFormat 类"></a>2. SimpleDateFormat 类</h3><p>SimpleDateFormat 用于格式化和解析日期。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DateFormatExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Date</span> <span class="variable">now</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 创建格式化对象</span></span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">sdf1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">sdf2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy年MM月dd日 EEE a hh:mm:ss&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 格式化日期</span></span><br><span class="line">        System.out.println(<span class="string">&quot;格式1: &quot;</span> + sdf1.format(now));</span><br><span class="line">        System.out.println(<span class="string">&quot;格式2: &quot;</span> + sdf2.format(now));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 解析字符串为日期</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">dateStr</span> <span class="operator">=</span> <span class="string">&quot;2023-05-15 14:30:00&quot;</span>;</span><br><span class="line">            <span class="type">Date</span> <span class="variable">parsedDate</span> <span class="operator">=</span> sdf1.parse(dateStr);</span><br><span class="line">            System.out.println(<span class="string">&quot;解析后的日期: &quot;</span> + parsedDate);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-Calendar-类"><a href="#3-Calendar-类" class="headerlink" title="3. Calendar 类"></a>3. Calendar 类</h3><p>calendar 类用于处理日期和时间的字段，如年、月、日、时、分、秒等。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Calendar;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CalendarExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 获取Calendar实例</span></span><br><span class="line">        <span class="type">Calendar</span> <span class="variable">calendar</span> <span class="operator">=</span> Calendar.getInstance();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 设置特定日期</span></span><br><span class="line">        calendar.set(<span class="number">2023</span>, Calendar.MAY, <span class="number">15</span>, <span class="number">14</span>, <span class="number">30</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> calendar.getTime();</span><br><span class="line">        System.out.println(<span class="string">&quot;设置的日期: &quot;</span> + date);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 获取日期各部分</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">year</span> <span class="operator">=</span> calendar.get(Calendar.YEAR);</span><br><span class="line">        <span class="type">int</span> <span class="variable">month</span> <span class="operator">=</span> calendar.get(Calendar.MONTH) + <span class="number">1</span>; <span class="comment">// 月份从0开始</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">day</span> <span class="operator">=</span> calendar.get(Calendar.DAY_OF_MONTH);</span><br><span class="line">        <span class="type">int</span> <span class="variable">hour</span> <span class="operator">=</span> calendar.get(Calendar.HOUR_OF_DAY);</span><br><span class="line">        <span class="type">int</span> <span class="variable">minute</span> <span class="operator">=</span> calendar.get(Calendar.MINUTE);</span><br><span class="line">        System.out.printf(<span class="string">&quot;%d年%d月%d日 %d:%d\n&quot;</span>, year, month, day, hour, minute);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 日期计算</span></span><br><span class="line">        calendar.add(Calendar.DAY_OF_MONTH, <span class="number">7</span>); <span class="comment">// 加7天</span></span><br><span class="line">        calendar.add(Calendar.MONTH, -<span class="number">1</span>);       <span class="comment">// 减1个月</span></span><br><span class="line">        System.out.println(<span class="string">&quot;计算后的日期: &quot;</span> + calendar.getTime());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-DateFormat"><a href="#4-DateFormat" class="headerlink" title="4.DateFormat"></a>4.DateFormat</h3><p><code>java.text.DateFormat</code> 类是日期/时间格式化子类的抽象类<br>由于DateFormat类是抽象类，所以无法直接使用，这个时候可以使用它的实现类：<code>java.text.SimpleDateFormat</code><br>日期和格式化解析</p><ul><li>日期格式化：Date特定日期格式和String转换(Date—-&gt;String)。</li><li>日期的解析：将特定格式的日期字符串转换成Date日(String—-&gt;Date)。<br>常见格式：</li><li>yyyy年-MM月-dd日 HH时mm分ss秒SSS毫秒</li><li>yyyy-MM-dd</li><li>yyyy/MM/dd</li><li>HH:mm:ss:SSS</li><li>hh:mm:ss<br><strong>注意</strong></li><li>格式的各个字母的代码的模式是不能改变</li><li>格式中的字母区分大小写</li><li>格式中的连接符“年、月、日或者/或者-”由自己添加</li></ul><h2 id="二、Java-8-日期时间-API"><a href="#二、Java-8-日期时间-API" class="headerlink" title="二、Java 8 日期时间 API"></a>二、Java 8 日期时间 API</h2><p>Java 8 引入了全新的日期时间 API (<code>java.time</code> 包)，解决了传统类的各种问题。</p><h3 id="1-主要类介绍"><a href="#1-主要类介绍" class="headerlink" title="1. 主要类介绍"></a>1. 主要类介绍</h3><div class="table-container"><table><thead><tr><th>类名</th><th>描述</th></tr></thead><tbody><tr><td><code>LocalDate</code></td><td>只包含日期，不包含时间</td></tr><tr><td><code>LocalTime</code></td><td>只包含时间，不包含日期</td></tr><tr><td><code>LocalDateTime</code></td><td>包含日期和时间</td></tr><tr><td><code>ZonedDateTime</code></td><td>包含时区的日期和时间</td></tr><tr><td><code>Instant</code></td><td>时间戳（精确到纳秒）</td></tr><tr><td><code>Duration</code></td><td>时间段，以秒和纳秒为单位</td></tr><tr><td><code>Period</code></td><td>时间段，以年、月、日为单位</td></tr><tr><td><code>DateTimeFormatter</code></td><td>日期时间格式化类</td></tr></tbody></table></div><h4 id="Calender类-日历类"><a href="#Calender类-日历类" class="headerlink" title="Calender类(日历类)"></a>Calender类(日历类)</h4><p>Java.util.calender 是日历类，在Date后出现，替换了许多Date方法，该类将所有可能用到的时间信息封装成静态成员变量，方便获取</p><blockquote><p>Calendar calendar = Calendar.getInstance();</p></blockquote><p><strong>常用方法</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test8</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 获得当前的日历</span></span><br><span class="line">        <span class="type">Calendar</span> <span class="variable">calendar</span> <span class="operator">=</span> Calendar.getInstance();</span><br><span class="line">      <span class="comment">//   System.out.println(calendar.getTime());</span></span><br><span class="line">        <span class="comment">// 获取年月日部分</span></span><br><span class="line">        <span class="type">int</span> year=calendar.get(Calendar.YEAR);</span><br><span class="line">        System.out.println(year);</span><br><span class="line">        <span class="comment">// 获得月</span></span><br><span class="line">        <span class="type">int</span> month=calendar.get(Calendar.MONTH);</span><br><span class="line">        System.out.println(month+<span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 获得日</span></span><br><span class="line">        <span class="type">int</span> date=calendar.get(Calendar.DAY_OF_MONTH);</span><br><span class="line">        System.out.println(date);</span><br><span class="line">        <span class="comment">// 获得小时</span></span><br><span class="line">        <span class="type">int</span> hour=calendar.get(Calendar.HOUR_OF_DAY);</span><br><span class="line">        System.out.println(hour);</span><br><span class="line">        <span class="comment">// 获得分</span></span><br><span class="line">        <span class="type">int</span> minute=calendar.get(Calendar.MINUTE);</span><br><span class="line">        System.out.println(minute);</span><br><span class="line">        <span class="comment">// 获得秒</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">second</span> <span class="operator">=</span> calendar.get(Calendar.SECOND);</span><br><span class="line">        System.out.println(second);</span><br><span class="line">        <span class="comment">// 获得星期</span></span><br><span class="line">        <span class="comment">// Date类不同，1代表是星期日，2代表星期1，3代表星期二，依次类推。</span></span><br><span class="line">        <span class="type">int</span>  weekDay= calendar.get(Calendar.DAY_OF_WEEK);</span><br><span class="line">        System.out.println(weekDay);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test9</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 按照各个字段进行时间的设值</span></span><br><span class="line">       <span class="comment">/* c.set(Calendar.YEAR,2021); // 设置年</span></span><br><span class="line"><span class="comment">        c.set(Calendar.MONTH,0); // 设置月</span></span><br><span class="line"><span class="comment"> c.set(Calendar.DATE,5);</span></span><br><span class="line"><span class="comment">        System.out.println(c.getTime());*/</span></span><br><span class="line">       <span class="comment">/*c.set(2025,7,17);</span></span><br><span class="line"><span class="comment">       System.out.println(c.getTime());*/</span></span><br><span class="line">        Calendar c=Calendar.getInstance();</span><br><span class="line">        <span class="comment">// 各个日期字段加减操作</span></span><br><span class="line">        c.add(Calendar.YEAR,-<span class="number">1</span>);</span><br><span class="line">        c.add(Calendar.MONTH,-<span class="number">1</span>);</span><br><span class="line">        c.add(Calendar.DATE,-<span class="number">1</span>);</span><br><span class="line">        System.out.println(c.getTime());</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="System类"><a href="#System类" class="headerlink" title="System类"></a>System类</h4><p>java.lang.System类 类中提供了大量的静态方法，系统级的很多属性和控制方法都放置到在该类的内部。</p><p>这个部分现场查吧，不写了</p><h3 id="2-基本使用示例"><a href="#2-基本使用示例" class="headerlink" title="2. 基本使用示例"></a>2. 基本使用示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.time.*;</span><br><span class="line"><span class="keyword">import</span> java.time.format.DateTimeFormatter;</span><br><span class="line"><span class="keyword">import</span> java.time.temporal.ChronoUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Java8DateTime</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 获取当前日期时间</span></span><br><span class="line">        <span class="type">LocalDate</span> <span class="variable">currentDate</span> <span class="operator">=</span> LocalDate.now();</span><br><span class="line">        <span class="type">LocalTime</span> <span class="variable">currentTime</span> <span class="operator">=</span> LocalTime.now();</span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">currentDateTime</span> <span class="operator">=</span> LocalDateTime.now();</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;当前日期: &quot;</span> + currentDate);</span><br><span class="line">        System.out.println(<span class="string">&quot;当前时间: &quot;</span> + currentTime);</span><br><span class="line">        System.out.println(<span class="string">&quot;当前日期时间: &quot;</span> + currentDateTime);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 创建特定日期时间</span></span><br><span class="line">        <span class="type">LocalDate</span> <span class="variable">birthDate</span> <span class="operator">=</span> LocalDate.of(<span class="number">1990</span>, Month.MAY, <span class="number">15</span>);</span><br><span class="line">        <span class="type">LocalTime</span> <span class="variable">meetingTime</span> <span class="operator">=</span> LocalTime.of(<span class="number">14</span>, <span class="number">30</span>);</span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">projectDeadline</span> <span class="operator">=</span> LocalDateTime.of(<span class="number">2023</span>, <span class="number">12</span>, <span class="number">31</span>, <span class="number">23</span>, <span class="number">59</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 日期时间计算</span></span><br><span class="line">        <span class="type">LocalDate</span> <span class="variable">nextWeek</span> <span class="operator">=</span> currentDate.plus(<span class="number">1</span>, ChronoUnit.WEEKS);</span><br><span class="line">        <span class="type">LocalTime</span> <span class="variable">twoHoursLater</span> <span class="operator">=</span> currentTime.plusHours(<span class="number">2</span>);</span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">yesterdaySameTime</span> <span class="operator">=</span> currentDateTime.minusDays(<span class="number">1</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 日期时间比较</span></span><br><span class="line">        System.out.println(<span class="string">&quot;今天在生日之后? &quot;</span> + currentDate.isAfter(birthDate));</span><br><span class="line">        System.out.println(<span class="string">&quot;现在在会议时间之前? &quot;</span> + currentTime.isBefore(meetingTime));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 格式化输出</span></span><br><span class="line">        <span class="type">DateTimeFormatter</span> <span class="variable">formatter</span> <span class="operator">=</span> DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy/MM/dd HH:mm:ss&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">formattedDateTime</span> <span class="operator">=</span> currentDateTime.format(formatter);</span><br><span class="line">        System.out.println(<span class="string">&quot;格式化日期时间: &quot;</span> + formattedDateTime);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 解析字符串</span></span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">parsedDateTime</span> <span class="operator">=</span> LocalDateTime.parse(<span class="string">&quot;2023/05/15 14:30:00&quot;</span>, formatter);</span><br><span class="line">        System.out.println(<span class="string">&quot;解析后的日期时间: &quot;</span> + parsedDateTime);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 计算时间差</span></span><br><span class="line">        <span class="type">Period</span> <span class="variable">age</span> <span class="operator">=</span> Period.between(birthDate, currentDate);</span><br><span class="line">        System.out.printf(<span class="string">&quot;年龄: %d岁%d个月%d天\n&quot;</span>, age.getYears(), age.getMonths(), age.getDays());</span><br><span class="line">        </span><br><span class="line">        <span class="type">Duration</span> <span class="variable">duration</span> <span class="operator">=</span> Duration.between(meetingTime, currentTime);</span><br><span class="line">        System.out.println(<span class="string">&quot;距离会议时间还有(秒): &quot;</span> + duration.getSeconds());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我抽取几个部分重点拉取下蓝图</p><h4 id="日期格式化-amp-amp-日期的解析"><a href="#日期格式化-amp-amp-日期的解析" class="headerlink" title="日期格式化&amp;&amp;日期的解析"></a>日期格式化&amp;&amp;日期的解析</h4><p>日期的初始化：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.iweb.work;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test5</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">// 要格式化的日期</span></span><br><span class="line">        Date date=<span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        <span class="comment">// 格式化的模式</span></span><br><span class="line">        String pattern=<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>;</span><br><span class="line">      <span class="comment">/* // 格式化日期对象</span></span><br><span class="line"><span class="comment">        SimpleDateFormat sd =new SimpleDateFormat(pattern);</span></span><br><span class="line"><span class="comment">        // 格式化日期 完成Date---&gt;String转换</span></span><br><span class="line"><span class="comment">        String formatStr=sd.format(date);</span></span><br><span class="line"><span class="comment">        System.out.println(formatStr);*/</span></span><br><span class="line">        System.out.println(formatDate(date,pattern));</span><br><span class="line">   &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">formatDate</span><span class="params">(Date date,String pattern)</span>&#123;</span><br><span class="line">        <span class="comment">// 创建格式化日期对象</span></span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">sd</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(pattern);</span><br><span class="line">        <span class="keyword">return</span> sd.format(date);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>日期的解析：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.iweb.work;</span><br><span class="line"><span class="keyword">import</span> java.text.DateFormat;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test6</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 日期字符串</span></span><br><span class="line">        String strDate=<span class="string">&quot;2021-01-14 18:21:22:554&quot;</span>;</span><br><span class="line">        <span class="comment">// 解析模式</span></span><br><span class="line">        String format=<span class="string">&quot;yyyy-MM-dd HH:mm:ss:SSS&quot;</span>;</span><br><span class="line">        <span class="comment">// 创建日期解析对象</span></span><br><span class="line">       <span class="comment">/* DateFormat df=new SimpleDateFormat(format);</span></span><br><span class="line"><span class="comment">        // 解析日期</span></span><br><span class="line"><span class="comment">        try &#123;</span></span><br><span class="line"><span class="comment">            Date d= df.parse(strDate);</span></span><br><span class="line"><span class="comment">            System.out.println(d);</span></span><br><span class="line"><span class="comment">        &#125;catch (Exception e)&#123;</span></span><br><span class="line"><span class="comment">            e.printStackTrace();</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> parstDate(strDate, format);</span><br><span class="line">            System.out.println(date);</span><br><span class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> Date <span class="title function_">parstDate</span><span class="params">(String strDate,String format)</span> <span class="keyword">throws</span> </span><br><span class="line"> Exception&#123;</span><br><span class="line">        DateFormat df=<span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(format);</span><br><span class="line">        <span class="keyword">return</span> df.parse(strDate);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><h2 id="三、实际应用示例"><a href="#三、实际应用示例" class="headerlink" title="三、实际应用示例"></a>三、实际应用示例</h2><h3 id="1-计算两个日期之间的天数"><a href="#1-计算两个日期之间的天数" class="headerlink" title="1. 计算两个日期之间的天数"></a>1. 计算两个日期之间的天数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.time.LocalDate;</span><br><span class="line"><span class="keyword">import</span> java.time.temporal.ChronoUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DaysBetweenDates</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">LocalDate</span> <span class="variable">startDate</span> <span class="operator">=</span> LocalDate.of(<span class="number">2023</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="type">LocalDate</span> <span class="variable">endDate</span> <span class="operator">=</span> LocalDate.of(<span class="number">2023</span>, <span class="number">12</span>, <span class="number">31</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="type">long</span> <span class="variable">daysBetween</span> <span class="operator">=</span> ChronoUnit.DAYS.between(startDate, endDate);</span><br><span class="line">        System.out.println(<span class="string">&quot;2023年有 &quot;</span> + daysBetween + <span class="string">&quot; 天&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-判断闰年"><a href="#2-判断闰年" class="headerlink" title="2. 判断闰年"></a>2. 判断闰年</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.time.LocalDate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeapYearCheck</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] years = &#123;<span class="number">2000</span>, <span class="number">2020</span>, <span class="number">2023</span>, <span class="number">2100</span>&#125;;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> year : years) &#123;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">isLeap</span> <span class="operator">=</span> LocalDate.of(year, <span class="number">1</span>, <span class="number">1</span>).isLeapYear();</span><br><span class="line">            System.out.println(year + <span class="string">&quot; 年是闰年吗? &quot;</span> + isLeap);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-工作时间计算器"><a href="#3-工作时间计算器" class="headerlink" title="3. 工作时间计算器"></a>3. 工作时间计算器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.time.Duration;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalTime;</span><br><span class="line"><span class="keyword">import</span> java.time.format.DateTimeFormatter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WorkingHoursCalculator</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">DateTimeFormatter</span> <span class="variable">timeFormatter</span> <span class="operator">=</span> DateTimeFormatter.ofPattern(<span class="string">&quot;HH:mm&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="type">LocalTime</span> <span class="variable">startTime</span> <span class="operator">=</span> LocalTime.of(<span class="number">9</span>, <span class="number">0</span>);  <span class="comment">// 上班时间 09:00</span></span><br><span class="line">        <span class="type">LocalTime</span> <span class="variable">endTime</span> <span class="operator">=</span> LocalTime.of(<span class="number">18</span>, <span class="number">30</span>);  <span class="comment">// 下班时间 18:30</span></span><br><span class="line">        <span class="type">LocalTime</span> <span class="variable">lunchStart</span> <span class="operator">=</span> LocalTime.of(<span class="number">12</span>, <span class="number">0</span>);  <span class="comment">// 午餐开始 12:00</span></span><br><span class="line">        <span class="type">LocalTime</span> <span class="variable">lunchEnd</span> <span class="operator">=</span> LocalTime.of(<span class="number">13</span>, <span class="number">30</span>);  <span class="comment">// 午餐结束 13:30</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 计算工作时间</span></span><br><span class="line">        <span class="type">Duration</span> <span class="variable">morningWork</span> <span class="operator">=</span> Duration.between(startTime, lunchStart);</span><br><span class="line">        <span class="type">Duration</span> <span class="variable">afternoonWork</span> <span class="operator">=</span> Duration.between(lunchEnd, endTime);</span><br><span class="line">        <span class="type">Duration</span> <span class="variable">totalWork</span> <span class="operator">=</span> morningWork.plus(afternoonWork);</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;上午工作时间: &quot;</span> + morningWork.toHours() + <span class="string">&quot;小时&quot;</span> + </span><br><span class="line">                          morningWork.toMinutesPart() + <span class="string">&quot;分钟&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;下午工作时间: &quot;</span> + afternoonWork.toHours() + <span class="string">&quot;小时&quot;</span> + </span><br><span class="line">                          afternoonWork.toMinutesPart() + <span class="string">&quot;分钟&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;总工作时间: &quot;</span> + totalWork.toHours() + <span class="string">&quot;小时&quot;</span> + </span><br><span class="line">                          totalWork.toMinutesPart() + <span class="string">&quot;分钟&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四、注意事项与最佳实践"><a href="#四、注意事项与最佳实践" class="headerlink" title="四、注意事项与最佳实践"></a>四、注意事项与最佳实践</h2><ol><li><p><strong>时区处理</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用时区敏感的类处理跨时区应用</span></span><br><span class="line"><span class="type">ZonedDateTime</span> <span class="variable">beijingTime</span> <span class="operator">=</span> ZonedDateTime.now(ZoneId.of(<span class="string">&quot;Asia/Shanghai&quot;</span>));</span><br><span class="line"><span class="type">ZonedDateTime</span> <span class="variable">newYorkTime</span> <span class="operator">=</span> beijingTime.withZoneSameInstant(ZoneId.of(<span class="string">&quot;America/New_York&quot;</span>));</span><br><span class="line">System.out.println(<span class="string">&quot;北京时间: &quot;</span> + beijingTime);</span><br><span class="line">System.out.println(<span class="string">&quot;纽约时间: &quot;</span> + newYorkTime);</span><br></pre></td></tr></table></figure></li><li><p><strong>新旧API转换</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Date 转 Instant</span></span><br><span class="line"><span class="type">Date</span> <span class="variable">legacyDate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="type">Instant</span> <span class="variable">instant</span> <span class="operator">=</span> legacyDate.toInstant();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Instant 转 Date</span></span><br><span class="line"><span class="type">Date</span> <span class="variable">newDate</span> <span class="operator">=</span> Date.from(instant);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Calendar 转 LocalDateTime</span></span><br><span class="line"><span class="type">Calendar</span> <span class="variable">calendar</span> <span class="operator">=</span> Calendar.getInstance();</span><br><span class="line"><span class="type">LocalDateTime</span> <span class="variable">ldt</span> <span class="operator">=</span> LocalDateTime.ofInstant(calendar.toInstant(), ZoneId.systemDefault());</span><br></pre></td></tr></table></figure></li><li><p><strong>日期格式化线程安全</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// DateTimeFormatter 是线程安全的，可以定义为常量</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">DateTimeFormatter</span> <span class="variable">DATE_FORMATTER</span> <span class="operator">=</span> </span><br><span class="line">    DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy-MM-dd&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// SimpleDateFormat 不是线程安全的，需要每次创建新实例或同步使用</span></span><br></pre></td></tr></table></figure></li><li><p><strong>性能考虑</strong>：</p><ul><li>对于高频率的日期操作，使用 <code>java.time</code> 包性能更好</li><li>避免在循环中重复创建格式化对象</li></ul></li><li><p><strong>日期验证</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    LocalDate.parse(<span class="string">&quot;2023-02-30&quot;</span>);  <span class="comment">// 无效日期会抛出DateTimeParseException</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;无效日期&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>时间精度</strong>：</p><ul><li><code>Instant</code> 精确到纳秒</li><li>传统 <code>Date</code> 精确到毫秒</li><li>根据需求选择合适的时间精度</li></ul></li></ol><p>通过合理使用 Java 的日期时间 API，可以准确、高效地处理各种日期时间相关的业务需求。对于新项目，建议直接使用 Java 8 的 <code>java.time</code> 包；对于维护旧系统，可能需要与传统 API 交互。</p><h1 id="Java-正则表达式全面解析"><a href="#Java-正则表达式全面解析" class="headerlink" title="Java 正则表达式全面解析"></a>Java 正则表达式全面解析</h1><p>正则表达式是处理字符串的强大工具，Java 通过 <code>java.util.regex</code> 包提供了完整的正则表达式支持。下面我将系统地讲解 Java 中正则表达式的各种功能和使用场景。</p><h2 id="一、正则表达式基础"><a href="#一、正则表达式基础" class="headerlink" title="一、正则表达式基础"></a>一、正则表达式基础</h2><p><strong>正则表达式：</strong>正则表达式是一种用于描述字符串模式的工具，它由字符和特殊字符组成。</p><h3 id="1-Pattern-和-Matcher-类"><a href="#1-Pattern-和-Matcher-类" class="headerlink" title="1. Pattern 和 Matcher 类"></a>1. Pattern 和 Matcher 类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.regex.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RegexBasic</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">text</span> <span class="operator">=</span> <span class="string">&quot;Hello, my email is example@email.com and my phone is 123-456-7890&quot;</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 1. 使用Pattern.matches()简单匹配</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isMatch</span> <span class="operator">=</span> Pattern.matches(<span class="string">&quot;.*email.*&quot;</span>, text);</span><br><span class="line">        System.out.println(<span class="string">&quot;Contains &#x27;email&#x27;? &quot;</span> + isMatch);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 2. 使用Pattern和Matcher</span></span><br><span class="line">        <span class="type">Pattern</span> <span class="variable">emailPattern</span> <span class="operator">=</span> Pattern.compile(<span class="string">&quot;\\w+@\\w+\\.\\w+&quot;</span>);</span><br><span class="line">        <span class="type">Matcher</span> <span class="variable">emailMatcher</span> <span class="operator">=</span> emailPattern.matcher(text);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 查找所有匹配</span></span><br><span class="line">        <span class="keyword">while</span> (emailMatcher.find()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Found email: &quot;</span> + emailMatcher.group());</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 3. 电话号码匹配</span></span><br><span class="line">        <span class="type">Pattern</span> <span class="variable">phonePattern</span> <span class="operator">=</span> Pattern.compile(<span class="string">&quot;\\d&#123;3&#125;-\\d&#123;3&#125;-\\d&#123;4&#125;&quot;</span>);</span><br><span class="line">        <span class="type">Matcher</span> <span class="variable">phoneMatcher</span> <span class="operator">=</span> phonePattern.matcher(text);</span><br><span class="line">        <span class="keyword">if</span> (phoneMatcher.find()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Phone number: &quot;</span> + phoneMatcher.group());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-常用正则表达式元字符"><a href="#2-常用正则表达式元字符" class="headerlink" title="2. 常用正则表达式元字符"></a>2. 常用正则表达式元字符</h3><p>整合整合，说实话很少用到查的QAQ</p><div class="table-container"><table><thead><tr><th>元字符</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td><code>.</code></td><td>匹配任意字符</td><td><code>a.c</code> 匹配 “abc”, “a1c” 等</td></tr><tr><td><code>\d</code></td><td>数字 [0-9]</td><td><code>\d\d</code> 匹配 “12”, “34” 等</td></tr><tr><td><code>\D</code></td><td>非数字 <sup><a href="#fn_0-9" id="reffn_0-9">0-9</a></sup></td><td><code>\D\D</code> 匹配 “ab”, “#$” 等</td></tr><tr><td><code>\w</code></td><td>单词字符 [a-zA-Z0-9_]</td><td><code>\w+</code> 匹配单词</td></tr><tr><td><code>\W</code></td><td>非单词字符</td><td><code>\W</code> 匹配 “@”, “!” 等</td></tr><tr><td><code>\s</code></td><td>空白字符 [ \t\n\x0B\f\r]</td><td><code>\s+</code> 匹配空白</td></tr><tr><td><code>\S</code></td><td>非空白字符</td><td><code>\S+</code> 匹配非空白序列</td></tr><tr><td><code>^</code></td><td>行开头</td><td><code>^Java</code> 匹配行开头的 “Java”</td></tr><tr><td>$$`</td><td>行结尾</td><td>`end$$ 匹配行结尾的 “end”</td></tr><tr><td><code>*</code></td><td>0次或多次</td><td><code>a*b</code> 匹配 “b”, “ab”, “aab” 等</td></tr><tr><td><code>+</code></td><td>1次或多次</td><td><code>a+b</code> 匹配 “ab”, “aab” 但不匹配 “b”</td></tr><tr><td><code>?</code></td><td>0次或1次</td><td><code>a?b</code> 匹配 “b”, “ab”</td></tr><tr><td><code>&#123;n&#125;</code></td><td>恰好n次</td><td><code>a&#123;3&#125;</code> 匹配 “aaa”</td></tr><tr><td><code>&#123;n,&#125;</code></td><td>至少n次</td><td><code>a&#123;2,&#125;</code> 匹配 “aa”, “aaa” 等</td></tr><tr><td><code>&#123;n,m&#125;</code></td><td>n到m次</td><td><code>a&#123;2,4&#125;</code> 匹配 “aa”, “aaa”, “aaaa”</td></tr></tbody></table></div><h2 id="二、分组与捕获"><a href="#二、分组与捕获" class="headerlink" title="二、分组与捕获"></a>二、分组与捕获</h2><p>分组和捕获作用分别是：</p><ol><li><p><strong>分组 (Grouping)：</strong></p><ul><li>分组用于将正则表达式中的子表达式组合起来，形成一个逻辑单元。</li><li>分组可以嵌套，形成复杂的匹配模式。</li><li>分组可以通过 <code>()</code> 来定义。</li></ul></li><li><p><strong>捕获 (Capturing)：</strong></p><ul><li>捕获用于从匹配的字符串中提取特定的子串。</li></ul></li></ol><p>每到这个时候我都会感叹自己不会说人话</p><h3 id="1-捕获组"><a href="#1-捕获组" class="headerlink" title="1. 捕获组"></a>1. 捕获组</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.regex.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RegexGroups</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">dateStr</span> <span class="operator">=</span> <span class="string">&quot;2023-05-15, 1999-12-31&quot;</span>;</span><br><span class="line">        <span class="type">Pattern</span> <span class="variable">datePattern</span> <span class="operator">=</span> Pattern.compile(<span class="string">&quot;(\\d&#123;4&#125;)-(\\d&#123;2&#125;)-(\\d&#123;2&#125;)&quot;</span>);</span><br><span class="line">        <span class="type">Matcher</span> <span class="variable">dateMatcher</span> <span class="operator">=</span> datePattern.matcher(dateStr);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (dateMatcher.find()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Full match: &quot;</span> + dateMatcher.group(<span class="number">0</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;Year: &quot;</span> + dateMatcher.group(<span class="number">1</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;Month: &quot;</span> + dateMatcher.group(<span class="number">2</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;Day: &quot;</span> + dateMatcher.group(<span class="number">3</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 命名捕获组 (Java 7+)</span></span><br><span class="line">        <span class="type">Pattern</span> <span class="variable">namedPattern</span> <span class="operator">=</span> Pattern.compile(<span class="string">&quot;(?&lt;year&gt;\\d&#123;4&#125;)-(?&lt;month&gt;\\d&#123;2&#125;)-(?&lt;day&gt;\\d&#123;2&#125;)&quot;</span>);</span><br><span class="line">        <span class="type">Matcher</span> <span class="variable">namedMatcher</span> <span class="operator">=</span> namedPattern.matcher(dateStr);</span><br><span class="line">        <span class="keyword">while</span> (namedMatcher.find()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;\nNamed groups:&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;Year: &quot;</span> + namedMatcher.group(<span class="string">&quot;year&quot;</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;Month: &quot;</span> + namedMatcher.group(<span class="string">&quot;month&quot;</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;Day: &quot;</span> + namedMatcher.group(<span class="string">&quot;day&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上代码实现的作用是；</p><ol><li>匹配日期字符串中的年、月、日，并输出每个部分。</li><li>使用命名捕获组，通过名称访问捕获的子串。</li></ol><h3 id="2-非捕获组"><a href="#2-非捕获组" class="headerlink" title="2. 非捕获组"></a>2. 非捕获组</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// (?:pattern) - 非捕获组</span></span><br><span class="line"><span class="type">Pattern</span> <span class="variable">pattern</span> <span class="operator">=</span> Pattern.compile(<span class="string">&quot;(?:Mr|Ms|Mrs)\\.\\s(\\w+)&quot;</span>);</span><br><span class="line"><span class="type">Matcher</span> <span class="variable">matcher</span> <span class="operator">=</span> pattern.matcher(<span class="string">&quot;Mr. Smith and Ms. Doe&quot;</span>);</span><br><span class="line"><span class="keyword">while</span> (matcher.find()) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Name: &quot;</span> + matcher.group(<span class="number">1</span>));  <span class="comment">// group(0)是整个匹配，group(1)是名字</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、边界匹配与零宽断言"><a href="#三、边界匹配与零宽断言" class="headerlink" title="三、边界匹配与零宽断言"></a>三、边界匹配与零宽断言</h2><h3 id="1-边界匹配"><a href="#1-边界匹配" class="headerlink" title="1. 边界匹配"></a>1. 边界匹配</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// \b - 单词边界</span></span><br><span class="line"><span class="type">Pattern</span> <span class="variable">wordBoundary</span> <span class="operator">=</span> Pattern.compile(<span class="string">&quot;\\bcat\\b&quot;</span>);</span><br><span class="line"><span class="type">Matcher</span> <span class="variable">wbMatcher</span> <span class="operator">=</span> wordBoundary.matcher(<span class="string">&quot;cat concatenate cat&quot;</span>);</span><br><span class="line"><span class="keyword">while</span> (wbMatcher.find()) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Found at: &quot;</span> + wbMatcher.start());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ^ $ - 行开始和结束</span></span><br><span class="line"><span class="type">Pattern</span> <span class="variable">linePattern</span> <span class="operator">=</span> Pattern.compile(<span class="string">&quot;^\\d+$&quot;</span>);  <span class="comment">// 整行都是数字</span></span><br><span class="line">System.out.println(<span class="string">&quot;123 matches: &quot;</span> + linePattern.matcher(<span class="string">&quot;123&quot;</span>).matches());</span><br><span class="line">System.out.println(<span class="string">&quot;123a matches: &quot;</span> + linePattern.matcher(<span class="string">&quot;123a&quot;</span>).matches());</span><br></pre></td></tr></table></figure><h3 id="2-零宽断言"><a href="#2-零宽断言" class="headerlink" title="2. 零宽断言"></a>2. 零宽断言</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 正向先行断言 (?=pattern)</span></span><br><span class="line"><span class="type">Pattern</span> <span class="variable">positiveLookahead</span> <span class="operator">=</span> Pattern.compile(<span class="string">&quot;\\w+(?=\\=)&quot;</span>);</span><br><span class="line"><span class="type">Matcher</span> <span class="variable">plaMatcher</span> <span class="operator">=</span> positiveLookahead.matcher(<span class="string">&quot;key=value&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (plaMatcher.find()) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Key before &#x27;=&#x27;: &quot;</span> + plaMatcher.group());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 负向先行断言 (?!pattern)</span></span><br><span class="line"><span class="type">Pattern</span> <span class="variable">negativeLookahead</span> <span class="operator">=</span> Pattern.compile(<span class="string">&quot;\\d&#123;3&#125;(?!-)&quot;</span>);</span><br><span class="line"><span class="type">Matcher</span> <span class="variable">nlaMatcher</span> <span class="operator">=</span> negativeLookahead.matcher(<span class="string">&quot;123-456 789&quot;</span>);</span><br><span class="line"><span class="keyword">while</span> (nlaMatcher.find()) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;3 digits not followed by &#x27;-&#x27;: &quot;</span> + nlaMatcher.group());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正向后行断言 (?&lt;=pattern)</span></span><br><span class="line"><span class="type">Pattern</span> <span class="variable">positiveLookbehind</span> <span class="operator">=</span> Pattern.compile(<span class="string">&quot;(?&lt;=\\$)\\d+&quot;</span>);</span><br><span class="line"><span class="type">Matcher</span> <span class="variable">plbMatcher</span> <span class="operator">=</span> positiveLookbehind.matcher(<span class="string">&quot;Price: $100&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (plbMatcher.find()) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Number after &#x27;$&#x27;: &quot;</span> + plbMatcher.group());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 负向后行断言 (?&lt;!pattern)</span></span><br><span class="line"><span class="type">Pattern</span> <span class="variable">negativeLookbehind</span> <span class="operator">=</span> Pattern.compile(<span class="string">&quot;(?&lt;!\\$)\\d+&quot;</span>);</span><br><span class="line"><span class="type">Matcher</span> <span class="variable">nlbMatcher</span> <span class="operator">=</span> negativeLookbehind.matcher(<span class="string">&quot;Price: $100 200&quot;</span>);</span><br><span class="line"><span class="keyword">while</span> (nlbMatcher.find()) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Number not after &#x27;$&#x27;: &quot;</span> + nlbMatcher.group());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四、常用正则表达式示例"><a href="#四、常用正则表达式示例" class="headerlink" title="四、常用正则表达式示例"></a>四、常用正则表达式示例</h2><h3 id="1-验证电子邮件"><a href="#1-验证电子邮件" class="headerlink" title="1. 验证电子邮件"></a>1. 验证电子邮件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmailValidator</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">EMAIL_REGEX</span> <span class="operator">=</span> </span><br><span class="line">        <span class="string">&quot;^[a-zA-Z0-9_+&amp;*-]+(?:\\.[a-zA-Z0-9_+&amp;*-]+)*@&quot;</span> +</span><br><span class="line">        <span class="string">&quot;(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z]&#123;2,7&#125;$&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(String email)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Pattern.compile(EMAIL_REGEX).matcher(email).matches();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        String[] emails = &#123;</span><br><span class="line">            <span class="string">&quot;test@example.com&quot;</span>,</span><br><span class="line">            <span class="string">&quot;user.name@domain.co&quot;</span>,</span><br><span class="line">            <span class="string">&quot;invalid@.com&quot;</span>,</span><br><span class="line">            <span class="string">&quot;another@test&quot;</span></span><br><span class="line">        &#125;;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (String email : emails) &#123;</span><br><span class="line">            System.out.println(email + <span class="string">&quot;: &quot;</span> + isValid(email));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-提取URL"><a href="#2-提取URL" class="headerlink" title="2. 提取URL"></a>2. 提取URL</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UrlExtractor</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">text</span> <span class="operator">=</span> <span class="string">&quot;Visit https://www.example.com or http://test.org for more info&quot;</span>;</span><br><span class="line">        <span class="type">Pattern</span> <span class="variable">urlPattern</span> <span class="operator">=</span> Pattern.compile(<span class="string">&quot;https?://(?:[\\w-]+\\.)+[\\w-]+(/[\\w- ./?%&amp;=]*)?&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="type">Matcher</span> <span class="variable">matcher</span> <span class="operator">=</span> urlPattern.matcher(text);</span><br><span class="line">        <span class="keyword">while</span> (matcher.find()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Found URL: &quot;</span> + matcher.group());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-密码强度验证"><a href="#3-密码强度验证" class="headerlink" title="3. 密码强度验证"></a>3. 密码强度验证</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PasswordValidator</span> &#123;</span><br><span class="line">    <span class="comment">// 至少8字符，包含大小写字母、数字和特殊字符</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PASSWORD_REGEX</span> <span class="operator">=</span> </span><br><span class="line">        <span class="string">&quot;^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[@#$%^&amp;+=])(?=\\S+$).&#123;8,&#125;$&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(String password)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Pattern.compile(PASSWORD_REGEX).matcher(password).matches();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        String[] passwords = &#123;</span><br><span class="line">            <span class="string">&quot;Weakpass1&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Strong@Pass123&quot;</span>,</span><br><span class="line">            <span class="string">&quot;noSpecialChar1&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Short1@&quot;</span></span><br><span class="line">        &#125;;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (String pwd : passwords) &#123;</span><br><span class="line">            System.out.println(pwd + <span class="string">&quot;: &quot;</span> + isValid(pwd));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="五、高级用法"><a href="#五、高级用法" class="headerlink" title="五、高级用法"></a>五、高级用法</h2><h3 id="1-替换操作"><a href="#1-替换操作" class="headerlink" title="1. 替换操作"></a>1. 替换操作</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RegexReplacement</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">text</span> <span class="operator">=</span> <span class="string">&quot;User: john, Age: 30; User: jane, Age: 25&quot;</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 简单替换</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">replaced</span> <span class="operator">=</span> text.replaceAll(<span class="string">&quot;\\d+&quot;</span>, <span class="string">&quot;XX&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;After age masking: &quot;</span> + replaced);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 使用捕获组替换</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">nameReplaced</span> <span class="operator">=</span> text.replaceAll(<span class="string">&quot;User: (\\w+)&quot;</span>, <span class="string">&quot;Name: $1&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;After name format: &quot;</span> + nameReplaced);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 使用Matcher进行复杂替换</span></span><br><span class="line">        <span class="type">Pattern</span> <span class="variable">pattern</span> <span class="operator">=</span> Pattern.compile(<span class="string">&quot;(\\w+): (\\w+)&quot;</span>);</span><br><span class="line">        <span class="type">Matcher</span> <span class="variable">matcher</span> <span class="operator">=</span> pattern.matcher(text);</span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (matcher.find()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">field</span> <span class="operator">=</span> matcher.group(<span class="number">1</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> matcher.group(<span class="number">2</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">replacement</span> <span class="operator">=</span> field.equals(<span class="string">&quot;Age&quot;</span>) ? <span class="string">&quot;**masked**&quot;</span> : value;</span><br><span class="line">            matcher.appendReplacement(sb, field + <span class="string">&quot;: &quot;</span> + replacement);</span><br><span class="line">        &#125;</span><br><span class="line">        matcher.appendTail(sb);</span><br><span class="line">        System.out.println(<span class="string">&quot;Selective masking: &quot;</span> + sb.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-分割字符串"><a href="#2-分割字符串" class="headerlink" title="2. 分割字符串"></a>2. 分割字符串</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RegexSplit</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">text</span> <span class="operator">=</span> <span class="string">&quot;apple,orange,,banana;grape&quot;</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 简单分割</span></span><br><span class="line">        String[] fruits1 = text.split(<span class="string">&quot;[,;]&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Simple split: &quot;</span> + Arrays.toString(fruits1));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 去除空字符串</span></span><br><span class="line">        String[] fruits2 = text.split(<span class="string">&quot;[,;]+&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;No empty strings: &quot;</span> + Arrays.toString(fruits2));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 使用Pattern.split</span></span><br><span class="line">        <span class="type">Pattern</span> <span class="variable">pattern</span> <span class="operator">=</span> Pattern.compile(<span class="string">&quot;[,;]&quot;</span>);</span><br><span class="line">        String[] fruits3 = pattern.split(text);</span><br><span class="line">        System.out.println(<span class="string">&quot;Using Pattern.split: &quot;</span> + Arrays.toString(fruits3));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 限制分割次数</span></span><br><span class="line">        String[] fruits4 = text.split(<span class="string">&quot;[,;]&quot;</span>, <span class="number">3</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Limited split: &quot;</span> + Arrays.toString(fruits4));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="六、性能优化与最佳实践"><a href="#六、性能优化与最佳实践" class="headerlink" title="六、性能优化与最佳实践"></a>六、性能优化与最佳实践</h2><ol><li><p><strong>预编译正则表达式</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对于频繁使用的正则表达式，预编译Pattern</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Pattern</span> <span class="variable">EMAIL_PATTERN</span> <span class="operator">=</span> Pattern.compile(<span class="string">&quot;your_email_regex&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p><strong>避免贪婪匹配</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 贪婪匹配</span></span><br><span class="line"><span class="type">Pattern</span> <span class="variable">greedy</span> <span class="operator">=</span> Pattern.compile(<span class="string">&quot;&lt;.*&gt;&quot;</span>);  <span class="comment">// 匹配整个 &lt;a&gt;&lt;b&gt;&lt;/b&gt;&lt;/a&gt;</span></span><br><span class="line"><span class="comment">// 非贪婪匹配</span></span><br><span class="line"><span class="type">Pattern</span> <span class="variable">reluctant</span> <span class="operator">=</span> Pattern.compile(<span class="string">&quot;&lt;.*?&gt;&quot;</span>);  <span class="comment">// 匹配单个标签 &lt;a&gt;, &lt;b&gt;, &lt;/b&gt;, &lt;/a&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>使用非捕获组提高性能</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 当你不需要捕获组内容时使用非捕获组</span></span><br><span class="line"><span class="type">Pattern</span> <span class="variable">pattern</span> <span class="operator">=</span> Pattern.compile(<span class="string">&quot;(?:Mr|Ms|Mrs)\\.\\s\\w+&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p><strong>边界匹配优化</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用^和$确保整行匹配，避免部分匹配</span></span><br><span class="line"><span class="type">Pattern</span> <span class="variable">exactMatch</span> <span class="operator">=</span> Pattern.compile(<span class="string">&quot;^\\d&#123;5&#125;$&quot;</span>);  <span class="comment">// 只匹配5位数字</span></span><br></pre></td></tr></table></figure></li><li><p><strong>处理多行文本</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用Pattern.MULTILINE模式处理多行文本</span></span><br><span class="line"><span class="type">Pattern</span> <span class="variable">multiLine</span> <span class="operator">=</span> Pattern.compile(<span class="string">&quot;^\\w+&quot;</span>, Pattern.MULTILINE);</span><br><span class="line"><span class="type">String</span> <span class="variable">text</span> <span class="operator">=</span> <span class="string">&quot;first line\nsecond line\nthird line&quot;</span>;</span><br><span class="line"><span class="type">Matcher</span> <span class="variable">m</span> <span class="operator">=</span> multiLine.matcher(text);</span><br><span class="line"><span class="keyword">while</span> (m.find()) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Line starts with: &quot;</span> + m.group());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>异常处理</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    Pattern.compile(<span class="string">&quot;invalid[regex&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (PatternSyntaxException e) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Invalid regex: &quot;</span> + e.getMessage());</span><br><span class="line">    System.out.println(<span class="string">&quot;Description: &quot;</span> + e.getDescription());</span><br><span class="line">    System.out.println(<span class="string">&quot;Index: &quot;</span> + e.getIndex());</span><br><span class="line">    System.out.println(<span class="string">&quot;Pattern: &quot;</span> + e.getPattern());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>通过合理使用 Java 的正则表达式功能，可以高效地处理各种复杂的字符串匹配、查找、替换和分割操作。</p><h1 id="Java-方法全面解析"><a href="#Java-方法全面解析" class="headerlink" title="Java 方法全面解析"></a>Java 方法全面解析</h1><p>方法是 Java 编程中的基本构建块，用于封装可重用的代码逻辑。下面我将系统地讲解 Java 方法的各种功能和使用场景。</p><h2 id="一、方法基础"><a href="#一、方法基础" class="headerlink" title="一、方法基础"></a>一、方法基础</h2><h3 id="1-方法定义与调用"><a href="#1-方法定义与调用" class="headerlink" title="1. 方法定义与调用"></a>1. 方法定义与调用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MethodBasics</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 1. 无参数无返回值方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">greet</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello, World!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 2. 带参数无返回值方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">greetUser</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello, &quot;</span> + name + <span class="string">&quot;!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 3. 带参数有返回值方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 4. 可变参数方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">average</span><span class="params">(<span class="type">double</span>... numbers)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (numbers.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">double</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">double</span> num : numbers) &#123;</span><br><span class="line">            sum += num;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum / numbers.length;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 方法调用示例</span></span><br><span class="line">        greet();</span><br><span class="line">        greetUser(<span class="string">&quot;Alice&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> add(<span class="number">5</span>, <span class="number">3</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;5 + 3 = &quot;</span> + sum);</span><br><span class="line">        </span><br><span class="line">        <span class="type">double</span> <span class="variable">avg</span> <span class="operator">=</span> average(<span class="number">1.5</span>, <span class="number">2.5</span>, <span class="number">3.5</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Average: &quot;</span> + avg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-方法参数传递"><a href="#2-方法参数传递" class="headerlink" title="2. 方法参数传递"></a>2. 方法参数传递</h3><p>Java 中只有值传递（传递的是值的副本）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ParameterPassing</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">modifyPrimitive</span><span class="params">(<span class="type">int</span> num)</span> &#123;</span><br><span class="line">        num = <span class="number">100</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;Inside method - primitive: &quot;</span> + num);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">modifyReference</span><span class="params">(StringBuilder sb)</span> &#123;</span><br><span class="line">        sb.append(<span class="string">&quot; World&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Inside method - reference: &quot;</span> + sb);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 基本类型参数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        modifyPrimitive(x);</span><br><span class="line">        System.out.println(<span class="string">&quot;After method - primitive: &quot;</span> + x);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 引用类型参数</span></span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">        modifyReference(builder);</span><br><span class="line">        System.out.println(<span class="string">&quot;After method - reference: &quot;</span> + builder);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二、方法重载"><a href="#二、方法重载" class="headerlink" title="二、方法重载"></a>二、方法重载</h2><p>方法重载允许一个类中有多个同名方法，只要参数列表不同：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MethodOverloading</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 方法重载示例</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">max</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a &gt; b ? a : b;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">max</span><span class="params">(<span class="type">double</span> a, <span class="type">double</span> b)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a &gt; b ? a : b;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">max</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> max(max(a, b), c);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Max of 5 and 3: &quot;</span> + max(<span class="number">5</span>, <span class="number">3</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;Max of 5.5 and 3.3: &quot;</span> + max(<span class="number">5.5</span>, <span class="number">3.3</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;Max of 5, 3 and 7: &quot;</span> + max(<span class="number">5</span>, <span class="number">3</span>, <span class="number">7</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、递归方法"><a href="#三、递归方法" class="headerlink" title="三、递归方法"></a>三、递归方法</h2><p>方法调用自身称为递归：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Recursion</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 计算阶乘</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">factorial</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (n &lt;= <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> n * factorial(n - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 斐波那契数列</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">fibonacci</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (n &lt;= <span class="number">1</span>) <span class="keyword">return</span> n;</span><br><span class="line">        <span class="keyword">return</span> fibonacci(n - <span class="number">1</span>) + fibonacci(n - <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;5! = &quot;</span> + factorial(<span class="number">5</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;Fibonacci(7) = &quot;</span> + fibonacci(<span class="number">7</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四、构造方法"><a href="#四、构造方法" class="headerlink" title="四、构造方法"></a>四、构造方法</h2><p>构造方法用于初始化对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 默认构造方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(<span class="string">&quot;Unknown&quot;</span>, <span class="number">18</span>); <span class="comment">// 调用另一个构造方法</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 带参数构造方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 复制构造方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(Student other)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(other.name, other.age);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Getter 和 Setter 方法</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;name=&#x27;&quot;</span> + name + <span class="string">&quot;&#x27;, age=&quot;</span> + age + <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        <span class="type">Student</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;Alice&quot;</span>, <span class="number">20</span>);</span><br><span class="line">        <span class="type">Student</span> <span class="variable">s3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(s2);</span><br><span class="line">        </span><br><span class="line">        System.out.println(s1);</span><br><span class="line">        System.out.println(s2);</span><br><span class="line">        System.out.println(s3);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="五、静态方法-vs-实例方法"><a href="#五、静态方法-vs-实例方法" class="headerlink" title="五、静态方法 vs 实例方法"></a>五、静态方法 vs 实例方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MethodTypes</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">instanceVar</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">staticVar</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 实例方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">instanceMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;实例方法可以访问实例变量: &quot;</span> + instanceVar);</span><br><span class="line">        System.out.println(<span class="string">&quot;实例方法可以访问静态变量: &quot;</span> + staticVar);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 静态方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">staticMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// System.out.println(instanceVar); // 错误：不能直接访问实例变量</span></span><br><span class="line">        System.out.println(<span class="string">&quot;静态方法可以访问静态变量: &quot;</span> + staticVar);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MethodTypes</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MethodTypes</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 调用实例方法</span></span><br><span class="line">        obj.instanceMethod();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 调用静态方法</span></span><br><span class="line">        MethodTypes.staticMethod();</span><br><span class="line">        staticMethod(); <span class="comment">// 在同一个类中可以省略类名</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="六、方法最佳实践"><a href="#六、方法最佳实践" class="headerlink" title="六、方法最佳实践"></a>六、方法最佳实践</h2><h3 id="1-方法设计原则"><a href="#1-方法设计原则" class="headerlink" title="1. 方法设计原则"></a>1. 方法设计原则</h3><ol><li><strong>单一职责原则</strong>：一个方法只做一件事</li><li><strong>合理命名</strong>：方法名应准确描述其功能</li><li><strong>适当长度</strong>：通常不超过20-30行代码</li><li><strong>参数数量控制</strong>：最好不超过5个参数</li><li><strong>避免副作用</strong>：除非必要，方法不应修改传入参数</li></ol><h3 id="2-方法文档注释"><a href="#2-方法文档注释" class="headerlink" title="2. 方法文档注释"></a>2. 方法文档注释</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 计算两个数的最大公约数</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> a 第一个正整数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> b 第二个正整数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 两个数的最大公约数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IllegalArgumentException 如果参数小于等于0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">gcd</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> <span class="keyword">throws</span> IllegalArgumentException &#123;</span><br><span class="line">    <span class="keyword">if</span> (a &lt;= <span class="number">0</span> || b &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;参数必须为正整数&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (b != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> b;</span><br><span class="line">        b = a % b;</span><br><span class="line">        a = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-实用方法示例"><a href="#3-实用方法示例" class="headerlink" title="3. 实用方法示例"></a>3. 实用方法示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UtilityMethods</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 判断是否为素数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isPrime</span><span class="params">(<span class="type">int</span> num)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (num &lt;= <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (num == <span class="number">2</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (num % <span class="number">2</span> == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">3</span>; i * i &lt;= num; i += <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (num % i == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 反转数组</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">reverseArray</span><span class="params">(T[] array)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; array.length / <span class="number">2</span>; i++) &#123;</span><br><span class="line">            <span class="type">T</span> <span class="variable">temp</span> <span class="operator">=</span> array[i];</span><br><span class="line">            array[i] = array[array.length - <span class="number">1</span> - i];</span><br><span class="line">            array[array.length - <span class="number">1</span> - i] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 二分查找</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">binarySearch</span><span class="params">(<span class="type">int</span>[] array, <span class="type">int</span> key)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">low</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">high</span> <span class="operator">=</span> array.length - <span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (low &lt;= high) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (low + high) &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">midVal</span> <span class="operator">=</span> array[mid];</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (midVal &lt; key) &#123;</span><br><span class="line">                low = mid + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (midVal &gt; key) &#123;</span><br><span class="line">                high = mid - <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> mid; <span class="comment">// 找到key</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -(low + <span class="number">1</span>); <span class="comment">// 未找到，返回插入点</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Is 17 prime? &quot;</span> + isPrime(<span class="number">17</span>));</span><br><span class="line">        </span><br><span class="line">        Integer[] nums = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line">        reverseArray(nums);</span><br><span class="line">        System.out.println(<span class="string">&quot;Reversed array: &quot;</span> + Arrays.toString(nums));</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span>[] sorted = &#123;<span class="number">2</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">12</span>, <span class="number">16</span>, <span class="number">23</span>, <span class="number">38</span>, <span class="number">56</span>, <span class="number">72</span>, <span class="number">91</span>&#125;;</span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> binarySearch(sorted, <span class="number">23</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Found 23 at index: &quot;</span> + index);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="七、高级方法特性"><a href="#七、高级方法特性" class="headerlink" title="七、高级方法特性"></a>七、高级方法特性</h2><h3 id="1-方法引用-Java-8"><a href="#1-方法引用-Java-8" class="headerlink" title="1. 方法引用 (Java 8+)"></a>1. 方法引用 (Java 8+)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MethodReferences</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;String&gt; names = Arrays.asList(<span class="string">&quot;Alice&quot;</span>, <span class="string">&quot;Bob&quot;</span>, <span class="string">&quot;Charlie&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 静态方法引用</span></span><br><span class="line">        names.forEach(MethodReferences::print);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 实例方法引用</span></span><br><span class="line">        names.forEach(System.out::println);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 构造方法引用</span></span><br><span class="line">        names.stream()</span><br><span class="line">             .map(String::<span class="keyword">new</span>)</span><br><span class="line">             .forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-默认方法-Java-8"><a href="#2-默认方法-Java-8" class="headerlink" title="2. 默认方法 (Java 8+)"></a>2. 默认方法 (Java 8+)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Vehicle</span> &#123;</span><br><span class="line">    <span class="comment">// 常规抽象方法</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 默认方法</span></span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">stop</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Vehicle stopped&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 静态方法</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">honk</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Honk honk!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Car</span> <span class="keyword">implements</span> <span class="title class_">Vehicle</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Car started&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Car</span> <span class="variable">car</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Car</span>();</span><br><span class="line">        car.start();</span><br><span class="line">        car.stop();  <span class="comment">// 调用默认方法</span></span><br><span class="line">        Vehicle.honk(); <span class="comment">// 调用接口静态方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Java-I-O、Stream与异常处理全面解析"><a href="#Java-I-O、Stream与异常处理全面解析" class="headerlink" title="Java I/O、Stream与异常处理全面解析"></a>Java I/O、Stream与异常处理全面解析</h1><p>下面我将整合Java I/O流、文件操作和异常处理的核心知识，并提供实用的代码示例。</p><h2 id="一、Java-I-O-流体系"><a href="#一、Java-I-O-流体系" class="headerlink" title="一、Java I/O 流体系"></a>一、Java I/O 流体系</h2><h3 id="1-流的基本分类"><a href="#1-流的基本分类" class="headerlink" title="1. 流的基本分类"></a>1. 流的基本分类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IOOverview</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 1. 按方向分</span></span><br><span class="line">        <span class="comment">//   - 输入流: InputStream, Reader</span></span><br><span class="line">        <span class="comment">//   - 输出流: OutputStream, Writer</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 2. 按数据类型分</span></span><br><span class="line">        <span class="comment">//   - 字节流: InputStream, OutputStream</span></span><br><span class="line">        <span class="comment">//   - 字符流: Reader, Writer</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 3. 按功能分</span></span><br><span class="line">        <span class="comment">//   - 节点流: 直接操作数据源/目标的流</span></span><br><span class="line">        <span class="comment">//   - 处理流: 对现有流进行包装增强</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-常用流类关系图"><a href="#2-常用流类关系图" class="headerlink" title="2. 常用流类关系图"></a>2. 常用流类关系图</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">字节流：</span><br><span class="line">InputStream</span><br><span class="line">|-- FileInputStream</span><br><span class="line">|-- FilterInputStream</span><br><span class="line">    |-- BufferedInputStream</span><br><span class="line">    |-- DataInputStream</span><br><span class="line">|-- ObjectInputStream</span><br><span class="line"></span><br><span class="line">OutputStream</span><br><span class="line">|-- FileOutputStream</span><br><span class="line">|-- FilterOutputStream</span><br><span class="line">    |-- BufferedOutputStream</span><br><span class="line">    |-- DataOutputStream</span><br><span class="line">|-- ObjectOutputStream</span><br><span class="line">|-- PrintStream</span><br><span class="line"></span><br><span class="line">字符流：</span><br><span class="line">Reader</span><br><span class="line">|-- InputStreamReader</span><br><span class="line">    |-- FileReader</span><br><span class="line">|-- BufferedReader</span><br><span class="line"></span><br><span class="line">Writer</span><br><span class="line">|-- OutputStreamWriter</span><br><span class="line">    |-- FileWriter</span><br><span class="line">|-- BufferedWriter</span><br><span class="line">|-- PrintWriter</span><br></pre></td></tr></table></figure><h2 id="二、文件操作与Scanner"><a href="#二、文件操作与Scanner" class="headerlink" title="二、文件操作与Scanner"></a>二、文件操作与Scanner</h2><h3 id="1-文件基本操作"><a href="#1-文件基本操作" class="headerlink" title="1. 文件基本操作"></a>1. 文件基本操作</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Path;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileOperations</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 1. 使用File类</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;test.txt&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (file.createNewFile()) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;文件创建成功&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;文件已存在&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            System.out.println(<span class="string">&quot;文件路径: &quot;</span> + file.getAbsolutePath());</span><br><span class="line">            System.out.println(<span class="string">&quot;文件大小: &quot;</span> + file.length() + <span class="string">&quot; bytes&quot;</span>);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 删除文件</span></span><br><span class="line">            <span class="comment">// file.delete();</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 2. 使用NIO的Files和Path (Java 7+)</span></span><br><span class="line">        <span class="type">Path</span> <span class="variable">path</span> <span class="operator">=</span> Paths.get(<span class="string">&quot;test.txt&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (!Files.exists(path)) &#123;</span><br><span class="line">                Files.createFile(path);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;文件属性: &quot;</span> + Files.getAttribute(path, <span class="string">&quot;basic:size&quot;</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 3. 使用Scanner读取文件</span></span><br><span class="line">        <span class="keyword">try</span> (<span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(path)) &#123;</span><br><span class="line">            <span class="keyword">while</span> (scanner.hasNextLine()) &#123;</span><br><span class="line">                System.out.println(scanner.nextLine());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-Scanner类详解"><a href="#2-Scanner类详解" class="headerlink" title="2. Scanner类详解"></a>2. Scanner类详解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ScannerDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        </span><br><span class="line">        System.out.print(<span class="string">&quot;请输入整数: &quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (scanner.hasNextInt()) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line">            System.out.println(<span class="string">&quot;读取的整数: &quot;</span> + num);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;输入的不是整数&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        scanner.nextLine(); <span class="comment">// 消耗换行符</span></span><br><span class="line">        </span><br><span class="line">        System.out.print(<span class="string">&quot;请输入一行文本: &quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line">        System.out.println(<span class="string">&quot;读取的行: &quot;</span> + line);</span><br><span class="line">        </span><br><span class="line">        System.out.print(<span class="string">&quot;请输入用逗号分隔的数据: &quot;</span>);</span><br><span class="line">        scanner.useDelimiter(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span> (scanner.hasNext()) &#123;</span><br><span class="line">            System.out.println(scanner.next().trim());</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        scanner.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、字节流与字符流操作"><a href="#三、字节流与字符流操作" class="headerlink" title="三、字节流与字符流操作"></a>三、字节流与字符流操作</h2><h3 id="1-字节流文件复制"><a href="#1-字节流文件复制" class="headerlink" title="1. 字节流文件复制"></a>1. 字节流文件复制</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ByteStreamCopy</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">copyFile</span><span class="params">(String src, String dest)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(src));</span><br><span class="line">             <span class="type">OutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(dest))) &#123;</span><br><span class="line">            </span><br><span class="line">            <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">8192</span>];</span><br><span class="line">            <span class="type">int</span> bytesRead;</span><br><span class="line">            <span class="keyword">while</span> ((bytesRead = in.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                out.write(buffer, <span class="number">0</span>, bytesRead);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;文件复制完成&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        copyFile(<span class="string">&quot;source.jpg&quot;</span>, <span class="string">&quot;destination.jpg&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-字符流读写文本"><a href="#2-字符流读写文本" class="headerlink" title="2. 字符流读写文本"></a>2. 字符流读写文本</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CharacterStreamDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">writeToFile</span><span class="params">(String filename, String content)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">Writer</span> <span class="variable">writer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">FileWriter</span>(filename))) &#123;</span><br><span class="line">            writer.write(content);</span><br><span class="line">            System.out.println(<span class="string">&quot;内容写入成功&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">readFromFile</span><span class="params">(String filename)</span> &#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">content</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">Reader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(filename))) &#123;</span><br><span class="line">            <span class="type">char</span>[] buffer = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="type">int</span> charsRead;</span><br><span class="line">            <span class="keyword">while</span> ((charsRead = reader.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                content.append(buffer, <span class="number">0</span>, charsRead);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> content.toString();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        writeToFile(<span class="string">&quot;demo.txt&quot;</span>, <span class="string">&quot;这是使用字符流写入的文本内容\n第二行内容&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;读取内容:\n&quot;</span> + readFromFile(<span class="string">&quot;demo.txt&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四、异常处理机制"><a href="#四、异常处理机制" class="headerlink" title="四、异常处理机制"></a>四、异常处理机制</h2><p>在java中，将程序执行过程中，发生的不正常情况称为“异常”<br>异常本质其实就是一个类，所有的异常都有一个顶级父类，<code>java.lang.Throwable</code>下面有两个派生子类，<code>Error</code>和<code>Exception</code>。错误我们无法处理，异常我们可以处理。</p><p><strong>error</strong><br>error是程序无法处理的错误，比如<code>OutOfMemoryError</code>、<code>ThreadDeath</code>等。这些错误发生时，Java虚拟机（JVM）一般会选择线程终止。这个状态可以视为不可恢复的崩溃状态，我们不管他</p><p><strong>exception</strong><br>exception是程序本身可以处理的异常。根据<code>java</code>异常处理机制，异常指的是<code>exception</code>所有异常继承于<code>exception</code>的类。</p><p>异常可以分为运行时异常和检查时异常</p><p><strong>运行时异常</strong><br>RunTimeExecption只有运行时才有异常，编译时没有异常，这是由于编程错误导致的，所以在编写程序时不要求使用异常处理机制去避免这些异常，更贴切的名字是逻辑异常。 </p><h3 id="1-异常处理基础"><a href="#1-异常处理基础" class="headerlink" title="1. 异常处理基础"></a>1. 异常处理基础</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExceptionHandling</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">checkedExceptionDemo</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 受检异常必须处理或声明抛出</span></span><br><span class="line">        <span class="type">FileReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;nonexistent.txt&quot;</span>);</span><br><span class="line">        reader.close();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">uncheckedExceptionDemo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 非受检异常可以不处理</span></span><br><span class="line">        <span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>];</span><br><span class="line">        System.out.println(arr[<span class="number">5</span>]); <span class="comment">// ArrayIndexOutOfBoundsException</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 1. try-catch-finally</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            checkedExceptionDemo();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            System.err.println(<span class="string">&quot;文件未找到: &quot;</span> + e.getMessage());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            System.err.println(<span class="string">&quot;IO错误: &quot;</span> + e.getMessage());</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;</span></span><br><span class="line"><span class="string">            </span></span><br><span class="line"><span class="string">            ly块总是执行&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 2. try-with-resources (Java 7+)</span></span><br><span class="line">        <span class="keyword">try</span> (<span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;test.txt&quot;</span>)) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;文件打开成功&quot;</span>);</span><br><span class="line">            <span class="comment">// 自动关闭资源</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            System.err.println(<span class="string">&quot;处理文件时出错: &quot;</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 3. 自定义异常</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            validateAge(<span class="number">15</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvalidAgeException e) &#123;</span><br><span class="line">            System.err.println(<span class="string">&quot;年龄验证失败: &quot;</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 自定义异常示例</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">InvalidAgeException</span> <span class="keyword">extends</span> <span class="title class_">Exception</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">InvalidAgeException</span><span class="params">(String message)</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>(message);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">validateAge</span><span class="params">(<span class="type">int</span> age)</span> <span class="keyword">throws</span> InvalidAgeException &#123;</span><br><span class="line">        <span class="keyword">if</span> (age &lt; <span class="number">18</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InvalidAgeException</span>(<span class="string">&quot;年龄必须大于18岁&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-异常处理最佳实践"><a href="#2-异常处理最佳实践" class="headerlink" title="2. 异常处理最佳实践"></a>2. 异常处理最佳实践</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExceptionBestPractices</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">readFile</span><span class="params">(String filename)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 业务逻辑</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> Files.readString(Path.of(filename));</span><br><span class="line">            System.out.println(content);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchFileException e) &#123;</span><br><span class="line">            System.err.println(<span class="string">&quot;文件不存在: &quot;</span> + e.getFile());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (AccessDeniedException e) &#123;</span><br><span class="line">            System.err.println(<span class="string">&quot;没有访问权限: &quot;</span> + e.getFile());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            System.err.println(<span class="string">&quot;读取文件时发生错误: &quot;</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">processUserInput</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.print(<span class="string">&quot;请输入数字: &quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> Integer.parseInt(scanner.nextLine());</span><br><span class="line">            System.out.println(<span class="string">&quot;输入的数字是: &quot;</span> + num);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NumberFormatException e) &#123;</span><br><span class="line">            System.err.println(<span class="string">&quot;输入的不是有效数字&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            scanner.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        readFile(<span class="string">&quot;test.txt&quot;</span>);</span><br><span class="line">        processUserInput();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="五、综合应用示例"><a href="#五、综合应用示例" class="headerlink" title="五、综合应用示例"></a>五、综合应用示例</h2><h3 id="1-文件加密解密工具"><a href="#1-文件加密解密工具" class="headerlink" title="1. 文件加密解密工具"></a>1. 文件加密解密工具</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileEncryptor</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">KEY</span> <span class="operator">=</span> <span class="number">0x55</span>; <span class="comment">// 简单异或加密密钥</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">encryptFile</span><span class="params">(String inputFile, String outputFile)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(inputFile));</span><br><span class="line">             <span class="type">OutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(outputFile))) &#123;</span><br><span class="line">            </span><br><span class="line">            <span class="type">int</span> data;</span><br><span class="line">            <span class="keyword">while</span> ((data = in.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">                out.write(data ^ KEY);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">decryptFile</span><span class="params">(String inputFile, String outputFile)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        encryptFile(inputFile, outputFile); <span class="comment">// 异或加密解密是相同的操作</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;1. 加密文件&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;2. 解密文件&quot;</span>);</span><br><span class="line">        System.out.print(<span class="string">&quot;请选择操作: &quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">choice</span> <span class="operator">=</span> Integer.parseInt(scanner.nextLine());</span><br><span class="line">            System.out.print(<span class="string">&quot;输入文件路径: &quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">input</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line">            System.out.print(<span class="string">&quot;输出文件路径: &quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">output</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (choice == <span class="number">1</span>) &#123;</span><br><span class="line">                encryptFile(input, output);</span><br><span class="line">                System.out.println(<span class="string">&quot;文件加密完成&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (choice == <span class="number">2</span>) &#123;</span><br><span class="line">                decryptFile(input, output);</span><br><span class="line">                System.out.println(<span class="string">&quot;文件解密完成&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;无效选择&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NumberFormatException e) &#123;</span><br><span class="line">            System.err.println(<span class="string">&quot;请输入有效数字&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            System.err.println(<span class="string">&quot;文件未找到: &quot;</span> + e.getMessage());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            System.err.println(<span class="string">&quot;处理文件时出错: &quot;</span> + e.getMessage());</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            scanner.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-日志记录系统"><a href="#2-日志记录系统" class="headerlink" title="2. 日志记录系统"></a>2. 日志记录系统</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.time.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoggerSystem</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">LOG_FILE</span> <span class="operator">=</span> <span class="string">&quot;app.log&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">LogLevel</span> &#123;</span><br><span class="line">        INFO, WARNING, ERROR</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">log</span><span class="params">(LogLevel level, String message)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">logEntry</span> <span class="operator">=</span> String.format(<span class="string">&quot;[%s][%s] %s%n&quot;</span>, </span><br><span class="line">            LocalDateTime.now(), level, message);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">try</span> (<span class="type">FileWriter</span> <span class="variable">fw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(LOG_FILE, <span class="literal">true</span>);</span><br><span class="line">             <span class="type">BufferedWriter</span> <span class="variable">bw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(fw);</span><br><span class="line">             <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintWriter</span>(bw)) &#123;</span><br><span class="line">            </span><br><span class="line">            out.print(logEntry);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            System.err.println(<span class="string">&quot;记录日志失败: &quot;</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title function_">readLogs</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;String&gt; logs = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(<span class="keyword">new</span> <span class="title class_">File</span>(LOG_FILE))) &#123;</span><br><span class="line">            <span class="keyword">while</span> (scanner.hasNextLine()) &#123;</span><br><span class="line">                logs.add(scanner.nextLine());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            System.err.println(<span class="string">&quot;日志文件不存在&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> logs;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        log(LogLevel.INFO, <span class="string">&quot;应用程序启动&quot;</span>);</span><br><span class="line">        log(LogLevel.WARNING, <span class="string">&quot;内存使用量过高&quot;</span>);</span><br><span class="line">        log(LogLevel.ERROR, <span class="string">&quot;数据库连接失败&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;日志内容:&quot;</span>);</span><br><span class="line">        readLogs().forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="六、关键知识点总结"><a href="#六、关键知识点总结" class="headerlink" title="六、关键知识点总结"></a>六、关键知识点总结</h2><ol><li><p><strong>I/O流选择原则</strong>：</p><ul><li>文本数据：优先使用字符流(Reader/Writer)</li><li>二进制数据：使用字节流(InputStream/OutputStream)</li><li>需要缓冲：包装Buffered系列流</li><li>Java 7+：优先使用NIO的Files和Paths工具类</li></ul></li><li><p><strong>异常处理要点</strong>：</p><ul><li>受检异常必须处理或声明抛出</li><li>非受检异常通常表示编程错误</li><li>使用try-with-resources自动管理资源</li><li>捕获异常时应从具体到抽象</li><li>不要忽略捕获的异常</li></ul></li><li><p><strong>Scanner使用技巧</strong>：</p><ul><li>读取不同类型数据使用hasNextXxx()/nextXxx()</li><li>注意处理换行符问题(nextLine与其他方法混用时)</li><li>使用useDelimiter()设置自定义分隔符</li><li>读取完毕后调用close()释放资源</li></ul></li><li><p><strong>性能优化建议</strong>：</p><ul><li>使用缓冲区减少I/O操作次数</li><li>合理设置缓冲区大小(通常8KB)</li><li>大文件处理使用流式而非全部加载到内存</li><li>及时关闭资源防止内存泄漏</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 结构速查 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java快速学习速查（3）</title>
      <link href="/2025/03/31/java%E5%BF%AB%E9%80%9F%E5%AD%A6%E4%B9%A0%E9%80%9F%E6%9F%A5%EF%BC%883%EF%BC%89/"/>
      <url>/2025/03/31/java%E5%BF%AB%E9%80%9F%E5%AD%A6%E4%B9%A0%E9%80%9F%E6%9F%A5%EF%BC%883%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="java快速学习速查（3）"><a href="#java快速学习速查（3）" class="headerlink" title="java快速学习速查（3）"></a>java快速学习速查（3）</h1><blockquote><p>这个部分涉及的方面是循环结构，条件语句，switch case,Number&amp;Math,Character,String,StringBuffer几个方面，对照查询学习</p></blockquote><h1 id="Java循环结构全面解析"><a href="#Java循环结构全面解析" class="headerlink" title="Java循环结构全面解析"></a>Java循环结构全面解析</h1><p>循环是编程中控制流程的重要结构，Java提供了多种循环方式以满足不同场景的需求。下面我将系统地讲解Java中的循环结构及其应用。</p><h2 id="一、循环结构类型"><a href="#一、循环结构类型" class="headerlink" title="一、循环结构类型"></a>一、循环结构类型</h2><h3 id="1-while循环"><a href="#1-while循环" class="headerlink" title="1. while循环"></a>1. while循环</h3><p><strong>语法结构：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (条件表达式) &#123;</span><br><span class="line">    <span class="comment">// 循环体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>特点：</strong></p><ul><li>先判断条件，后执行循环体</li><li>可能一次都不执行</li><li>适合不确定循环次数的场景</li></ul><p><strong>示例：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 计算1-100的和</span></span><br><span class="line"><span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (i &lt;= <span class="number">100</span>) &#123;</span><br><span class="line">    sum += i;</span><br><span class="line">    i++;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;Sum: &quot;</span> + sum);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取用户输入直到输入quit</span></span><br><span class="line"><span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"><span class="type">String</span> <span class="variable">input</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">while</span> (!input.equals(<span class="string">&quot;quit&quot;</span>)) &#123;</span><br><span class="line">    System.out.print(<span class="string">&quot;请输入命令：&quot;</span>);</span><br><span class="line">    input = scanner.nextLine();</span><br><span class="line">    System.out.println(<span class="string">&quot;你输入了：&quot;</span> + input);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="2-do-while循环"><a href="#2-do-while循环" class="headerlink" title="2. do-while循环"></a>2. do-while循环</h3><p><strong>语法结构：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="comment">// 循环体</span></span><br><span class="line">&#125; <span class="keyword">while</span> (条件表达式);</span><br></pre></td></tr></table></figure></p><p><strong>特点：</strong></p><ul><li>先执行循环体，后判断条件</li><li>至少执行一次循环体</li><li>适合需要至少执行一次的场景</li></ul><p><strong>示例：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 密码验证（至少验证一次）</span></span><br><span class="line">String password;</span><br><span class="line"><span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    System.out.print(<span class="string">&quot;请输入密码：&quot;</span>);</span><br><span class="line">    password = scanner.nextLine();</span><br><span class="line">&#125; <span class="keyword">while</span> (!password.equals(<span class="string">&quot;123456&quot;</span>));</span><br><span class="line">System.out.println(<span class="string">&quot;密码正确！&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成随机数直到大于0.9</span></span><br><span class="line"><span class="type">double</span> randomValue;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    randomValue = Math.random();</span><br><span class="line">    System.out.println(<span class="string">&quot;生成值：&quot;</span> + randomValue);</span><br><span class="line">&#125; <span class="keyword">while</span> (randomValue &lt;= <span class="number">0.9</span>);</span><br></pre></td></tr></table></figure></p><h3 id="3-for循环"><a href="#3-for循环" class="headerlink" title="3. for循环"></a>3. for循环</h3><p><strong>语法结构：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (初始化; 条件表达式; 更新表达式) &#123;</span><br><span class="line">    <span class="comment">// 循环体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>特点：</strong></p><ul><li>循环次数通常已知</li><li>初始化、条件和更新都在一行</li><li>适合确定循环次数的场景</li></ul><p><strong>示例：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 打印乘法表</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">9</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= i; j++) &#123;</span><br><span class="line">        System.out.print(j + <span class="string">&quot;×&quot;</span> + i + <span class="string">&quot;=&quot;</span> + (i*j) + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历数组</span></span><br><span class="line"><span class="type">int</span>[] numbers = &#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; numbers.length; i++) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;第&quot;</span> + (i+<span class="number">1</span>) + <span class="string">&quot;个元素：&quot;</span> + numbers[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="4-增强for循环（for-each）"><a href="#4-增强for循环（for-each）" class="headerlink" title="4. 增强for循环（for-each）"></a>4. 增强for循环（for-each）</h3><p><strong>语法结构：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (元素类型 变量名 : 集合或数组) &#123;</span><br><span class="line">    <span class="comment">// 循环体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>特点：</strong></p><ul><li>简化数组和集合的遍历</li><li>无需索引变量</li><li>不能修改原数组/集合元素</li></ul><p><strong>示例：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 遍历数组</span></span><br><span class="line">String[] fruits = &#123;<span class="string">&quot;Apple&quot;</span>, <span class="string">&quot;Banana&quot;</span>, <span class="string">&quot;Orange&quot;</span>&#125;;</span><br><span class="line"><span class="keyword">for</span> (String fruit : fruits) &#123;</span><br><span class="line">    System.out.println(fruit);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历集合</span></span><br><span class="line">List&lt;Integer&gt; numbers = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> num : numbers) &#123;</span><br><span class="line">    System.out.println(num * num);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="二、循环控制语句"><a href="#二、循环控制语句" class="headerlink" title="二、循环控制语句"></a>二、循环控制语句</h2><h3 id="1-break语句"><a href="#1-break语句" class="headerlink" title="1. break语句"></a>1. break语句</h3><p><strong>作用：</strong> 立即终止当前循环</p><p><strong>示例：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查找第一个能被7整除的数</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i % <span class="number">7</span> == <span class="number">0</span>) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;找到第一个能被7整除的数：&quot;</span> + i);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 多层循环中的break（只跳出最内层循环）</span></span><br><span class="line">outer: <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">5</span>; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i * j &gt; <span class="number">6</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;i=&quot;</span> + i + <span class="string">&quot;, j=&quot;</span> + j);</span><br><span class="line">            <span class="keyword">break</span> outer;  <span class="comment">// 使用标签跳出外层循环</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="2-continue语句"><a href="#2-continue语句" class="headerlink" title="2. continue语句"></a>2. continue语句</h3><p><strong>作用：</strong> 跳过本次循环，进入下一次循环</p><p><strong>示例：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 打印1-10的奇数</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 跳过空字符串处理</span></span><br><span class="line">String[] words = &#123;<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;world&quot;</span>, <span class="literal">null</span>, <span class="string">&quot;java&quot;</span>&#125;;</span><br><span class="line"><span class="keyword">for</span> (String word : words) &#123;</span><br><span class="line">    <span class="keyword">if</span> (word == <span class="literal">null</span> || word.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(word.toUpperCase());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="三、循环结构对比"><a href="#三、循环结构对比" class="headerlink" title="三、循环结构对比"></a>三、循环结构对比</h2><div class="table-container"><table><thead><tr><th>特性</th><th>while</th><th>do-while</th><th>for</th><th>for-each</th></tr></thead><tbody><tr><td>执行顺序</td><td>先判断后执行</td><td>先执行后判断</td><td>先判断后执行</td><td>自动遍历</td></tr><tr><td>最少执行次数</td><td>0次</td><td>1次</td><td>0次</td><td>集合大小次</td></tr><tr><td>适用场景</td><td>条件控制循环</td><td>至少执行一次</td><td>固定次数循环</td><td>集合/数组遍历</td></tr><tr><td>循环变量作用域</td><td>外部声明</td><td>外部声明</td><td>内部声明</td><td>内部声明</td></tr><tr><td>是否可提前终止</td><td>是（break）</td><td>是</td><td>是</td><td>是</td></tr></tbody></table></div><h2 id="四、循环最佳实践"><a href="#四、循环最佳实践" class="headerlink" title="四、循环最佳实践"></a>四、循环最佳实践</h2><h3 id="1-避免无限循环"><a href="#1-避免无限循环" class="headerlink" title="1. 避免无限循环"></a>1. 避免无限循环</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 错误示例</span></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;  <span class="comment">// 缺少终止条件</span></span><br><span class="line">    System.out.println(<span class="string">&quot;无限循环&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确做法</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">running</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">while</span> (running) &#123;</span><br><span class="line">    <span class="comment">// 处理逻辑</span></span><br><span class="line">    <span class="keyword">if</span> (shouldStop()) &#123;</span><br><span class="line">        running = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-循环性能优化"><a href="#2-循环性能优化" class="headerlink" title="2. 循环性能优化"></a>2. 循环性能优化</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 优化前（每次循环都计算length）</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; list.size(); i++) &#123;...&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 优化后（缓存length）</span></span><br><span class="line"><span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> list.size();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i++) &#123;...&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 倒序循环有时更快</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> array.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;...&#125;</span><br></pre></td></tr></table></figure><h3 id="3-嵌套循环优化"><a href="#3-嵌套循环优化" class="headerlink" title="3. 嵌套循环优化"></a>3. 嵌套循环优化</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 低效的嵌套循环</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">100</span>; j++) &#123;</span><br><span class="line">        <span class="comment">// 内层循环次数多</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 优化后（减少外层循环次数）</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">100</span>; j++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">        <span class="comment">// 现在内层循环次数少</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="五、典型应用场景"><a href="#五、典型应用场景" class="headerlink" title="五、典型应用场景"></a>五、典型应用场景</h2><h3 id="1-数据处理"><a href="#1-数据处理" class="headerlink" title="1. 数据处理"></a>1. 数据处理</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 计算平均值</span></span><br><span class="line"><span class="type">double</span>[] data = &#123;<span class="number">12.5</span>, <span class="number">18.7</span>, <span class="number">11.2</span>, <span class="number">19.8</span>, <span class="number">15.3</span>&#125;;</span><br><span class="line"><span class="type">double</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">double</span> d : data) &#123;</span><br><span class="line">    sum += d;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">double</span> <span class="variable">average</span> <span class="operator">=</span> sum / data.length;</span><br></pre></td></tr></table></figure><h3 id="2-文件读取"><a href="#2-文件读取" class="headerlink" title="2. 文件读取"></a>2. 文件读取</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 读取文件所有行</span></span><br><span class="line"><span class="keyword">try</span> (<span class="type">BufferedReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;data.txt&quot;</span>))) &#123;</span><br><span class="line">    String line;</span><br><span class="line">    <span class="keyword">while</span> ((line = reader.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">        System.out.println(line);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-游戏循环"><a href="#3-游戏循环" class="headerlink" title="3. 游戏循环"></a>3. 游戏循环</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="variable">gameRunning</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">while</span> (gameRunning) &#123;</span><br><span class="line">    <span class="comment">// 处理输入</span></span><br><span class="line">    processInput();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 更新游戏状态</span></span><br><span class="line">    updateGame();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 渲染画面</span></span><br><span class="line">    render();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 检查游戏结束条件</span></span><br><span class="line">    <span class="keyword">if</span> (isGameOver()) &#123;</span><br><span class="line">        gameRunning = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="六、常见问题与陷阱"><a href="#六、常见问题与陷阱" class="headerlink" title="六、常见问题与陷阱"></a>六、常见问题与陷阱</h2><ol><li><p><strong>循环条件错误</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 死循环（i永远不会等于10）</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i != <span class="number">10</span>; i += <span class="number">2</span>) &#123;...&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>浮点数循环</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不可靠的浮点数循环</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">double</span> <span class="variable">d</span> <span class="operator">=</span> <span class="number">0.1</span>; d != <span class="number">1.0</span>; d += <span class="number">0.1</span>) &#123;...&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确做法</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="type">double</span> <span class="variable">d</span> <span class="operator">=</span> i * <span class="number">0.1</span>;</span><br><span class="line">    <span class="comment">// 使用d</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>修改循环变量</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">5</span>) &#123;</span><br><span class="line">        i = <span class="number">8</span>;  <span class="comment">// 直接修改循环变量，容易出错</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>集合遍历时修改</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(Arrays.asList(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>));</span><br><span class="line"><span class="keyword">for</span> (String s : list) &#123;</span><br><span class="line">    <span class="keyword">if</span> (s.equals(<span class="string">&quot;b&quot;</span>)) &#123;</span><br><span class="line">        list.remove(s);  <span class="comment">// 抛出ConcurrentModificationException</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确做法：使用迭代器</span></span><br><span class="line">Iterator&lt;String&gt; it = list.iterator();</span><br><span class="line"><span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> it.next();</span><br><span class="line">    <span class="keyword">if</span> (s.equals(<span class="string">&quot;b&quot;</span>)) &#123;</span><br><span class="line">        it.remove();  <span class="comment">// 安全删除</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Java条件语句全面解析"><a href="#Java条件语句全面解析" class="headerlink" title="Java条件语句全面解析"></a>Java条件语句全面解析</h1></li></ol><p>条件语句是编程中实现分支逻辑的基础结构，Java提供了多种条件语句来实现不同复杂度的判断逻辑。下面我将系统地讲解Java中的条件语句及其应用。</p><h2 id="一、基础条件语句"><a href="#一、基础条件语句" class="headerlink" title="一、基础条件语句"></a>一、基础条件语句</h2><h3 id="1-简单if语句"><a href="#1-简单if语句" class="headerlink" title="1. 简单if语句"></a>1. 简单if语句</h3><p><strong>语法结构：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (条件表达式) &#123;</span><br><span class="line">    <span class="comment">// 条件为true时执行的代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>示例：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">score</span> <span class="operator">=</span> <span class="number">85</span>;</span><br><span class="line"><span class="keyword">if</span> (score &gt;= <span class="number">60</span>) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;及格&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 单行语句可省略大括号（但不推荐）</span></span><br><span class="line"><span class="keyword">if</span> (score &gt;= <span class="number">90</span>) System.out.println(<span class="string">&quot;优秀&quot;</span>);</span><br></pre></td></tr></table></figure></p><h3 id="2-if-else语句"><a href="#2-if-else语句" class="headerlink" title="2. if-else语句"></a>2. if-else语句</h3><p><strong>语法结构：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (条件表达式) &#123;</span><br><span class="line">    <span class="comment">// 条件为true时执行</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 条件为false时执行</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>示例：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">17</span>;</span><br><span class="line"><span class="keyword">if</span> (age &gt;= <span class="number">18</span>) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;已成年&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;未成年&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="3-多重if-else语句"><a href="#3-多重if-else语句" class="headerlink" title="3. 多重if-else语句"></a>3. 多重if-else语句</h3><p><strong>语法结构：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (条件<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="comment">// 条件1为true时执行</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (条件<span class="number">2</span>) &#123;</span><br><span class="line">    <span class="comment">// 条件2为true时执行</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (条件<span class="number">3</span>) &#123;</span><br><span class="line">    <span class="comment">// 条件3为true时执行</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 以上条件都不满足时执行</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>示例：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">score</span> <span class="operator">=</span> <span class="number">78</span>;</span><br><span class="line"><span class="keyword">if</span> (score &gt;= <span class="number">90</span>) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;优秀&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (score &gt;= <span class="number">80</span>) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;良好&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (score &gt;= <span class="number">70</span>) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;中等&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (score &gt;= <span class="number">60</span>) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;及格&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;不及格&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="二、嵌套条件语句"><a href="#二、嵌套条件语句" class="headerlink" title="二、嵌套条件语句"></a>二、嵌套条件语句</h2><h3 id="1-基本嵌套结构"><a href="#1-基本嵌套结构" class="headerlink" title="1. 基本嵌套结构"></a>1. 基本嵌套结构</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (条件<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (条件<span class="number">2</span>) &#123;</span><br><span class="line">        <span class="comment">// 条件1和条件2都为true时执行</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 条件1为true但条件2为false时执行</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 条件1为false时执行</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-实际应用示例"><a href="#2-实际应用示例" class="headerlink" title="2. 实际应用示例"></a>2. 实际应用示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">hasLicense</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (age &gt;= <span class="number">18</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (hasLicense) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;可以合法驾驶&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;需要先考取驾照&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;未达到法定驾驶年龄&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、特殊条件表达式"><a href="#三、特殊条件表达式" class="headerlink" title="三、特殊条件表达式"></a>三、特殊条件表达式</h2><h3 id="1-三元运算符"><a href="#1-三元运算符" class="headerlink" title="1. 三元运算符"></a>1. 三元运算符</h3><p><strong>语法结构：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">变量 = (条件) ? 表达式<span class="number">1</span> : 表达式<span class="number">2</span>;</span><br></pre></td></tr></table></figure></p><p><strong>示例：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>, b = <span class="number">20</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> (a &gt; b) ? a : b;</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> (score &gt;= <span class="number">60</span>) ? <span class="string">&quot;及格&quot;</span> : <span class="string">&quot;不及格&quot;</span>;</span><br></pre></td></tr></table></figure></p><h3 id="2-switch-case语句"><a href="#2-switch-case语句" class="headerlink" title="2. switch-case语句"></a>2. switch-case语句</h3><p><strong>语法结构：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (表达式) &#123;</span><br><span class="line">    <span class="keyword">case</span> 值<span class="number">1</span>:</span><br><span class="line">        <span class="comment">// 代码</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> 值<span class="number">2</span>:</span><br><span class="line">        <span class="comment">// 代码</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="comment">// 默认代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>示例：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">day</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line">String dayName;</span><br><span class="line"><span class="keyword">switch</span> (day) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>: dayName = <span class="string">&quot;星期一&quot;</span>; <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>: dayName = <span class="string">&quot;星期二&quot;</span>; <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>: dayName = <span class="string">&quot;星期三&quot;</span>; <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">4</span>: dayName = <span class="string">&quot;星期四&quot;</span>; <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">5</span>: dayName = <span class="string">&quot;星期五&quot;</span>; <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">6</span>: dayName = <span class="string">&quot;星期六&quot;</span>; <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">7</span>: dayName = <span class="string">&quot;星期日&quot;</span>; <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>: dayName = <span class="string">&quot;无效日期&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(dayName);</span><br></pre></td></tr></table></figure></p><p><strong>Java 12+增强switch：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">dayName</span> <span class="operator">=</span> <span class="keyword">switch</span> (day) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span> -&gt; <span class="string">&quot;星期一&quot;</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span> -&gt; <span class="string">&quot;星期二&quot;</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span> -&gt; <span class="string">&quot;星期三&quot;</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">4</span> -&gt; <span class="string">&quot;星期四&quot;</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">5</span> -&gt; <span class="string">&quot;星期五&quot;</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">6</span> -&gt; <span class="string">&quot;星期六&quot;</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">7</span> -&gt; <span class="string">&quot;星期日&quot;</span>;</span><br><span class="line">    <span class="keyword">default</span> -&gt; <span class="string">&quot;无效日期&quot;</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h2 id="四、条件语句最佳实践"><a href="#四、条件语句最佳实践" class="headerlink" title="四、条件语句最佳实践"></a>四、条件语句最佳实践</h2><h3 id="1-代码风格建议"><a href="#1-代码风格建议" class="headerlink" title="1. 代码风格建议"></a>1. 代码风格建议</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 推荐：清晰的缩进和括号</span></span><br><span class="line"><span class="keyword">if</span> (condition) &#123;</span><br><span class="line">    <span class="comment">// 代码</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 代码</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不推荐：省略括号可能导致错误</span></span><br><span class="line"><span class="keyword">if</span> (condition) </span><br><span class="line">    doSomething();</span><br><span class="line">    doSomethingElse(); <span class="comment">// 这行不在if块内！</span></span><br></pre></td></tr></table></figure><h3 id="2-条件表达式优化"><a href="#2-条件表达式优化" class="headerlink" title="2. 条件表达式优化"></a>2. 条件表达式优化</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不推荐：嵌套过深</span></span><br><span class="line"><span class="keyword">if</span> (a &gt; b) &#123;</span><br><span class="line">    <span class="keyword">if</span> (c &gt; d) &#123;</span><br><span class="line">        <span class="keyword">if</span> (e &gt; f) &#123;</span><br><span class="line">            <span class="comment">// 代码</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 推荐：使用逻辑运算符简化</span></span><br><span class="line"><span class="keyword">if</span> (a &gt; b &amp;&amp; c &gt; d &amp;&amp; e &gt; f) &#123;</span><br><span class="line">    <span class="comment">// 代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-提前返回模式"><a href="#3-提前返回模式" class="headerlink" title="3. 提前返回模式"></a>3. 提前返回模式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不推荐：多层嵌套</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(User user)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (user != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (user.getName() != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (user.getAge() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 推荐：提前返回</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(User user)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (user == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (user.getName() == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (user.getAge() &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="五、常见问题与陷阱"><a href="#五、常见问题与陷阱" class="headerlink" title="五、常见问题与陷阱"></a>五、常见问题与陷阱</h2><h3 id="1-浮点数比较"><a href="#1-浮点数比较" class="headerlink" title="1. 浮点数比较"></a>1. 浮点数比较</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 错误方式</span></span><br><span class="line"><span class="type">double</span> <span class="variable">d</span> <span class="operator">=</span> <span class="number">0.1</span> + <span class="number">0.2</span>;</span><br><span class="line"><span class="keyword">if</span> (d == <span class="number">0.3</span>) &#123;  <span class="comment">// false!</span></span><br><span class="line">    System.out.println(<span class="string">&quot;相等&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确方式</span></span><br><span class="line"><span class="type">double</span> <span class="variable">epsilon</span> <span class="operator">=</span> <span class="number">1e-10</span>;</span><br><span class="line"><span class="keyword">if</span> (Math.abs(d - <span class="number">0.3</span>) &lt; epsilon) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;视为相等&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-空指针异常"><a href="#2-空指针异常" class="headerlink" title="2. 空指针异常"></a>2. 空指针异常</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="comment">// 错误方式</span></span><br><span class="line"><span class="keyword">if</span> (str.equals(<span class="string">&quot;test&quot;</span>)) &#123;...&#125;  <span class="comment">// NullPointerException</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确方式</span></span><br><span class="line"><span class="keyword">if</span> (<span class="string">&quot;test&quot;</span>.equals(str)) &#123;...&#125;  <span class="comment">// 安全</span></span><br><span class="line"><span class="comment">// 或</span></span><br><span class="line"><span class="keyword">if</span> (str != <span class="literal">null</span> &amp;&amp; str.equals(<span class="string">&quot;test&quot;</span>)) &#123;...&#125;</span><br></pre></td></tr></table></figure><h3 id="3-switch语句注意点"><a href="#3-switch语句注意点" class="headerlink" title="3. switch语句注意点"></a>3. switch语句注意点</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"><span class="keyword">switch</span> (num) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        System.out.println(<span class="string">&quot;一&quot;</span>);</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:  <span class="comment">// 匹配到这里</span></span><br><span class="line">        System.out.println(<span class="string">&quot;二&quot;</span>);  <span class="comment">// 会执行</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:  <span class="comment">// 没有break，继续执行</span></span><br><span class="line">        System.out.println(<span class="string">&quot;三&quot;</span>);  <span class="comment">// 也会执行</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        System.out.println(<span class="string">&quot;其他&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出：二 三</span></span><br></pre></td></tr></table></figure><h2 id="六、实际应用案例"><a href="#六、实际应用案例" class="headerlink" title="六、实际应用案例"></a>六、实际应用案例</h2><h3 id="1-登录验证"><a href="#1-登录验证" class="headerlink" title="1. 登录验证"></a>1. 登录验证</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">login</span><span class="params">(String username, String password)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (username == <span class="literal">null</span> || username.trim().isEmpty()) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;用户名不能为空&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (password == <span class="literal">null</span> || password.length() &lt; <span class="number">6</span>) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;密码长度至少6位&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!isValidUser(username, password)) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;用户名或密码错误&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;登录成功&quot;</span>);</span><br><span class="line">        <span class="comment">// 跳转到主页面</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-成绩等级判断"><a href="#2-成绩等级判断" class="headerlink" title="2. 成绩等级判断"></a>2. 成绩等级判断</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> <span class="title function_">determineGrade</span><span class="params">(<span class="type">int</span> score)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (score &lt; <span class="number">0</span> || score &gt; <span class="number">100</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;无效分数&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (score &gt;= <span class="number">90</span>) <span class="keyword">return</span> <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span> (score &gt;= <span class="number">80</span>) <span class="keyword">return</span> <span class="string">&#x27;B&#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span> (score &gt;= <span class="number">70</span>) <span class="keyword">return</span> <span class="string">&#x27;C&#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span> (score &gt;= <span class="number">60</span>) <span class="keyword">return</span> <span class="string">&#x27;D&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;F&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-月份天数判断"><a href="#3-月份天数判断" class="headerlink" title="3. 月份天数判断"></a>3. 月份天数判断</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">getDaysInMonth</span><span class="params">(<span class="type">int</span> year, <span class="type">int</span> month)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (month &lt; <span class="number">1</span> || month &gt; <span class="number">12</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;无效月份&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">switch</span> (month) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>: <span class="keyword">case</span> <span class="number">6</span>: <span class="keyword">case</span> <span class="number">9</span>: <span class="keyword">case</span> <span class="number">11</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">30</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">return</span> (year % <span class="number">400</span> == <span class="number">0</span>) || (year % <span class="number">100</span> != <span class="number">0</span> &amp;&amp; year % <span class="number">4</span> == <span class="number">0</span>) ? <span class="number">29</span> : <span class="number">28</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">31</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Java-switch-case-语句全面解析"><a href="#Java-switch-case-语句全面解析" class="headerlink" title="Java switch-case 语句全面解析"></a>Java switch-case 语句全面解析</h1><p>switch-case 是Java中用于多分支选择的结构，比多重if-else语句更加清晰易读。下面我将详细讲解switch-case的各种用法和特性。</p><h2 id="一、基本语法结构"><a href="#一、基本语法结构" class="headerlink" title="一、基本语法结构"></a>一、基本语法结构</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (表达式) &#123;</span><br><span class="line">    <span class="keyword">case</span> 值<span class="number">1</span>:</span><br><span class="line">        <span class="comment">// 代码块1</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> 值<span class="number">2</span>:</span><br><span class="line">        <span class="comment">// 代码块2</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="comment">// 默认代码块</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二、switch语句特性"><a href="#二、switch语句特性" class="headerlink" title="二、switch语句特性"></a>二、switch语句特性</h2><h3 id="1-支持的数据类型"><a href="#1-支持的数据类型" class="headerlink" title="1. 支持的数据类型"></a>1. 支持的数据类型</h3><ul><li><strong>Java 7之前</strong>：byte, short, int, char</li><li><strong>Java 7+</strong>：新增String类型</li><li><strong>Java 14+</strong>：支持表达式形式（预览特性）</li></ul><h3 id="2-执行流程"><a href="#2-执行流程" class="headerlink" title="2. 执行流程"></a>2. 执行流程</h3><ol><li>计算表达式的值</li><li>与case标签的值比较</li><li>匹配成功后执行对应的代码块</li><li>遇到break或执行到switch末尾时退出</li></ol><h3 id="3-break的重要性"><a href="#3-break的重要性" class="headerlink" title="3. break的重要性"></a>3. break的重要性</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">day</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"><span class="keyword">switch</span> (day) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>: System.out.println(<span class="string">&quot;周一&quot;</span>);</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>: System.out.println(<span class="string">&quot;周二&quot;</span>);  <span class="comment">// 从这里开始执行</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>: System.out.println(<span class="string">&quot;周三&quot;</span>);  <span class="comment">// 继续执行（没有break）</span></span><br><span class="line">    <span class="keyword">default</span>: System.out.println(<span class="string">&quot;其他&quot;</span>); <span class="comment">// 继续执行</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出：</span></span><br><span class="line"><span class="comment">// 周二</span></span><br><span class="line"><span class="comment">// 周三</span></span><br><span class="line"><span class="comment">// 其他</span></span><br></pre></td></tr></table></figure><h2 id="三、完整使用示例"><a href="#三、完整使用示例" class="headerlink" title="三、完整使用示例"></a>三、完整使用示例</h2><h3 id="1-传统写法"><a href="#1-传统写法" class="headerlink" title="1. 传统写法"></a>1. 传统写法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DayOfWeek</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">day</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line">        String dayName;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">switch</span> (day) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>: dayName = <span class="string">&quot;Monday&quot;</span>; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>: dayName = <span class="string">&quot;Tuesday&quot;</span>; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>: dayName = <span class="string">&quot;Wednesday&quot;</span>; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>: dayName = <span class="string">&quot;Thursday&quot;</span>; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">5</span>: dayName = <span class="string">&quot;Friday&quot;</span>; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">6</span>: dayName = <span class="string">&quot;Saturday&quot;</span>; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">7</span>: dayName = <span class="string">&quot;Sunday&quot;</span>; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>: dayName = <span class="string">&quot;Invalid day&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        System.out.println(dayName);  <span class="comment">// 输出：Wednesday</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-多个case合并"><a href="#2-多个case合并" class="headerlink" title="2. 多个case合并"></a>2. 多个case合并</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">month</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">year</span> <span class="operator">=</span> <span class="number">2020</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">days</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (month) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>: <span class="keyword">case</span> <span class="number">3</span>: <span class="keyword">case</span> <span class="number">5</span>: <span class="keyword">case</span> <span class="number">7</span>: <span class="keyword">case</span> <span class="number">8</span>: <span class="keyword">case</span> <span class="number">10</span>: <span class="keyword">case</span> <span class="number">12</span>:</span><br><span class="line">        days = <span class="number">31</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">4</span>: <span class="keyword">case</span> <span class="number">6</span>: <span class="keyword">case</span> <span class="number">9</span>: <span class="keyword">case</span> <span class="number">11</span>:</span><br><span class="line">        days = <span class="number">30</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">if</span> ((year % <span class="number">400</span> == <span class="number">0</span>) || (year % <span class="number">100</span> != <span class="number">0</span> &amp;&amp; year % <span class="number">4</span> == <span class="number">0</span>))</span><br><span class="line">            days = <span class="number">29</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            days = <span class="number">28</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        days = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;Days: &quot;</span> + days);  <span class="comment">// 输出：Days: 29</span></span><br></pre></td></tr></table></figure><h3 id="3-字符串匹配（Java-7-）"><a href="#3-字符串匹配（Java-7-）" class="headerlink" title="3. 字符串匹配（Java 7+）"></a>3. 字符串匹配（Java 7+）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">fruit</span> <span class="operator">=</span> <span class="string">&quot;Apple&quot;</span>;</span><br><span class="line"><span class="keyword">switch</span> (fruit) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;Orange&quot;</span>:</span><br><span class="line">        System.out.println(<span class="string">&quot;Selected Orange&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;Apple&quot;</span>:</span><br><span class="line">        System.out.println(<span class="string">&quot;Selected Apple&quot;</span>);  <span class="comment">// 输出这行</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;Banana&quot;</span>:</span><br><span class="line">        System.out.println(<span class="string">&quot;Selected Banana&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        System.out.println(<span class="string">&quot;Unknown fruit&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四、Java-12-新特性"><a href="#四、Java-12-新特性" class="headerlink" title="四、Java 12+ 新特性"></a>四、Java 12+ 新特性</h2><h3 id="1-箭头语法（-gt-）"><a href="#1-箭头语法（-gt-）" class="headerlink" title="1. 箭头语法（-&gt;）"></a>1. 箭头语法（-&gt;）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">day</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">dayType</span> <span class="operator">=</span> <span class="keyword">switch</span> (day) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> -&gt; <span class="string">&quot;Weekday&quot;</span>;  <span class="comment">// 多case匹配</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">6</span>, <span class="number">7</span> -&gt; <span class="string">&quot;Weekend&quot;</span>;</span><br><span class="line">    <span class="keyword">default</span> -&gt; <span class="string">&quot;Invalid&quot;</span>;</span><br><span class="line">&#125;;</span><br><span class="line">System.out.println(dayType);  <span class="comment">// 输出：Weekday</span></span><br></pre></td></tr></table></figure><h3 id="2-yield返回值（Java-13-）"><a href="#2-yield返回值（Java-13-）" class="headerlink" title="2. yield返回值（Java 13+）"></a>2. yield返回值（Java 13+）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">season</span> <span class="operator">=</span> <span class="keyword">switch</span> (month) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">12</span>, <span class="number">1</span>, <span class="number">2</span> -&gt; <span class="string">&quot;Winter&quot;</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> -&gt; <span class="string">&quot;Spring&quot;</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span> -&gt; &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Summer months&quot;</span>);</span><br><span class="line">        <span class="keyword">yield</span> <span class="string">&quot;Summer&quot;</span>;  <span class="comment">// 使用yield返回值</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span> -&gt; <span class="string">&quot;Autumn&quot;</span>;</span><br><span class="line">    <span class="keyword">default</span> -&gt; <span class="string">&quot;Unknown&quot;</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="五、最佳实践"><a href="#五、最佳实践" class="headerlink" title="五、最佳实践"></a>五、最佳实践</h2><ol><li><strong>总是包含default分支</strong>：处理未预期的值</li><li><strong>不要省略break</strong>：除非有意使用fall-through特性</li><li><strong>保持case分支简洁</strong>：复杂逻辑应提取为方法</li><li><strong>利用多case合并</strong>：简化相同处理的case</li><li><strong>考虑使用枚举</strong>：提高类型安全性</li></ol><h2 id="六、与if-else对比"><a href="#六、与if-else对比" class="headerlink" title="六、与if-else对比"></a>六、与if-else对比</h2><div class="table-container"><table><thead><tr><th>特性</th><th>switch-case</th><th>if-else</th></tr></thead><tbody><tr><td>可读性</td><td>多分支时更清晰</td><td>分支多时难以阅读</td></tr><tr><td>性能</td><td>通常使用跳转表更高效</td><td>需要顺序比较</td></tr><tr><td>表达式类型</td><td>有限支持</td><td>支持任何布尔表达式</td></tr><tr><td>适用场景</td><td>离散值精确匹配</td><td>范围判断或复杂条件</td></tr></tbody></table></div><h2 id="七、常见问题"><a href="#七、常见问题" class="headerlink" title="七、常见问题"></a>七、常见问题</h2><ol><li><p><strong>忘记break导致意外fall-through</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 错误示例</span></span><br><span class="line"><span class="keyword">switch</span> (x) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>: System.out.println(<span class="string">&quot;1&quot;</span>);  <span class="comment">// 忘记break</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>: System.out.println(<span class="string">&quot;2&quot;</span>); <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>case值重复</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (x) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>: ... <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>: ... <span class="keyword">break</span>;  <span class="comment">// 编译错误：重复的case</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>使用null导致NPE</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">switch</span> (s) &#123; ... &#125;  <span class="comment">// 抛出NullPointerException</span></span><br></pre></td></tr></table></figure></li><li><p><strong>类型不匹配</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">long</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="keyword">switch</span> (x) &#123; ... &#125;  <span class="comment">// 编译错误：不支持long类型</span></span><br></pre></td></tr></table></figure><h1 id="Java-Number-amp-Math-类全面解析"><a href="#Java-Number-amp-Math-类全面解析" class="headerlink" title="Java Number &amp; Math 类全面解析"></a>Java Number &amp; Math 类全面解析</h1></li></ol><p>Java 提供了强大的数字处理能力，包括基本数据类型的包装类和丰富的数学运算工具。下面我将系统地讲解这些功能的使用方法和最佳实践。</p><h2 id="一、Number-包装类体系"><a href="#一、Number-包装类体系" class="headerlink" title="一、Number 包装类体系"></a>一、Number 包装类体系</h2><h3 id="1-包装类与基本类型对应关系"><a href="#1-包装类与基本类型对应关系" class="headerlink" title="1. 包装类与基本类型对应关系"></a>1. 包装类与基本类型对应关系</h3><div class="table-container"><table><thead><tr><th>基本类型</th><th>包装类</th><th>继承关系</th></tr></thead><tbody><tr><td>byte</td><td>Byte</td><td>→ Number → Object</td></tr><tr><td>short</td><td>Short</td><td>→ Number → Object</td></tr><tr><td>int</td><td>Integer</td><td>→ Number → Object</td></tr><tr><td>long</td><td>Long</td><td>→ Number → Object</td></tr><tr><td>float</td><td>Float</td><td>→ Number → Object</td></tr><tr><td>double</td><td>Double</td><td>→ Number → Object</td></tr><tr><td>char</td><td>Character</td><td>→ Object</td></tr><tr><td>boolean</td><td>Boolean</td><td>→ Object</td></tr></tbody></table></div><h3 id="2-自动装箱与拆箱"><a href="#2-自动装箱与拆箱" class="headerlink" title="2. 自动装箱与拆箱"></a>2. 自动装箱与拆箱</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自动装箱</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;      <span class="comment">// 编译器转换为 Integer.valueOf(10)</span></span><br><span class="line"><span class="type">Double</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">3.14</span>;     <span class="comment">// Double.valueOf(3.14)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 自动拆箱</span></span><br><span class="line"><span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> a;           <span class="comment">// a.intValue()</span></span><br><span class="line"><span class="type">double</span> <span class="variable">d</span> <span class="operator">=</span> b;        <span class="comment">// b.doubleValue()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 混合运算时的自动拆箱</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">x = x + <span class="number">10</span>;          <span class="comment">// x拆箱→相加→结果装箱</span></span><br></pre></td></tr></table></figure><h3 id="3-常用方法示例"><a href="#3-常用方法示例" class="headerlink" title="3. 常用方法示例"></a>3. 常用方法示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 字符串转换</span></span><br><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> Integer.parseInt(<span class="string">&quot;123&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> Integer.toString(<span class="number">456</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 比较大小</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">10</span>, y = <span class="number">20</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">compareResult</span> <span class="operator">=</span> x.compareTo(y);  <span class="comment">// -1 (x &lt; y)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 类型转换</span></span><br><span class="line"><span class="type">double</span> <span class="variable">d</span> <span class="operator">=</span> x.doubleValue();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 进制转换</span></span><br><span class="line"><span class="type">String</span> <span class="variable">binary</span> <span class="operator">=</span> Integer.toBinaryString(<span class="number">10</span>);  <span class="comment">// &quot;1010&quot;</span></span><br><span class="line"><span class="type">String</span> <span class="variable">hex</span> <span class="operator">=</span> Integer.toHexString(<span class="number">255</span>);      <span class="comment">// &quot;ff&quot;</span></span><br></pre></td></tr></table></figure><h2 id="二、Math-数学工具类"><a href="#二、Math-数学工具类" class="headerlink" title="二、Math 数学工具类"></a>二、Math 数学工具类</h2><h3 id="1-基本数学运算"><a href="#1-基本数学运算" class="headerlink" title="1. 基本数学运算"></a>1. 基本数学运算</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 绝对值</span></span><br><span class="line">Math.abs(-<span class="number">5.6</span>);      <span class="comment">// 5.6</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 取整运算</span></span><br><span class="line">Math.ceil(<span class="number">3.2</span>);      <span class="comment">// 4.0 (向上取整)</span></span><br><span class="line">Math.floor(<span class="number">3.8</span>);     <span class="comment">// 3.0 (向下取整)</span></span><br><span class="line">Math.round(<span class="number">3.5</span>);     <span class="comment">// 4 (四舍五入)</span></span><br><span class="line">Math.rint(<span class="number">3.5</span>);      <span class="comment">// 4.0 (最接近的整数)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 极值</span></span><br><span class="line">Math.max(<span class="number">10</span>, <span class="number">20</span>);    <span class="comment">// 20</span></span><br><span class="line">Math.min(<span class="number">1.2</span>, <span class="number">3.4</span>);  <span class="comment">// 1.2</span></span><br></pre></td></tr></table></figure><h3 id="2-指数与对数"><a href="#2-指数与对数" class="headerlink" title="2. 指数与对数"></a>2. 指数与对数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 幂运算</span></span><br><span class="line">Math.pow(<span class="number">2</span>, <span class="number">3</span>);      <span class="comment">// 8.0 (2的3次方)</span></span><br><span class="line">Math.exp(<span class="number">1</span>);         <span class="comment">// 2.718... (e的1次方)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 对数</span></span><br><span class="line">Math.log(Math.E);    <span class="comment">// 1.0 (自然对数)</span></span><br><span class="line">Math.log10(<span class="number">100</span>);     <span class="comment">// 2.0 (以10为底)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 平方根</span></span><br><span class="line">Math.sqrt(<span class="number">16</span>);       <span class="comment">// 4.0</span></span><br><span class="line">Math.cbrt(<span class="number">27</span>);       <span class="comment">// 3.0 (立方根)</span></span><br></pre></td></tr></table></figure><h3 id="3-三角函数"><a href="#3-三角函数" class="headerlink" title="3. 三角函数"></a>3. 三角函数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 角度转弧度</span></span><br><span class="line"><span class="type">double</span> <span class="variable">radians</span> <span class="operator">=</span> Math.toRadians(<span class="number">30</span>);  <span class="comment">// 0.5236</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 三角函数</span></span><br><span class="line">Math.sin(Math.PI/<span class="number">6</span>);     <span class="comment">// 0.5 (30度正弦)</span></span><br><span class="line">Math.cos(Math.PI/<span class="number">3</span>);     <span class="comment">// 0.5 (60度余弦)</span></span><br><span class="line">Math.tan(Math.PI/<span class="number">4</span>);     <span class="comment">// 1.0 (45度正切)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 反三角函数</span></span><br><span class="line">Math.asin(<span class="number">0.5</span>);          <span class="comment">// 0.5236 (≈π/6)</span></span><br><span class="line">Math.acos(<span class="number">0.5</span>);          <span class="comment">// 1.0472 (≈π/3)</span></span><br><span class="line">Math.atan(<span class="number">1</span>);            <span class="comment">// 0.7854 (≈π/4)</span></span><br></pre></td></tr></table></figure><h3 id="4-随机数生成"><a href="#4-随机数生成" class="headerlink" title="4. 随机数生成"></a>4. 随机数生成</h3><p>Random类<br>Java.util.Random 用于产生随机数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 生成[0,1)之间的随机double</span></span><br><span class="line"><span class="type">double</span> <span class="variable">rand1</span> <span class="operator">=</span> Math.random();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成[1,100]的随机整数</span></span><br><span class="line"><span class="type">int</span> <span class="variable">rand2</span> <span class="operator">=</span> (<span class="type">int</span>)(Math.random() * <span class="number">100</span>) + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Java 8+更好的方式</span></span><br><span class="line"><span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line"><span class="type">int</span> <span class="variable">rand3</span> <span class="operator">=</span> random.nextInt(<span class="number">100</span>) + <span class="number">1</span>;  <span class="comment">// [1,100]</span></span><br></pre></td></tr></table></figure><h2 id="三、数值处理高级技巧"><a href="#三、数值处理高级技巧" class="headerlink" title="三、数值处理高级技巧"></a>三、数值处理高级技巧</h2><h3 id="1-精确计算问题"><a href="#1-精确计算问题" class="headerlink" title="1. 精确计算问题"></a>1. 精确计算问题</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 浮点数精度问题</span></span><br><span class="line">System.out.println(<span class="number">0.1</span> + <span class="number">0.2</span>);  <span class="comment">// 0.30000000000000004</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用BigDecimal解决</span></span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">bd1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;0.1&quot;</span>);</span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">bd2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;0.2&quot;</span>);</span><br><span class="line">System.out.println(bd1.add(bd2));  <span class="comment">// 0.3</span></span><br></pre></td></tr></table></figure><h3 id="2-数值溢出处理"><a href="#2-数值溢出处理" class="headerlink" title="2. 数值溢出处理"></a>2. 数值溢出处理</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 整数溢出</span></span><br><span class="line"><span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> Integer.MAX_VALUE;</span><br><span class="line"><span class="type">int</span> <span class="variable">overflow</span> <span class="operator">=</span> max + <span class="number">1</span>;  <span class="comment">// -2147483648 (溢出)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 安全运算方法</span></span><br><span class="line">Math.addExact(max, <span class="number">1</span>);   <span class="comment">// 抛出ArithmeticException</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用更大范围的类型</span></span><br><span class="line"><span class="type">long</span> <span class="variable">safeResult</span> <span class="operator">=</span> (<span class="type">long</span>)max + <span class="number">1</span>;</span><br></pre></td></tr></table></figure><h3 id="3-位运算操作"><a href="#3-位运算操作" class="headerlink" title="3. 位运算操作"></a>3. 位运算操作</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 基本位运算</span></span><br><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">0b1100</span>;  <span class="comment">// 12</span></span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">0b1010</span>;  <span class="comment">// 10</span></span><br><span class="line">a &amp; b;           <span class="comment">// 8 (0b1000)</span></span><br><span class="line">a | b;           <span class="comment">// 14 (0b1110)</span></span><br><span class="line">a ^ b;           <span class="comment">// 6 (0b0110)</span></span><br><span class="line">~a;              <span class="comment">// -13 (0b...11110011)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 位移运算</span></span><br><span class="line"><span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">0b1100</span>;</span><br><span class="line">c &lt;&lt; <span class="number">2</span>;          <span class="comment">// 48 (0b110000)</span></span><br><span class="line">c &gt;&gt; <span class="number">1</span>;          <span class="comment">// 6 (0b0110)</span></span><br><span class="line">c &gt;&gt;&gt; <span class="number">1</span>;         <span class="comment">// 6 (无符号右移)</span></span><br></pre></td></tr></table></figure><h2 id="四、Java-8-新增数值API"><a href="#四、Java-8-新增数值API" class="headerlink" title="四、Java 8+ 新增数值API"></a>四、Java 8+ 新增数值API</h2><h3 id="1-无符号数支持"><a href="#1-无符号数支持" class="headerlink" title="1. 无符号数支持"></a>1. 无符号数支持</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 无符号比较</span></span><br><span class="line">Integer.compareUnsigned(-<span class="number">1</span>, <span class="number">1</span>);  <span class="comment">// 1 (视为无符号数比较)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 无符号转换</span></span><br><span class="line">Long.toUnsignedString(-<span class="number">1</span>);       <span class="comment">// &quot;18446744073709551615&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 无符号除法</span></span><br><span class="line">Integer.divideUnsigned(-<span class="number">2</span>, <span class="number">2</span>);   <span class="comment">// 2147483647</span></span><br></pre></td></tr></table></figure><h3 id="2-数值溢出检查"><a href="#2-数值溢出检查" class="headerlink" title="2. 数值溢出检查"></a>2. 数值溢出检查</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 安全运算方法</span></span><br><span class="line">Math.addExact(<span class="number">100000</span>, <span class="number">200000</span>);    <span class="comment">// 正常</span></span><br><span class="line">Math.addExact(Integer.MAX_VALUE, <span class="number">1</span>); <span class="comment">// 抛出异常</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 乘法检查</span></span><br><span class="line">Math.multiplyExact(<span class="number">100000</span>, <span class="number">1000</span>); <span class="comment">// 正常</span></span><br><span class="line">Math.multiplyExact(Integer.MAX_VALUE, <span class="number">2</span>); <span class="comment">// 抛出异常</span></span><br></pre></td></tr></table></figure><h3 id="3-数学增强方法"><a href="#3-数学增强方法" class="headerlink" title="3. 数学增强方法"></a>3. 数学增强方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 精确数学运算</span></span><br><span class="line">Math.floorDiv(<span class="number">5</span>, <span class="number">2</span>);       <span class="comment">// 2</span></span><br><span class="line">Math.floorMod(<span class="number">5</span>, <span class="number">2</span>);       <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 双曲函数</span></span><br><span class="line">Math.sinh(<span class="number">1.0</span>);           <span class="comment">// 双曲正弦</span></span><br><span class="line">Math.cosh(<span class="number">1.0</span>);           <span class="comment">// 双曲余弦</span></span><br><span class="line">Math.tanh(<span class="number">1.0</span>);           <span class="comment">// 双曲正切</span></span><br></pre></td></tr></table></figure><h2 id="五、最佳实践与性能考虑"><a href="#五、最佳实践与性能考虑" class="headerlink" title="五、最佳实践与性能考虑"></a>五、最佳实践与性能考虑</h2><ol><li><p><strong>优先使用基本类型</strong>：包装类有额外开销</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不好</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">    sum += i;  <span class="comment">// 反复装箱拆箱</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 好</span></span><br><span class="line"><span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">    sum += i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>缓存机制利用</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Integer</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">127</span>;</span><br><span class="line"><span class="type">Integer</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">127</span>;</span><br><span class="line">System.out.println(a == b);  <span class="comment">// true (使用缓存)</span></span><br><span class="line"></span><br><span class="line"><span class="type">Integer</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">128</span>;</span><br><span class="line"><span class="type">Integer</span> <span class="variable">d</span> <span class="operator">=</span> <span class="number">128</span>;</span><br><span class="line">System.out.println(c == d);  <span class="comment">// false (超出缓存范围)</span></span><br></pre></td></tr></table></figure></li><li><p><strong>精确计算选择</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 金融计算使用BigDecimal</span></span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">price</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;19.99&quot;</span>);</span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">quantity</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;2.5&quot;</span>);</span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">total</span> <span class="operator">=</span> price.multiply(quantity).setScale(<span class="number">2</span>, RoundingMode.HALF_UP);</span><br></pre></td></tr></table></figure></li><li><p><strong>数学函数优化</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 重复计算先缓存</span></span><br><span class="line"><span class="type">double</span> <span class="variable">sinValue</span> <span class="operator">=</span> Math.sin(angle);</span><br><span class="line"><span class="type">double</span> <span class="variable">cosValue</span> <span class="operator">=</span> Math.cos(angle);</span><br></pre></td></tr></table></figure><p>记住在关键性能路径上避免不必要的对象创建，并注意数值精度和溢出问题。</p></li></ol><h1 id="Java-Character-类全面解析"><a href="#Java-Character-类全面解析" class="headerlink" title="Java Character 类全面解析"></a>Java Character 类全面解析</h1><p>Character 类是 Java 中用于操作单个字符的包装类，提供了丰富的字符操作方法。下面我将系统地讲解 Character 类的各种功能和使用场景。</p><h2 id="一、Character-类基础"><a href="#一、Character-类基础" class="headerlink" title="一、Character 类基础"></a>一、Character 类基础</h2><h3 id="1-创建-Character-对象"><a href="#1-创建-Character-对象" class="headerlink" title="1. 创建 Character 对象"></a>1. 创建 Character 对象</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 构造函数方式（Java 9后已废弃）</span></span><br><span class="line"><span class="type">Character</span> <span class="variable">ch1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Character</span>(<span class="string">&#x27;A&#x27;</span>);  <span class="comment">// 不推荐</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 自动装箱方式（推荐）</span></span><br><span class="line"><span class="type">Character</span> <span class="variable">ch2</span> <span class="operator">=</span> <span class="string">&#x27;B&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// valueOf 方法（推荐）</span></span><br><span class="line"><span class="type">Character</span> <span class="variable">ch3</span> <span class="operator">=</span> Character.valueOf(<span class="string">&#x27;C&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="2-基本方法"><a href="#2-基本方法" class="headerlink" title="2. 基本方法"></a>2. 基本方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取字符的Unicode值</span></span><br><span class="line"><span class="type">int</span> <span class="variable">code</span> <span class="operator">=</span> Character.getNumericValue(c);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断字符类型</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">isLetter</span> <span class="operator">=</span> Character.isLetter(c);      <span class="comment">// true</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">isDigit</span> <span class="operator">=</span> Character.isDigit(<span class="string">&#x27;7&#x27;</span>);      <span class="comment">// true</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">isSpace</span> <span class="operator">=</span> Character.isWhitespace(<span class="string">&#x27; &#x27;</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 大小写转换</span></span><br><span class="line"><span class="type">char</span> <span class="variable">upper</span> <span class="operator">=</span> Character.toUpperCase(<span class="string">&#x27;a&#x27;</span>);  <span class="comment">// &#x27;A&#x27;</span></span><br><span class="line"><span class="type">char</span> <span class="variable">lower</span> <span class="operator">=</span> Character.toLowerCase(<span class="string">&#x27;Z&#x27;</span>);  <span class="comment">// &#x27;z&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="二、字符类型检测方法"><a href="#二、字符类型检测方法" class="headerlink" title="二、字符类型检测方法"></a>二、字符类型检测方法</h2><h3 id="1-常用检测方法"><a href="#1-常用检测方法" class="headerlink" title="1. 常用检测方法"></a>1. 常用检测方法</h3><div class="table-container"><table><thead><tr><th>方法名</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td><code>isLetter(char ch)</code></td><td>判断是否是字母</td><td><code>isLetter(&#39;A&#39;) → true</code></td></tr><tr><td><code>isDigit(char ch)</code></td><td>判断是否是数字</td><td><code>isDigit(&#39;5&#39;) → true</code></td></tr><tr><td><code>isLetterOrDigit(char)</code></td><td>判断是否是字母或数字</td><td><code>isLetterOrDigit(&#39;_&#39;) → false</code></td></tr><tr><td><code>isWhitespace(char)</code></td><td>判断是否是空白字符</td><td><code>isWhitespace(&#39;\t&#39;) → true</code></td></tr><tr><td><code>isUpperCase(char)</code></td><td>判断是否是大写字母</td><td><code>isUpperCase(&#39;A&#39;) → true</code></td></tr><tr><td><code>isLowerCase(char)</code></td><td>判断是否是小写字母</td><td><code>isLowerCase(&#39;a&#39;) → true</code></td></tr></tbody></table></div><h3 id="2-Unicode-相关检测"><a href="#2-Unicode-相关检测" class="headerlink" title="2. Unicode 相关检测"></a>2. Unicode 相关检测</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断是否是Java标识符起始字符</span></span><br><span class="line">Character.isJavaIdentifierStart(<span class="string">&#x27;$&#x27;</span>);  <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断是否是Java标识符部分字符</span></span><br><span class="line">Character.isJavaIdentifierPart(<span class="string">&#x27;_&#x27;</span>);   <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断是否是Unicode空格字符</span></span><br><span class="line">Character.isSpaceChar(<span class="string">&#x27;\u00A0&#x27;</span>);       <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断是否是代理字符</span></span><br><span class="line">Character.isSurrogate(<span class="string">&#x27;\uD800&#x27;</span>);       <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h2 id="三、字符转换操作"><a href="#三、字符转换操作" class="headerlink" title="三、字符转换操作"></a>三、字符转换操作</h2><h3 id="1-大小写转换"><a href="#1-大小写转换" class="headerlink" title="1. 大小写转换"></a>1. 大小写转换</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 单个字符转换</span></span><br><span class="line"><span class="type">char</span> <span class="variable">upperA</span> <span class="operator">=</span> Character.toUpperCase(<span class="string">&#x27;a&#x27;</span>);  <span class="comment">// &#x27;A&#x27;</span></span><br><span class="line"><span class="type">char</span> <span class="variable">lowerZ</span> <span class="operator">=</span> Character.toLowerCase(<span class="string">&#x27;Z&#x27;</span>);  <span class="comment">// &#x27;z&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 整个字符串转换</span></span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">upperStr</span> <span class="operator">=</span> str.toUpperCase();  <span class="comment">// &quot;HELLO WORLD&quot;</span></span><br><span class="line"><span class="type">String</span> <span class="variable">lowerStr</span> <span class="operator">=</span> str.toLowerCase();  <span class="comment">// &quot;hello world&quot;</span></span><br></pre></td></tr></table></figure><h3 id="2-数字字符转换"><a href="#2-数字字符转换" class="headerlink" title="2. 数字字符转换"></a>2. 数字字符转换</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 字符数字转数值</span></span><br><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> Character.getNumericValue(<span class="string">&#x27;9&#x27;</span>);  <span class="comment">// 9</span></span><br><span class="line"><span class="type">int</span> <span class="variable">hex</span> <span class="operator">=</span> Character.getNumericValue(<span class="string">&#x27;A&#x27;</span>);  <span class="comment">// 10 (十六进制)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 数值转字符</span></span><br><span class="line"><span class="type">char</span> <span class="variable">digit</span> <span class="operator">=</span> Character.forDigit(<span class="number">15</span>, <span class="number">16</span>);   <span class="comment">// &#x27;f&#x27; (16进制)</span></span><br></pre></td></tr></table></figure><h3 id="3-字符与Unicode"><a href="#3-字符与Unicode" class="headerlink" title="3. 字符与Unicode"></a>3. 字符与Unicode</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取Unicode代码点</span></span><br><span class="line"><span class="type">int</span> <span class="variable">codePoint</span> <span class="operator">=</span> Character.codePointAt(<span class="string">&quot;ABC&quot;</span>, <span class="number">1</span>);  <span class="comment">// 66 (&#x27;B&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 代码点转字符</span></span><br><span class="line"><span class="type">char</span>[] chars = Character.toChars(<span class="number">0x1F600</span>);  <span class="comment">// 😀</span></span><br></pre></td></tr></table></figure><h2 id="四、特殊字符处理"><a href="#四、特殊字符处理" class="headerlink" title="四、特殊字符处理"></a>四、特殊字符处理</h2><h3 id="1-转义字符"><a href="#1-转义字符" class="headerlink" title="1. 转义字符"></a>1. 转义字符</h3><div class="table-container"><table><thead><tr><th>转义序列</th><th>Unicode</th><th>描述</th></tr></thead><tbody><tr><td><code>\t</code></td><td>\u0009</td><td>水平制表符</td></tr><tr><td><code>\b</code></td><td>\u0008</td><td>退格</td></tr><tr><td><code>\n</code></td><td>\u000a</td><td>换行</td></tr><tr><td><code>\r</code></td><td>\u000d</td><td>回车</td></tr><tr><td><code>\f</code></td><td>\u000c</td><td>换页</td></tr><tr><td><code>\&#39;</code></td><td>\u0027</td><td>单引号</td></tr><tr><td><code>\&quot;</code></td><td>\u0022</td><td>双引号</td></tr><tr><td><code>\\</code></td><td>\u005c</td><td>反斜杠</td></tr></tbody></table></div><h3 id="2-Unicode-处理"><a href="#2-Unicode-处理" class="headerlink" title="2. Unicode 处理"></a>2. Unicode 处理</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 直接使用Unicode</span></span><br><span class="line"><span class="type">char</span> <span class="variable">omega</span> <span class="operator">=</span> <span class="string">&#x27;\u03A9&#x27;</span>;  <span class="comment">// Ω</span></span><br><span class="line">System.out.println(omega);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理代理对（Surrogate Pair）</span></span><br><span class="line"><span class="type">String</span> <span class="variable">emoji</span> <span class="operator">=</span> <span class="string">&quot;\uD83D\uDE00&quot;</span>;  <span class="comment">// 😀</span></span><br><span class="line"><span class="type">int</span> <span class="variable">codePoint</span> <span class="operator">=</span> emoji.codePointAt(<span class="number">0</span>);  <span class="comment">// 128512</span></span><br></pre></td></tr></table></figure><h2 id="五、Character-常量"><a href="#五、Character-常量" class="headerlink" title="五、Character 常量"></a>五、Character 常量</h2><p>Character 类提供了许多有用的常量：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 基本类型大小</span></span><br><span class="line">Character.SIZE;      <span class="comment">// 16 (bits)</span></span><br><span class="line">Character.BYTES;     <span class="comment">// 2 (bytes)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 特殊字符值</span></span><br><span class="line">Character.MIN_VALUE; <span class="comment">// &#x27;\u0000&#x27;</span></span><br><span class="line">Character.MAX_VALUE; <span class="comment">// &#x27;\uffff&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Unicode常量</span></span><br><span class="line">Character.MIN_CODE_POINT;  <span class="comment">// 0x000000</span></span><br><span class="line">Character.MAX_CODE_POINT;  <span class="comment">// 0x10FFFF</span></span><br><span class="line">Character.MIN_SURROGATE;   <span class="comment">// &#x27;\uD800&#x27;</span></span><br><span class="line">Character.MAX_SURROGATE;   <span class="comment">// &#x27;\uDFFF&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="六、实际应用示例"><a href="#六、实际应用示例" class="headerlink" title="六、实际应用示例"></a>六、实际应用示例</h2><h3 id="1-统计字符串中的字母和数字"><a href="#1-统计字符串中的字母和数字" class="headerlink" title="1. 统计字符串中的字母和数字"></a>1. 统计字符串中的字母和数字</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CharCounter</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">countChars</span><span class="params">(String str)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">letters</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">digits</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">others</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> c : str.toCharArray()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (Character.isLetter(c)) &#123;</span><br><span class="line">                letters++;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Character.isDigit(c)) &#123;</span><br><span class="line">                digits++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                others++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;字母: &quot;</span> + letters);</span><br><span class="line">        System.out.println(<span class="string">&quot;数字: &quot;</span> + digits);</span><br><span class="line">        System.out.println(<span class="string">&quot;其他: &quot;</span> + others);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        countChars(<span class="string">&quot;Hello123!你好&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-密码强度验证"><a href="#2-密码强度验证" class="headerlink" title="2. 密码强度验证"></a>2. 密码强度验证</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PasswordValidator</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isStrongPassword</span><span class="params">(String password)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (password == <span class="literal">null</span> || password.length() &lt; <span class="number">8</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="type">boolean</span> <span class="variable">hasUpper</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">hasLower</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">hasDigit</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">hasSpecial</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> c : password.toCharArray()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (Character.isUpperCase(c)) hasUpper = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (Character.isLowerCase(c)) hasLower = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (Character.isDigit(c)) hasDigit = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (!Character.isLetterOrDigit(c)) hasSpecial = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> hasUpper &amp;&amp; hasLower &amp;&amp; hasDigit &amp;&amp; hasSpecial;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(isStrongPassword(<span class="string">&quot;Pass123!&quot;</span>));  <span class="comment">// true</span></span><br><span class="line">        System.out.println(isStrongPassword(<span class="string">&quot;weak&quot;</span>));      <span class="comment">// false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-驼峰命名转换"><a href="#3-驼峰命名转换" class="headerlink" title="3. 驼峰命名转换"></a>3. 驼峰命名转换</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CamelCaseConverter</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">toCamelCase</span><span class="params">(String input)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (input == <span class="literal">null</span> || input.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> input;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">nextUpper</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; input.length(); i++) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">current</span> <span class="operator">=</span> input.charAt(i);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (current == <span class="string">&#x27;_&#x27;</span>) &#123;</span><br><span class="line">                nextUpper = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (nextUpper) &#123;</span><br><span class="line">                    result.append(Character.toUpperCase(current));</span><br><span class="line">                    nextUpper = <span class="literal">false</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    result.append(Character.toLowerCase(current));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> result.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(toCamelCase(<span class="string">&quot;hello_world&quot;</span>));  <span class="comment">// helloWorld</span></span><br><span class="line">        System.out.println(toCamelCase(<span class="string">&quot;MY_VAR_NAME&quot;</span>));  <span class="comment">// myVarName</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="七、性能考虑与最佳实践"><a href="#七、性能考虑与最佳实践" class="headerlink" title="七、性能考虑与最佳实践"></a>七、性能考虑与最佳实践</h2><ol><li><p><strong>避免不必要的装箱</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不好</span></span><br><span class="line"><span class="type">Character</span> <span class="variable">ch</span> <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span> (ch.equals(<span class="string">&#x27;b&#x27;</span>)) &#123;...&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 好</span></span><br><span class="line"><span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span> (c == <span class="string">&#x27;b&#x27;</span>) &#123;...&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>使用String处理字符串</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不要这样处理字符串</span></span><br><span class="line">Character[] chars = ...;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 应该使用String或char[]</span></span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> ...;</span><br><span class="line"><span class="type">char</span>[] chars = ...;</span><br></pre></td></tr></table></figure></li><li><p><strong>处理代理对</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">emoji</span> <span class="operator">=</span> <span class="string">&quot;😀&quot;</span>;</span><br><span class="line"><span class="comment">// 错误方式（会拆分成两个char）</span></span><br><span class="line"><span class="type">char</span> <span class="variable">first</span> <span class="operator">=</span> emoji.charAt(<span class="number">0</span>);  <span class="comment">// &#x27;\uD83D&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确方式（处理代码点）</span></span><br><span class="line"><span class="type">int</span> <span class="variable">codePoint</span> <span class="operator">=</span> emoji.codePointAt(<span class="number">0</span>);  <span class="comment">// 128512</span></span><br></pre></td></tr></table></figure></li><li><p><strong>使用Character常量</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不要使用魔法值</span></span><br><span class="line"><span class="keyword">if</span> (c == <span class="number">9</span>) &#123;...&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用预定义常量</span></span><br><span class="line"><span class="keyword">if</span> (c == <span class="string">&#x27;\t&#x27;</span>) &#123;...&#125;</span><br><span class="line"><span class="comment">// 或</span></span><br><span class="line"><span class="keyword">if</span> (c == Character.TAB) &#123;...&#125;</span><br></pre></td></tr></table></figure></li></ol><p>通过合理使用 Character 类，可以高效地处理各种字符操作需求，特别是在文本处理、输入验证和国际化应用中。记住在性能敏感的场景中优先使用基本类型 char，并注意 Unicode 特殊字符的处理。</p><h1 id="Java-String-类全面解析"><a href="#Java-String-类全面解析" class="headerlink" title="Java String 类全面解析"></a>Java String 类全面解析</h1><p>String 类是 Java 中最常用的类之一，用于表示和操作文本数据。下面我将系统地讲解 String 类的各种功能和使用场景。<br>Java.lang.String 类代表字符串，java程序中所有的字符串都作为此类的实例，<strong>字符串是常量，他们的值在创建之后是不能更改的。</strong></p><p>从源码可以看到，String是被ﬁnal修饰的，并且底层使用char数组实现。</p><h2 id="一、String-类基础"><a href="#一、String-类基础" class="headerlink" title="一、String 类基础"></a>一、String 类基础</h2><h3 id="1-创建-String-对象"><a href="#1-创建-String-对象" class="headerlink" title="1. 创建 String 对象"></a>1. 创建 String 对象</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 字面量方式（推荐）</span></span><br><span class="line"><span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构造函数方式</span></span><br><span class="line"><span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;World&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从字符数组创建</span></span><br><span class="line"><span class="type">char</span>[] charArray = &#123;<span class="string">&#x27;J&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;v&#x27;</span>, <span class="string">&#x27;a&#x27;</span>&#125;;</span><br><span class="line"><span class="type">String</span> <span class="variable">str3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(charArray);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从字节数组创建</span></span><br><span class="line"><span class="type">byte</span>[] byteArray = &#123;<span class="number">65</span>, <span class="number">66</span>, <span class="number">67</span>&#125;;</span><br><span class="line"><span class="type">String</span> <span class="variable">str4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(byteArray);  <span class="comment">// &quot;ABC&quot;</span></span><br></pre></td></tr></table></figure><h3 id="2-字符串池与内存管理"><a href="#2-字符串池与内存管理" class="headerlink" title="2. 字符串池与内存管理"></a>2. 字符串池与内存管理</h3><p>字符串池：<br>字符串常量是JVM（java虚拟机）中的一个特殊存储区域，用于存储字符串常量。当使用字面量方式创建String对象时，JVM会首先检查字符串常量池是否已经存在相同内容的字符串对象，如果存在，则直接返回常量池中该字符串对象的引用，如果不存在，则在常量池中创建一个新的字符串对象，并返回其<br>引用。</p><p>堆内存：</p><ul><li>用于存储对象实例，包括字符串对象</li><li>当使用<code>new</code>关键字创建字符串对象时，会在堆上分配内存</li></ul><p>栈内存：</p><ul><li>用于存储基本数据类型和引用变量</li><li>栈内存的分配和释放速度快，仅次于寄存器</li><li>栈内存的大小通常是固定的，无法动态扩展</li><li>栈内存的存储内容包括局部变量、方法参数、方法调用信息等</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;Java&quot;</span>;      <span class="comment">// 存储在字符串常量池</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">&quot;Java&quot;</span>;      <span class="comment">// 复用常量池中的&quot;Java&quot;</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;Java&quot;</span>);  <span class="comment">// 在堆上创建新对象</span></span><br><span class="line"></span><br><span class="line">System.out.println(s1 == s2);  <span class="comment">// true (相同引用)</span></span><br><span class="line">System.out.println(s1 == s3);  <span class="comment">// false (不同对象)</span></span><br><span class="line">System.out.println(s1.equals(s3));  <span class="comment">// true (内容相同)</span></span><br></pre></td></tr></table></figure><p>字符串常见的几种创建方式<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 1.通过字面量直接赋值方式创建对象是存放在方法区的常量池</span></span><br><span class="line">        String str=<span class="string">&quot;helloWorld&quot;</span>;</span><br><span class="line">        <span class="comment">// 2.通过构造方法创建字符串，字符串对象是在堆内中</span></span><br><span class="line">        String str1=<span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;helloWorld&quot;</span>);</span><br><span class="line">        <span class="comment">// 3.方式三</span></span><br><span class="line">        <span class="type">char</span> []c=&#123;<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>&#125;;</span><br><span class="line">        String str2=<span class="keyword">new</span> <span class="title class_">String</span>(c);</span><br><span class="line">        String str3=<span class="keyword">new</span> <span class="title class_">String</span>(c,<span class="number">0</span>,c.length);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><strong>注意</strong><br>java中的”==”操作符的作用：</p><ul><li>基本数据类型：比较的是内容</li><li>引用数据类型：比较的是对象的内存对象。</li></ul><h2 id="二、字符串基本操作"><a href="#二、字符串基本操作" class="headerlink" title="二、字符串基本操作"></a>二、字符串基本操作</h2><h3 id="1-获取字符串信息"><a href="#1-获取字符串信息" class="headerlink" title="1. 获取字符串信息"></a>1. 获取字符串信息</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取长度</span></span><br><span class="line"><span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> str.length();  <span class="comment">// 11</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取指定位置字符</span></span><br><span class="line"><span class="type">char</span> <span class="variable">ch</span> <span class="operator">=</span> str.charAt(<span class="number">1</span>);  <span class="comment">// &#x27;e&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取子字符串位置</span></span><br><span class="line"><span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> str.indexOf(<span class="string">&quot;World&quot;</span>);  <span class="comment">// 6</span></span><br><span class="line"><span class="type">int</span> <span class="variable">lastIndex</span> <span class="operator">=</span> str.lastIndexOf(<span class="string">&#x27;o&#x27;</span>);  <span class="comment">// 7</span></span><br></pre></td></tr></table></figure><p>字符串获取方法补充<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        String s=<span class="string">&quot;hello World&quot;</span>;</span><br><span class="line">        <span class="comment">// 获取字符串的长度，其实就是字符串的字符个数</span></span><br><span class="line">        System.out.println(s.length());</span><br><span class="line">        <span class="comment">// charAt()获取指定索引处的字符</span></span><br><span class="line">        System.out.println(s.charAt(<span class="number">2</span>));</span><br><span class="line">        <span class="comment">// trim()去掉字符串(左右)前后(不包括里面的)的空格</span></span><br><span class="line">        System.out.println(s.trim().length());</span><br><span class="line">        <span class="comment">// replace(&quot;字符串&quot;,&quot;新字符&quot;) 替换</span></span><br><span class="line">        System.out.println(s.replace(<span class="string">&quot; &quot;</span>,<span class="string">&quot;-&quot;</span>));</span><br><span class="line">        <span class="comment">// substring(开始索引) 索引从0开始获取子串， 直到末尾</span></span><br><span class="line">        System.out.println(s.substring(<span class="number">3</span>));</span><br><span class="line">        <span class="comment">// substring(开始索引,结束索引) 包括开始，不包括结束</span></span><br><span class="line">        System.out.println(s.substring(<span class="number">3</span>,<span class="number">7</span>));</span><br><span class="line">        <span class="comment">// concat() 字符串拼接</span></span><br><span class="line">        System.out.println(s.concat(<span class="string">&quot;2025!!&quot;</span>));</span><br><span class="line">        <span class="comment">// 判断字符串里面是否包含特定的字符</span></span><br><span class="line">        <span class="keyword">if</span>(s.contains(<span class="string">&quot;e&quot;</span>))&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;包含e&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">        <span class="comment">// String.valueOf() 将各种类型转换成字符串</span></span><br><span class="line">        System.out.println(String.valueOf(<span class="number">123</span>));</span><br><span class="line">        System.out.println(String.valueOf(<span class="literal">true</span>));</span><br><span class="line">        <span class="comment">// 此方法同等String.valueOf(123)</span></span><br><span class="line">        <span class="comment">// 字符串+基本数据类型 变成字符串</span></span><br><span class="line">        System.out.println(<span class="string">&quot;&quot;</span>+<span class="number">123</span>);</span><br><span class="line">        System.out.println(<span class="number">345</span>+<span class="string">&quot;&quot;</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><br><strong>面试题：</strong><br>equals和==的区别?</p><ul><li>== 是运算符，如果是基本数据类型，比较的存储的值，如果是引用数据类型，则比较所指对象的地址值。</li><li>String类重写Object类的equals()方法，用于比较两个字符串的内容是否相等。</li></ul><h3 id="2-字符串比较"><a href="#2-字符串比较" class="headerlink" title="2. 字符串比较"></a>2. 字符串比较</h3><div class="table-container"><table><thead><tr><th>方法名</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td><code>equals(Object obj)</code></td><td>比较内容是否相同</td><td><code>&quot;abc&quot;.equals(&quot;abc&quot;) → true</code></td></tr><tr><td><code>equalsIgnoreCase(String)</code></td><td>忽略大小写比较内容</td><td><code>&quot;ABC&quot;.equalsIgnoreCase(&quot;abc&quot;) → true</code></td></tr><tr><td><code>compareTo(String)</code></td><td>按字典顺序比较</td><td><code>&quot;a&quot;.compareTo(&quot;b&quot;) → -1</code></td></tr><tr><td><code>compareToIgnoreCase(String)</code></td><td>忽略大小写的字典顺序比较</td><td><code>&quot;A&quot;.compareToIgnoreCase(&quot;a&quot;) → 0</code></td></tr><tr><td><code>startsWith(String)</code></td><td>检查是否以指定字符串开头</td><td><code>&quot;Hello&quot;.startsWith(&quot;He&quot;) → true</code></td></tr><tr><td><code>endsWith(String)</code></td><td>检查是否以指定字符串结尾</td><td><code>&quot;Hello&quot;.endsWith(&quot;lo&quot;) → true</code></td></tr></tbody></table></div><h2 id="三、字符串操作与转换"><a href="#三、字符串操作与转换" class="headerlink" title="三、字符串操作与转换"></a>三、字符串操作与转换</h2><h3 id="1-字符串连接"><a href="#1-字符串连接" class="headerlink" title="1. 字符串连接"></a>1. 字符串连接</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 + 运算符</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;Hello&quot;</span> + <span class="string">&quot; &quot;</span> + <span class="string">&quot;World&quot;</span>;  <span class="comment">// &quot;Hello World&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 concat 方法</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">&quot;Hello&quot;</span>.concat(<span class="string">&quot; World&quot;</span>);  <span class="comment">// &quot;Hello World&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 StringBuilder (高性能)</span></span><br><span class="line"><span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">sb.append(<span class="string">&quot;Hello&quot;</span>).append(<span class="string">&quot; &quot;</span>).append(<span class="string">&quot;World&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">s3</span> <span class="operator">=</span> sb.toString();  <span class="comment">// &quot;Hello World&quot;</span></span><br></pre></td></tr></table></figure><h3 id="2-字符串修改"><a href="#2-字符串修改" class="headerlink" title="2. 字符串修改"></a>2. 字符串修改</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">original</span> <span class="operator">=</span> <span class="string">&quot;Java Programming&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 替换字符</span></span><br><span class="line"><span class="type">String</span> <span class="variable">replaced</span> <span class="operator">=</span> original.replace(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;o&#x27;</span>);  <span class="comment">// &quot;Jovo Progromming&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 替换子串</span></span><br><span class="line"><span class="type">String</span> <span class="variable">replacedAll</span> <span class="operator">=</span> original.replaceAll(<span class="string">&quot;Java&quot;</span>, <span class="string">&quot;Python&quot;</span>);  <span class="comment">// &quot;Python Programming&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取子串</span></span><br><span class="line"><span class="type">String</span> <span class="variable">substring1</span> <span class="operator">=</span> original.substring(<span class="number">5</span>);  <span class="comment">// &quot;Programming&quot;</span></span><br><span class="line"><span class="type">String</span> <span class="variable">substring2</span> <span class="operator">=</span> original.substring(<span class="number">5</span>, <span class="number">12</span>);  <span class="comment">// &quot;Program&quot;</span></span><br></pre></td></tr></table></figure><h3 id="3-大小写转换"><a href="#3-大小写转换" class="headerlink" title="3. 大小写转换"></a>3. 大小写转换</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 转大写</span></span><br><span class="line"><span class="type">String</span> <span class="variable">upper</span> <span class="operator">=</span> str.toUpperCase();  <span class="comment">// &quot;HELLO WORLD&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 转小写</span></span><br><span class="line"><span class="type">String</span> <span class="variable">lower</span> <span class="operator">=</span> str.toLowerCase();  <span class="comment">// &quot;hello world&quot;</span></span><br></pre></td></tr></table></figure><h2 id="四、字符串格式化"><a href="#四、字符串格式化" class="headerlink" title="四、字符串格式化"></a>四、字符串格式化</h2><h3 id="1-静态-format-方法"><a href="#1-静态-format-方法" class="headerlink" title="1. 静态 format 方法"></a>1. 静态 format 方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;Alice&quot;</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">25</span>;</span><br><span class="line"><span class="type">double</span> <span class="variable">score</span> <span class="operator">=</span> <span class="number">95.5</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 格式化字符串</span></span><br><span class="line"><span class="type">String</span> <span class="variable">info</span> <span class="operator">=</span> String.format(<span class="string">&quot;Name: %s, Age: %d, Score: %.2f&quot;</span>, name, age, score);</span><br><span class="line"><span class="comment">// &quot;Name: Alice, Age: 25, Score: 95.50&quot;</span></span><br></pre></td></tr></table></figure><h3 id="2-常用格式说明符"><a href="#2-常用格式说明符" class="headerlink" title="2. 常用格式说明符"></a>2. 常用格式说明符</h3><div class="table-container"><table><thead><tr><th>说明符</th><th>适用类型</th><th>示例输出</th></tr></thead><tbody><tr><td><code>%s</code></td><td>字符串</td><td>“Hello”</td></tr><tr><td><code>%d</code></td><td>十进制整数</td><td>123</td></tr><tr><td><code>%f</code></td><td>浮点数</td><td>3.141593</td></tr><tr><td><code>%.2f</code></td><td>保留两位小数</td><td>3.14</td></tr><tr><td><code>%c</code></td><td>字符</td><td>‘A’</td></tr><tr><td><code>%b</code></td><td>布尔值</td><td>true</td></tr><tr><td><code>%n</code></td><td>平台相关的行分隔符</td><td>(换行)</td></tr></tbody></table></div><h2 id="五、字符串分割与正则表达式"><a href="#五、字符串分割与正则表达式" class="headerlink" title="五、字符串分割与正则表达式"></a>五、字符串分割与正则表达式</h2><h3 id="1-字符串分割"><a href="#1-字符串分割" class="headerlink" title="1. 字符串分割"></a>1. 字符串分割</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;apple,orange,banana,grape&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 简单分割</span></span><br><span class="line">String[] fruits = str.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line"><span class="comment">// [&quot;apple&quot;, &quot;orange&quot;, &quot;banana&quot;, &quot;grape&quot;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 限制分割次数</span></span><br><span class="line">String[] limited = str.split(<span class="string">&quot;,&quot;</span>, <span class="number">2</span>);</span><br><span class="line"><span class="comment">// [&quot;apple&quot;, &quot;orange,banana,grape&quot;]</span></span><br></pre></td></tr></table></figure><h3 id="2-正则表达式匹配"><a href="#2-正则表达式匹配" class="headerlink" title="2. 正则表达式匹配"></a>2. 正则表达式匹配</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">email</span> <span class="operator">=</span> <span class="string">&quot;test@example.com&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查格式</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">isValid</span> <span class="operator">=</span> email.matches(<span class="string">&quot;^[\\w-]+@[\\w-]+\\.[a-z]&#123;2,3&#125;$&quot;</span>);  <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 替换所有数字</span></span><br><span class="line"><span class="type">String</span> <span class="variable">replaced</span> <span class="operator">=</span> <span class="string">&quot;a1b2c3&quot;</span>.replaceAll(<span class="string">&quot;\\d&quot;</span>, <span class="string">&quot;-&quot;</span>);  <span class="comment">// &quot;a-b-c-&quot;</span></span><br></pre></td></tr></table></figure><h2 id="六、字符串与字符-字节数组转换"><a href="#六、字符串与字符-字节数组转换" class="headerlink" title="六、字符串与字符/字节数组转换"></a>六、字符串与字符/字节数组转换</h2><h3 id="1-字符数组转换"><a href="#1-字符数组转换" class="headerlink" title="1. 字符数组转换"></a>1. 字符数组转换</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// String → char[]</span></span><br><span class="line"><span class="type">char</span>[] charArray = str.toCharArray();</span><br><span class="line"></span><br><span class="line"><span class="comment">// char[] → String</span></span><br><span class="line"><span class="type">String</span> <span class="variable">newStr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(charArray);</span><br></pre></td></tr></table></figure><h3 id="2-字节数组转换"><a href="#2-字节数组转换" class="headerlink" title="2. 字节数组转换"></a>2. 字节数组转换</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// String → byte[] (使用默认编码)</span></span><br><span class="line"><span class="type">byte</span>[] byteArray = str.getBytes();</span><br><span class="line"></span><br><span class="line"><span class="comment">// byte[] → String</span></span><br><span class="line"><span class="type">String</span> <span class="variable">newStr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(byteArray);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 指定编码</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="type">byte</span>[] utf8Bytes = str.getBytes(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">fromUtf8</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(utf8Bytes, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="七、实际应用示例"><a href="#七、实际应用示例" class="headerlink" title="七、实际应用示例"></a>七、实际应用示例</h2><h3 id="1-字符串反转"><a href="#1-字符串反转" class="headerlink" title="1. 字符串反转"></a>1. 字符串反转</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringReverse</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">reverse</span><span class="params">(String input)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (input == <span class="literal">null</span> || input.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> input;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="type">char</span>[] chars = input.toCharArray();</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> chars.length - <span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">temp</span> <span class="operator">=</span> chars[left];</span><br><span class="line">            chars[left] = chars[right];</span><br><span class="line">            chars[right] = temp;</span><br><span class="line">            left++;</span><br><span class="line">            right--;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>(chars);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(reverse(<span class="string">&quot;Hello&quot;</span>));  <span class="comment">// &quot;olleH&quot;</span></span><br><span class="line">        System.out.println(reverse(<span class="string">&quot;Java&quot;</span>));   <span class="comment">// &quot;avaJ&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-检查回文字符串"><a href="#2-检查回文字符串" class="headerlink" title="2. 检查回文字符串"></a>2. 检查回文字符串</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PalindromeChecker</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isPalindrome</span><span class="params">(String str)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (str == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        str = str.toLowerCase().replaceAll(<span class="string">&quot;[^a-z0-9]&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> str.length() - <span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">            <span class="keyword">if</span> (str.charAt(left) != str.charAt(right)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            left++;</span><br><span class="line">            right--;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(isPalindrome(<span class="string">&quot;A man, a plan, a canal: Panama&quot;</span>));  <span class="comment">// true</span></span><br><span class="line">        System.out.println(isPalindrome(<span class="string">&quot;racecar&quot;</span>));  <span class="comment">// true</span></span><br><span class="line">        System.out.println(isPalindrome(<span class="string">&quot;hello&quot;</span>));    <span class="comment">// false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-统计单词出现次数"><a href="#3-统计单词出现次数" class="headerlink" title="3. 统计单词出现次数"></a>3. 统计单词出现次数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WordCounter</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String, Integer&gt; <span class="title function_">countWords</span><span class="params">(String text)</span> &#123;</span><br><span class="line">        Map&lt;String, Integer&gt; wordCount = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (text == <span class="literal">null</span> || text.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> wordCount;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        String[] words = text.split(<span class="string">&quot;\\s+&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (String word : words) &#123;</span><br><span class="line">            word = word.toLowerCase().replaceAll(<span class="string">&quot;[^a-z]&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (!word.isEmpty()) &#123;</span><br><span class="line">                wordCount.put(word, wordCount.getOrDefault(word, <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> wordCount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">text</span> <span class="operator">=</span> <span class="string">&quot;Hello world hello Java world Java&quot;</span>;</span><br><span class="line">        Map&lt;String, Integer&gt; counts = countWords(text);</span><br><span class="line">        System.out.println(counts);  <span class="comment">// &#123;hello=2, world=2, java=2&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="八、性能考虑与最佳实践"><a href="#八、性能考虑与最佳实践" class="headerlink" title="八、性能考虑与最佳实践"></a>八、性能考虑与最佳实践</h2><ol><li><p><strong>字符串拼接性能</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不好 - 创建多个临时对象</span></span><br><span class="line"><span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">    result += i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 好 - 使用StringBuilder</span></span><br><span class="line"><span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">    sb.append(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> sb.toString();</span><br></pre></td></tr></table></figure></li><li><p><strong>字符串比较</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不好 - 可能NullPointerException</span></span><br><span class="line"><span class="keyword">if</span> (str.equals(<span class="string">&quot;literal&quot;</span>)) &#123;...&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 好 - 避免NPE</span></span><br><span class="line"><span class="keyword">if</span> (<span class="string">&quot;literal&quot;</span>.equals(str)) &#123;...&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更好 - Java 7+</span></span><br><span class="line"><span class="keyword">if</span> (Objects.equals(str, <span class="string">&quot;literal&quot;</span>)) &#123;...&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>字符串常量池利用</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不好 - 创建不必要的对象</span></span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;literal&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 好 - 利用字符串常量池</span></span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;literal&quot;</span>;</span><br></pre></td></tr></table></figure></li><li><p><strong>处理大文本</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对于大文件处理，避免一次性加载到内存</span></span><br><span class="line"><span class="keyword">try</span> (<span class="type">BufferedReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;large.txt&quot;</span>))) &#123;</span><br><span class="line">    String line;</span><br><span class="line">    <span class="keyword">while</span> ((line = reader.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 处理每行</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>国际化考虑</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 指定Locale进行大小写转换</span></span><br><span class="line"><span class="type">String</span> <span class="variable">lower</span> <span class="operator">=</span> str.toLowerCase(Locale.ENGLISH);</span><br><span class="line"><span class="type">String</span> <span class="variable">upper</span> <span class="operator">=</span> str.toUpperCase(Locale.FRENCH);</span><br></pre></td></tr></table></figure></li></ol><p>通过合理使用 String 类及其相关工具类，可以高效地处理各种文本操作需求。记住字符串是不可变对象，在需要频繁修改字符串的场景中应考虑使用 StringBuilder 或 StringBuffer。</p><h1 id="Java-StringBuffer-和-StringBuilder-类全面解析"><a href="#Java-StringBuffer-和-StringBuilder-类全面解析" class="headerlink" title="Java StringBuffer 和 StringBuilder 类全面解析"></a>Java StringBuffer 和 StringBuilder 类全面解析</h1><p>由于String是字符串是常量，他们的值在创建之后不能更改，如果我们使用这个String频繁进行操作，会有性能问题，这个时候需要使用StringBuﬀer和StringBuilder类，StringBuﬀer也被叫做“字符串缓冲区”，以后如果遇到什么缓冲，缓存，第一反应是为了提供性能。<br>在使用StringBuﬀer类时，每次都会对StringBuﬀer对象本身进行操作，而不是生成新的对象，所以如果需要对字符串进行修改推荐使用StringBuﬀer，StringBuilder类在java5被提出的，StringBuilder和<br>StringBuﬀer之间的最大不同是在于StringBuilder的方法不是线程安全</p><blockquote><p>操作完String以后返回的是另外一个新的对象</p></blockquote><h2 id="一、StringBuffer-和-StringBuilder-基础"><a href="#一、StringBuffer-和-StringBuilder-基础" class="headerlink" title="一、StringBuffer 和 StringBuilder 基础"></a>一、StringBuffer 和 StringBuilder 基础</h2><h3 id="1-创建对象"><a href="#1-创建对象" class="headerlink" title="1. 创建对象"></a>1. 创建对象</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// StringBuilder 创建</span></span><br><span class="line"><span class="type">StringBuilder</span> <span class="variable">sb1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();       <span class="comment">// 默认容量16</span></span><br><span class="line"><span class="type">StringBuilder</span> <span class="variable">sb2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="number">100</span>);    <span class="comment">// 指定初始容量</span></span><br><span class="line"><span class="type">StringBuilder</span> <span class="variable">sb3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="string">&quot;Hello&quot;</span>); <span class="comment">// 初始内容</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// StringBuffer 创建</span></span><br><span class="line"><span class="type">StringBuffer</span> <span class="variable">sbf1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();        <span class="comment">// 默认容量16</span></span><br><span class="line"><span class="type">StringBuffer</span> <span class="variable">sbf2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(<span class="number">100</span>);     <span class="comment">// 指定初始容量</span></span><br><span class="line"><span class="type">StringBuffer</span> <span class="variable">sbf3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(<span class="string">&quot;World&quot;</span>); <span class="comment">// 初始内容</span></span><br></pre></td></tr></table></figure><h3 id="2-主要区别"><a href="#2-主要区别" class="headerlink" title="2. 主要区别"></a>2. 主要区别</h3><div class="table-container"><table><thead><tr><th>特性</th><th>StringBuilder</th><th>StringBuffer</th></tr></thead><tbody><tr><td>线程安全</td><td>非线程安全</td><td>线程安全</td></tr><tr><td>性能</td><td>更高</td><td>稍低</td></tr><tr><td>引入版本</td><td>Java 5</td><td>Java 1.0</td></tr><tr><td>适用场景</td><td>单线程环境</td><td>多线程环境</td></tr></tbody></table></div><p><strong>面试题：String/Stringbuﬀer/StringBuilder的区别？</strong><br>1.String字符串的值不可改变，导致每次对String操作都会生成新的String对象，这样不仅效率底下，而且大量浪费有限的内存空间。如果频繁对字符型修改推荐使用StringBuﬀer和StringBuilder<br>2.StringBuﬀer是线程安全的，而StringBuilder是线程不安全的，在不考虑线程安全的情况下<br>3.StringBuilder的运行效率比StringBuﬀer更高。</p><h2 id="二、常用方法详解"><a href="#二、常用方法详解" class="headerlink" title="二、常用方法详解"></a>二、常用方法详解</h2><h3 id="1-追加内容-append"><a href="#1-追加内容-append" class="headerlink" title="1. 追加内容 (append)"></a>1. 追加内容 (append)</h3><p>StringBuﬀer类的append()方法源码</p><blockquote><p>注意代码不需要考虑线程安全问题的情况下，首先考虑使用StringBuilder。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> StringBuffer <span class="title function_">append</span><span class="params">(String str)</span> &#123;</span><br><span class="line">        toStringCache = <span class="literal">null</span>;</span><br><span class="line">        <span class="built_in">super</span>.append(str);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 追加各种类型数据</span></span><br><span class="line">sb.append(<span class="string">&quot; &quot;</span>);             <span class="comment">// 字符串</span></span><br><span class="line">sb.append(<span class="string">&quot;World&quot;</span>);         <span class="comment">// 字符串</span></span><br><span class="line">sb.append(<span class="number">123</span>);             <span class="comment">// 整数</span></span><br><span class="line">sb.append(<span class="number">3.14</span>);            <span class="comment">// 浮点数</span></span><br><span class="line">sb.append(<span class="string">&#x27;!&#x27;</span>);             <span class="comment">// 字符</span></span><br><span class="line">sb.append(<span class="literal">true</span>);            <span class="comment">// 布尔值</span></span><br><span class="line"></span><br><span class="line">System.out.println(sb);     <span class="comment">// &quot;Hello World1233.14!true&quot;</span></span><br></pre></td></tr></table></figure><h3 id="2-插入内容-insert"><a href="#2-插入内容-insert" class="headerlink" title="2. 插入内容 (insert)"></a>2. 插入内容 (insert)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="string">&quot;HelloWorld&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在指定位置插入各种类型数据</span></span><br><span class="line">sb.insert(<span class="number">5</span>, <span class="string">&quot; &quot;</span>);          <span class="comment">// 在索引5处插入空格</span></span><br><span class="line">sb.insert(<span class="number">6</span>, <span class="string">&quot;Java&quot;</span>);       <span class="comment">// 在索引6处插入&quot;Java&quot;</span></span><br><span class="line">sb.insert(<span class="number">10</span>, <span class="number">2023</span>);        <span class="comment">// 在索引10处插入数字</span></span><br><span class="line"></span><br><span class="line">System.out.println(sb);     <span class="comment">// &quot;Hello JavaWorld2023&quot;</span></span><br></pre></td></tr></table></figure><h3 id="3-删除内容-delete"><a href="#3-删除内容-delete" class="headerlink" title="3. 删除内容 (delete)"></a>3. 删除内容 (delete)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="string">&quot;HelloJavaWorld&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除指定范围的字符</span></span><br><span class="line">sb.delete(<span class="number">5</span>, <span class="number">9</span>);            <span class="comment">// 删除索引5-8的字符(&quot;Java&quot;)</span></span><br><span class="line">System.out.println(sb);     <span class="comment">// &quot;HelloWorld&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除指定位置的字符</span></span><br><span class="line">sb.deleteCharAt(<span class="number">5</span>);         <span class="comment">// 删除索引5的字符(&#x27;W&#x27;)</span></span><br><span class="line">System.out.println(sb);     <span class="comment">// &quot;Helloorld&quot;</span></span><br></pre></td></tr></table></figure><h3 id="4-替换内容-replace"><a href="#4-替换内容-replace" class="headerlink" title="4. 替换内容 (replace)"></a>4. 替换内容 (replace)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="string">&quot;HelloWorld&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 替换指定范围的字符</span></span><br><span class="line">sb.replace(<span class="number">5</span>, <span class="number">10</span>, <span class="string">&quot;Java&quot;</span>);  <span class="comment">// 替换索引5-9的字符</span></span><br><span class="line">System.out.println(sb);     <span class="comment">// &quot;HelloJava&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置指定位置的字符</span></span><br><span class="line">sb.setCharAt(<span class="number">5</span>, <span class="string">&#x27;j&#x27;</span>);       <span class="comment">// 替换索引5的字符</span></span><br><span class="line">System.out.println(sb);     <span class="comment">// &quot;Hellojava&quot;</span></span><br></pre></td></tr></table></figure><h3 id="5-反转字符串-reverse"><a href="#5-反转字符串-reverse" class="headerlink" title="5. 反转字符串 (reverse)"></a>5. 反转字符串 (reverse)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">sb.reverse();</span><br><span class="line">System.out.println(sb);     <span class="comment">// &quot;olleH&quot;</span></span><br></pre></td></tr></table></figure><h2 id="三、容量管理"><a href="#三、容量管理" class="headerlink" title="三、容量管理"></a>三、容量管理</h2><h3 id="1-容量相关方法"><a href="#1-容量相关方法" class="headerlink" title="1. 容量相关方法"></a>1. 容量相关方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="number">50</span>);  <span class="comment">// 初始容量50</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取信息</span></span><br><span class="line"><span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> sb.length();       <span class="comment">// 当前长度 (0)</span></span><br><span class="line"><span class="type">int</span> <span class="variable">capacity</span> <span class="operator">=</span> sb.capacity();   <span class="comment">// 当前容量 (50)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 确保最小容量</span></span><br><span class="line">sb.ensureCapacity(<span class="number">100</span>);         <span class="comment">// 确保容量至少100</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置长度</span></span><br><span class="line">sb.setLength(<span class="number">10</span>);               <span class="comment">// 设置长度为10，可能用null字符填充</span></span><br></pre></td></tr></table></figure><h3 id="2-容量增长机制"><a href="#2-容量增长机制" class="headerlink" title="2. 容量增长机制"></a>2. 容量增长机制</h3><p>当追加内容超过当前容量时，会自动扩容：</p><ul><li>新容量 = (原容量 + 1) * 2</li><li>如果还不够，则直接扩容到所需大小</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();  <span class="comment">// 默认容量16</span></span><br><span class="line">sb.append(<span class="string">&quot;12345678901234567&quot;</span>);          <span class="comment">// 长度17</span></span><br><span class="line">System.out.println(sb.capacity());       <span class="comment">// 34 (16+1)*2</span></span><br></pre></td></tr></table></figure><h2 id="四、字符串操作"><a href="#四、字符串操作" class="headerlink" title="四、字符串操作"></a>四、字符串操作</h2><h3 id="1-获取子串和字符"><a href="#1-获取子串和字符" class="headerlink" title="1. 获取子串和字符"></a>1. 获取子串和字符</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="string">&quot;HelloWorld&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取字符</span></span><br><span class="line"><span class="type">char</span> <span class="variable">ch</span> <span class="operator">=</span> sb.charAt(<span class="number">4</span>);         <span class="comment">// &#x27;o&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取子串</span></span><br><span class="line"><span class="type">String</span> <span class="variable">sub1</span> <span class="operator">=</span> sb.substring(<span class="number">5</span>);      <span class="comment">// &quot;World&quot;</span></span><br><span class="line"><span class="type">String</span> <span class="variable">sub2</span> <span class="operator">=</span> sb.substring(<span class="number">5</span>, <span class="number">8</span>);   <span class="comment">// &quot;Wor&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取字符序列</span></span><br><span class="line"><span class="type">CharSequence</span> <span class="variable">seq</span> <span class="operator">=</span> sb.subSequence(<span class="number">3</span>, <span class="number">6</span>);  <span class="comment">// &quot;loW&quot;</span></span><br></pre></td></tr></table></figure><h3 id="2-查找操作"><a href="#2-查找操作" class="headerlink" title="2. 查找操作"></a>2. 查找操作</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="string">&quot;HelloHello&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查找字符串</span></span><br><span class="line"><span class="type">int</span> <span class="variable">first</span> <span class="operator">=</span> sb.indexOf(<span class="string">&quot;ell&quot;</span>);      <span class="comment">// 1</span></span><br><span class="line"><span class="type">int</span> <span class="variable">from</span> <span class="operator">=</span> sb.indexOf(<span class="string">&quot;ell&quot;</span>, <span class="number">2</span>);    <span class="comment">// 6</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 反向查找</span></span><br><span class="line"><span class="type">int</span> <span class="variable">last</span> <span class="operator">=</span> sb.lastIndexOf(<span class="string">&quot;ell&quot;</span>);   <span class="comment">// 6</span></span><br><span class="line"><span class="type">int</span> <span class="variable">lastFrom</span> <span class="operator">=</span> sb.lastIndexOf(<span class="string">&quot;ell&quot;</span>, <span class="number">5</span>);  <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><h2 id="五、实际应用示例"><a href="#五、实际应用示例" class="headerlink" title="五、实际应用示例"></a>五、实际应用示例</h2><h3 id="1-高效字符串拼接"><a href="#1-高效字符串拼接" class="headerlink" title="1. 高效字符串拼接"></a>1. 高效字符串拼接</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringConcatenation</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">buildString</span><span class="params">(String[] parts)</span> &#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">for</span> (String part : parts) &#123;</span><br><span class="line">            sb.append(part);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        String[] words = &#123;<span class="string">&quot;This&quot;</span>, <span class="string">&quot; &quot;</span>, <span class="string">&quot;is&quot;</span>, <span class="string">&quot; &quot;</span>, <span class="string">&quot;a&quot;</span>, <span class="string">&quot; &quot;</span>, <span class="string">&quot;test&quot;</span>&#125;;</span><br><span class="line">        System.out.println(buildString(words));  <span class="comment">// &quot;This is a test&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-SQL-查询构建"><a href="#2-SQL-查询构建" class="headerlink" title="2. SQL 查询构建"></a>2. SQL 查询构建</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SqlBuilder</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">buildQuery</span><span class="params">(String table, String[] columns, String condition)</span> &#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="string">&quot;SELECT &quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 添加列</span></span><br><span class="line">        <span class="keyword">if</span> (columns == <span class="literal">null</span> || columns.length == <span class="number">0</span>) &#123;</span><br><span class="line">            sql.append(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; columns.length; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i &gt; <span class="number">0</span>) sql.append(<span class="string">&quot;, &quot;</span>);</span><br><span class="line">                sql.append(columns[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 添加表名</span></span><br><span class="line">        sql.append(<span class="string">&quot; FROM &quot;</span>).append(table);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 添加条件</span></span><br><span class="line">        <span class="keyword">if</span> (condition != <span class="literal">null</span> &amp;&amp; !condition.isEmpty()) &#123;</span><br><span class="line">            sql.append(<span class="string">&quot; WHERE &quot;</span>).append(condition);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> sql.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        String[] cols = &#123;<span class="string">&quot;id&quot;</span>, <span class="string">&quot;name&quot;</span>, <span class="string">&quot;age&quot;</span>&#125;;</span><br><span class="line">        <span class="type">String</span> <span class="variable">query</span> <span class="operator">=</span> buildQuery(<span class="string">&quot;users&quot;</span>, cols, <span class="string">&quot;age &gt; 18&quot;</span>);</span><br><span class="line">        System.out.println(query);</span><br><span class="line">        <span class="comment">// 输出: SELECT id, name, age FROM users WHERE age &gt; 18</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-CSV-文件生成"><a href="#3-CSV-文件生成" class="headerlink" title="3. CSV 文件生成"></a>3. CSV 文件生成</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CsvGenerator</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">generateCsv</span><span class="params">(String[] headers, String[][] data)</span> &#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">csv</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 添加表头</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; headers.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &gt; <span class="number">0</span>) csv.append(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">            csv.append(<span class="string">&quot;\&quot;&quot;</span>).append(headers[i]).append(<span class="string">&quot;\&quot;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        csv.append(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 添加数据行</span></span><br><span class="line">        <span class="keyword">for</span> (String[] row : data) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; row.length; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i &gt; <span class="number">0</span>) csv.append(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">                csv.append(<span class="string">&quot;\&quot;&quot;</span>).append(row[i]).append(<span class="string">&quot;\&quot;&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            csv.append(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> csv.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        String[] headers = &#123;<span class="string">&quot;Name&quot;</span>, <span class="string">&quot;Age&quot;</span>, <span class="string">&quot;City&quot;</span>&#125;;</span><br><span class="line">        String[][] data = &#123;</span><br><span class="line">            &#123;<span class="string">&quot;Alice&quot;</span>, <span class="string">&quot;25&quot;</span>, <span class="string">&quot;New York&quot;</span>&#125;,</span><br><span class="line">            &#123;<span class="string">&quot;Bob&quot;</span>, <span class="string">&quot;30&quot;</span>, <span class="string">&quot;London&quot;</span>&#125;,</span><br><span class="line">            &#123;<span class="string">&quot;Charlie&quot;</span>, <span class="string">&quot;22&quot;</span>, <span class="string">&quot;Paris&quot;</span>&#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        </span><br><span class="line">        System.out.println(generateCsv(headers, data));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="六、性能考虑与最佳实践"><a href="#六、性能考虑与最佳实践" class="headerlink" title="六、性能考虑与最佳实践"></a>六、性能考虑与最佳实践</h2><ol><li><p><strong>选择正确的类</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 单线程环境 - 使用StringBuilder</span></span><br><span class="line"><span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 多线程环境 - 使用StringBuffer</span></span><br><span class="line"><span class="type">StringBuffer</span> <span class="variable">sbf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br></pre></td></tr></table></figure></li><li><p><strong>初始化容量</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果知道大概大小，预先设置容量</span></span><br><span class="line"><span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="number">1024</span>);  <span class="comment">// 避免频繁扩容</span></span><br></pre></td></tr></table></figure></li><li><p><strong>链式调用</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用方法链提高可读性</span></span><br><span class="line"><span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>()</span><br><span class="line">    .append(<span class="string">&quot;Name: &quot;</span>).append(name)</span><br><span class="line">    .append(<span class="string">&quot;, Age: &quot;</span>).append(age)</span><br><span class="line">    .append(<span class="string">&quot;, Score: &quot;</span>).append(score)</span><br><span class="line">    .toString();</span><br></pre></td></tr></table></figure></li><li><p><strong>与String的转换</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 只在需要时才转换为String</span></span><br><span class="line"><span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line"><span class="comment">// ...多次操作...</span></span><br><span class="line"><span class="type">String</span> <span class="variable">finalString</span> <span class="operator">=</span> sb.toString();  <span class="comment">// 最后转换</span></span><br></pre></td></tr></table></figure></li><li><p><strong>线程安全考虑</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在多线程环境中使用StringBuffer</span></span><br><span class="line"><span class="type">StringBuffer</span> <span class="variable">sharedBuffer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者使用同步包装</span></span><br><span class="line"><span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line"><span class="keyword">synchronized</span>(sb) &#123;</span><br><span class="line">    sb.append(<span class="string">&quot;thread-safe operation&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>避免不必要的使用</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 简单拼接不需要StringBuilder</span></span><br><span class="line"><span class="type">String</span> <span class="variable">simple</span> <span class="operator">=</span> <span class="string">&quot;Hello &quot;</span> + name;  <span class="comment">// 编译器会自动优化</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 循环中应该使用StringBuilder</span></span><br><span class="line"><span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">    sb.append(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>通过合理使用 StringBuffer 和 StringBuilder，可以显著提高字符串处理性能，特别是在需要频繁修改字符串内容的场景中。根据线程安全需求选择合适的类，并注意容量管理和转换时机，以获得最佳性能。</p>]]></content>
      
      
      <categories>
          
          <category> 结构速查 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java快速学习速查（2）</title>
      <link href="/2025/03/31/java%E5%BF%AB%E9%80%9F%E5%AD%A6%E4%B9%A0%E9%80%9F%E6%9F%A5%EF%BC%882%EF%BC%89/"/>
      <url>/2025/03/31/java%E5%BF%AB%E9%80%9F%E5%AD%A6%E4%B9%A0%E9%80%9F%E6%9F%A5%EF%BC%882%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="java快速学习速查（2）"><a href="#java快速学习速查（2）" class="headerlink" title="java快速学习速查（2）"></a>java快速学习速查（2）</h1><p>高速通过中ing……</p><blockquote><p>本篇为变量类型，变量命名规则，修饰符，运算符</p></blockquote><h1 id="Java变量类型全面解析"><a href="#Java变量类型全面解析" class="headerlink" title="Java变量类型全面解析"></a>Java变量类型全面解析</h1><p>变量是Java程序中最基本的存储单元，理解不同类型的变量及其特性是Java编程的基础。下面我将从实际开发角度，深入讲解Java中的各种变量类型。</p><h2 id="一、变量类型体系"><a href="#一、变量类型体系" class="headerlink" title="一、变量类型体系"></a>一、变量类型体系</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Java变量类型</span><br><span class="line">├── 按声明位置分</span><br><span class="line">│   ├── 成员变量（类中声明）</span><br><span class="line">│   │   ├── 实例变量（非static）</span><br><span class="line">│   │   └── 类变量（static）</span><br><span class="line">│   └── 局部变量（方法/块中声明）</span><br><span class="line">│       ├── 方法局部变量</span><br><span class="line">│       ├── 代码块变量</span><br><span class="line">│       └── 参数变量</span><br><span class="line">└── 按数据类型分</span><br><span class="line">    ├── 基本类型变量</span><br><span class="line">    └── 引用类型变量</span><br></pre></td></tr></table></figure><h2 id="二、局部变量详解"><a href="#二、局部变量详解" class="headerlink" title="二、局部变量详解"></a>二、局部变量详解</h2><h3 id="1-核心特性"><a href="#1-核心特性" class="headerlink" title="1. 核心特性"></a>1. 核心特性</h3><ul><li><strong>作用域</strong>：仅在声明它的方法/代码块内有效</li><li><strong>生命周期</strong>：方法/块开始执行时创建，执行结束时销毁</li><li><strong>存储位置</strong>：栈内存</li><li><strong>初始化要求</strong>：必须显式初始化后才能使用</li></ul><h3 id="2-使用示例"><a href="#2-使用示例" class="headerlink" title="2. 使用示例"></a>2. 使用示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LocalVarDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">calculate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 方法局部变量</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">0</span>;  <span class="comment">// 必须初始化</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++) &#123;  <span class="comment">// i是循环块局部变量</span></span><br><span class="line">            result += i;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// System.out.println(i);  // 错误！i已不可访问</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 参数变量args也是局部变量</span></span><br><span class="line">        <span class="keyword">if</span>(args.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;参数存在&quot;</span>;  <span class="comment">// 代码块局部变量</span></span><br><span class="line">            System.out.println(message);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// System.out.println(message);  // 错误！message已不可访问</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-关键注意事项"><a href="#3-关键注意事项" class="headerlink" title="3. 关键注意事项"></a>3. 关键注意事项</h3><ul><li>局部变量不能使用<code>static</code>修饰</li><li>不同代码块中可以声明同名局部变量</li><li>方法参数本质也是局部变量</li></ul><h2 id="三、成员变量（实例变量）深度解析"><a href="#三、成员变量（实例变量）深度解析" class="headerlink" title="三、成员变量（实例变量）深度解析"></a>三、成员变量（实例变量）深度解析</h2><h3 id="1-核心特性-1"><a href="#1-核心特性-1" class="headerlink" title="1. 核心特性"></a>1. 核心特性</h3><ul><li><strong>作用域</strong>：整个类内部（不同访问修饰符影响外部可见性）</li><li><strong>生命周期</strong>：对象创建时初始化，对象被GC回收时销毁</li><li><strong>存储位置</strong>：堆内存（作为对象的一部分）</li><li><strong>初始化</strong>：自动赋予默认值（可显式初始化）</li></ul><h3 id="2-默认值规则"><a href="#2-默认值规则" class="headerlink" title="2. 默认值规则"></a>2. 默认值规则</h3><div class="table-container"><table><thead><tr><th>数据类型</th><th>默认值</th></tr></thead><tbody><tr><td>byte/short/int/long</td><td>0</td></tr><tr><td>float/double</td><td>0.0</td></tr><tr><td>char</td><td>‘\u0000’</td></tr><tr><td>boolean</td><td>false</td></tr><tr><td>引用类型</td><td>null</td></tr></tbody></table></div><h3 id="3-使用示例"><a href="#3-使用示例" class="headerlink" title="3. 使用示例"></a>3. 使用示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="comment">// 实例变量</span></span><br><span class="line">    <span class="keyword">private</span> String name;    <span class="comment">// 默认null</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;        <span class="comment">// 默认0</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> graduated; <span class="comment">// 默认false</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;   <span class="comment">// 构造器中初始化</span></span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">graduate</span><span class="params">()</span> &#123;</span><br><span class="line">        graduated = <span class="literal">true</span>;   <span class="comment">// 方法中修改状态</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">localVar</span> <span class="operator">=</span> <span class="number">2023</span>; <span class="comment">// 局部变量</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;：&quot;</span> + age + <span class="string">&quot;岁，&quot;</span> + </span><br><span class="line">                          (graduated ? <span class="string">&quot;已毕业&quot;</span> : <span class="string">&quot;在读&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-最佳实践"><a href="#4-最佳实践" class="headerlink" title="4. 最佳实践"></a>4. 最佳实践</h3><ul><li>通常设为<code>private</code>，通过getter/setter访问</li><li>重要变量应在构造器中初始化</li><li>避免过多的公有实例变量</li></ul><h2 id="四、类变量（静态变量）全面剖析"><a href="#四、类变量（静态变量）全面剖析" class="headerlink" title="四、类变量（静态变量）全面剖析"></a>四、类变量（静态变量）全面剖析</h2><h3 id="1-核心特性-2"><a href="#1-核心特性-2" class="headerlink" title="1. 核心特性"></a>1. 核心特性</h3><ul><li><strong>作用域</strong>：整个类（可通过类名直接访问）</li><li><strong>生命周期</strong>：类加载时初始化，程序结束时销毁</li><li><strong>存储位置</strong>：方法区（JDK8+的元空间）</li><li><strong>共享性</strong>：所有类实例共享同一份数据</li></ul><h3 id="2-使用示例-1"><a href="#2-使用示例-1" class="headerlink" title="2. 使用示例"></a>2. 使用示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Employee</span> &#123;</span><br><span class="line">    <span class="comment">// 实例变量</span></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 类变量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">nextId</span> <span class="operator">=</span> <span class="number">1</span>;  <span class="comment">// 下一个可用ID</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">COMPANY</span> <span class="operator">=</span> <span class="string">&quot;ABC科技&quot;</span>; <span class="comment">// 常量</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Employee</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = <span class="string">&quot;EMP&quot;</span> + String.format(<span class="string">&quot;%04d&quot;</span>, nextId++);</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getNextId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> nextId;  <span class="comment">// 静态方法访问静态变量</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;公司：&quot;</span> + Employee.COMPANY);</span><br><span class="line">        <span class="type">Employee</span> <span class="variable">e1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        <span class="type">Employee</span> <span class="variable">e2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        System.out.println(e1.id);  <span class="comment">// EMP0001</span></span><br><span class="line">        System.out.println(e2.id);  <span class="comment">// EMP0002</span></span><br><span class="line">        System.out.println(<span class="string">&quot;下一个ID：&quot;</span> + Employee.getNextId()); <span class="comment">// 3</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-关键注意事项-1"><a href="#3-关键注意事项-1" class="headerlink" title="3. 关键注意事项"></a>3. 关键注意事项</h3><ul><li>静态变量不属于任何对象实例</li><li>静态方法只能直接访问静态成员</li><li>多线程环境下需要考虑线程安全</li><li>静态常量命名推荐全大写+下划线</li></ul><h2 id="五、参数变量特殊机制"><a href="#五、参数变量特殊机制" class="headerlink" title="五、参数变量特殊机制"></a>五、参数变量特殊机制</h2><h3 id="1-值传递与引用传递"><a href="#1-值传递与引用传递" class="headerlink" title="1. 值传递与引用传递"></a>1. 值传递与引用传递</h3><ul><li><strong>基本类型</strong>：值传递（传递副本）</li><li><strong>引用类型</strong>：引用值传递（传递引用的副本）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ParamDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">modify</span><span class="params">(<span class="type">int</span> num, String str, <span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        num = <span class="number">100</span>;</span><br><span class="line">        str = <span class="string">&quot;修改后&quot;</span>;</span><br><span class="line">        arr[<span class="number">0</span>] = <span class="number">99</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;原始&quot;</span>;</span><br><span class="line">        <span class="type">int</span>[] a = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">        </span><br><span class="line">        modify(n, s, a);</span><br><span class="line">        </span><br><span class="line">        System.out.println(n);  <span class="comment">// 1（未改变）</span></span><br><span class="line">        System.out.println(s);  <span class="comment">// &quot;原始&quot;（未改变）</span></span><br><span class="line">        System.out.println(Arrays.toString(a)); <span class="comment">// [99, 2, 3]（改变）</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-可变参数"><a href="#2-可变参数" class="headerlink" title="2. 可变参数"></a>2. 可变参数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VarargsDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">average</span><span class="params">(<span class="type">int</span>... numbers)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(numbers.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> num : numbers) &#123;</span><br><span class="line">            sum += num;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (<span class="type">double</span>)sum / numbers.length;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(average(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>));     <span class="comment">// 2.0</span></span><br><span class="line">        System.out.println(average(<span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">20</span>)); <span class="comment">// 12.5</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="六、变量对比总结表"><a href="#六、变量对比总结表" class="headerlink" title="六、变量对比总结表"></a>六、变量对比总结表</h2><div class="table-container"><table><thead><tr><th>特性</th><th>局部变量</th><th>实例变量</th><th>类变量</th></tr></thead><tbody><tr><td><strong>声明位置</strong></td><td>方法/块内部</td><td>类中方法外</td><td>类中方法外+static</td></tr><tr><td><strong>初始化要求</strong></td><td>必须显式初始化</td><td>自动初始化</td><td>自动初始化</td></tr><tr><td><strong>默认值</strong></td><td>无（必须初始化）</td><td>有（各类型默认值）</td><td>有（同实例变量）</td></tr><tr><td><strong>作用域</strong></td><td>声明块内部</td><td>整个类</td><td>整个类</td></tr><tr><td><strong>生命周期</strong></td><td>方法/块执行期间</td><td>对象存在期间</td><td>程序运行期间</td></tr><tr><td><strong>存储位置</strong></td><td>栈内存</td><td>堆内存（对象内）</td><td>方法区</td></tr><tr><td><strong>访问方式</strong></td><td>直接访问</td><td>对象.变量名</td><td>类名.变量名</td></tr><tr><td><strong>线程安全</strong></td><td>天然线程安全</td><td>不安全</td><td>不安全</td></tr><tr><td><strong>共享性</strong></td><td>不共享</td><td>对象间不共享</td><td>全局共享</td></tr></tbody></table></div><h2 id="七、变量使用最佳实践"><a href="#七、变量使用最佳实践" class="headerlink" title="七、变量使用最佳实践"></a>七、变量使用最佳实践</h2><h3 id="1-命名规范"><a href="#1-命名规范" class="headerlink" title="1. 命名规范"></a>1. 命名规范</h3><ul><li>遵循驼峰命名法（局部/实例变量小写开头，类变量全大写）</li><li>见名知意（避免单字符命名，除临时变量）</li><li>避免使用$和_开头</li></ul><h3 id="2-作用域最小化"><a href="#2-作用域最小化" class="headerlink" title="2. 作用域最小化"></a>2. 作用域最小化</h3><ul><li>尽量缩小变量作用域（优先使用局部变量）</li><li>避免不必要的成员变量</li></ul><h3 id="3-初始化策略"><a href="#3-初始化策略" class="headerlink" title="3. 初始化策略"></a>3. 初始化策略</h3><ul><li>局部变量：声明时立即初始化</li><li>实例变量：构造器中初始化关键变量</li><li>类变量：静态代码块中初始化复杂静态变量</li></ul><h3 id="4-线程安全考虑"><a href="#4-线程安全考虑" class="headerlink" title="4. 线程安全考虑"></a>4. 线程安全考虑</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Counter</span> &#123;</span><br><span class="line">    <span class="comment">// 非线程安全</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">count1</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 线程安全方案1：volatile</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="type">int</span> <span class="variable">count2</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 线程安全方案2：Atomic</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">AtomicInteger</span> <span class="variable">count3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(<span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 线程安全方案3：同步</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">count4</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">increment</span><span class="params">()</span> &#123;</span><br><span class="line">        count4++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="八、典型面试问题解析"><a href="#八、典型面试问题解析" class="headerlink" title="八、典型面试问题解析"></a>八、典型面试问题解析</h2><h3 id="问题1：以下代码输出什么？"><a href="#问题1：以下代码输出什么？" class="headerlink" title="问题1：以下代码输出什么？"></a>问题1：以下代码输出什么？</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VariableQuiz</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">VariableQuiz</span> <span class="variable">v1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">VariableQuiz</span>();</span><br><span class="line">        v1.x = <span class="number">100</span>;</span><br><span class="line">        v1.y = <span class="number">200</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="type">VariableQuiz</span> <span class="variable">v2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">VariableQuiz</span>();</span><br><span class="line">        System.out.println(v2.x + <span class="string">&quot; &quot;</span> + v2.y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>答案</strong>：输出”100 20”。因为x是静态变量被所有实例共享，y是实例变量每个对象独立。</p><h3 id="问题2：为什么局部变量必须初始化？"><a href="#问题2：为什么局部变量必须初始化？" class="headerlink" title="问题2：为什么局部变量必须初始化？"></a>问题2：为什么局部变量必须初始化？</h3><p><strong>解析</strong>：Java设计者为了避免因未初始化变量导致的不可预测行为。成员变量有默认值是为了对象创建的合理性，而局部变量作用域小，强制初始化能减少错误。</p><h3 id="问题3：以下哪种变量线程安全？"><a href="#问题3：以下哪种变量线程安全？" class="headerlink" title="问题3：以下哪种变量线程安全？"></a>问题3：以下哪种变量线程安全？</h3><p>A. 局部变量<br>B. 实例变量<br>C. 静态变量<br><strong>答案</strong>：A。局部变量存储在栈中，每个线程有自己的栈空间。</p><h1 id="Java变量命名规范深度解析"><a href="#Java变量命名规范深度解析" class="headerlink" title="Java变量命名规范深度解析"></a>Java变量命名规范深度解析</h1><p>良好的命名规范是编写可读性强、可维护性高的Java代码的基础。下面我将全面系统地讲解Java中各类变量的命名规则和最佳实践。</p><h2 id="一、命名基础规则"><a href="#一、命名基础规则" class="headerlink" title="一、命名基础规则"></a>一、命名基础规则</h2><h3 id="1-通用命名原则"><a href="#1-通用命名原则" class="headerlink" title="1. 通用命名原则"></a>1. 通用命名原则</h3><ul><li><strong>合法字符</strong>：字母、数字、下划线和美元符号（$）</li><li><strong>开头限制</strong>：不能以数字开头</li><li><strong>长度限制</strong>：理论上无限制，但建议不超过50个字符</li><li><strong>大小写敏感</strong>：<code>myVar</code>和<code>myvar</code>是不同的变量</li><li><strong>关键字规避</strong>：不能使用Java保留字（如<code>class</code>, <code>int</code>等）</li></ul><h3 id="2-命名风格对比"><a href="#2-命名风格对比" class="headerlink" title="2. 命名风格对比"></a>2. 命名风格对比</h3><div class="table-container"><table><thead><tr><th>命名风格</th><th>示例</th><th>适用场景</th></tr></thead><tbody><tr><td>小驼峰(lowerCamel)</td><td><code>studentName</code></td><td>变量、方法名</td></tr><tr><td>大驼峰(UpperCamel)</td><td><code>StudentService</code></td><td>类名、接口名</td></tr><tr><td>蛇形(SNAKE_CASE)</td><td><code>MAX_VALUE</code></td><td>常量</td></tr><tr><td>匈牙利(不推荐)</td><td><code>strFirstName</code></td><td>旧代码（现代Java不推荐）</td></tr></tbody></table></div><h2 id="二、具体变量类型命名规范"><a href="#二、具体变量类型命名规范" class="headerlink" title="二、具体变量类型命名规范"></a>二、具体变量类型命名规范</h2><h3 id="1-局部变量命名"><a href="#1-局部变量命名" class="headerlink" title="1. 局部变量命名"></a>1. 局部变量命名</h3><ul><li><strong>规则</strong>：小驼峰，简短且描述性</li><li><strong>示例</strong>：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">itemCount</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">customerName</span> <span class="operator">=</span> <span class="string">&quot;张三&quot;</span>;</span><br><span class="line"><span class="type">double</span> <span class="variable">totalPrice</span> <span class="operator">=</span> calculateTotal();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 临时变量可用单字符（限于非常短的作用域）</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-实例变量命名"><a href="#2-实例变量命名" class="headerlink" title="2. 实例变量命名"></a>2. 实例变量命名</h3><ul><li><strong>规则</strong>：小驼峰，反映对象状态</li><li><strong>示例</strong>：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String studentId;    <span class="comment">// 学号</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> isGraduated; <span class="comment">// 是否毕业</span></span><br><span class="line">    <span class="keyword">protected</span> String major;      <span class="comment">// 专业（protected示例）</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// boolean类型推荐is/has/can前缀</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> hasScholarship;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-静态变量命名"><a href="#3-静态变量命名" class="headerlink" title="3. 静态变量命名"></a>3. 静态变量命名</h3><ul><li><strong>规则</strong>：<ul><li>常规静态变量：小驼峰</li><li>常量：全大写+下划线</li></ul></li><li><strong>示例</strong>：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Config</span> &#123;</span><br><span class="line">    <span class="comment">// 常规静态变量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">instanceCount</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 常量</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MAX_CONNECTIONS</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DEFAULT_ENCODING</span> <span class="operator">=</span> <span class="string">&quot;UTF-8&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="4-参数变量命名"><a href="#4-参数变量命名" class="headerlink" title="4. 参数变量命名"></a>4. 参数变量命名</h3><ul><li><strong>规则</strong>：小驼峰，明确表达参数用途</li><li><strong>示例</strong>：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">registerUser</span><span class="params">(String userName, String passwordHash)</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 布尔参数推荐使用&quot;is/has/can&quot;前缀</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setActive</span><span class="params">(<span class="type">boolean</span> isActive)</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="5-泛型类型参数"><a href="#5-泛型类型参数" class="headerlink" title="5. 泛型类型参数"></a>5. 泛型类型参数</h3><p>泛型一般放在<code>&lt;&gt;</code>中，在定义类或方法时使用。限定传入值的类型</p><ul><li><strong>规则</strong>：单个大写字母，常用约定：<ul><li><code>E</code> - 集合元素</li><li><code>K</code> - 键</li><li><code>V</code> - 值</li><li><code>T</code> - 类型</li><li><code>S</code>, <code>U</code> - 第二、第三类型</li></ul></li><li><strong>示例</strong>：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Box</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> T content;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setContent</span><span class="params">(T content)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.content = content;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Map</span>&lt;K, V&gt; &#123;</span><br><span class="line">    V <span class="title function_">get</span><span class="params">(K key)</span>;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>自定义泛型类：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyList</span>&lt;T&gt; &#123;<span class="comment">//此处规定不同的大写字母</span></span><br><span class="line">    <span class="keyword">private</span> T[] items;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> size;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>自定义泛型方法：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">printArray</span><span class="params">(T[] array)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (T item : array) &#123;</span><br><span class="line">        System.out.println(item);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>泛型方法的类型参数通常放在返回值之前。</li></ul><h2 id="三、特殊场景命名规范"><a href="#三、特殊场景命名规范" class="headerlink" title="三、特殊场景命名规范"></a>三、特殊场景命名规范</h2><h3 id="1-集合类型变量"><a href="#1-集合类型变量" class="headerlink" title="1. 集合类型变量"></a>1. 集合类型变量</h3><ul><li><strong>推荐后缀</strong>：List/Set/Map等类型指示</li><li><strong>示例</strong>：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; studentNameList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">Map&lt;Integer, Student&gt; studentIdMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">Set&lt;Course&gt; requiredCourseSet = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-布尔类型变量"><a href="#2-布尔类型变量" class="headerlink" title="2. 布尔类型变量"></a>2. 布尔类型变量</h3><ul><li><strong>推荐前缀</strong>：<ul><li><code>is</code> - 状态标识</li><li><code>has</code> - 拥有关系</li><li><code>can</code> - 能力判断</li><li><code>should</code> - 条件判断</li></ul></li><li><strong>示例</strong>：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> isActive;</span><br><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> hasLicense;</span><br><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> canEdit;</span><br><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> shouldValidate;</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-测试代码命名"><a href="#3-测试代码命名" class="headerlink" title="3. 测试代码命名"></a>3. 测试代码命名</h3><ul><li><strong>方法名</strong>：可使用下划线增强可读性</li><li><strong>示例</strong>：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">isAdult_AgeOver18_ReturnsTrue</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 测试逻辑</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">calculatePrice_WithDiscount_AppliesDiscount</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 测试逻辑</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="四、命名禁忌与常见错误"><a href="#四、命名禁忌与常见错误" class="headerlink" title="四、命名禁忌与常见错误"></a>四、命名禁忌与常见错误</h2><h3 id="1-绝对避免的命名"><a href="#1-绝对避免的命名" class="headerlink" title="1. 绝对避免的命名"></a>1. 绝对避免的命名</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 反例1：无意义命名</span></span><br><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;  </span><br><span class="line"><span class="type">String</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="string">&quot;value&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 反例2：误导性命名</span></span><br><span class="line">List&lt;String&gt; name = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();  <span class="comment">// 实际是列表却用单数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 反例3：大小写混淆</span></span><br><span class="line">String UserName;  <span class="comment">// 类名风格用于变量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 反例4：数字开头</span></span><br><span class="line"><span class="type">int</span> 2ndPlace;  <span class="comment">// 编译错误</span></span><br></pre></td></tr></table></figure><h3 id="2-不推荐的命名实践"><a href="#2-不推荐的命名实践" class="headerlink" title="2. 不推荐的命名实践"></a>2. 不推荐的命名实践</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 匈牙利命名法（类型前缀）</span></span><br><span class="line">String strName;  </span><br><span class="line"><span class="type">int</span> iCount;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 过长的命名</span></span><br><span class="line">String theNameOfTheStudentWhoIsTakingTheAdvancedJavaCourse;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 不一致的缩写</span></span><br><span class="line"><span class="type">int</span> custCnt;  <span class="comment">// customerCount</span></span><br><span class="line"><span class="type">int</span> usrNum;   <span class="comment">// userNumber</span></span><br></pre></td></tr></table></figure><h2 id="五、行业标准参考"><a href="#五、行业标准参考" class="headerlink" title="五、行业标准参考"></a>五、行业标准参考</h2><h3 id="1-官方规范"><a href="#1-官方规范" class="headerlink" title="1. 官方规范"></a>1. 官方规范</h3><ul><li><a href="https://www.oracle.com/java/technologies/javase/codeconventions-namingconventions.html">Oracle Java编码规范</a></li><li><a href="https://google.github.io/styleguide/javaguide.html#s5-naming">Google Java风格指南</a></li></ul><h3 id="2-常用框架命名示例"><a href="#2-常用框架命名示例" class="headerlink" title="2. 常用框架命名示例"></a>2. 常用框架命名示例</h3><p><strong>Spring示例：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> JdbcTemplate jdbcTemplate;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserDaoImpl</span><span class="params">(DataSource dataSource)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.jdbcTemplate = <span class="keyword">new</span> <span class="title class_">JdbcTemplate</span>(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>JUnit测试示例：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringUtilsTest</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">isEmpty_WhenNullInput_ReturnsTrue</span><span class="params">()</span> &#123;</span><br><span class="line">        assertTrue(StringUtils.isEmpty(<span class="literal">null</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="六、命名检查工具"><a href="#六、命名检查工具" class="headerlink" title="六、命名检查工具"></a>六、命名检查工具</h2><h3 id="1-Checkstyle配置示例"><a href="#1-Checkstyle配置示例" class="headerlink" title="1. Checkstyle配置示例"></a>1. Checkstyle配置示例</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">&quot;LocalVariableName&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;format&quot;</span> <span class="attr">value</span>=<span class="string">&quot;^[a-z][a-zA-Z0-9]*$&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">&quot;MemberName&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;format&quot;</span> <span class="attr">value</span>=<span class="string">&quot;^[a-z][a-zA-Z0-9]*$&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">&quot;ConstantName&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;format&quot;</span> <span class="attr">value</span>=<span class="string">&quot;^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-IDE模板设置"><a href="#2-IDE模板设置" class="headerlink" title="2. IDE模板设置"></a>2. IDE模板设置</h3><ul><li><strong>IntelliJ IDEA</strong>：<code>File → Settings → Editor → Code Style → Java</code></li><li><strong>Eclipse</strong>：<code>Window → Preferences → Java → Code Style → Formatter</code></li></ul><h2 id="七、命名重构技巧"><a href="#七、命名重构技巧" class="headerlink" title="七、命名重构技巧"></a>七、命名重构技巧</h2><h3 id="1-重命名快捷键"><a href="#1-重命名快捷键" class="headerlink" title="1. 重命名快捷键"></a>1. 重命名快捷键</h3><ul><li><strong>IntelliJ</strong>：Shift+F6</li><li><strong>Eclipse</strong>：Alt+Shift+R</li></ul><h3 id="2-批量重命名示例"><a href="#2-批量重命名示例" class="headerlink" title="2. 批量重命名示例"></a>2. 批量重命名示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 重构前</span></span><br><span class="line"><span class="type">int</span> d;  <span class="comment">// 天数</span></span><br><span class="line">d = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重构后</span></span><br><span class="line"><span class="type">int</span> daysUntilExpiration;</span><br><span class="line">daysUntilExpiration = <span class="number">5</span>;</span><br></pre></td></tr></table></figure><h3 id="3-命名重构原则"><a href="#3-命名重构原则" class="headerlink" title="3. 命名重构原则"></a>3. 命名重构原则</h3><ol><li>见名知意：名称应准确表达变量用途</li><li>避免歧义：如<code>accountList</code>如果不是List类型就不要用</li><li>保持一致性：整个项目使用相同的命名风格</li><li>适度缩写：如<code>num</code>代替<code>number</code>可以接受，但避免过度缩写</li></ol><h2 id="八、典型场景命名示例"><a href="#八、典型场景命名示例" class="headerlink" title="八、典型场景命名示例"></a>八、典型场景命名示例</h2><h3 id="1-计数器变量"><a href="#1-计数器变量" class="headerlink" title="1. 计数器变量"></a>1. 计数器变量</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 好</span></span><br><span class="line"><span class="type">int</span> <span class="variable">failedAttemptCount</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不好</span></span><br><span class="line"><span class="type">int</span> <span class="variable">counter</span> <span class="operator">=</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><h3 id="2-临时变量"><a href="#2-临时变量" class="headerlink" title="2. 临时变量"></a>2. 临时变量</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 处理用户订单</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processOrder</span><span class="params">(Order order)</span> &#123;</span><br><span class="line">    <span class="comment">// 好的临时变量命名</span></span><br><span class="line">    <span class="type">double</span> <span class="variable">discountedPrice</span> <span class="operator">=</span> calculateDiscountedPrice(order);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 不好的命名</span></span><br><span class="line">    <span class="type">double</span> <span class="variable">temp</span> <span class="operator">=</span> calculateDiscountedPrice(order);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-状态标志"><a href="#3-状态标志" class="headerlink" title="3. 状态标志"></a>3. 状态标志</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 好</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">isConnected</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">hasPermission</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不好</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">status</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br></pre></td></tr></table></figure><h1 id="Java修饰符全面解析"><a href="#Java修饰符全面解析" class="headerlink" title="Java修饰符全面解析"></a>Java修饰符全面解析</h1><p>修饰符是Java语言中用于控制类、变量、方法等元素访问权限和行为特性的关键字。下面我将系统性地讲解Java中的各种修饰符及其应用场景。</p><h2 id="一、访问修饰符详解"><a href="#一、访问修饰符详解" class="headerlink" title="一、访问修饰符详解"></a>一、访问修饰符详解</h2><h3 id="1-访问控制级别对比"><a href="#1-访问控制级别对比" class="headerlink" title="1. 访问控制级别对比"></a>1. 访问控制级别对比</h3><div class="table-container"><table><thead><tr><th>修饰符</th><th>类内部</th><th>同包</th><th>不同包子类</th><th>不同包非子类</th><th>适用对象</th></tr></thead><tbody><tr><td>public</td><td>✓</td><td>✓</td><td>✓</td><td>✓</td><td>类、接口、变量、方法</td></tr><tr><td>protected</td><td>✓</td><td>✓</td><td>✓</td><td>×</td><td>变量、方法、内部类</td></tr><tr><td>default</td><td>✓</td><td>✓</td><td>×</td><td>×</td><td>类、接口、变量、方法</td></tr><tr><td>private</td><td>✓</td><td>×</td><td>×</td><td>×</td><td>变量、方法、构造器、内部类</td></tr></tbody></table></div><p><strong>public具有最大权限，private具有最小权限。</strong></p><blockquote><p>访问修饰符使用原则<br>1.一般情况使用public修饰符<br>2.如果希望类的成员仅在当前类可见，使用private修饰符<br>3.如果希望类的成员仅在当前包可见，不使用任何修饰符<br>4.如果希望类的成员仅在当前包和子类可见，使用protected修饰符</p></blockquote><h3 id="2-public修饰符应用"><a href="#2-public修饰符应用" class="headerlink" title="2. public修饰符应用"></a>2. public修饰符应用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 公共类（文件名必须与类名一致）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="comment">// 公共变量（一般不推荐）</span></span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 公共方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot; is eating&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 公共构造方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Animal</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 其他包中可访问</span></span><br><span class="line"><span class="comment">// import com.example.Animal;</span></span><br><span class="line"><span class="comment">// Animal cat = new Animal(&quot;Tom&quot;);</span></span><br></pre></td></tr></table></figure><h3 id="3-protected修饰符实战"><a href="#3-protected修饰符实战" class="headerlink" title="3. protected修饰符实战"></a>3. protected修饰符实战</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Vehicle</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> String brand;  <span class="comment">// 子类可访问</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">startEngine</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(brand + <span class="string">&quot; engine starting&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 同包类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Garage</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">repair</span><span class="params">(Vehicle v)</span> &#123;</span><br><span class="line">        v.startEngine();  <span class="comment">// 可访问protected方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不同包子类</span></span><br><span class="line"><span class="keyword">package</span> com.test;</span><br><span class="line"><span class="keyword">import</span> com.example.Vehicle;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span> <span class="keyword">extends</span> <span class="title class_">Vehicle</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">demo</span><span class="params">()</span> &#123;</span><br><span class="line">        brand = <span class="string">&quot;Toyota&quot;</span>;  <span class="comment">// 可访问protected变量</span></span><br><span class="line">        startEngine();     <span class="comment">// 可访问protected方法</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Vehicle v = new Vehicle();</span></span><br><span class="line">        <span class="comment">// v.startEngine();  // 错误！不同包非子类不能访问</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-默认-default-修饰符示例"><a href="#4-默认-default-修饰符示例" class="headerlink" title="4. 默认(default)修饰符示例"></a>4. 默认(default)修饰符示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">PackagePrivateClass</span> &#123;  <span class="comment">// 仅包内可见</span></span><br><span class="line">    <span class="type">int</span> count;              <span class="comment">// 默认访问修饰符</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">increment</span><span class="params">()</span> &#123;</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-private修饰符最佳实践"><a href="#5-private修饰符最佳实践" class="headerlink" title="5. private修饰符最佳实践"></a>5. private修饰符最佳实践</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BankAccount</span> &#123;</span><br><span class="line">    <span class="comment">// 私有变量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> balance;</span><br><span class="line">    <span class="keyword">private</span> String accountNumber;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 公共访问方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getBalance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> balance;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 私有方法（内部辅助方法）</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">isValidAmount</span><span class="params">(<span class="type">double</span> amount)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> amount &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deposit</span><span class="params">(<span class="type">double</span> amount)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(isValidAmount(amount)) &#123;</span><br><span class="line">            balance += amount;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二、非访问修饰符深度解析"><a href="#二、非访问修饰符深度解析" class="headerlink" title="二、非访问修饰符深度解析"></a>二、非访问修饰符深度解析</h2><h3 id="1-static修饰符"><a href="#1-static修饰符" class="headerlink" title="1. static修饰符"></a>1. static修饰符</h3><p>如果属性或者方法被static修饰符，表示这个属性与方法不再属于对象，而是属性整个类，它会被多个<br>对象共享。被static关键字修饰的不需要去创建对象去调用，直接根据类名就可以去访问，也就是说方<br>便再没有创建对象的情况下来进行调用。</p><p><strong>修饰属性</strong><br>被static修饰的成员变量叫做静态变量，也叫做类变量，说明这个变量是属性这个类的，而不是属于对象。没有被static修饰符的成员变量，说明这个变量是属性具体的对象的。</p><p><strong>修饰方法</strong><br>被static修饰符的方法叫做静态方法，说明这个方法是属于这个类的，而不是属于对象，没有被static修饰的成员方法，说明这个方法是属于具体的对象的。</p><p><strong>注意事项</strong><br>1.静态的可以访问静态，但不能访问非静态的。<br>2.非静态的可以访问静态的，也可以访问非静态的。</p><h4 id="静态变量"><a href="#静态变量" class="headerlink" title="静态变量"></a>静态变量</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Employee</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">nextId</span> <span class="operator">=</span> <span class="number">1</span>;  <span class="comment">// 类变量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Employee</span><span class="params">()</span> &#123;</span><br><span class="line">        id = nextId++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getNextId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// return id;  // 错误！不能访问实例变量</span></span><br><span class="line">        <span class="keyword">return</span> nextId;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MathUtils</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">circleArea</span><span class="params">(<span class="type">double</span> radius)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Math.PI * radius * radius;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用方式</span></span><br><span class="line"><span class="type">double</span> <span class="variable">area</span> <span class="operator">=</span> MathUtils.circleArea(<span class="number">5.0</span>);</span><br></pre></td></tr></table></figure><h4 id="静态代码块"><a href="#静态代码块" class="headerlink" title="静态代码块"></a>静态代码块</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Database</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Connection conn;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">// 类加载时执行</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn = DriverManager.getConnection(<span class="string">&quot;jdbc:mysql://localhost:3306/mydb&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-final修饰符"><a href="#2-final修饰符" class="headerlink" title="2. final修饰符"></a>2. final修饰符</h3><p>final修饰符用于类、方法和变量，具有以下特点：</p><ul><li>类：被修饰的类不能被继承</li><li>方法：被修饰的方法不能被子类重写</li><li>变量：被修饰的变量（局部变量或类变量）只能赋值一次，不能被更改</li></ul><h4 id="final变量"><a href="#final变量" class="headerlink" title="final变量"></a>final变量</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Constants</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">double</span> <span class="variable">PI</span> <span class="operator">=</span> <span class="number">3.141592653589793</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> MAX_USERS;  <span class="comment">// 空白final</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Constants</span><span class="params">(<span class="type">int</span> max)</span> &#123;</span><br><span class="line">        MAX_USERS = max;  <span class="comment">// 只能在构造器中赋值一次</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">LOCAL_CONST</span> <span class="operator">=</span> <span class="number">100</span>;  <span class="comment">// 局部final变量</span></span><br><span class="line">        <span class="comment">// LOCAL_CONST = 200;  // 错误！</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="final方法"><a href="#final方法" class="headerlink" title="final方法"></a>final方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Parent</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">importantMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 不允许子类覆盖</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Child</span> <span class="keyword">extends</span> <span class="title class_">Parent</span> &#123;</span><br><span class="line">    <span class="comment">// @Override public void importantMethod() &#123;&#125;  // 错误！</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="final类"><a href="#final类" class="headerlink" title="final类"></a>final类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">StringUtils</span> &#123;  <span class="comment">// 不能被继承</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">(String str)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> str == <span class="literal">null</span> || str.trim().isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// class ExtendedUtils extends StringUtils &#123;&#125;  // 错误！</span></span><br></pre></td></tr></table></figure><h3 id="3-abstract修饰符"><a href="#3-abstract修饰符" class="headerlink" title="3. abstract修饰符"></a>3. abstract修饰符</h3><h4 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> String color;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Shape</span><span class="params">(String color)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 抽象方法（无实现）</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="type">double</span> <span class="title function_">area</span><span class="params">()</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 具体方法</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getColor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> color;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="抽象方法实现"><a href="#抽象方法实现" class="headerlink" title="抽象方法实现"></a>抽象方法实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span> <span class="keyword">extends</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> radius;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Circle</span><span class="params">(String color, <span class="type">double</span> radius)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(color);</span><br><span class="line">        <span class="built_in">this</span>.radius = radius;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">area</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Math.PI * radius * radius;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-synchronized修饰符"><a href="#4-synchronized修饰符" class="headerlink" title="4. synchronized修饰符"></a>4. synchronized修饰符</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Counter</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 同步方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">increment</span><span class="params">()</span> &#123;</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 同步块</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> value)</span> &#123;</span><br><span class="line">        <span class="keyword">synchronized</span>(<span class="built_in">this</span>) &#123;</span><br><span class="line">            count += value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-volatile修饰符"><a href="#5-volatile修饰符" class="headerlink" title="5. volatile修饰符"></a>5. volatile修饰符</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SharedObject</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">toggleFlag</span><span class="params">()</span> &#123;</span><br><span class="line">        flag = !flag;  <span class="comment">// 原子操作</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isFlag</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> flag;   <span class="comment">// 直接从主内存读取</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-transient修饰符"><a href="#6-transient修饰符" class="headerlink" title="6. transient修饰符"></a>6. transient修饰符</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> String password;  <span class="comment">// 不被序列化</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 敏感数据不应序列化</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> CreditCard creditCard;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-内部类"><a href="#7-内部类" class="headerlink" title="7.内部类"></a>7.内部类</h3><p>在java中，可以将一个类定义在另一个类里面或者一个方法里面，这样的类称为内部类(inner class)或<br>者嵌套类，广泛意义上的内部类一般分为这四种情况：成员内部类，局部内部类（匿名内部类）和静态<br>内部类。</p><p><strong>成员内部类</strong><br>蓝图如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">OuterClass</span> &#123;</span><br><span class="line">    <span class="comment">// 成员变量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> outerVar;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 成员内部类</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">InnerClass</span> &#123;</span><br><span class="line">        <span class="comment">// 内部类成员</span></span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> innerVar;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 内部类方法</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">innerMethod</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="comment">// 内部类可以访问外部类的成员（包括私有）</span></span><br><span class="line">            System.out.println(<span class="string">&quot;OuterVar: &quot;</span> + outerVar);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>实际案例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.iweb.test1;</span><br><span class="line"><span class="comment">// 汽车类 与 引擎内部类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Car</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String color;<span class="comment">// 成员变量</span></span><br><span class="line">    <span class="comment">//alt+shift+s</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getColor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> color;</span><br><span class="line">   &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setColor</span><span class="params">(String color)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.color = color;</span><br><span class="line">   &#125;</span><br><span class="line">    <span class="comment">// 汽车启动</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;汽车开动&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">    <span class="comment">// 成员内部类 引擎类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span>  <span class="title class_">Engine</span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">float</span>  displacement;    <span class="comment">// 排量</span></span><br><span class="line">        <span class="comment">// 引擎转动</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">turn</span><span class="params">()</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;引擎正在运行&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;汽车颜色:&quot;</span>+color);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><br><strong>局部内部类</strong><br>蓝图如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">OuterClass</span> &#123;</span><br><span class="line">    <span class="comment">// 成员变量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> outerVar;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 局部内部类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">outerMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">localVar</span> <span class="operator">=</span> <span class="number">100</span>;  <span class="comment">// 局部变量</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">class</span> <span class="title class_">LocalInnerClass</span> &#123;</span><br><span class="line">            <span class="comment">// 内部类方法</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">innerMethod</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="comment">// 内部类可以访问外部类的成员（包括私有）</span></span><br><span class="line">                System.out.println(<span class="string">&quot;OuterVar: &quot;</span> + outerVar);</span><br><span class="line">                <span class="comment">// 内部类可以访问局部变量（局部内部类的final变量）</span></span><br><span class="line">                System.out.println(<span class="string">&quot;LocalVar: &quot;</span> + localVar);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>实际案例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyOther</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// 内部类</span></span><br><span class="line">        <span class="keyword">class</span> <span class="title class_">InnerClass</span>&#123;</span><br><span class="line">            String name=<span class="string">&quot;局部内部类&quot;</span>;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">innerMethod</span><span class="params">()</span>&#123;</span><br><span class="line">                System.out.println(name);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h4><p>匿名内部类是一种没有类名的内部类，通常用于创建事件监听器、线程和适配器等。<br>匿名内部类：匿名类使你的代码更加简洁。如果你只需要使用一个本地类一次，就可以使用他们。</p><p>可以如下表达（分块+蓝图）<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">MyRun r=<span class="keyword">new</span> <span class="title class_">MyRun</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;匿名内部类的实现方式&quot;</span>);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;;  <span class="comment">// ;不能少</span></span><br><span class="line">        r.run();</span><br></pre></td></tr></table></figure><br>或者可以这么写：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">MyRun</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;匿名内部类的实现方式&quot;</span>);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;.run();</span><br></pre></td></tr></table></figure><br>这种方式的写法其实就是“匿名部内类”的写法，以前的方式，为了实现接口，不得不去创建一个类实现接口，有了匿名内部类就不必这么麻烦了。</p><p>蓝图如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">MyInterface</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">myMethod</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doSomething</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 创建匿名内部类实例</span></span><br><span class="line">        <span class="type">MyInterface</span> <span class="variable">myObj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyInterface</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">myMethod</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Hello from anonymous inner class!&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 调用匿名内部类方法</span></span><br><span class="line">        myObj.myMethod();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="javaBean"><a href="#javaBean" class="headerlink" title="javaBean"></a>javaBean</h3><p>javaBean就是一个遵循特定设计模式的普通的java类，具备以下特点：</p><ul><li><strong>属性私有化：</strong>把类的属性用 private 修饰，防止外部随便访问或修改，保证数据的安全性和完整性。</li><li><strong>共同的set/get方法：</strong>为了让外部能够有限制的访问和修改这些私有属于，会给每一个属性提供一对共<br>同的set/get方法。</li><li><strong>无参构造函数：</strong>一般来说，javaBean会提供一个无参的构造函数，这样在创建对象的时候会更加的方便<br>和灵活。</li></ul><p>满足以上三个条件的标准类设计就是javaBean。<br>以下是一个标准javaBean的示例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="comment">//第一要素：属性私有化</span></span><br><span class="line">    <span class="comment">// 属性私有化</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//第二要素：无参构造函数</span></span><br><span class="line">    <span class="comment">// 无参构造函数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 有参构造函数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//第三要素：公共的set/get方法</span></span><br><span class="line">    <span class="comment">// 公共的set方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 公共的get方法</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 其他set/get方法...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="三、修饰符组合规则"><a href="#三、修饰符组合规则" class="headerlink" title="三、修饰符组合规则"></a>三、修饰符组合规则</h2><h3 id="1-合法组合示例"><a href="#1-合法组合示例" class="headerlink" title="1. 合法组合示例"></a>1. 合法组合示例</h3><div class="table-container"><table><thead><tr><th>组合</th><th>示例</th><th>说明</th></tr></thead><tbody><tr><td>public static</td><td><code>public static void main()</code></td><td>主方法必须如此</td></tr><tr><td>public final</td><td><code>public final class String</code></td><td>不可继承的公共类</td></tr><tr><td>protected abstract</td><td><code>protected abstract void draw()</code></td><td>需要子类实现的受保护方法</td></tr><tr><td>private static</td><td><code>private static Logger log</code></td><td>类内部使用的静态工具</td></tr><tr><td>public synchronized</td><td><code>public synchronized void put()</code></td><td>线程安全的公共方法</td></tr></tbody></table></div><h3 id="2-非法组合及原因"><a href="#2-非法组合及原因" class="headerlink" title="2. 非法组合及原因"></a>2. 非法组合及原因</h3><div class="table-container"><table><thead><tr><th>非法组合</th><th>原因</th></tr></thead><tbody><tr><td>abstract final</td><td>abstract需要继承，final禁止继承</td></tr><tr><td>abstract private</td><td>private方法不能被子类覆盖</td></tr><tr><td>abstract static</td><td>static方法不参与多态</td></tr><tr><td>final volatile</td><td>final不可变，volatile需要可变</td></tr><tr><td>synchronized abstract</td><td>抽象方法没有实现，无法同步</td></tr></tbody></table></div><h2 id="四、类成员修饰符适用表"><a href="#四、类成员修饰符适用表" class="headerlink" title="四、类成员修饰符适用表"></a>四、类成员修饰符适用表</h2><div class="table-container"><table><thead><tr><th>修饰符</th><th>类</th><th>接口</th><th>变量</th><th>方法</th><th>构造器</th><th>代码块</th></tr></thead><tbody><tr><td>public</td><td>✓</td><td>✓</td><td>✓</td><td>✓</td><td>✓</td><td>×</td></tr><tr><td>protected</td><td>×</td><td>×</td><td>✓</td><td>✓</td><td>✓</td><td>×</td></tr><tr><td>default</td><td>✓</td><td>✓</td><td>✓</td><td>✓</td><td>✓</td><td>×</td></tr><tr><td>private</td><td>×</td><td>×</td><td>✓</td><td>✓</td><td>✓</td><td>×</td></tr><tr><td>static</td><td>×</td><td>×</td><td>✓</td><td>✓</td><td>×</td><td>✓</td></tr><tr><td>final</td><td>✓</td><td>×</td><td>✓</td><td>✓</td><td>×</td><td>×</td></tr><tr><td>abstract</td><td>✓</td><td>✓</td><td>×</td><td>✓</td><td>×</td><td>×</td></tr><tr><td>synchronized</td><td>×</td><td>×</td><td>×</td><td>✓</td><td>×</td><td>✓</td></tr><tr><td>volatile</td><td>×</td><td>×</td><td>✓</td><td>×</td><td>×</td><td>×</td></tr><tr><td>transient</td><td>×</td><td>×</td><td>✓</td><td>×</td><td>×</td><td>×</td></tr></tbody></table></div><h2 id="五、典型应用场景"><a href="#五、典型应用场景" class="headerlink" title="五、典型应用场景"></a>五、典型应用场景</h2><h3 id="1-单例模式实现"><a href="#1-单例模式实现" class="headerlink" title="1. 单例模式实现"></a>1. 单例模式实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Singleton instance;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;&#125;  <span class="comment">// 私有构造器</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">                    instance = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-工具类设计"><a href="#2-工具类设计" class="headerlink" title="2. 工具类设计"></a>2. 工具类设计</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">StringUtils</span> &#123;</span><br><span class="line">    <span class="comment">// 私有构造器防止实例化</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">StringUtils</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isBlank</span><span class="params">(String str)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> str == <span class="literal">null</span> || str.trim().isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">reverse</span><span class="params">(String str)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (str == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(str).reverse().toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-线程安全计数器"><a href="#3-线程安全计数器" class="headerlink" title="3. 线程安全计数器"></a>3. 线程安全计数器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SafeCounter</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> count;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">increment</span><span class="params">()</span> &#123;</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="type">int</span> <span class="title function_">get</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 使用原子变量更高效</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">AtomicInteger</span> <span class="variable">atomicCount</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(<span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">atomicIncrement</span><span class="params">()</span> &#123;</span><br><span class="line">        atomicCount.incrementAndGet();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="六、修饰符使用最佳实践"><a href="#六、修饰符使用最佳实践" class="headerlink" title="六、修饰符使用最佳实践"></a>六、修饰符使用最佳实践</h2><ol><li><strong>封装原则</strong>：成员变量尽量私有，通过方法控制访问</li><li><strong>最小权限</strong>：使用最严格的访问级别（优先private）</li><li><strong>static慎用</strong>：避免滥用导致内存泄漏和测试困难</li><li><strong>final应用</strong>：尽可能使变量不可变，减少并发问题</li><li><strong>同步策略</strong>：优先使用并发工具类而非synchronized</li><li><strong>抽象设计</strong>：抽象类定义框架，具体类实现细节</li></ol><h1 id="Java运算符全面解析"><a href="#Java运算符全面解析" class="headerlink" title="Java运算符全面解析"></a>Java运算符全面解析</h1><p>运算符是Java语言中用于执行各种操作的符号。下面我将系统地讲解Java中的各类运算符及其使用场景。</p><h2 id="一、算术运算符"><a href="#一、算术运算符" class="headerlink" title="一、算术运算符"></a>一、算术运算符</h2><h3 id="1-基本算术运算符"><a href="#1-基本算术运算符" class="headerlink" title="1. 基本算术运算符"></a>1. 基本算术运算符</h3><div class="table-container"><table><thead><tr><th>运算符</th><th>名称</th><th>示例</th><th>说明</th></tr></thead><tbody><tr><td>+</td><td>加法</td><td>a + b</td><td>也可用于字符串连接</td></tr><tr><td>-</td><td>减法</td><td>a - b</td><td></td></tr><tr><td>*</td><td>乘法</td><td>a * b</td><td></td></tr><tr><td>/</td><td>除法</td><td>a / b</td><td>整数相除结果取整</td></tr><tr><td>%</td><td>取模</td><td>a % b</td><td>取余数</td></tr></tbody></table></div><p><strong>代码示例：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line">System.out.println(a + b);  <span class="comment">// 13</span></span><br><span class="line">System.out.println(a - b);  <span class="comment">// 7</span></span><br><span class="line">System.out.println(a * b);  <span class="comment">// 30</span></span><br><span class="line">System.out.println(a / b);  <span class="comment">// 3 (整数除法)</span></span><br><span class="line">System.out.println(a % b);  <span class="comment">// 1</span></span><br><span class="line">System.out.println(<span class="number">10.0</span> / <span class="number">3</span>); <span class="comment">// 3.333... (浮点除法)</span></span><br></pre></td></tr></table></figure></p><h3 id="2-自增-自减运算符"><a href="#2-自增-自减运算符" class="headerlink" title="2. 自增/自减运算符"></a>2. 自增/自减运算符</h3><div class="table-container"><table><thead><tr><th>运算符</th><th>名称</th><th>示例</th><th>等价于</th></tr></thead><tbody><tr><td>++i</td><td>前自增</td><td>int j = ++i;</td><td>i = i + 1; j = i;</td></tr><tr><td>i++</td><td>后自增</td><td>int j = i++;</td><td>j = i; i = i + 1;</td></tr><tr><td>—i</td><td>前自减</td><td>int j = —i;</td><td>i = i - 1; j = i;</td></tr><tr><td>i—</td><td>后自减</td><td>int j = i—;</td><td>j = i; i = i - 1;</td></tr></tbody></table></div><p><strong>示例分析：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> x++;  <span class="comment">// y=5, x=6</span></span><br><span class="line"><span class="type">int</span> <span class="variable">z</span> <span class="operator">=</span> ++x;  <span class="comment">// x=7, z=7</span></span><br></pre></td></tr></table></figure></p><h2 id="二、关系运算符"><a href="#二、关系运算符" class="headerlink" title="二、关系运算符"></a>二、关系运算符</h2><p>关系运算符用于比较两个值，返回布尔结果：</p><div class="table-container"><table><thead><tr><th>运算符</th><th>名称</th><th>示例</th><th>说明</th></tr></thead><tbody><tr><td>==</td><td>等于</td><td>a == b</td><td>比较值是否相等</td></tr><tr><td>!=</td><td>不等于</td><td>a != b</td><td></td></tr><tr><td>&gt;</td><td>大于</td><td>a &gt; b</td><td></td></tr><tr><td>&lt;</td><td>小于</td><td>a &lt; b</td><td></td></tr><tr><td>&gt;=</td><td>大于等于</td><td>a &gt;= b</td><td></td></tr><tr><td>&lt;=</td><td>小于等于</td><td>a &lt;= b</td></tr></tbody></table></div><p><strong>注意事项：</strong></p><ul><li>比较引用类型时，<code>==</code>比较的是引用地址</li><li>比较字符串内容应使用<code>equals()</code>方法</li></ul><p><strong>示例：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>, b = <span class="number">20</span>;</span><br><span class="line">System.out.println(a == b);  <span class="comment">// false</span></span><br><span class="line">System.out.println(a != b);  <span class="comment">// true</span></span><br><span class="line">System.out.println(a &gt; b);   <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">System.out.println(s1 == s2);      <span class="comment">// false (不同对象)</span></span><br><span class="line">System.out.println(s1.equals(s2)); <span class="comment">// true (内容相同)</span></span><br></pre></td></tr></table></figure></p><h2 id="三、逻辑运算符"><a href="#三、逻辑运算符" class="headerlink" title="三、逻辑运算符"></a>三、逻辑运算符</h2><h3 id="1-基本逻辑运算符"><a href="#1-基本逻辑运算符" class="headerlink" title="1. 基本逻辑运算符"></a>1. 基本逻辑运算符</h3><div class="table-container"><table><thead><tr><th>运算符</th><th>名称</th><th>示例</th><th>说明</th></tr></thead><tbody><tr><td>&amp;&amp;</td><td>逻辑与</td><td>a &amp;&amp; b</td><td>短路与</td></tr><tr><td>\</td><td>\</td><td></td><td>逻辑或</td><td>a \</td><td>\</td><td>b</td><td>短路或</td></tr><tr><td>!</td><td>逻辑非</td><td>!a</td><td>取反</td></tr></tbody></table></div><p><strong>短路特性示例：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> (x &lt; <span class="number">4</span>) &amp;&amp; (x++ &lt; <span class="number">10</span>); </span><br><span class="line"><span class="comment">// 第一个条件为false，第二个不执行</span></span><br><span class="line">System.out.println(x);  <span class="comment">// 仍为5</span></span><br></pre></td></tr></table></figure></p><h3 id="2-位运算符"><a href="#2-位运算符" class="headerlink" title="2. 位运算符"></a>2. 位运算符</h3><div class="table-container"><table><thead><tr><th>运算符</th><th>名称</th><th>示例</th><th>说明</th></tr></thead><tbody><tr><td>&amp;</td><td>位与</td><td>a &amp; b</td><td>按位与</td></tr><tr><td>\</td><td></td><td>位或</td><td>a \</td><td>b</td><td>按位或</td></tr><tr><td>^</td><td>位异或</td><td>a ^ b</td><td>相同为0，不同为1</td></tr><tr><td>~</td><td>位非</td><td>~a</td><td>按位取反</td></tr><tr><td>&lt;&lt;</td><td>左移</td><td>a &lt;&lt; 2</td><td>左移，低位补0</td></tr><tr><td>&gt;&gt;</td><td>右移</td><td>a &gt;&gt; 2</td><td>右移，高位补符号位</td></tr><tr><td>&gt;&gt;&gt;</td><td>无符号右移</td><td>a &gt;&gt;&gt; 2</td><td>右移，高位补0</td></tr></tbody></table></div><p><strong>位运算示例：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">60</span>;    <span class="comment">// 60 = 0011 1100</span></span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">13</span>;    <span class="comment">// 13 = 0000 1101</span></span><br><span class="line">System.out.println(a &amp; b);   <span class="comment">// 12 = 0000 1100</span></span><br><span class="line">System.out.println(a | b);   <span class="comment">// 61 = 0011 1101</span></span><br><span class="line">System.out.println(a ^ b);   <span class="comment">// 49 = 0011 0001</span></span><br><span class="line">System.out.println(~a);      <span class="comment">// -61 = 1100 0011</span></span><br><span class="line">System.out.println(a &lt;&lt; <span class="number">2</span>);  <span class="comment">// 240 = 1111 0000</span></span><br><span class="line">System.out.println(a &gt;&gt; <span class="number">2</span>);  <span class="comment">// 15 = 0000 1111</span></span><br></pre></td></tr></table></figure></p><h2 id="四、赋值运算符"><a href="#四、赋值运算符" class="headerlink" title="四、赋值运算符"></a>四、赋值运算符</h2><h3 id="1-基本赋值运算符"><a href="#1-基本赋值运算符" class="headerlink" title="1. 基本赋值运算符"></a>1. 基本赋值运算符</h3><div class="table-container"><table><thead><tr><th>运算符</th><th>示例</th><th>等价于</th></tr></thead><tbody><tr><td>=</td><td>a = b</td><td></td></tr><tr><td>+=</td><td>a += b</td><td>a = a + b</td></tr><tr><td>-=</td><td>a -= b</td><td>a = a - b</td></tr><tr><td>*=</td><td>a *= b</td><td>a = a * b</td></tr><tr><td>/=</td><td>a /= b</td><td>a = a / b</td></tr><tr><td>%=</td><td>a %= b</td><td>a = a % b</td></tr></tbody></table></div><p><strong>复合赋值示例：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">x += <span class="number">5</span>;   <span class="comment">// x = 15</span></span><br><span class="line">x *= <span class="number">2</span>;   <span class="comment">// x = 30</span></span><br><span class="line">x %= <span class="number">7</span>;   <span class="comment">// x = 2</span></span><br></pre></td></tr></table></figure></p><h3 id="2-位运算赋值运算符"><a href="#2-位运算赋值运算符" class="headerlink" title="2. 位运算赋值运算符"></a>2. 位运算赋值运算符</h3><div class="table-container"><table><thead><tr><th>运算符</th><th>示例</th><th>等价于</th></tr></thead><tbody><tr><td>&amp;=</td><td>a &amp;= b</td><td>a = a &amp; b</td></tr><tr><td>\</td><td>=</td><td>a \</td><td>= b</td><td>a = a \</td><td>b</td></tr><tr><td>^=</td><td>a ^= b</td><td>a = a ^ b</td></tr><tr><td>&lt;&lt;=</td><td>a &lt;&lt;= b</td><td>a = a &lt;&lt; b</td></tr><tr><td>&gt;&gt;=</td><td>a &gt;&gt;= b</td><td>a = a &gt;&gt; b</td></tr><tr><td>&gt;&gt;&gt;=</td><td>a &gt;&gt;&gt;= b</td><td>a = a &gt;&gt;&gt; b</td></tr></tbody></table></div><h2 id="五、条件运算符（三元运算符）"><a href="#五、条件运算符（三元运算符）" class="headerlink" title="五、条件运算符（三元运算符）"></a>五、条件运算符（三元运算符）</h2><p>语法：<code>条件 ? 表达式1 : 表达式2</code></p><p><strong>示例：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>, b = <span class="number">20</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> (a &gt; b) ? a : b;  <span class="comment">// max = 20</span></span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> (score &gt;= <span class="number">60</span>) ? <span class="string">&quot;及格&quot;</span> : <span class="string">&quot;不及格&quot;</span>;</span><br></pre></td></tr></table></figure></p><h2 id="六、instanceof运算符"><a href="#六、instanceof运算符" class="headerlink" title="六、instanceof运算符"></a>六、instanceof运算符</h2><p>用于检查对象是否是特定类的实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">System.out.println(obj <span class="keyword">instanceof</span> String);  <span class="comment">// true</span></span><br><span class="line">System.out.println(obj <span class="keyword">instanceof</span> Integer); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Vehicle</span> &#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span> <span class="keyword">extends</span> <span class="title class_">Vehicle</span> &#123;&#125;</span><br><span class="line"><span class="type">Car</span> <span class="variable">car</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Car</span>();</span><br><span class="line">System.out.println(car <span class="keyword">instanceof</span> Vehicle); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h2 id="七、运算符优先级"><a href="#七、运算符优先级" class="headerlink" title="七、运算符优先级"></a>七、运算符优先级</h2><p>下表按优先级从高到低排列：</p><div class="table-container"><table><thead><tr><th>优先级</th><th>运算符</th><th>结合性</th></tr></thead><tbody><tr><td>1</td><td>() [] .</td><td>左→右</td></tr><tr><td>2</td><td>! ~ ++ — +(正) -(负)</td><td>右→左</td></tr><tr><td>3</td><td>* / %</td><td>左→右</td></tr><tr><td>4</td><td>+ -</td><td>左→右</td></tr><tr><td>5</td><td>&lt;&lt; &gt;&gt; &gt;&gt;&gt;</td><td>左→右</td></tr><tr><td>6</td><td>&lt; &lt;= &gt; &gt;= instanceof</td><td>左→右</td></tr><tr><td>7</td><td>== !=</td><td>左→右</td></tr><tr><td>8</td><td>&amp;</td><td>左→右</td></tr><tr><td>9</td><td>^</td><td>左→右</td></tr><tr><td>10</td><td>\</td><td></td><td>左→右</td></tr><tr><td>11</td><td>&amp;&amp;</td><td>左→右</td></tr><tr><td>12</td><td>\</td><td>\</td><td></td><td>左→右</td></tr><tr><td>13</td><td>?:</td><td>右→左</td></tr><tr><td>14</td><td>= += -= *= /= %= &amp;= \</td><td>= ^= &lt;&lt;= &gt;&gt;= &gt;&gt;&gt;=</td><td>右→左</td></tr></tbody></table></div><p><strong>优先级示例：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">5</span> + <span class="number">3</span> * <span class="number">2</span>;      <span class="comment">// 11 (乘法优先)</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="number">5</span> &gt; <span class="number">3</span> &amp;&amp; <span class="number">2</span> &lt; <span class="number">4</span>; <span class="comment">// true (关系运算优先)</span></span><br></pre></td></tr></table></figure></p><h2 id="八、特殊运算符技巧"><a href="#八、特殊运算符技巧" class="headerlink" title="八、特殊运算符技巧"></a>八、特殊运算符技巧</h2><h3 id="1-交换变量值"><a href="#1-交换变量值" class="headerlink" title="1. 交换变量值"></a>1. 交换变量值</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">5</span>, b = <span class="number">10</span>;</span><br><span class="line">a = a ^ b;</span><br><span class="line">b = a ^ b;</span><br><span class="line">a = a ^ b;</span><br><span class="line"><span class="comment">// 现在 a=10, b=5</span></span><br></pre></td></tr></table></figure><h3 id="2-判断奇偶"><a href="#2-判断奇偶" class="headerlink" title="2. 判断奇偶"></a>2. 判断奇偶</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ((num &amp; <span class="number">1</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;偶数&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;奇数&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-快速乘除2的幂次"><a href="#3-快速乘除2的幂次" class="headerlink" title="3. 快速乘除2的幂次"></a>3. 快速乘除2的幂次</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">8</span>;</span><br><span class="line">n = n &lt;&lt; <span class="number">1</span>;  <span class="comment">// n*2 = 16</span></span><br><span class="line">n = n &gt;&gt; <span class="number">2</span>;  <span class="comment">// n/4 = 4</span></span><br></pre></td></tr></table></figure><h2 id="九、常见问题与陷阱"><a href="#九、常见问题与陷阱" class="headerlink" title="九、常见问题与陷阱"></a>九、常见问题与陷阱</h2><ol><li><p><strong>整数除法</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">double</span> <span class="variable">d</span> <span class="operator">=</span> <span class="number">5</span> / <span class="number">2</span>;  <span class="comment">// 2.0 (不是2.5)</span></span><br><span class="line"><span class="type">double</span> <span class="variable">d2</span> <span class="operator">=</span> <span class="number">5.0</span> / <span class="number">2</span>; <span class="comment">// 2.5</span></span><br></pre></td></tr></table></figure></li><li><p><strong>浮点数比较</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 错误方式</span></span><br><span class="line"><span class="keyword">if</span> (f1 == f2) &#123;...&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确方式</span></span><br><span class="line"><span class="keyword">if</span> (Math.abs(f1 - f2) &lt; <span class="number">1e-6</span>) &#123;...&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>字符串比较</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">System.out.println(s1 == s2);      <span class="comment">// false</span></span><br><span class="line">System.out.println(s1.equals(s2)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li><li><p><strong>运算符优先级混淆</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">5</span> + <span class="number">3</span> * <span class="number">2</span>;    <span class="comment">// 11 不是16</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">5</span> &gt; <span class="number">3</span> == <span class="literal">true</span>; <span class="comment">// true (5&gt;3为true，true==true)</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 结构速查 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java快速学习速查（1）</title>
      <link href="/2025/03/31/java%E5%BF%AB%E9%80%9F%E5%AD%A6%E4%B9%A0%E9%80%9F%E6%9F%A5%EF%BC%881%EF%BC%89/"/>
      <url>/2025/03/31/java%E5%BF%AB%E9%80%9F%E5%AD%A6%E4%B9%A0%E9%80%9F%E6%9F%A5%EF%BC%881%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="java快速学习速查（1）"><a href="#java快速学习速查（1）" class="headerlink" title="java快速学习速查（1）"></a>java快速学习速查（1）</h1><blockquote><p>在经历了艰苦卓绝的思想斗争之后，我决定走Java的全栈开发，这是个很难走的路线，但是这是最合适现在的环境的（自认为）</p></blockquote><p>我将会在一周内快速解决Java的本体基础学习，会在乐扣上用题目辅助</p><p>注意：这是全栈学习的开端，而且必须要快！！<br>我将以更系统化和结构化的方式为你整理Java基础语法内容，并补充更多实用细节和示例。</p><blockquote><p>这篇文章涉及Java基础语法，注释，对象和类，基本数据类型</p></blockquote><h1 id="Java基础语法全面解析"><a href="#Java基础语法全面解析" class="headerlink" title="Java基础语法全面解析"></a>Java基础语法全面解析</h1><p>一个 Java 程序可以认为是一系列对象的集合，而这些对象通过调用彼此的方法来协同工作。下面简要介绍下类、对象、方法和实例变量的概念。</p><ul><li><strong>对象</strong>：对象是类的一个实例，有状态和行为。例如，一条狗是一个对象，它的状态有：颜色、名字、品种；行为有：摇尾巴、叫、吃等。</li><li><strong>类</strong>：类是一个模板，它描述一类对象的行为和状态。</li><li>方法：方法就是行为，一个类可以有很多方法。逻辑运算、数据修改以及所有动作都是在方法中完成的。</li><li><strong>实例变量：</strong>每个对象都有独特的实例变量，对象的状态由这些实例变量的值决定。</li></ul><h2 id="一、程序结构核心概念"><a href="#一、程序结构核心概念" class="headerlink" title="一、程序结构核心概念"></a>一、程序结构核心概念</h2><p>这是构成Java语法结构的最基本框架</p><ol><li><p><strong>类与对象</strong></p><ul><li>类：对象的蓝图/模板<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span> &#123;  <span class="comment">// 类名首字母大写</span></span><br><span class="line">    <span class="comment">// 类内容</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>对象：类的具体实例<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Dog</span> <span class="variable">myDog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();  <span class="comment">// 创建Dog类的对象</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>main方法详解</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">// 程序入口必须严格按此格式</span></span><br><span class="line">    <span class="comment">// public: 访问修饰符</span></span><br><span class="line">    <span class="comment">// static: 静态方法</span></span><br><span class="line">    <span class="comment">// void: 无返回值</span></span><br><span class="line">    <span class="comment">// String[] args: 命令行参数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="二、命名规范与语法规则"><a href="#二、命名规范与语法规则" class="headerlink" title="二、命名规范与语法规则"></a>二、命名规范与语法规则</h3><p>编写 Java 程序时，应注意以下几点：</p><ul><li><strong>大小写敏感</strong>：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。<br>-<strong> 类名：</strong>对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。<br>-<strong> 方法名：</strong>所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。<br>-<strong> 源文件名：</strong>源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。<br>-<strong> 主方法入口：</strong>所有的 Java 程序由 public static void main(String[] args) 方法开始执行。<br>| 元素类型 | 规范示例 | 错误示例 |<br>|————-|————-|————-|<br>| 类名    | <code>MyFirstClass</code> | <code>myFirstClass</code> |<br>| 方法名  | <code>calculateTotal()</code> | <code>CalculateTotal()</code> |<br>| 变量名  | <code>studentCount</code> | <code>StudentCount</code> |<br>| 常量名  | <code>MAX_VALUE</code> | <code>max_value</code> |</li></ul><p><strong>重要规则</strong>：</p><ul><li>源文件名必须与public类名完全匹配（包括大小写）</li><li>一个.java文件只能有一个public类</li></ul><h2 id="三、数据类型深度解析"><a href="#三、数据类型深度解析" class="headerlink" title="三、数据类型深度解析"></a>三、数据类型深度解析</h2><ol><li><p><strong>基本数据类型</strong>（8种）</p><p>| 类型    | 大小    | 范围/示例 |<br>|————|————|—————|<br>| byte   | 8位    | -128 ~ 127 |<br>| short  | 16位   | -32768 ~ 32767 |<br>| int    | 32位   | -2^31 ~ 2^31-1 |<br>| long   | 64位   | 需加L后缀：<code>100L</code> |<br>| float  | 32位   | 需加f后缀：<code>3.14f</code> |<br>| double | 64位   | 默认小数类型 |<br>| char   | 16位   | <code>&#39;A&#39;</code> 或 Unicode |<br>| boolean| -      | <code>true/false</code> |</p></li><li><p><strong>引用数据类型</strong></p><ul><li>类对象：<code>String str = &quot;Hello&quot;</code></li><li>数组：<code>int[] arr = new int[5]</code></li><li>接口：<code>List&lt;String&gt; list</code></li></ul></li></ol><h2 id="四、变量类型对比"><a href="#四、变量类型对比" class="headerlink" title="四、变量类型对比"></a>四、变量类型对比</h2><div class="table-container"><table><thead><tr><th>变量类型</th><th>声明位置</th><th>生命周期</th><th>初始化要求</th></tr></thead><tbody><tr><td>局部变量</td><td>方法/块内</td><td>方法/块执行期间</td><td>必须显式初始化</td></tr><tr><td>实例变量</td><td>类内方法外</td><td>对象存在期间</td><td>自动初始化(0/false/null)</td></tr><tr><td>类变量</td><td>类内+static</td><td>程序运行期间</td><td>自动初始化</td></tr></tbody></table></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VariableDemo</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> classVar;  <span class="comment">// 类变量</span></span><br><span class="line">    </span><br><span class="line">    String instanceVar;   <span class="comment">// 实例变量</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">localVar</span> <span class="operator">=</span> <span class="number">10</span>; <span class="comment">// 局部变量必须初始化</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="五、数组使用详解"><a href="#五、数组使用详解" class="headerlink" title="五、数组使用详解"></a>五、数组使用详解</h2><ol><li><p><strong>声明与初始化</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方式1</span></span><br><span class="line"><span class="type">int</span>[] arr1 = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>];  <span class="comment">// [0,0,0]</span></span><br><span class="line"><span class="comment">// 方式2</span></span><br><span class="line"><span class="type">int</span>[] arr2 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line"><span class="comment">// 方式3</span></span><br><span class="line"><span class="type">int</span>[] arr3 = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br></pre></td></tr></table></figure></li><li><p><strong>多维数组</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[][] matrix = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>][<span class="number">3</span>];</span><br><span class="line">matrix[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br></pre></td></tr></table></figure></li></ol><h2 id="六、枚举-Enum-高级用法"><a href="#六、枚举-Enum-高级用法" class="headerlink" title="六、枚举(Enum)高级用法"></a>六、枚举(Enum)高级用法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Pizza</span> &#123;</span><br><span class="line">    <span class="keyword">enum</span> <span class="title class_">Size</span> &#123;</span><br><span class="line">        SMALL(<span class="string">&quot;S&quot;</span>), MEDIUM(<span class="string">&quot;M&quot;</span>), LARGE(<span class="string">&quot;L&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">private</span> String abbreviation;</span><br><span class="line">        </span><br><span class="line">        Size(String abbreviation) &#123;</span><br><span class="line">            <span class="built_in">this</span>.abbreviation = abbreviation;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">getAbbreviation</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> abbreviation;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Size</span> <span class="variable">size</span> <span class="operator">=</span> Size.MEDIUM;</span><br><span class="line">        System.out.println(size.getAbbreviation()); <span class="comment">// 输出 M</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="七、核心关键字分类说明"><a href="#七、核心关键字分类说明" class="headerlink" title="七、核心关键字分类说明"></a>七、核心关键字分类说明</h2><p>如果你要关键字全集<a href="https://www.runoob.com/java/java-basic-syntax.html">点这里</a></p><ol><li><p><strong>访问控制</strong></p><ul><li><code>private</code>：仅本类可见</li><li><code>protected</code>：本包+子类可见</li><li><code>public</code>：所有类可见</li><li>默认(不写)：本包可见</li></ul></li><li><p><strong>类与对象</strong></p><ul><li><code>new</code>：创建对象 <code>Dog d = new Dog()</code></li><li><code>this</code>：指代当前对象</li><li><code>super</code>：指代父类对象</li></ul></li><li><p><strong>流程控制</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// if-else</span></span><br><span class="line"><span class="keyword">if</span>(condition) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(condition2) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// switch (Java 12+支持表达式形式)</span></span><br><span class="line"><span class="type">int</span> <span class="variable">day</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">dayType</span> <span class="operator">=</span> <span class="keyword">switch</span>(day) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> -&gt; <span class="string">&quot;Weekday&quot;</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">6</span>, <span class="number">7</span> -&gt; <span class="string">&quot;Weekend&quot;</span>;</span><br><span class="line">    <span class="keyword">default</span> -&gt; <span class="string">&quot;Invalid&quot;</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol><h2 id="八、注释规范"><a href="#八、注释规范" class="headerlink" title="八、注释规范"></a>八、注释规范</h2><ol><li><p><strong>单行注释</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这是单行注释</span></span><br></pre></td></tr></table></figure></li><li><p><strong>多行注释</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 这是多行注释</span></span><br><span class="line"><span class="comment"> * 可以跨越多行</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure></li><li><p><strong>文档注释</strong>（生成API文档）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 计算两个数的和</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> a 第一个加数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> b 第二个加数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 两数之和</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="九、编译与执行流程"><a href="#九、编译与执行流程" class="headerlink" title="九、编译与执行流程"></a>九、编译与执行流程</h2><ol><li><p><strong>完整步骤</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 编写HelloWorld.java</span><br><span class="line">2. 编译: javac HelloWorld.java → 生成HelloWorld.class</span><br><span class="line">3. 运行: java HelloWorld</span><br></pre></td></tr></table></figure></li><li><p><strong>常见问题解决</strong></p><ul><li>编码问题：<code>javac -encoding UTF-8 HelloWorld.java</code></li><li>类路径问题：<code>java -cp . HelloWorld</code></li></ul></li><li><p><strong>JVM执行过程</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">源代码(.java) → 编译器 → 字节码(.class) → JVM → 机器码</span><br></pre></td></tr></table></figure></li></ol><h2 id="十、面向对象核心概念"><a href="#十、面向对象核心概念" class="headerlink" title="十、面向对象核心概念"></a>十、面向对象核心概念</h2><ol><li><p><strong>继承示例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Eating...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">bark</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Barking...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>接口示例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Drawable</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span>;  <span class="comment">// 默认public abstract</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span> <span class="keyword">implements</span> <span class="title class_">Drawable</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Drawing circle&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="最佳实践建议"><a href="#最佳实践建议" class="headerlink" title="最佳实践建议"></a>最佳实践建议</h2><ol><li><p><strong>代码风格</strong></p><ul><li>类名使用大驼峰：<code>MyClass</code></li><li>方法名使用小驼峰：<code>myMethod()</code></li><li>常量全大写：<code>MAX_COUNT</code></li></ul></li><li><p><strong>调试技巧</strong></p><ul><li>使用<code>System.out.println()</code>进行简单调试</li><li>学会阅读编译错误信息</li><li>使用IDE的调试功能（如IntelliJ IDEA）</li></ul></li></ol><h1 id="Java注释全面指南"><a href="#Java注释全面指南" class="headerlink" title="Java注释全面指南"></a>Java注释全面指南</h1><p>注释是编程中不可或缺的部分，好的注释能极大提升代码可读性和可维护性。下面我将详细讲解Java中的三种注释类型及其最佳实践。</p><p>你自己读得懂代码才行啊。</p><h2 id="一、注释类型详解"><a href="#一、注释类型详解" class="headerlink" title="一、注释类型详解"></a>一、注释类型详解</h2><h3 id="1-单行注释（Single-line）"><a href="#1-单行注释（Single-line）" class="headerlink" title="1. 单行注释（Single-line）"></a>1. 单行注释（Single-line）</h3><p><strong>语法</strong>：<code>// 注释内容</code></p><p><strong>特点</strong>：</p><ul><li>从<code>//</code>开始到行尾</li><li>适用于简短解释或行尾说明</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 计算订单总金额</span></span><br><span class="line"><span class="type">double</span> <span class="variable">total</span> <span class="operator">=</span> price * quantity;  <span class="comment">// price是单价，quantity是数量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 下面这行代码被暂时禁用</span></span><br><span class="line"><span class="comment">// System.out.println(&quot;调试信息&quot;);</span></span><br></pre></td></tr></table></figure><h3 id="2-多行注释（Multi-line）"><a href="#2-多行注释（Multi-line）" class="headerlink" title="2. 多行注释（Multi-line）"></a>2. 多行注释（Multi-line）</h3><p><strong>语法</strong>：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/* </span><br><span class="line"> * 注释内容</span><br><span class="line"> * 可以跨越多行</span><br><span class="line"> */</span><br></pre></td></tr></table></figure></p><p><strong>特点</strong>：</p><ul><li>以<code>/*</code>开始，<code>*/</code>结束</li><li>适合较长的解释说明或临时屏蔽代码块</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 这段代码实现了用户登录验证功能</span></span><br><span class="line"><span class="comment"> * 包含以下步骤：</span></span><br><span class="line"><span class="comment"> * 1. 检查用户名格式</span></span><br><span class="line"><span class="comment"> * 2. 验证密码强度</span></span><br><span class="line"><span class="comment"> * 3. 查询数据库匹配</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">loginSuccess</span> <span class="operator">=</span> validateLogin(username, password);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 临时注释掉的代码块</span></span><br><span class="line"><span class="comment">if(debugMode) &#123;</span></span><br><span class="line"><span class="comment">    logger.log(&quot;进入支付流程&quot;);</span></span><br><span class="line"><span class="comment">    processPayment();</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="3-文档注释（Javadoc）"><a href="#3-文档注释（Javadoc）" class="headerlink" title="3. 文档注释（Javadoc）"></a>3. 文档注释（Javadoc）</h3><p>这玩意在大型工程基本上才用得到，一般情况用不到<br><strong>语法</strong>：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 描述信息</span><br><span class="line"> * @tag 标签内容</span><br><span class="line"> */</span><br></pre></td></tr></table></figure></p><p><strong>特点</strong>：</p><ul><li>以<code>/**</code>开始，<code>*/</code>结束</li><li>用于生成正式的API文档</li><li>支持HTML标签和特殊标记</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 计算两个数的和</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;该方法接受两个整数参数，返回它们的算术和&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> a 第一个加数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> b 第二个加数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 两个参数的和</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IllegalArgumentException 如果参数为负数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(a &lt; <span class="number">0</span> || b &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;参数不能为负数&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二、Javadoc常用标签"><a href="#二、Javadoc常用标签" class="headerlink" title="二、Javadoc常用标签"></a>二、Javadoc常用标签</h2><p>标签很重要，但不是现在说的</p><div class="table-container"><table><thead><tr><th>标签</th><th>用途</th><th>适用对象</th></tr></thead><tbody><tr><td><code>@param</code></td><td>方法参数说明</td><td>方法</td></tr><tr><td><code>@return</code></td><td>返回值说明</td><td>方法</td></tr><tr><td><code>@throws</code>/<code>@exception</code></td><td>抛出异常说明</td><td>方法</td></tr><tr><td><code>@see</code></td><td>参考链接</td><td>类/方法/字段</td></tr><tr><td><code>@deprecated</code></td><td>标记已过时</td><td>类/方法/字段</td></tr><tr><td><code>@since</code></td><td>引入版本</td><td>类/方法/字段</td></tr><tr><td><code>@version</code></td><td>版本信息</td><td>类</td></tr><tr><td><code>@author</code></td><td>作者信息</td><td>类</td></tr></tbody></table></div><p><strong>示例</strong>：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 表示二维点的类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> John Doe</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.2</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2020-03-15</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Point</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 计算到另一点的距离</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> other 另一个点对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 两点间的距离</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> Math#sqrt(double)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">distanceTo</span><span class="params">(Point other)</span> &#123;</span><br><span class="line">        <span class="comment">// 实现代码...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="三、注释最佳实践"><a href="#三、注释最佳实践" class="headerlink" title="三、注释最佳实践"></a>三、注释最佳实践</h2><ol><li><p><strong>该注释什么</strong>：</p><ul><li>复杂算法逻辑</li><li>不直观的设计决策</li><li>公共API的用法</li><li>已知问题的临时解决方案</li><li>特殊业务规则</li></ul></li><li><p><strong>不该注释什么</strong>：</p><ul><li>自我解释的简单代码</li><li>重复方法名的信息</li><li>过时的实现细节</li></ul></li><li><p><strong>良好注释示例</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用快速排序因为：</span></span><br><span class="line"><span class="comment">// 1. 数据集通常部分有序</span></span><br><span class="line"><span class="comment">// 2. 空间复杂度要求O(log n)</span></span><br><span class="line"><span class="comment">// 3. 基准测试显示比其他算法快15%</span></span><br><span class="line">sortAlgorithm = <span class="keyword">new</span> <span class="title class_">QuickSort</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 转换日期格式（线程安全版本）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@deprecated</span> 请使用&#123;<span class="doctag">@link</span> DateFormatter#formatSafe(Date)&#125;</span></span><br><span class="line"><span class="comment"> *             因为发现时区处理问题</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Deprecated</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">formatDate</span><span class="params">(Date date)</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>注释风格建议</strong>：</p><ul><li>保持注释与代码同步更新</li><li>使用完整的句子和正确的语法</li><li>避免幽默或不专业的语言</li><li>重点说明”为什么”而不是”做什么”</li></ul></li></ol><h2 id="四、生成API文档"><a href="#四、生成API文档" class="headerlink" title="四、生成API文档"></a>四、生成API文档</h2><p>使用JDK自带的javadoc工具：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javadoc -d docs -encoding UTF-8 -sourcepath src com.example.package</span><br></pre></td></tr></table></figure></p><p>常用参数：</p><ul><li><code>-d</code>：输出目录</li><li><code>-encoding</code>：指定源文件编码</li><li><code>-sourcepath</code>：源代码路径</li><li><code>-author</code>/<code>-version</code>：包含作者/版本信息</li></ul><h2 id="五、特殊注释技巧"><a href="#五、特殊注释技巧" class="headerlink" title="五、特殊注释技巧"></a>五、特殊注释技巧</h2><ol><li><p><strong>调试标记</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 需要优化数据库查询</span></span><br><span class="line"><span class="comment">// <span class="doctag">FIXME:</span> 时区处理有问题</span></span><br></pre></td></tr></table></figure></li><li><p><strong>条件编译</strong>（通过final变量实现）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">DEBUG</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(DEBUG) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;调试信息&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>注释中的代码示例</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用示例：</span></span><br><span class="line"><span class="comment"> * &lt;pre&gt;&#123;<span class="doctag">@code</span></span></span><br><span class="line"><span class="comment"> * List&lt;String&gt; list = new ArrayList&lt;&gt;();</span></span><br><span class="line"><span class="comment"> * list.add(&quot;item&quot;);</span></span><br><span class="line"><span class="comment"> * &#125;&lt;/pre&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p>接下来是很重要的一个部分</p><h1 id="Java对象和类深度解析"><a href="#Java对象和类深度解析" class="headerlink" title="Java对象和类深度解析"></a>Java对象和类深度解析</h1></li></ol><p>面向对象编程(OOP)是Java的核心思想，下面我将从实际开发角度，通过丰富的示例详细讲解Java中类和对象的各个方面。</p><h2 id="一、类与对象全面解析"><a href="#一、类与对象全面解析" class="headerlink" title="一、类与对象全面解析"></a>一、类与对象全面解析</h2><p>Java 作为一种面向对象的编程语言，支持以下基本概念：</p><h3 id="概念解释和简单示例"><a href="#概念解释和简单示例" class="headerlink" title="概念解释和简单示例"></a>概念解释和简单示例</h3><h4 id="1、类（Class）："><a href="#1、类（Class）：" class="headerlink" title="1、类（Class）："></a>1、类（Class）：</h4><p>定义对象的蓝图，包括属性和方法。</p><blockquote><p>示例：public class Car { … }</p></blockquote><p>构建蓝图：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Car</span> &#123;<span class="comment">// 类名首字母大写</span></span><br><span class="line">    <span class="comment">// 属性(特征)</span></span><br><span class="line">    String brand;  <span class="comment">// 品牌</span></span><br><span class="line">    String color;  <span class="comment">// 颜色</span></span><br><span class="line">    <span class="type">int</span> year;      <span class="comment">// 年份</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 行为（功能）     成员方法</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">drive</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Driving...&quot;</span>);</span><br><span class="line">    &#125;<span class="comment">//不带public也可以</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//行为（功能）     成员方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">stop</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Stopping...&quot;</span>);</span><br><span class="line">    &#125;<span class="comment">//携带public的成员方法，在其他类中可以直接调用</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果不带public，在其他类中不能直接调用,需要创建对象，再调用</span></span><br><span class="line">    <span class="comment">//为了方便调用，一般都带上public</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="2、对象（Object）："><a href="#2、对象（Object）：" class="headerlink" title="2、对象（Object）："></a>2、对象（Object）：</h4><p>类的实例，具有状态和行为。</p><blockquote><p>示例：Car myCar = new Car();<br>实例化对象：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建Car类的对象</span></span><br><span class="line"><span class="type">Car</span> <span class="variable">myCar</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Car</span>();<span class="comment">//myCar是对象名，Car是类名，new Car()是实例化对象</span></span><br><span class="line"><span class="comment">// 访问对象的属性和方法</span></span><br><span class="line">myCar.brand = <span class="string">&quot;Toyota&quot;</span>;<span class="comment">//给对象的属性赋值</span></span><br><span class="line">myCar.color = <span class="string">&quot;Red&quot;</span>;<span class="comment">//给对象的属性赋值</span></span><br><span class="line">myCar.year = <span class="number">2020</span>;<span class="comment">//给对象的属性赋值</span></span><br><span class="line">myCar.drive();<span class="comment">//调用对象的方法</span></span><br><span class="line">myCar.stop();<span class="comment">//调用对象的方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 另一个Car对象</span></span><br><span class="line"><span class="type">Car</span> <span class="variable">yourCar</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Car</span>();</span><br><span class="line">yourCar.brand = <span class="string">&quot;Honda&quot;</span>;</span><br><span class="line">yourCar.color = <span class="string">&quot;Blue&quot;</span>;</span><br><span class="line">yourCar.year = <span class="number">2019</span>;</span><br><span class="line">yourCar.drive();</span><br><span class="line">yourCar.stop();</span><br></pre></td></tr></table></figure><p><strong>调用对象的时候如果不在同一个类中，需要创建对象，再调用（记得导入包）不导包绝对炸</strong></p><p><strong>成员变量和局部变量的区别：</strong><br>1、定义位置：</p><ul><li>成员变量：定义在类中，方法外。</li><li>局部变量：定义在方法中，参数列表或方法体中,包含方法的形参<br>2、作用域：</li><li>成员变量：从该类的实例被创建时就存在，直到系统销毁这个实例。</li><li>局部变量：只在定义它的方法中有效，出了方法用不了。<br>3、默认值：</li><li>成员变量：有默认值，如int为0，boolean为false，String为null。</li><li>局部变量：没有默认值，必须先定义、初始化才能使用。<br>4、生命周期：</li><li>成员变量：和对象一样，对象被销毁了就回收了。</li><li>局部变量：和方法一样，方法被调用，或者方法执行完毕就回收了。</li></ul><p><strong>成员变量的生命周期比局部变量的要长</strong></p><p>5、内存位置：</p><ul><li>成员变量：堆内存，new位于堆内存。</li><li>局部变量：位于栈内存。</li></ul><h4 id="3、继承（Inheritance）："><a href="#3、继承（Inheritance）：" class="headerlink" title="3、继承（Inheritance）："></a>3、继承（Inheritance）：</h4><p>继承是用来解决代码复用的问题，方便维护和扩展。</p><p>一个类可以继承另一个类的属性和方法。<br>多个类存在相同的属性和方法时，可以从这些类中派生出一个新类，这个新类能吸收了它们的属性和方法。并能拓展新的能力。</p><blockquote><p>示例：public class Dog extends Animal { … }</p></blockquote><ul><li>父类：可以叫做父类，基类，超类。</li><li>子类：可以叫做子类，派生类，扩展类。</li></ul><p><strong>继承的特性</strong></p><ul><li>子类可以继承父类的属性和方法。（儿子继承爹）</li><li>子类可以拓展自己的属性和方法。（儿子可以有自己的属性和方法）</li><li>子类可以重写父类的方法。（儿子可以有自己的方法，但是方法名和父类的方法名一样，方法体不一样）</li><li>子类可以访问父类的构造方法。（儿子可以有自己的构造方法，但是构造方法名和父类的构造方法名一样，方法体不一样）</li></ul><blockquote><p>想要继承任何东西，名字得不重名，方法名也不重名。并且有最近原则，优先子类的方法。</p></blockquote><p><strong>注意</strong></p><ul><li>子类不能继承父类的<strong>构造方法</strong>。（儿子不能有自己的构造方法，但是可以有自己的方法）</li><li>子类不能继承父类的<strong>私有属性和方法</strong>。（儿子不能继承爹的隐私）</li><li>子类可以继承父类的静态属性和方法。（儿子可以继承爹的静态属性和方法）</li><li>如果子类和父类有同名的属性和方法，子类会覆盖<code>（重写）</code>父类的属性和方法。但是子类可以通过super关键字访问父类的属性和方法。（揭老爹老底）<br><strong>super用法：</strong></li><li>1、super.属性名：访问父类的属性。</li><li>2、super.方法名()：调用父类的方法。</li><li>3、super()：调用父类的构造方法。</li></ul><p><strong>重写</strong>：<br>@Override：重写的注解，用于检查方法是否正确重写了父类的方法。<br>写法如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span> <span class="comment">//重写的注解，用于检查方法是否正确重写了父类的方法。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>.eat();<span class="comment">//调用父类的方法</span></span><br><span class="line">    System.out.println(<span class="string">&quot;在学校食堂&quot;</span>);<span class="comment">//拓展新的能力</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p><strong>方法重写要求：</strong>一、方法名参数列表啥的都得一样。二、返回值得小于等于父类的返回值范围。三、访问修饰符的范围大于等于父类的访问修饰符范围。四、抛出的异常的范围小于等于父类的抛出的异常范围。</p></blockquote><p><strong>访问权限大小关系：public &gt; protected &gt; 默认 &gt; private</strong></p><p><strong>重写和重载的区别：</strong></p><ul><li>重写：<code>继承</code>体系里面，子类重新编写父类的方法。</li><li>重载：一个类中有多个方法，方法名相同，参数的个数，顺序，类型不同，返回值类型可以相同也可以不同。</li></ul><p><strong>蓝图如下：</strong><code>主要用到的是extends关键字</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 人类父类（基类）</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Human</span> &#123;</span><br><span class="line">    <span class="comment">// 公共属性</span></span><br><span class="line">    <span class="keyword">protected</span> String name;</span><br><span class="line">    <span class="keyword">protected</span> <span class="type">int</span> age;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 构造方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Human</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 基础方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;在吃饭&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 学生子类（派生类）</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Human</span> &#123;</span><br><span class="line">    <span class="comment">// 特有属性</span></span><br><span class="line">    <span class="keyword">private</span> String school;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 构造方法（调用父类构造）</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, <span class="type">int</span> age, String school)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name, age);  <span class="comment">// 必须首先调用父类构造</span></span><br><span class="line">        <span class="built_in">this</span>.school = school;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 特有方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">study</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;在学习&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 方法重写</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.eat();  <span class="comment">// 调用父类方法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;在学校食堂&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>以上蓝图的main方法如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">// 创建人类对象</span></span><br><span class="line">    <span class="type">Human</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Human</span>(<span class="string">&quot;张三&quot;</span>, <span class="number">30</span>);</span><br><span class="line">    person.eat();  <span class="comment">// 调用父类方法</span></span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;----------&quot;</span>);</span><br><span class="line">    <span class="comment">// 创建学生对象</span></span><br><span class="line">    <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;李四&quot;</span>, <span class="number">20</span>, <span class="string">&quot;清华大学&quot;</span>);</span><br><span class="line">    student.eat();  <span class="comment">// 调用重写后的方法</span></span><br><span class="line">    student.study();  <span class="comment">// 调用子类特有方法</span></span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;----------&quot;</span>);</span><br><span class="line">    <span class="comment">// 多态：父类引用指向子类对象</span></span><br><span class="line">    <span class="type">Human</span> <span class="variable">human</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;王五&quot;</span>, <span class="number">22</span>, <span class="string">&quot;北京大学&quot;</span>);</span><br><span class="line">    human.eat();  <span class="comment">// 调用重写后的方法，多态</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">**注意：**`<span class="built_in">super</span>();`会调用父类的无参构造方法，`<span class="built_in">this</span>();`会调用本类的无参构造方法。</span><br><span class="line"></span><br><span class="line">- 子类构造方法的第一行默认有`<span class="built_in">super</span>();`，默认会调用父类的无参构造方法。</span><br><span class="line">- 在类的构造方法中，访问另一个构造方法时，`<span class="built_in">super</span>();`和`<span class="built_in">this</span>();`不能同时出现。只能出现其中的一个。</span><br><span class="line">- `<span class="built_in">super</span>();`和`<span class="built_in">this</span>();`都必须是构造方法的第一行。</span><br><span class="line"></span><br><span class="line">**完整案例如下：**</span><br><span class="line">```java</span><br><span class="line"><span class="comment">// 人类父类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Human</span> &#123;</span><br><span class="line">    <span class="comment">// 公共属性</span></span><br><span class="line">    <span class="keyword">protected</span> String name;</span><br><span class="line">    <span class="keyword">protected</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">protected</span> String gender;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 构造方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Human</span><span class="params">(String name, <span class="type">int</span> age, String gender)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.gender = gender;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 公共方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;正在吃饭&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;正在睡觉&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">introduce</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是&quot;</span> + name + <span class="string">&quot;，今年&quot;</span> + age + <span class="string">&quot;岁，性别&quot;</span> + gender);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 学生子类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Human</span> &#123;</span><br><span class="line">    <span class="comment">// 特有属性</span></span><br><span class="line">    <span class="keyword">private</span> String school;</span><br><span class="line">    <span class="keyword">private</span> String studentId;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 构造方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, <span class="type">int</span> age, String gender, String school, String studentId)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name, age, gender);  <span class="comment">// 调用父类构造器</span></span><br><span class="line">        <span class="built_in">this</span>.school = school;</span><br><span class="line">        <span class="built_in">this</span>.studentId = studentId;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 重写父类方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">introduce</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.introduce();  <span class="comment">// 调用父类方法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;我是&quot;</span> + school + <span class="string">&quot;的学生，学号是&quot;</span> + studentId);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 特有方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">study</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;正在学习&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">takeExam</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;正在参加考试&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HumanStudentExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建人类对象</span></span><br><span class="line">        <span class="type">Human</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Human</span>(<span class="string">&quot;张三&quot;</span>, <span class="number">30</span>, <span class="string">&quot;男&quot;</span>);</span><br><span class="line">        person.introduce();</span><br><span class="line">        person.eat();</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;----------&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 创建学生对象</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;李四&quot;</span>, <span class="number">20</span>, <span class="string">&quot;女&quot;</span>, <span class="string">&quot;清华大学&quot;</span>, <span class="string">&quot;2023001&quot;</span>);</span><br><span class="line">        student.introduce();  <span class="comment">// 调用重写后的方法</span></span><br><span class="line">        student.study();      <span class="comment">// 调用子类特有方法</span></span><br><span class="line">        student.sleep();      <span class="comment">// 调用继承自父类的方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="4、封装（Encapsulation）："><a href="#4、封装（Encapsulation）：" class="headerlink" title="4、封装（Encapsulation）："></a>4、封装（Encapsulation）：</h4><p>在面向对象程序设计模式中，封装是隐藏对象的属性和实现细节，仅对外公开接口，然后通过设置属性访问控制级别来控制属性的读写。</p><p>将对象的状态（字段）私有化，通过公共方法访问。</p><blockquote><p>示例：<br>private String name;<br>public String getName() { return name; }</p></blockquote><p><strong>封装的优点；</strong><br>1.良好的封装能够减少耦合。（高内聚，低耦合）<br>2.类内部的结构可以自由修改。<br>3.可以对成员变量进行更精确的控制。<br>4.隐藏信息，实现细节。</p><p><strong>封装的步骤:</strong><br>1.将属性私有化，使用<code>private</code>关键字修饰。<br>as:<code>private String name;</code><br>2.提供公共的<code>（getter和setter）</code>方法，用于获取和设置属性的值。<br>sa:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>你定义一个类，里面的A你不想被人知道，你就把A私有化，然后提供一个公共的方法，让别人可以获取A的值，但是你不能让别人直接修改A的值，你只能通过这个方法来修改A的值。</p></blockquote><p><strong>说人话就是《在外面身份是自己给的》</strong></p><p><strong>一般用private修饰属性，用public修饰方法。</strong></p><blockquote><p>私有的属性只能在本类中访问，其他类中不能访问。<br>公共的方法可以在其他类中访问私有属性。</p></blockquote><p><strong>this关键字</strong><br>this关键字用于区分局部变量和成员变量的同名问题。</p><blockquote><p>如果局部变量和成员变量的名字相同，那么在方法中访问的是局部变量，</p></blockquote><p>就像这样的情况：（若是不使用this会赋值失败）<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;<span class="comment">//可以看见形参变量名和成员变量名一样</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;<span class="comment">//可以看见形参变量名和成员变量名一样</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>封装例子：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个Person类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="comment">// 私有属性</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用一对getXX()/setXX()方法分别获取和设置这些属性的值，并且对属性进行了封装和隐藏。</span></span><br><span class="line">    <span class="comment">//getter方法用于获取属性的值，setter方法用于设置属性的值。</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 公共方法（getter和setter）</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;   <span class="comment">//获取name属性的值</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;<span class="comment">//this关键字表示当前对象，可以省略</span></span><br><span class="line">    &#125;   <span class="comment">//设置name属性的值 </span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;  </span><br><span class="line">    &#125;   <span class="comment">//获取age属性的值</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (age &gt; <span class="number">0</span> &amp;&amp; age &lt; <span class="number">150</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.age = age;<span class="comment">//this关键字的作用是区分局部变量和成员变量的同名问题。</span></span><br><span class="line">            <span class="comment">//如果局部变量和成员变量的名字相同，那么在方法中访问的是局部变量，</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;您是死灵法师还是练气大成！？&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;   <span class="comment">//设置age属性的值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><strong>在main中调用：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建Person对象</span></span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用setter方法设置属性值</span></span><br><span class="line">        person.setName(<span class="string">&quot;Alice&quot;</span>);</span><br><span class="line">        person.setAge(<span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用getter方法获取属性值</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Name: &quot;</span> + person.getName());</span><br><span class="line">        System.out.println(<span class="string">&quot;Age: &quot;</span> + person.getAge()); </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5、多态（Polymorphism）："><a href="#5、多态（Polymorphism）：" class="headerlink" title="5、多态（Polymorphism）："></a>5、多态（Polymorphism）：</h4><p>对象可以表现为多种形态，主要通过方法重载和方法重写实现。</p><blockquote><p>示例：<br>方法重载：public int add(int a, int b) { … } 和 public double add(double a, double b) { … }<br>方法重写：@Override public void makeSound() { System.out.println(“Meow”); }</p></blockquote><p>详情建议见<a href="http://xhayane.top/2025/04/01/java%E5%BF%AB%E9%80%9F%E5%AD%A6%E4%B9%A0%E9%80%9F%E6%9F%A5%EF%BC%885%EF%BC%89/">java快速学习速查5</a></p><h4 id="6、抽象（Abstraction）："><a href="#6、抽象（Abstraction）：" class="headerlink" title="6、抽象（Abstraction）："></a>6、抽象（Abstraction）：</h4><p><strong>抽象方法：</strong>没有方法体的定义</p><p><strong>抽象类：</strong>包含抽象方法的类，如果一个类有一个抽象方法，那么这个类就是个抽象类，得在类定义上加上<code>abstract</code>关键字。</p><p><strong>抽象的使用：</strong><br>如果该类是个抽象类，他有两个选择</p><ol><li>要么实现父类所有的抽象方法</li><li>要么子类也作为一个抽象类</li></ol><p><strong>警告</strong>：最终必须有子类实现父类的所有抽象方法，不然必然报错<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>;</span><br><span class="line">    <span class="comment">// 如果一个类中有一个抽象方法，那么这个类必须是抽象类</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span>  <span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span>  <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;狗是杂食动物，喜欢吃骨头&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       <span class="type">Dog</span> <span class="variable">d</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">       d.eat();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>使用抽象类和接口来定义必须实现的方法，不提供具体实现。<br>示例：</p><blockquote><p>抽象类：public abstract class Shape { abstract void draw(); }<br>接口：public interface Animal { void eat(); }</p></blockquote><p><strong>抽象类的总结（面试题）</strong></p><ul><li><strong>不能实例化</strong>:抽象类不能通过new来创建对象，这是因为抽象类通常包含一些没有具体实现的方法(抽象方法)，这些方法要在子类中完成</li><li><strong>抽象类必须被继承</strong>：抽象类存在的意义就是为了被继承</li><li><strong>可以包含抽象方法和非抽象方法</strong>：抽象类可以包含抽象方法，也可以包含非抽象方法。</li><li><strong>子类必须实现所有的抽象方法</strong>：如果子类继承了抽象类，那么子类必须实现所有的抽象方法。否则，子类也必须声明为抽象类。</li></ul><h4 id="7、接口（Interface）："><a href="#7、接口（Interface）：" class="headerlink" title="7、接口（Interface）："></a>7、接口（Interface）：</h4><p>定义类必须实现的方法，支持多重继承。</p><blockquote><p>示例：public interface Drivable { void drive(); }</p></blockquote><h4 id="8、方法（Method）："><a href="#8、方法（Method）：" class="headerlink" title="8、方法（Method）："></a>8、方法（Method）：</h4><p>接口是一种<code>引用数据类型</code>,是抽象方法的集合，接口可以理解为一种特殊的类，里面全部是抽象方法，接口是解决java无法使用多继承的一种手段，里面全是抽象方法</p><p>接口的定义和类的定义相似，但是使用<code>Intetface</code>关键字</p><p>定义类的行为，包含在类中的函数。</p><blockquote><p>示例：public void displayInfo() { System.out.println(“Info”); }<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">MyInterFace</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><p>说明：接口中的方法默认是public abstract的，也就说，这两个不写的情况也是public abstract。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">MyInterFace</span> &#123;</span><br><span class="line">    <span class="comment">// 接口里面的抽象方法 可以不需要写 public abstract</span></span><br><span class="line">     <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">()</span>;</span><br><span class="line">     <span class="keyword">void</span> <span class="title function_">method2</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><strong>属性</strong>：接口中的属性默认就是public static final的也就是<code>常量</code>，所以接口中的属性不能被修改。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">MyInterFace</span> &#123;</span><br><span class="line">    <span class="comment">// CTRL+SHIFT+X 大小写转换</span></span><br><span class="line">    String USERNAME=<span class="string">&quot;admin123&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><strong>接口的使用</strong><br>接口跟抽象类类似，不能直接实例化，它可以由一个实现类去实现该接口，注意是用的是实现而不能继<br>承。<br><strong>注意：</strong></p><ul><li>实现接口使用implements关键字，继承是使用extends关键。</li><li>类实现接口就必须实现里面所有的抽象方法，否则它不能定义为实现类。</li><li>不像继承那样，类实现抽象类还可以同时实现多个接口。</li></ul><h4 id="9、方法重载（Method-Overloading）："><a href="#9、方法重载（Method-Overloading）：" class="headerlink" title="9、方法重载（Method Overloading）："></a>9、方法重载（Method Overloading）：</h4><p>同一个类中可以有多个同名的方法，但参数不同。<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public class MathUtils &#123;</span><br><span class="line">    public int add(int a, int b) &#123;</span><br><span class="line">        return a + b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public double add(double a, double b) &#123;</span><br><span class="line">        return a + b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="1-类-Class-的本质"><a href="#1-类-Class-的本质" class="headerlink" title="1. 类(Class)的本质"></a>1. 类(Class)的本质</h3><p><strong>类</strong>是创建对象的模板，它定义了：</p><ul><li><strong>属性</strong>（字段/成员变量）：描述对象的状态</li><li><strong>方法</strong>：定义对象的行为</li><li><strong>构造器</strong>：用于初始化对象</li></ul><p><strong>定义对象的蓝图，包括属性和方法。<br>示例：public class Car { … }</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 汽车类 - 演示类的基本结构</span></span><br><span class="line"><span class="comment"> * 包含字段、方法和构造器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Car</span> &#123;</span><br><span class="line">    <span class="comment">// 字段/属性</span></span><br><span class="line">    <span class="keyword">private</span> String brand;  <span class="comment">// 品牌</span></span><br><span class="line">    <span class="keyword">private</span> String color;  <span class="comment">// 颜色</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> price;  <span class="comment">// 价格</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 构造器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Car</span><span class="params">(String brand, String color, <span class="type">double</span> price)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.brand = brand;</span><br><span class="line">        <span class="built_in">this</span>.color = color;</span><br><span class="line">        <span class="built_in">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">startEngine</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(brand + <span class="string">&quot;汽车引擎启动&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">displayInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.printf(<span class="string">&quot;品牌：%s，颜色：%s，价格：%.2f万\n&quot;</span>, </span><br><span class="line">                         brand, color, price);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Getter和Setter方法</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getBrand</span><span class="params">()</span> &#123; <span class="keyword">return</span> brand; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setColor</span><span class="params">(String color)</span> &#123; <span class="built_in">this</span>.color = color; &#125;</span><br><span class="line">    <span class="comment">// 其他getter/setter...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-对象-Object-的创建与使用"><a href="#2-对象-Object-的创建与使用" class="headerlink" title="2. 对象(Object)的创建与使用"></a>2. 对象(Object)的创建与使用</h3><p><strong>对象</strong>是类的具体实例，创建和使用过程：</p><p>类的实例，具有状态和行为。<br>示例：Car myCar = new Car();**</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CarTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建Car类的实例（对象）</span></span><br><span class="line">        <span class="type">Car</span> <span class="variable">myCar</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Car</span>(<span class="string">&quot;比亚迪&quot;</span>, <span class="string">&quot;红色&quot;</span>, <span class="number">15.99</span>);</span><br><span class="line">        <span class="type">Car</span> <span class="variable">yourCar</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Car</span>(<span class="string">&quot;特斯拉&quot;</span>, <span class="string">&quot;白色&quot;</span>, <span class="number">29.99</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 调用对象方法</span></span><br><span class="line">        myCar.startEngine();  <span class="comment">// 输出：比亚迪汽车引擎启动</span></span><br><span class="line">        yourCar.displayInfo(); <span class="comment">// 输出：品牌：特斯拉，颜色：白色，价格：29.99万</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 修改对象状态</span></span><br><span class="line">        myCar.setColor(<span class="string">&quot;蓝色&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;修改后颜色：&quot;</span> + myCar.getColor());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="访问实例变量和方法"><a href="#访问实例变量和方法" class="headerlink" title="访问实例变量和方法"></a>访问实例变量和方法</h3><p>通过已创建的对象来访问成员变量和成员方法，如下所示：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 实例化对象 */</span></span><br><span class="line"><span class="type">Object</span> <span class="variable">referenceVariable</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Constructor</span>();</span><br><span class="line"><span class="comment">/* 访问类中的变量 */</span></span><br><span class="line">referenceVariable.variableName;</span><br><span class="line"><span class="comment">/* 访问类中的方法 */</span></span><br><span class="line">referenceVariable.methodName();</span><br></pre></td></tr></table></figure><br>使用 Object 类型声明变量只能在编译时访问 Object 类中的方法和属性，但在运行时，你可以通过强制类型转换将其转换为特定类型，以便访问特定类型的方法和属性。</p><h3 id="3-内存模型解析"><a href="#3-内存模型解析" class="headerlink" title="3. 内存模型解析"></a>3. 内存模型解析</h3><p>这是类和对象的内存中的状态解析<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">栈内存(Stack)：</span><br><span class="line">- 存储基本类型变量和对象引用</span><br><span class="line">- myCar (引用地址0x100)</span><br><span class="line">- yourCar (引用地址0x200)</span><br><span class="line"></span><br><span class="line">堆内存(Heap)：</span><br><span class="line">0x100: Car对象 &#123;</span><br><span class="line">    brand = &quot;比亚迪&quot;</span><br><span class="line">    color = &quot;红色&quot; → 修改为&quot;蓝色&quot;</span><br><span class="line">    price = 15.99</span><br><span class="line">&#125;</span><br><span class="line">0x200: Car对象 &#123;</span><br><span class="line">    brand = &quot;特斯拉&quot;</span><br><span class="line">    color = &quot;白色&quot;</span><br><span class="line">    price = 29.99</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="二、构造方法深度探讨"><a href="#二、构造方法深度探讨" class="headerlink" title="二、构造方法深度探讨"></a>二、构造方法深度探讨</h2><p>构造方法用于在创建对象时初始化对象，保证对象的数据完整性。</p><h3 id="1-构造方法特点"><a href="#1-构造方法特点" class="headerlink" title="1. 构造方法特点"></a>1. 构造方法特点</h3><p>每个类都有构造方法。如果没有显式地为类定义构造方法，Java 编译器将会为该类提供一个默认构造方法（自动提供）。</p><p>在创建一个对象的时候，至少要调用一个构造方法。构造方法的名称<strong>必须与类同名</strong>，一个类可以有多个构造方法</p><ul><li>与类同名</li><li>无返回类型（连void都没有）</li><li>可以重载（多个构造方法）构造重载</li><li>默认提供无参构造（除非显式定义其他构造方法）</li><li>使用构造方法创建类的对象的时候，构造方法只运行过一次</li></ul><blockquote><p>其实当使用new来实例化对象的时候，类没有自定义构造函数的时候，会自动默认提供一个无参构造函数，但是当类自定义了构造函数的时候，就会使用自定义的构造函数</p></blockquote><h3 id="2-构造方法示例"><a href="#2-构造方法示例" class="headerlink" title="2. 构造方法示例"></a>2. 构造方法示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String major;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 默认构造器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(<span class="string">&quot;未知&quot;</span>, <span class="number">18</span>, <span class="string">&quot;未定&quot;</span>); <span class="comment">// 调用其他构造器</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 带部分参数的构造器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(name, age, <span class="string">&quot;计算机科学&quot;</span>); <span class="comment">// 默认专业</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 全参数构造器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, <span class="type">int</span> age, String major)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(age &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;年龄不能为负数&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.major = major;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 拷贝构造器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(Student other)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(other.name, other.age, other.major);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>构造方法的重载</strong><br>如果定义了带参数的构造方法，还想使用无参数构造方法创建对象，就需要在类中显式定义一个无参数构造方法。(如果你还想new,就得手动写一个无参构造函数)</p></blockquote><p>典型案例对照：(标准格式)<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.classTestingPackage.Class;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String color;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> weight;</span><br><span class="line">    <span class="comment">//无参构造器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Dog</span><span class="params">()</span> &#123;<span class="comment">//如果定义了带参数的构造方法，还想使用无参数构造方法创建对象，就需要在类中显式定义一个无参数构造方法。(如果你还想new,就得手动写一个无参构造函数)</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setColor</span><span class="params">(String color)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setWeight</span><span class="params">(<span class="type">double</span> weight)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.weight = weight;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getColor</span><span class="params">(String color)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getWeight</span><span class="params">(<span class="type">double</span> weight)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.weight;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//带参构造器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Dog</span><span class="params">(String name, String color, <span class="type">double</span> weight)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.color = color;</span><br><span class="line">        <span class="built_in">this</span>.weight = weight;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;狗狗的盒：姓名：&quot;</span>+ name +<span class="string">&quot;,颜色：&quot;</span> + color +<span class="string">&quot;,体重:&quot;</span> + weight);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>main函数部分调用示例<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">            <span class="comment">//使用带参构造器</span></span><br><span class="line">            <span class="type">Dog</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&quot;花花公子&quot;</span>, <span class="string">&quot;黄色&quot;</span>, <span class="number">32.5</span>);</span><br><span class="line">            a.show();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//使用无参构造器</span></span><br><span class="line">            <span class="type">Dog</span> <span class="variable">d</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">            d.setName(<span class="string">&quot;草草公子&quot;</span>);</span><br><span class="line">            d.setColor(<span class="string">&quot;绿&quot;</span>);</span><br><span class="line">            d.setWeight(<span class="number">100</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><h3 id="3-构造方法使用场景"><a href="#3-构造方法使用场景" class="headerlink" title="3. 构造方法使用场景"></a>3. 构造方法使用场景</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Student</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();  <span class="comment">// 使用默认构造器</span></span><br><span class="line"><span class="type">Student</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;张三&quot;</span>, <span class="number">20</span>);</span><br><span class="line"><span class="type">Student</span> <span class="variable">s3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;李四&quot;</span>, <span class="number">22</span>, <span class="string">&quot;人工智能&quot;</span>);</span><br><span class="line"><span class="type">Student</span> <span class="variable">s4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(s3);  <span class="comment">// 拷贝创建</span></span><br></pre></td></tr></table></figure><h2 id="三、封装与访问控制实践"><a href="#三、封装与访问控制实践" class="headerlink" title="三、封装与访问控制实践"></a>三、封装与访问控制实践</h2><h3 id="1-封装原则"><a href="#1-封装原则" class="headerlink" title="1. 封装原则"></a>1. 封装原则</h3><ul><li><strong>将字段设为private</strong></li><li><strong>通过public方法访问</strong></li><li>在方法中添加业务逻辑</li></ul><h3 id="2-完整封装示例"><a href="#2-完整封装示例" class="headerlink" title="2. 完整封装示例"></a>2. 完整封装示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BankAccount</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String accountNumber;</span><br><span class="line">    <span class="keyword">private</span> String accountHolder;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> balance;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">double</span> <span class="variable">MAX_DEPOSIT</span> <span class="operator">=</span> <span class="number">100000</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BankAccount</span><span class="params">(String accountNumber, String accountHolder)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.accountNumber = accountNumber;</span><br><span class="line">        <span class="built_in">this</span>.accountHolder = accountHolder;</span><br><span class="line">        <span class="built_in">this</span>.balance = <span class="number">0.0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deposit</span><span class="params">(<span class="type">double</span> amount)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(amount &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;存款金额必须为正数&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(amount &gt; MAX_DEPOSIT) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;单笔存款不能超过&quot;</span> + MAX_DEPOSIT);</span><br><span class="line">        &#125;</span><br><span class="line">        balance += amount;</span><br><span class="line">        System.out.printf(<span class="string">&quot;成功存款%.2f，当前余额：%.2f\n&quot;</span>, amount, balance);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">withdraw</span><span class="params">(<span class="type">double</span> amount)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(amount &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;取款金额必须为正数&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(amount &gt; balance) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;余额不足&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        balance -= amount;</span><br><span class="line">        System.out.printf(<span class="string">&quot;成功取款%.2f，当前余额：%.2f\n&quot;</span>, amount, balance);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 只提供getter方法，不提供setter，防止随意修改</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getBalance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> balance;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getAccountInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> String.format(<span class="string">&quot;账号：%s，户主：%s&quot;</span>, accountNumber, accountHolder);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四、变量类型全解析"><a href="#四、变量类型全解析" class="headerlink" title="四、变量类型全解析"></a>四、变量类型全解析</h2><h3 id="1-三种变量对比"><a href="#1-三种变量对比" class="headerlink" title="1. 三种变量对比"></a>1. 三种变量对比</h3><div class="table-container"><table><thead><tr><th>变量类型</th><th>声明位置</th><th>生命周期</th><th>初始化要求</th><th>访问方式</th></tr></thead><tbody><tr><td>局部变量</td><td>方法/块内</td><td>方法/块执行期间</td><td>必须显式初始化</td><td>直接访问</td></tr><tr><td>实例变量</td><td>类内方法外</td><td>对象存在期间</td><td>自动初始化</td><td>通过对象访问</td></tr><tr><td>类变量</td><td>类内+static</td><td>程序运行期间</td><td>自动初始化</td><td>类名或对象访问</td></tr></tbody></table></div><h3 id="2-变量使用示例"><a href="#2-变量使用示例" class="headerlink" title="2. 变量使用示例"></a>2. 变量使用示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VariableDemo</span> &#123;</span><br><span class="line">    <span class="comment">// 实例变量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> instanceVar;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 类变量（静态变量）</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> classVar;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 局部变量</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">localVar</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;局部变量：&quot;</span> + localVar);</span><br><span class="line">        System.out.println(<span class="string">&quot;实例变量：&quot;</span> + <span class="built_in">this</span>.instanceVar);</span><br><span class="line">        System.out.println(<span class="string">&quot;类变量：&quot;</span> + VariableDemo.classVar);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">VariableDemo</span> <span class="variable">demo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">VariableDemo</span>();</span><br><span class="line">        demo.method();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 不同对象共享类变量</span></span><br><span class="line">        VariableDemo.classVar = <span class="number">100</span>;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">VariableDemo</span>().method();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="五、方法设计与重载"><a href="#五、方法设计与重载" class="headerlink" title="五、方法设计与重载"></a>五、方法设计与重载</h2><h3 id="1-方法组成要素"><a href="#1-方法组成要素" class="headerlink" title="1. 方法组成要素"></a>1. 方法组成要素</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[访问修饰符] [<span class="keyword">static</span>/<span class="keyword">final</span>/<span class="keyword">abstract</span>] 返回类型 方法名(参数列表) [<span class="keyword">throws</span> 异常列表] &#123;</span><br><span class="line">    <span class="comment">// 方法体</span></span><br><span class="line">    [<span class="keyword">return</span> 返回值;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-方法重载最佳实践"><a href="#2-方法重载最佳实践" class="headerlink" title="2. 方法重载最佳实践"></a>2. 方法重载最佳实践</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Calculator</span> &#123;</span><br><span class="line">    <span class="comment">// 整数加法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;调用int版本&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 小数加法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">add</span><span class="params">(<span class="type">double</span> a, <span class="type">double</span> b)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;调用double版本&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 可变参数加法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span>... numbers)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;调用可变参数版本&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> num : numbers) &#123;</span><br><span class="line">            sum += num;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 方法重载的调用</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Calculator</span> <span class="variable">calc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Calculator</span>();</span><br><span class="line">        System.out.println(calc.add(<span class="number">1</span>, <span class="number">2</span>));       <span class="comment">// 调用int版本</span></span><br><span class="line">        System.out.println(calc.add(<span class="number">1.5</span>, <span class="number">2.5</span>));   <span class="comment">// 调用double版本</span></span><br><span class="line">        System.out.println(calc.add(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>));    <span class="comment">// 调用可变参数版本</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="六、综合案例：员工管理系统"><a href="#六、综合案例：员工管理系统" class="headerlink" title="六、综合案例：员工管理系统"></a>六、综合案例：员工管理系统</h2><h3 id="Employee-java"><a href="#Employee-java" class="headerlink" title="Employee.java"></a>Employee.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.time.LocalDate;</span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 员工类</span></span><br><span class="line"><span class="comment"> * 演示完整的类设计：封装、构造器、方法、重写等</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Employee</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String id;          <span class="comment">// 员工ID（不可变）</span></span><br><span class="line">    <span class="keyword">private</span> String name;              <span class="comment">// 姓名</span></span><br><span class="line">    <span class="keyword">private</span> Department department;    <span class="comment">// 部门（枚举）</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> salary;            <span class="comment">// 薪资</span></span><br><span class="line">    <span class="keyword">private</span> LocalDate hireDate;       <span class="comment">// 入职日期</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 构造器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Employee</span><span class="params">(String id, String name, Department department, </span></span><br><span class="line"><span class="params">                   <span class="type">double</span> salary, LocalDate hireDate)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = Objects.requireNonNull(id, <span class="string">&quot;ID不能为空&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.name = Objects.requireNonNull(name, <span class="string">&quot;姓名不能为空&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.department = Objects.requireNonNull(department);</span><br><span class="line">        setSalary(salary);  <span class="comment">// 通过方法设置以便验证</span></span><br><span class="line">        <span class="built_in">this</span>.hireDate = Objects.requireNonNull(hireDate);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 业务方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">raiseSalary</span><span class="params">(<span class="type">double</span> percent)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(percent &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;加薪比例必须为正数&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.salary *= (<span class="number">1</span> + percent / <span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">yearsOfService</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> LocalDate.now().getYear() - hireDate.getYear();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 访问器方法</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getId</span><span class="params">()</span> &#123; <span class="keyword">return</span> id; &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123; <span class="keyword">return</span> name; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123; <span class="built_in">this</span>.name = name; &#125;</span><br><span class="line">    <span class="comment">// 其他getter/setter...</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 重写Object方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> String.format(<span class="string">&quot;Employee[id=%s, name=%s, dept=%s, salary=%.2f, hireDate=%s]&quot;</span>, </span><br><span class="line">               id, name, department, salary, hireDate);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span> == o) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="literal">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">Employee</span> <span class="variable">employee</span> <span class="operator">=</span> (Employee) o;</span><br><span class="line">        <span class="keyword">return</span> id.equals(employee.id);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.hash(id);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 部门枚举</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">Department</span> &#123;</span><br><span class="line">        HR, FINANCE, ENGINEERING, MARKETING, SALES</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="EmployeeManagement-java"><a href="#EmployeeManagement-java" class="headerlink" title="EmployeeManagement.java"></a>EmployeeManagement.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.time.LocalDate;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 员工管理系统</span></span><br><span class="line"><span class="comment"> * 演示对象集合操作</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmployeeManagement</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;Employee&gt; employees = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 添加员工</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addEmployee</span><span class="params">(Employee employee)</span> &#123;</span><br><span class="line">        employees.add(Objects.requireNonNull(employee));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 根据ID查找员工</span></span><br><span class="line">    <span class="keyword">public</span> Employee <span class="title function_">findEmployeeById</span><span class="params">(String id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> employees.stream()</span><br><span class="line">                .filter(e -&gt; e.getId().equals(id))</span><br><span class="line">                .findFirst()</span><br><span class="line">                .orElse(<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 给部门员工加薪</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">raiseSalaryForDepartment</span><span class="params">(Employee.Department dept, <span class="type">double</span> percent)</span> &#123;</span><br><span class="line">        employees.stream()</span><br><span class="line">                .filter(e -&gt; e.getDepartment() == dept)</span><br><span class="line">                .forEach(e -&gt; e.raiseSalary(percent));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 显示所有员工</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">displayAllEmployees</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;\n===== 员工列表 =====&quot;</span>);</span><br><span class="line">        employees.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">EmployeeManagement</span> <span class="variable">system</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EmployeeManagement</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 添加员工</span></span><br><span class="line">        system.addEmployee(<span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&quot;001&quot;</span>, <span class="string">&quot;张三&quot;</span>, Employee.Department.ENGINEERING, </span><br><span class="line">                <span class="number">15000</span>, LocalDate.of(<span class="number">2020</span>, <span class="number">5</span>, <span class="number">10</span>)));</span><br><span class="line">        system.addEmployee(<span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&quot;002&quot;</span>, <span class="string">&quot;李四&quot;</span>, Employee.Department.HR, </span><br><span class="line">                <span class="number">12000</span>, LocalDate.of(<span class="number">2019</span>, <span class="number">3</span>, <span class="number">15</span>)));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 操作员工数据</span></span><br><span class="line">        system.raiseSalaryForDepartment(Employee.Department.ENGINEERING, <span class="number">10</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 查找并修改员工</span></span><br><span class="line">        <span class="type">Employee</span> <span class="variable">emp</span> <span class="operator">=</span> system.findEmployeeById(<span class="string">&quot;002&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(emp != <span class="literal">null</span>) &#123;</span><br><span class="line">            emp.setName(<span class="string">&quot;李四（已更名）&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 显示结果</span></span><br><span class="line">        system.displayAllEmployees();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="七、Java文件组织规范"><a href="#七、Java文件组织规范" class="headerlink" title="七、Java文件组织规范"></a>七、Java文件组织规范</h2><h3 id="1-源文件规则"><a href="#1-源文件规则" class="headerlink" title="1. 源文件规则"></a>1. 源文件规则</h3><ol><li>一个<code>.java</code>文件只能有一个<code>public</code>类</li><li>文件名必须与<code>public</code>类名完全一致（包括大小写）</li><li>包声明(<code>package</code>)必须位于文件首行</li><li>导入语句(<code>import</code>)位于包声明之后，类定义之前</li></ol><h3 id="2-典型文件结构"><a href="#2-典型文件结构" class="headerlink" title="2. 典型文件结构"></a>2. 典型文件结构</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// Employee.java</span><br><span class="line">package com.company.model;</span><br><span class="line"></span><br><span class="line">import java.time.LocalDate;</span><br><span class="line">import java.util.Objects;</span><br><span class="line"></span><br><span class="line">public class Employee &#123;</span><br><span class="line">    // 类实现...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class EmployeeHelper &#123;  // 非public辅助类</span><br><span class="line">    // 实现...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="八、包-package-与导入-import-机制"><a href="#八、包-package-与导入-import-机制" class="headerlink" title="八、包(package)与导入(import)机制"></a>八、包(package)与导入(import)机制</h2><p>为了更好的组织和管理Java代码，Java引入了包的概念。包是一种命名空间，用于组织类和接口，其实就行个文件夹。</p><h3 id="1-包的作用"><a href="#1-包的作用" class="headerlink" title="1. 包的作用"></a>1. 包的作用</h3><ul><li>把功能相似的或者相关的类和接口组织在同一个包中，方便类的查找和使用。</li><li>防止命名冲突，当两个类的名称相同时，可以使用完整的包名来区分。</li><li>包限定了访问权限，拥有访问权限的类才能访问该包中的类和接口。</li></ul><h3 id="2-包命名规范"><a href="#2-包命名规范" class="headerlink" title="2. 包命名规范"></a>2. 包命名规范</h3><ul><li>公司域名倒写：<code>com.company.project</code></li><li>要求全部小写</li><li>不可以使用Java保留字</li></ul><h3 id="3-导入使用技巧"><a href="#3-导入使用技巧" class="headerlink" title="3. 导入使用技巧"></a>3. 导入使用技巧</h3><p>使用<code>import</code>关键字导入其他包中的类、接口或静态成员，简化代码编写。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.List;       <span class="comment">// 导入单个类</span></span><br><span class="line"><span class="keyword">import</span> java.util.*;          <span class="comment">// 导入整个包（不推荐）</span></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.Math.PI;  <span class="comment">// 静态导入</span></span><br><span class="line"><span class="keyword">import</span> com.company.model.Employee; <span class="comment">// 导入自定义类</span></span><br></pre></td></tr></table></figure><h2 id="九、开发建议与常见问题"><a href="#九、开发建议与常见问题" class="headerlink" title="九、开发建议与常见问题"></a>九、开发建议与常见问题</h2><h3 id="1-类设计原则"><a href="#1-类设计原则" class="headerlink" title="1. 类设计原则"></a>1. 类设计原则</h3><ol><li>单一职责原则：一个类只做一件事</li><li>高内聚低耦合：内部紧密相关，外部依赖最少</li><li>优先使用组合而非继承</li><li>为所有公开API添加文档注释</li></ol><h3 id="2-常见错误"><a href="#2-常见错误" class="headerlink" title="2. 常见错误"></a>2. 常见错误</h3><ol><li>忘记实例化对象：<code>MyClass obj; obj.method();</code> → NullPointerException</li><li>混淆实例变量和局部变量：使用<code>this</code>明确指代</li><li>过度使用静态成员：破坏面向对象特性</li><li>忽视封装：直接暴露字段<h1 id="Java基本数据类型全面解析"><a href="#Java基本数据类型全面解析" class="headerlink" title="Java基本数据类型全面解析"></a>Java基本数据类型全面解析</h1></li></ol><p>Java作为一门强类型语言，其数据类型系统是编程基础中的核心。下面我将从实际应用角度，深入讲解Java的基本数据类型。</p><h2 id="一、Java数据类型体系"><a href="#一、Java数据类型体系" class="headerlink" title="一、Java数据类型体系"></a>一、Java数据类型体系</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Java数据类型</span><br><span class="line">├── 基本数据类型（8种）</span><br><span class="line">│   ├── 数值型</span><br><span class="line">│   │   ├── 整数类型（byte, short, int, long）</span><br><span class="line">│   │   └── 浮点类型（float, double）</span><br><span class="line">│   ├── 字符型（char）</span><br><span class="line">│   └── 布尔型（boolean）</span><br><span class="line">└── 引用数据类型</span><br><span class="line">    ├── 类（Class）</span><br><span class="line">    ├── 接口（Interface）</span><br><span class="line">    └── 数组</span><br></pre></td></tr></table></figure><h2 id="二、八大基本数据类型详解"><a href="#二、八大基本数据类型详解" class="headerlink" title="二、八大基本数据类型详解"></a>二、八大基本数据类型详解</h2><h3 id="1-整数类型"><a href="#1-整数类型" class="headerlink" title="1. 整数类型"></a>1. 整数类型</h3><div class="table-container"><table><thead><tr><th>类型</th><th>位数</th><th>取值范围</th><th>默认值</th><th>包装类</th><th>应用场景</th></tr></thead><tbody><tr><td>byte</td><td>8</td><td>-128 ~ 127</td><td>0</td><td>Byte</td><td>二进制数据、节省空间</td></tr><tr><td>short</td><td>16</td><td>-32,768 ~ 32,767</td><td>0</td><td>Short</td><td>较少使用，兼容性考虑</td></tr><tr><td>int</td><td>32</td><td>-2^31 ~ 2^31-1 (约±21亿)</td><td>0</td><td>Integer</td><td>最常用的整数类型</td></tr><tr><td>long</td><td>64</td><td>-2^63 ~ 2^63-1</td><td>0L</td><td>Long</td><td>大整数、时间戳</td></tr></tbody></table></div><p><strong>代码示例：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">byte</span> <span class="variable">fileData</span> <span class="operator">=</span> -<span class="number">128</span>;          <span class="comment">// 最小byte值</span></span><br><span class="line"><span class="type">short</span> <span class="variable">pixelValue</span> <span class="operator">=</span> <span class="number">32767</span>;      <span class="comment">// 最大short值</span></span><br><span class="line"><span class="type">int</span> <span class="variable">population</span> <span class="operator">=</span> <span class="number">2_147_483_647</span>; <span class="comment">// 使用下划线增强可读性</span></span><br><span class="line"><span class="type">long</span> <span class="variable">globalPopulation</span> <span class="operator">=</span> <span class="number">7_900_000_000L</span>; <span class="comment">// 注意L后缀</span></span><br></pre></td></tr></table></figure></p><h3 id="2-浮点类型"><a href="#2-浮点类型" class="headerlink" title="2. 浮点类型"></a>2. 浮点类型</h3><div class="table-container"><table><thead><tr><th>类型</th><th>位数</th><th>取值范围</th><th>默认值</th><th>包装类</th><th>精度</th></tr></thead><tbody><tr><td>float</td><td>32</td><td>±1.4E-45 ~ 3.4028235E38</td><td>0.0f</td><td>Float</td><td>6-7位有效数字</td></tr><tr><td>double</td><td>64</td><td>±4.9E-324 ~ 1.7976931348623157E308</td><td>0.0d</td><td>Double</td><td>15位有效数字</td></tr></tbody></table></div><p><strong>重要特性：</strong></p><ul><li>浮点数遵循IEEE 754标准</li><li>存在舍入误差，不适合精确计算（如金融）</li><li>默认字面量是double类型</li></ul><p><strong>代码示例：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">float</span> <span class="variable">piApprox</span> <span class="operator">=</span> <span class="number">3.14159f</span>;    <span class="comment">// 必须加f后缀</span></span><br><span class="line"><span class="type">double</span> <span class="variable">precisePi</span> <span class="operator">=</span> <span class="number">3.141592653589793</span>;</span><br><span class="line"><span class="type">double</span> <span class="variable">scientific</span> <span class="operator">=</span> <span class="number">1.23e10</span>;  <span class="comment">// 科学计数法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 浮点精度问题演示</span></span><br><span class="line">System.out.println(<span class="number">0.1</span> + <span class="number">0.2</span>); <span class="comment">// 输出0.30000000000000004</span></span><br></pre></td></tr></table></figure></p><h3 id="3-字符类型（char）"><a href="#3-字符类型（char）" class="headerlink" title="3. 字符类型（char）"></a>3. 字符类型（char）</h3><ul><li>16位Unicode字符</li><li>范围：\u0000 ~ \uffff（0~65535）</li><li>默认值：’\u0000’</li><li>包装类：Character</li></ul><p><strong>特殊表示方式：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> <span class="variable">letterA</span> <span class="operator">=</span> <span class="string">&#x27;A&#x27;</span>;          <span class="comment">// 直接字符</span></span><br><span class="line"><span class="type">char</span> <span class="variable">unicodeChar</span> <span class="operator">=</span> <span class="string">&#x27;\u0041&#x27;</span>; <span class="comment">// Unicode表示（也是&#x27;A&#x27;）</span></span><br><span class="line"><span class="type">char</span> <span class="variable">tab</span> <span class="operator">=</span> <span class="string">&#x27;\t&#x27;</span>;             <span class="comment">// 转义字符</span></span><br></pre></td></tr></table></figure></p><h3 id="4-布尔类型（boolean）"><a href="#4-布尔类型（boolean）" class="headerlink" title="4. 布尔类型（boolean）"></a>4. 布尔类型（boolean）</h3><ul><li>只有true和false两个值</li><li>默认值：false</li><li>包装类：Boolean</li><li>大小：JVM规范未明确定义（通常按int处理）</li></ul><p><strong>注意事项：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="variable">isJavaFun</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"><span class="comment">// if(isJavaFun == true)  // 不推荐写法</span></span><br><span class="line"><span class="keyword">if</span>(isJavaFun)            <span class="comment">// 推荐写法</span></span><br></pre></td></tr></table></figure></p><h2 id="三、类型转换机制"><a href="#三、类型转换机制" class="headerlink" title="三、类型转换机制"></a>三、类型转换机制</h2><h3 id="1-自动类型转换（隐式转换）"><a href="#1-自动类型转换（隐式转换）" class="headerlink" title="1. 自动类型转换（隐式转换）"></a>1. 自动类型转换（隐式转换）</h3><p><strong>转换方向：低精度 → 高精度</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">byte → short → int → long → float → double</span><br><span class="line">          ↑</span><br><span class="line">         char</span><br></pre></td></tr></table></figure><p><strong>转换规则：</strong></p><ul><li><strong>两种类型兼容</strong></li><li><strong>目标类型范围大于源类型</strong></li></ul><p><strong>示例：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"><span class="type">long</span> <span class="variable">l</span> <span class="operator">=</span> i;      <span class="comment">// 自动转换</span></span><br><span class="line"><span class="type">float</span> <span class="variable">f</span> <span class="operator">=</span> l;     <span class="comment">// 可能丢失精度（但自动转换）</span></span><br></pre></td></tr></table></figure></p><h3 id="2-强制类型转换（显式转换）"><a href="#2-强制类型转换（显式转换）" class="headerlink" title="2. 强制类型转换（显式转换）"></a>2. 强制类型转换（显式转换）</h3><p>语法：(目标类型)值</p><p><strong>风险点：</strong></p><ul><li>数据溢出</li><li>精度丢失</li><li>非兼容类型转换</li></ul><p><strong>示例：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">double</span> <span class="variable">d</span> <span class="operator">=</span> <span class="number">100.04</span>;</span><br><span class="line"><span class="type">long</span> <span class="variable">l</span> <span class="operator">=</span> (<span class="type">long</span>)d;  <span class="comment">// 截断小数部分，l=100</span></span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> (<span class="type">int</span>)l;    <span class="comment">// 安全转换</span></span><br><span class="line"></span><br><span class="line"><span class="type">byte</span> <span class="variable">b</span> <span class="operator">=</span> (<span class="type">byte</span>)<span class="number">128</span>; <span class="comment">// 溢出！b=-128</span></span><br></pre></td></tr></table></figure></p><h3 id="3-特殊转换场景"><a href="#3-特殊转换场景" class="headerlink" title="3. 特殊转换场景"></a>3. 特殊转换场景</h3><p><strong>char与整型的转换：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> c;        <span class="comment">// 自动转换，i=65</span></span><br><span class="line"><span class="type">char</span> <span class="variable">c2</span> <span class="operator">=</span> (<span class="type">char</span>)(i + <span class="number">1</span>); <span class="comment">// c2=&#x27;B&#x27;</span></span><br></pre></td></tr></table></figure></p><p><strong>布尔类型限制：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// boolean cannot = 1;       // 错误！</span></span><br><span class="line"><span class="comment">// int number = true;        // 错误！</span></span><br></pre></td></tr></table></figure></p><h2 id="四、类型默认值与内存分配"><a href="#四、类型默认值与内存分配" class="headerlink" title="四、类型默认值与内存分配"></a>四、类型默认值与内存分配</h2><h3 id="1-默认值规则"><a href="#1-默认值规则" class="headerlink" title="1. 默认值规则"></a>1. 默认值规则</h3><div class="table-container"><table><thead><tr><th>数据类型</th><th>默认值</th></tr></thead><tbody><tr><td>byte/short/int/long</td><td>0</td></tr><tr><td>float/double</td><td>0.0</td></tr><tr><td>char</td><td>‘\u0000’</td></tr><tr><td>boolean</td><td>false</td></tr><tr><td>引用类型</td><td>null</td></tr></tbody></table></div><p><strong>示例验证：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DefaultValues</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> intValue;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">boolean</span> boolValue;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(intValue);  <span class="comment">// 输出0</span></span><br><span class="line">        System.out.println(boolValue); <span class="comment">// 输出false</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 局部变量必须初始化</span></span><br><span class="line">        <span class="comment">// int localInt;  // 编译错误</span></span><br><span class="line">        <span class="comment">// System.out.println(localInt);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="2-内存占用分析"><a href="#2-内存占用分析" class="headerlink" title="2. 内存占用分析"></a>2. 内存占用分析</h3><div class="table-container"><table><thead><tr><th>类型</th><th>大小</th><th>备注</th></tr></thead><tbody><tr><td>boolean</td><td>~1字节</td><td>JVM依赖，通常按int处理</td></tr><tr><td>byte</td><td>1字节</td><td></td></tr><tr><td>short</td><td>2字节</td><td></td></tr><tr><td>char</td><td>2字节</td><td>UTF-16编码</td></tr><tr><td>int</td><td>4字节</td><td></td></tr><tr><td>float</td><td>4字节</td><td></td></tr><tr><td>long</td><td>8字节</td><td></td></tr><tr><td>double</td><td>8字节</td></tr></tbody></table></div><p><strong>数组内存计算示例：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">100</span>];  <span class="comment">// 占用约100*4=400字节</span></span><br></pre></td></tr></table></figure></p><h2 id="五、包装类与自动装箱拆箱"><a href="#五、包装类与自动装箱拆箱" class="headerlink" title="五、包装类与自动装箱拆箱"></a>五、包装类与自动装箱拆箱</h2><p>java在设计类时为每个基本数据类型设计了一个对应的类，这8个类对应这8个基本数据类型统称为包装类。这些包装类都位于java.lang包下。</p><p>包装类：</p><ul><li>每个基本类型都有对应的包装类</li><li>包装类提供了更多功能，如与字符串的转换</li><li>包装类对象可以为null，int不能为null</li></ul><h3 id="1-基本类型与包装类对应"><a href="#1-基本类型与包装类对应" class="headerlink" title="1. 基本类型与包装类对应"></a>1. 基本类型与包装类对应</h3><div class="table-container"><table><thead><tr><th>基本类型</th><th>包装类</th></tr></thead><tbody><tr><td>byte</td><td>Byte</td></tr><tr><td>short</td><td>Short</td></tr><tr><td>int</td><td>Integer</td></tr><tr><td>long</td><td>Long</td></tr><tr><td>float</td><td>Float</td></tr><tr><td>double</td><td>Double</td></tr><tr><td>char</td><td>Character</td></tr><tr><td>boolean</td><td>Boolean</td></tr></tbody></table></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">// byte的包装类</span></span><br><span class="line">        Byte b=<span class="number">12</span>;</span><br><span class="line">        <span class="comment">// short </span></span><br><span class="line">        Short s=<span class="number">11</span>;</span><br><span class="line">        <span class="comment">// double</span></span><br><span class="line">        Double d=<span class="number">3.14</span>;</span><br><span class="line">        <span class="comment">// long </span></span><br><span class="line">        Long l=<span class="number">12345678L</span>;</span><br><span class="line">        <span class="comment">// boolean </span></span><br><span class="line">        Boolean bool=<span class="literal">true</span>;</span><br><span class="line">        <span class="comment">// float</span></span><br><span class="line">        Float f=<span class="number">3.14f</span>;</span><br><span class="line">        <span class="comment">// int</span></span><br><span class="line">        Integer i=<span class="number">100</span>;</span><br><span class="line">        <span class="comment">// char 的包装类</span></span><br><span class="line">        Character a=<span class="keyword">new</span> <span class="title class_">Character</span>(<span class="string">&#x27;a&#x27;</span>);</span><br></pre></td></tr></table></figure><p>1.集合不允许存放基本数据类型，用包装类。<br>2.包含了每种基本类型的相关属性，和方法。<br>3.作为基本数据类型对应的包装类对象，提供了一系列使用的对象操作，比如类型转换，进行转换等等。</p><p>基本类型转换为包装对象的两种方式<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 基本类型转换为包装对象的两种方式</span></span><br><span class="line">       Integer i=<span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">12</span>);</span><br><span class="line">       <span class="type">Integer</span> <span class="variable">k</span> <span class="operator">=</span> Integer.valueOf(<span class="number">23</span>);</span><br><span class="line">       <span class="comment">// Integer包装类对象转换int</span></span><br><span class="line">       <span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> i.intValue();</span><br><span class="line">       <span class="comment">// 将数值的字符串转换为Integer包装类对象</span></span><br><span class="line">       Integer int5=<span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">       System.out.println(int5.intValue());</span><br><span class="line">       System.out.println(Integer.MAX_VALUE);</span><br></pre></td></tr></table></figure></p><h3 id="2-自动装箱-拆箱机制"><a href="#2-自动装箱-拆箱机制" class="headerlink" title="2. 自动装箱/拆箱机制"></a>2. 自动装箱/拆箱机制</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自动装箱</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">objInt</span> <span class="operator">=</span> <span class="number">100</span>;  <span class="comment">// 编译器转换为 Integer.valueOf(100)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 自动拆箱</span></span><br><span class="line"><span class="type">int</span> <span class="variable">primInt</span> <span class="operator">=</span> objInt;  <span class="comment">// 编译器转换为 objInt.intValue()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 集合中的使用</span></span><br><span class="line">List&lt;Integer&gt; numbers = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">numbers.add(<span class="number">1</span>);        <span class="comment">// 自动装箱</span></span><br><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> numbers.get(<span class="number">0</span>); <span class="comment">// 自动拆箱</span></span><br></pre></td></tr></table></figure><p>这里是对照部分展示<br>自动装箱<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 把int转换成Integer</span></span><br><span class="line">        Integer i1=<span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">1</span>);  <span class="comment">//Integer i3=12;</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">i2</span> <span class="operator">=</span> Integer.valueOf(<span class="number">12</span>);  <span class="comment">//Integer i3=12;</span></span><br><span class="line">        <span class="comment">// 自动装箱</span></span><br><span class="line">        Integer i3=<span class="number">12</span>;</span><br></pre></td></tr></table></figure><br>自动拆箱<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Integer i=<span class="number">1</span>; <span class="comment">// 自动装箱   Integer i1=new Integer(1);</span></span><br><span class="line">         <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 等号右边将i对象转换基本数值   i.intValue()+5;</span></span><br><span class="line"><span class="comment">          * 加法运算完成后，再次装箱，把基本数据类型转换对象</span></span><br><span class="line"><span class="comment">         **/</span></span><br><span class="line">         i+=i+<span class="number">5</span>;</span><br></pre></td></tr></table></figure><br><strong>面试题：基本数据类型和包装类有什么区别？</strong><br>1.默认值<br>基本数据类型:有默认值，比如int的默认值0<br>包装类:默认是null，因为他们是引用数据类型<br>2.功能差异<br>基本数据类型：没有方法和属性，主要用于数值计算。<br>包装类：包含了一系列的属性和方法。<br>3.存储方式<br>基本数据类型：直接在栈内存中分配空间，存储的是具体的值。<br>包装类：他们是类，所以是对象在堆内存中分配空间。</p><p><strong>注意事项：</strong></p><ul><li>包装类对象可能为null，拆箱时可能引发NullPointerException</li><li>整数缓存：-128~127的Integer对象会被缓存</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Integer</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">127</span>;</span><br><span class="line"><span class="type">Integer</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">127</span>;</span><br><span class="line">System.out.println(a == b); <span class="comment">// true（缓存对象）</span></span><br><span class="line"></span><br><span class="line"><span class="type">Integer</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">128</span>;</span><br><span class="line"><span class="type">Integer</span> <span class="variable">d</span> <span class="operator">=</span> <span class="number">128</span>;</span><br><span class="line">System.out.println(c == d); <span class="comment">// false（新建对象）</span></span><br></pre></td></tr></table></figure><h2 id="六、类型相关工具方法"><a href="#六、类型相关工具方法" class="headerlink" title="六、类型相关工具方法"></a>六、类型相关工具方法</h2><h3 id="1-类型大小与极值"><a href="#1-类型大小与极值" class="headerlink" title="1. 类型大小与极值"></a>1. 类型大小与极值</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;int范围：&quot;</span> + Integer.MIN_VALUE + <span class="string">&quot;~&quot;</span> + Integer.MAX_VALUE);</span><br><span class="line">System.out.println(<span class="string">&quot;float精度位数：&quot;</span> + Float.SIZE);</span><br></pre></td></tr></table></figure><h3 id="2-类型转换工具"><a href="#2-类型转换工具" class="headerlink" title="2. 类型转换工具"></a>2. 类型转换工具</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 字符串转数字</span></span><br><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> Integer.parseInt(<span class="string">&quot;123&quot;</span>);</span><br><span class="line"><span class="type">double</span> <span class="variable">d</span> <span class="operator">=</span> Double.parseDouble(<span class="string">&quot;3.14&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数字转字符串</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> Integer.toString(<span class="number">123</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> Double.toString(<span class="number">3.14</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 进制转换</span></span><br><span class="line"><span class="type">String</span> <span class="variable">binary</span> <span class="operator">=</span> Integer.toBinaryString(<span class="number">10</span>); <span class="comment">// &quot;1010&quot;</span></span><br><span class="line"><span class="type">String</span> <span class="variable">hex</span> <span class="operator">=</span> Integer.toHexString(<span class="number">255</span>);     <span class="comment">// &quot;ff&quot;</span></span><br></pre></td></tr></table></figure><h3 id="3-数学运算工具"><a href="#3-数学运算工具" class="headerlink" title="3. 数学运算工具"></a>3. 数学运算工具</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 安全运算</span></span><br><span class="line">Math.addExact(a, b);  <span class="comment">// 溢出时抛出ArithmeticException</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 比较</span></span><br><span class="line"><span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> Integer.max(a, b);</span><br><span class="line"><span class="type">float</span> <span class="variable">min</span> <span class="operator">=</span> Float.min(x, y);</span><br></pre></td></tr></table></figure><h2 id="七、最佳实践与常见问题"><a href="#七、最佳实践与常见问题" class="headerlink" title="七、最佳实践与常见问题"></a>七、最佳实践与常见问题</h2><h3 id="1-类型选择建议"><a href="#1-类型选择建议" class="headerlink" title="1. 类型选择建议"></a>1. 类型选择建议</h3><ul><li><strong>整数</strong>：优先使用int，大数用long</li><li><strong>小数</strong>：优先使用double，除非内存敏感</li><li><strong>布尔</strong>：避免用其他类型模拟boolean</li><li><strong>字符</strong>：明确需要单个字符时才使用char</li></ul><h3 id="2-常见陷阱"><a href="#2-常见陷阱" class="headerlink" title="2. 常见陷阱"></a>2. 常见陷阱</h3><p><strong>浮点数比较：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 错误方式</span></span><br><span class="line"><span class="keyword">if</span> (d1 == d2) &#123;...&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确方式</span></span><br><span class="line"><span class="keyword">if</span> (Math.abs(d1 - d2) &lt; <span class="number">1e-6</span>) &#123;...&#125;</span><br></pre></td></tr></table></figure></p><p><strong>大数溢出：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 错误：发生溢出</span></span><br><span class="line"><span class="type">int</span> <span class="variable">million</span> <span class="operator">=</span> <span class="number">1000000</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> million * million;  <span class="comment">// -727379968</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确：使用long</span></span><br><span class="line"><span class="type">long</span> <span class="variable">result</span> <span class="operator">=</span> (<span class="type">long</span>)million * million;</span><br></pre></td></tr></table></figure></p><p><strong>自动装箱性能：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 低效（创建多余对象）</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10000</span>; i++) &#123;</span><br><span class="line">    sum += i;  <span class="comment">// 反复装箱拆箱</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 高效</span></span><br><span class="line"><span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure></p><h3 id="3-特殊值处理"><a href="#3-特殊值处理" class="headerlink" title="3. 特殊值处理"></a>3. 特殊值处理</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 浮点特殊值</span></span><br><span class="line"><span class="type">double</span> <span class="variable">inf</span> <span class="operator">=</span> Double.POSITIVE_INFINITY;</span><br><span class="line"><span class="type">double</span> <span class="variable">nan</span> <span class="operator">=</span> Double.NaN;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断NaN</span></span><br><span class="line"><span class="keyword">if</span> (Double.isNaN(nan)) &#123;...&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最大值处理</span></span><br><span class="line"><span class="type">long</span> <span class="variable">max</span> <span class="operator">=</span> Long.MAX_VALUE;</span><br><span class="line"><span class="comment">// max + 1 会变成 Long.MIN_VALUE</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 结构速查 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python 学习速查笔记（4）</title>
      <link href="/2025/03/31/python%E5%AD%A6%E4%B9%A0%E9%80%9F%E6%9F%A5%E7%AC%94%E8%AE%B0%EF%BC%884%EF%BC%89/"/>
      <url>/2025/03/31/python%E5%AD%A6%E4%B9%A0%E9%80%9F%E6%9F%A5%E7%AC%94%E8%AE%B0%EF%BC%884%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="python-学习速查笔记"><a href="#python-学习速查笔记" class="headerlink" title="python 学习速查笔记"></a>python 学习速查笔记</h1><blockquote><p>这一部分主要是数字，字符串，列表，元组，字典，集合的学习笔记。</p></blockquote><p><strong>这篇文章真的很长，累死了，查的时候看大纲mmd</strong></p><h2 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h2><p>Python 数字数据类型用于<strong>存储数值</strong>。<br>数据类型是<strong>不允许改变的</strong>，这就意味着如果改变数字数据类型的值，将<strong>重新分配内存空间</strong>。<br>以下实例在变量赋值时 Number 对象将被创建：</p><blockquote><p>var1 = 1<br>var2 = 10</p></blockquote><p>使用del语句删除一些数字对象的引用。<br>del语句的语法是：</p><blockquote><p>del var1[,var2[,var3[….,varN]]]</p></blockquote><p>使用del语句删除单个或多个对象的引用，例如：</p><blockquote><p>del var<br>del var_a, var_b</p></blockquote><h2 id="数字类型分类-三类"><a href="#数字类型分类-三类" class="headerlink" title="数字类型分类(三类)"></a>数字类型分类(三类)</h2><div class="table-container"><table><thead><tr><th>类型</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td>整型(int)</td><td>不限大小的正负整数</td><td><code>10</code>, <code>-5</code>, <code>0x1F</code></td></tr><tr><td>浮点型(float)</td><td>含小数或科学计数法表示的数</td><td><code>3.14</code>, <code>2.5e2</code></td></tr><tr><td>复数(complex)</td><td>实部+虚部（浮点数形式）</td><td><code>3+4j</code>, <code>complex(2,3)</code></td></tr><tr><td>布尔(bool)</td><td>int子类（True=1, False=0）</td><td><code>True</code>, <code>False</code></td></tr></tbody></table></div><ul><li><strong>整型(int) </strong>- 通常被称为是整型或整数，是正或负整数，不带小数点。Python3 <strong>整型是没有限制大小的</strong>，可以当作<code>Long</code>类型使用，所以 Python3 没有 Python2 的 Long 类型。<strong>布尔(bool)是整型的子类型</strong>。</li><li><strong>浮点型(float) </strong>- 浮点型由<strong>整数部分</strong>与<strong>小数部分</strong>组成，浮点型也可以使用科学计数法表示（2.5e2 = 2.5 x 102 = 250）</li><li><strong>复数( (complex)) </strong>- 复数由<strong>实数部分</strong>和<strong>虚数部分</strong>构成，可以用<code>a + bj</code>,或者<code>complex(a,b)</code>表示， <strong>复数的实部a和虚部b都是浮点型</strong>。</li></ul><p>我们可以使用十六进制和八进制来代表整数</p><h2 id="Python-数字类型转换"><a href="#Python-数字类型转换" class="headerlink" title="Python 数字类型转换"></a>Python 数字类型转换</h2><p>数据类型的转换，你只需要将数据类型作为函数名即可。</p><ul><li>int(x) 将x转换为一个整数。</li><li>float(x) 将x转换到一个浮点数。</li><li>complex(x) 将x转换到一个复数，实数部分为 x，虚数部分为 0。</li><li>complex(x, y) 将 x 和 y 转换到一个复数，实数部分为 x，虚数部分为 y。x 和 y 是数字表达式。<br>以下实例将浮点数变量 a 转换为整数：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a = 1.0</span><br><span class="line">&gt;&gt;&gt; int(a)</span><br><span class="line">1</span><br></pre></td></tr></table></figure><h2 id="Python-数字运算"><a href="#Python-数字运算" class="headerlink" title="Python 数字运算"></a>Python 数字运算</h2>Python 解释器可以作为一个简单的计算器，您可以在解释器里输入一个表达式，它将输出表达式的值。<br>表达式的语法很直白： <code>+</code>, <code>-</code>,<code>*</code>和 <code>/</code>, 和其它语言（如Pascal或C）里一样。例如：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; 2 + 2</span><br><span class="line">4</span><br><span class="line">&gt;&gt;&gt; 50 - 5*6</span><br><span class="line">20</span><br><span class="line">&gt;&gt;&gt; (50 - 5*6) / 4</span><br><span class="line">5.0</span><br><span class="line">&gt;&gt;&gt; 8 / 5  # 总是返回一个浮点数</span><br><span class="line">1.6</span><br></pre></td></tr></table></figure>浮点数运算有精度问题，不同机器上的结果可能不同<br>在整数除法中，除法<code>/</code>总是返回一个浮点数，如果只想得到整数的结果，丢弃可能的分数部分，可以使用运算符<code>//</code>：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; 17 / 3  # 整数除法返回浮点型</span><br><span class="line">5.666666666666667</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">&gt;&gt;&gt; 17 // 3  # 整数除法返回向下取整后的结果</span><br><span class="line">5</span><br><span class="line">&gt;&gt;&gt; 17 % 3  # ％操作符返回除法的余数</span><br><span class="line">2</span><br><span class="line">&gt;&gt;&gt; 5 * 3 + 2 </span><br><span class="line">17</span><br></pre></td></tr></table></figure>注意：<code>//</code> 得到的并不一定是整数类型的数，它与分母分子的数据类型有关系。<br>例如：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; 7//2</span><br><span class="line">3</span><br><span class="line">&gt;&gt;&gt; 7.0//2</span><br><span class="line">3.0</span><br><span class="line">&gt;&gt;&gt; 7//2.0</span><br><span class="line">3.0</span><br><span class="line">&gt;&gt;&gt; </span><br></pre></td></tr></table></figure>等号<code>=</code>用于给变量赋值。赋值之后，除了下一个提示符，解释器不会显示任何结果。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; width = 20</span><br><span class="line">&gt;&gt;&gt; height = 5*9</span><br><span class="line">&gt;&gt;&gt; width * height</span><br><span class="line">900</span><br></pre></td></tr></table></figure>Python 可以使用<code>**</code>操作来进行幂运算：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; 5 ** 2  # 5 的平方</span><br><span class="line">25</span><br><span class="line">&gt;&gt;&gt; 2 ** 7  # 2的7次方</span><br><span class="line">128</span><br></pre></td></tr></table></figure><strong>变量在使用前必须先”定义”（即赋予变量一个值），否则会出现错误：</strong><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; n   # 尝试访问一个未定义的变量</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">NameError: name &#x27;n&#x27; is not defined</span><br></pre></td></tr></table></figure><strong>不同类型的数混合运算时会将整数转换为浮点数：</strong><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; 3 * 3.75 / 1.5</span><br><span class="line">7.5</span><br><span class="line">&gt;&gt;&gt; 7.0 / 2</span><br><span class="line">3.5</span><br></pre></td></tr></table></figure>在交互模式中，最后被输出的表达式结果被赋值给变量 _ 。例如：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; tax = 12.5 / 100</span><br><span class="line">&gt;&gt;&gt; price = 100.50</span><br><span class="line">&gt;&gt;&gt; price * tax</span><br><span class="line">12.5625</span><br><span class="line">&gt;&gt;&gt; price + _</span><br><span class="line">113.0625</span><br><span class="line">&gt;&gt;&gt; round(_, 2)</span><br><span class="line">113.06</span><br></pre></td></tr></table></figure>以下是 Python 中常用数学函数的详细表格（包含 <code>math</code> 模块和内置函数）：</li></ul><h2 id="Python-数学函数速查表"><a href="#Python-数学函数速查表" class="headerlink" title="Python 数学函数速查表"></a><strong>Python 数学函数速查表</strong></h2><div class="table-container"><table><thead><tr><th><strong>函数/常量</strong></th><th><strong>描述</strong></th><th><strong>示例</strong></th><th><strong>输出结果</strong></th></tr></thead><tbody><tr><td><strong>内置函数</strong></td><td></td><td></td><td></td></tr><tr><td><code>abs(x)</code></td><td>返回绝对值</td><td><code>abs(-5)</code></td><td><code>5</code></td></tr><tr><td><code>round(x[, n])</code></td><td>四舍五入（可指定小数位数）</td><td><code>round(3.14159, 2)</code></td><td><code>3.14</code></td></tr><tr><td><code>pow(x, y)</code></td><td>计算 x 的 y 次幂（等价于 <code>x**y</code>）</td><td><code>pow(2, 3)</code></td><td><code>8</code></td></tr><tr><td><code>divmod(a, b)</code></td><td>返回商和余组的元组 <code>(a//b, a%b)</code></td><td><code>divmod(10, 3)</code></td><td><code>(3, 1)</code></td></tr><tr><td><strong>math 模块函数</strong></td><td>（需 <code>import math</code>）</td><td></td><td></td></tr><tr><td><code>math.ceil(x)</code></td><td>向上取整</td><td><code>math.ceil(4.2)</code></td><td><code>5</code></td></tr><tr><td><code>math.floor(x)</code></td><td>向下取整</td><td><code>math.floor(4.9)</code></td><td><code>4</code></td></tr><tr><td><code>math.sqrt(x)</code></td><td>平方根</td><td><code>math.sqrt(16)</code></td><td><code>4.0</code></td></tr><tr><td><code>math.exp(x)</code></td><td>返回 e 的 x 次幂</td><td><code>math.exp(1)</code></td><td><code>2.718281828459045</code></td></tr><tr><td><code>math.log(x[, base])</code></td><td>对数运算（默认自然对数，可指定底数）</td><td><code>math.log(100, 10)</code></td><td><code>2.0</code></td></tr><tr><td><code>math.log10(x)</code></td><td>以 10 为底的对数</td><td><code>math.log10(1000)</code></td><td><code>3.0</code></td></tr><tr><td><code>math.sin(x)</code></td><td>正弦函数（x 为弧度）</td><td><code>math.sin(math.pi/2)</code></td><td><code>1.0</code></td></tr><tr><td><code>math.cos(x)</code></td><td>余弦函数</td><td><code>math.cos(0)</code></td><td><code>1.0</code></td></tr><tr><td><code>math.tan(x)</code></td><td>正切函数</td><td><code>math.tan(math.pi/4)</code></td><td><code>0.999...</code>（≈1.0）</td></tr><tr><td><code>math.degrees(x)</code></td><td>弧度转角度</td><td><code>math.degrees(math.pi)</code></td><td><code>180.0</code></td></tr><tr><td><code>math.radians(x)</code></td><td>角度转弧度</td><td><code>math.radians(90)</code></td><td><code>1.570...</code>（≈π/2）</td></tr><tr><td><code>math.hypot(x, y)</code></td><td>计算欧几里得范数（√(x² + y²)）</td><td><code>math.hypot(3, 4)</code></td><td><code>5.0</code></td></tr><tr><td><code>math.factorial(n)</code></td><td>阶乘计算</td><td><code>math.factorial(5)</code></td><td><code>120</code></td></tr><tr><td><code>math.gcd(a, b)</code></td><td>最大公约数</td><td><code>math.gcd(36, 60)</code></td><td><code>12</code></td></tr><tr><td><strong>math 常量</strong></td><td></td><td></td><td></td></tr><tr><td><code>math.pi</code></td><td>圆周率 π</td><td><code>math.pi</code></td><td><code>3.141592653589793</code></td></tr><tr><td><code>math.e</code></td><td>自然常数 e</td><td><code>math.e</code></td><td><code>2.718281828459045</code></td></tr><tr><td><code>math.inf</code></td><td>正无穷大</td><td><code>math.inf &gt; 1e10</code></td><td><code>True</code></td></tr><tr><td><code>math.nan</code></td><td>非数字（Not a Number）</td><td><code>math.isnan(math.nan)</code></td><td><code>True</code></td></tr></tbody></table></div><h3 id="使用示例代码"><a href="#使用示例代码" class="headerlink" title="使用示例代码"></a><strong>使用示例代码</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算圆的面积</span></span><br><span class="line">radius = <span class="number">5</span></span><br><span class="line">area = math.pi * math.<span class="built_in">pow</span>(radius, <span class="number">2</span>)  <span class="comment"># 或 radius**2</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;圆面积: <span class="subst">&#123;area:<span class="number">.2</span>f&#125;</span>&quot;</span>)  <span class="comment"># 输出: 圆面积: 78.54</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 解三角形（已知斜边和角度）</span></span><br><span class="line">hypotenuse = <span class="number">10</span></span><br><span class="line">angle_deg = <span class="number">30</span></span><br><span class="line">angle_rad = math.radians(angle_deg)</span><br><span class="line">opposite = hypotenuse * math.sin(angle_rad)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;对边长度: <span class="subst">&#123;opposite:<span class="number">.2</span>f&#125;</span>&quot;</span>)  <span class="comment"># 输出: 对边长度: 5.00</span></span><br></pre></td></tr></table></figure><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a><strong>注意事项</strong></h3><ol><li><strong>精度问题</strong>：浮点数运算可能存在微小误差（如 <code>math.sin(math.pi)</code> 实际输出 <code>1.2246467991473532e-16</code> 而非 <code>0</code>）。</li><li><strong>异常处理</strong>：负数开平方会引发 <code>ValueError</code>，建议用 <code>try-except</code> 捕获。</li><li><strong>性能</strong>：对于大量计算，考虑使用 <code>numpy</code> 替代 <code>math</code> 模块。</li></ol><blockquote><p><em>建议将此表格保存为快速参考手册！</em></p></blockquote><p><a href="https://www.runoob.com/python3/python3-number.html">其他完整函数</a></p><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p><a href="https://www.runoob.com/python3/python3-string.html">详细网站，详见菜鸟教程</a></p><h1 id="Python-字符串操作完全指南"><a href="#Python-字符串操作完全指南" class="headerlink" title="Python 字符串操作完全指南"></a>Python 字符串操作完全指南</h1><h2 id="1-访问字符串中的值"><a href="#1-访问字符串中的值" class="headerlink" title="1. 访问字符串中的值"></a>1. 访问字符串中的值</h2><p>Python 不支持单字符类型，单字符在 Python 中也是作为一个字符串使用。</p><p>Python 访问子字符串，可以使用方括号 [] 来截取字符串，字符串的截取的语法格式如下：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">变量[头下标:尾下标]</span><br></pre></td></tr></table></figure></p><h3 id="索引访问"><a href="#索引访问" class="headerlink" title="索引访问"></a>索引访问</h3><ul><li>Python 字符串是字符的有序集合，可通过索引访问<strong>单个字符</strong></li><li><strong>索引从0开始</strong>，支持<strong>正向索引和反向索引</strong></li><li>正向索引：<code>0</code> 到 <code>len(str)-1</code></li><li>反向索引：<code>-1</code> 表示最后一个字符，<code>-len(str)</code> 表示第一个字符</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">&quot;Python&quot;</span></span><br><span class="line"><span class="built_in">print</span>(s[<span class="number">0</span>])    <span class="comment"># &#x27;P&#x27; (第一个字符)</span></span><br><span class="line"><span class="built_in">print</span>(s[-<span class="number">1</span>])   <span class="comment"># &#x27;n&#x27; (最后一个字符)</span></span><br></pre></td></tr></table></figure><h3 id="切片访问"><a href="#切片访问" class="headerlink" title="切片访问"></a>切片访问</h3><ul><li>语法：<code>str[start:end:step]</code></li><li><strong>左闭右开区间</strong>：包含start，不包含end</li><li>省略值：<ul><li><strong>start默认为0</strong></li><li><strong>end默认为字符串长度</strong></li><li><strong>step默认为1</strong></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">&quot;Hello World&quot;</span></span><br><span class="line"><span class="built_in">print</span>(s[<span class="number">0</span>:<span class="number">5</span>])   <span class="comment"># &#x27;Hello&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(s[<span class="number">6</span>:])    <span class="comment"># &#x27;World&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(s[::<span class="number">2</span>])   <span class="comment"># &#x27;HloWrd&#x27; (步长为2)</span></span><br><span class="line"><span class="built_in">print</span>(s[::-<span class="number">1</span>])  <span class="comment"># &#x27;dlroW olleH&#x27; (反转字符串)</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong>：</p><ul><li>索引越界会引发<code>IndexError</code><br>  注意字长防止越界</li><li>切片越界不会报错，会自动调整到有效范围</li></ul><h2 id="2-字符串更新"><a href="#2-字符串更新" class="headerlink" title="2. 字符串更新"></a>2. 字符串更新</h2><h3 id="字符串不可变性"><a href="#字符串不可变性" class="headerlink" title="字符串不可变性"></a>字符串不可变性</h3><ul><li>Python字符串是<strong>不可变对象</strong>，不能<strong>直接修改某个字符</strong></li><li>必须通过<strong>创建新字符串</strong>实现”修改”<br>  内存对象会发生变化</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">&quot;Python&quot;</span></span><br><span class="line"><span class="comment"># s[0] = &#x27;J&#x27;  # 错误！会引发TypeError</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 正确做法：创建新字符串</span></span><br><span class="line">s = <span class="string">&#x27;J&#x27;</span> + s[<span class="number">1</span>:]  <span class="comment"># &#x27;Jython&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="常用更新方法"><a href="#常用更新方法" class="headerlink" title="常用更新方法"></a>常用更新方法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 替换子串</span></span><br><span class="line">s = s.replace(<span class="string">&#x27;Py&#x27;</span>, <span class="string">&#x27;Ja&#x27;</span>)  <span class="comment"># &#x27;Jython&#x27; → &#x27;Jython&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 拼接字符串</span></span><br><span class="line">s = s[:<span class="number">2</span>] + <span class="string">&#x27;va&#x27;</span> + s[<span class="number">4</span>:]  <span class="comment"># &#x27;Jython&#x27; → &#x27;Javaon&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="3-转义字符"><a href="#3-转义字符" class="headerlink" title="3. 转义字符"></a>3. 转义字符</h2><h3 id="常见转义字符"><a href="#常见转义字符" class="headerlink" title="常见转义字符"></a>常见转义字符</h3><p>在需要在字符中使用特殊字符时，python 用反斜杠 \ 转义字符。如下表：<br>| 转义字符 | 描述               | 示例            |<br>|—————|——————————|————————-|<br>| <code>\\</code>     | 反斜杠             | <code>&quot;C:\\path&quot;</code>    |<br>| <code>\&#39;</code>     | 单引号             | <code>&#39;It\&#39;s&#39;</code>       |<br>| <code>\&quot;</code>     | 双引号             | <code>&quot;He said \&quot;Hi\&quot;&quot;</code> |<br>| <code>\n</code>     | 换行               | <code>&quot;Line1\nLine2&quot;</code>|<br>| <code>\t</code>     | 水平制表符         | <code>&quot;Name\tAge&quot;</code>   |<br>| <code>\r</code>     | 回车               | <code>&quot;Hello\rWorld&quot;</code>|<br>| <code>\b</code>     | 退格               | <code>&quot;Hel\blo&quot;</code>     |<br>| <code>\uxxxx</code> | Unicode字符        | <code>&quot;\u03A9&quot;</code> (Ω)  |<br>特殊案例，使用<code>\r</code>实现百分比进度：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">101</span>): <span class="comment"># 添加进度条图形和百分比</span></span><br><span class="line">    bar = <span class="string">&#x27;[&#x27;</span> + <span class="string">&#x27;=&#x27;</span> * (i // <span class="number">2</span>) + <span class="string">&#x27; &#x27;</span> * (<span class="number">50</span> - i // <span class="number">2</span>) + <span class="string">&#x27;]&#x27;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;\r<span class="subst">&#123;bar&#125;</span> <span class="subst">&#123;i:<span class="number">3</span>&#125;</span>%&quot;</span>, end=<span class="string">&#x27;&#x27;</span>, flush=<span class="literal">True</span>)</span><br><span class="line">    time.sleep(<span class="number">0.05</span>)</span><br><span class="line"><span class="built_in">print</span>()</span><br></pre></td></tr></table></figure><br>以下实例，我们使用了不同的转义字符来演示单引号、换行符、制表符、退格符、换页符、ASCII、二进制、八进制数和十六进制数的效果：（整体效果)<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\&#x27;Hello, world!\&#x27;&#x27;</span>)  <span class="comment"># 输出：&#x27;Hello, world!&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Hello, world!\nHow are you?&quot;</span>)  <span class="comment"># 输出：Hello, world!</span></span><br><span class="line">                                        <span class="comment">#       How are you?</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Hello, world!\tHow are you?&quot;</span>)  <span class="comment"># 输出：Hello, world!    How are you?</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Hello,\b world!&quot;</span>)  <span class="comment"># 输出：Hello world!</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Hello,\f world!&quot;</span>)  <span class="comment"># 输出：</span></span><br><span class="line">                           <span class="comment"># Hello,</span></span><br><span class="line">                           <span class="comment">#  world!</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;A 对应的 ASCII 值为：&quot;</span>, <span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>))  <span class="comment"># 输出：A 对应的 ASCII 值为： 65</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\x41 为 A 的 ASCII 代码&quot;</span>)  <span class="comment"># 输出：A 为 A 的 ASCII 代码</span></span><br><span class="line"></span><br><span class="line">decimal_number = <span class="number">42</span></span><br><span class="line">binary_number = <span class="built_in">bin</span>(decimal_number)  <span class="comment"># 十进制转换为二进制</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;转换为二进制:&#x27;</span>, binary_number)  <span class="comment"># 转换为二进制: 0b101010</span></span><br><span class="line"></span><br><span class="line">octal_number = <span class="built_in">oct</span>(decimal_number)  <span class="comment"># 十进制转换为八进制</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;转换为八进制:&#x27;</span>, octal_number)  <span class="comment"># 转换为八进制: 0o52</span></span><br><span class="line"></span><br><span class="line">hexadecimal_number = <span class="built_in">hex</span>(decimal_number)  <span class="comment"># 十进制转换为十六进制</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;转换为十六进制:&#x27;</span>, hexadecimal_number) <span class="comment"># 转换为十六进制: 0x2a</span></span><br></pre></td></tr></table></figure></p><h3 id="原始字符串"><a href="#原始字符串" class="headerlink" title="原始字符串"></a>原始字符串</h3><ul><li>在字符串前加<code>r</code>或<code>R</code>，<strong>转义字符不会生效</strong></li><li>常用于正则表达式和文件路径</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">path = <span class="string">r&quot;C:\new_folder\test.txt&quot;</span></span><br><span class="line"><span class="built_in">print</span>(path)  <span class="comment"># 输出: C:\new_folder\test.txt</span></span><br></pre></td></tr></table></figure><h2 id="4-字符串运算符"><a href="#4-字符串运算符" class="headerlink" title="4. 字符串运算符"></a>4. 字符串运算符</h2><h3 id="基本运算符"><a href="#基本运算符" class="headerlink" title="基本运算符"></a>基本运算符</h3><p>不是数字运算符，具有和长得像罢了(ノ￣▽￣)</p><div class="table-container"><table><thead><tr><th>运算符</th><th>描述</th><th>示例</th><th>结果</th></tr></thead><tbody><tr><td><code>+</code></td><td>字符串连接</td><td><code>&quot;Py&quot; + &quot;thon&quot;</code></td><td><code>&quot;Python&quot;</code></td></tr><tr><td><code>*</code></td><td>重复字符串</td><td><code>&quot;Hi&quot; * 3</code></td><td><code>&quot;HiHiHi&quot;</code></td></tr><tr><td><code>[]</code></td><td>索引访问</td><td><code>&quot;Python&quot;[1]</code></td><td><code>&#39;y&#39;</code></td></tr><tr><td><code>[:]</code></td><td>切片</td><td><code>&quot;Python&quot;[1:4]</code></td><td><code>&#39;yth&#39;</code></td></tr><tr><td><code>in</code></td><td>成员检查</td><td><code>&#39;Py&#39; in &#39;Python&#39;</code></td><td><code>True</code></td></tr><tr><td><code>not in</code></td><td>非成员检查</td><td><code>&#39;Ruby&#39; not in &#39;Python&#39;</code></td><td><code>True</code></td></tr></tbody></table></div><p>我摘这里搞个是咧捏：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"> </span><br><span class="line">a = <span class="string">&quot;Hello&quot;</span></span><br><span class="line">b = <span class="string">&quot;Python&quot;</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;a + b 输出结果：&quot;</span>, a + b)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;a * 2 输出结果：&quot;</span>, a * <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;a[1] 输出结果：&quot;</span>, a[<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;a[1:4] 输出结果：&quot;</span>, a[<span class="number">1</span>:<span class="number">4</span>])</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span>( <span class="string">&quot;H&quot;</span> <span class="keyword">in</span> a) :</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;H 在变量 a 中&quot;</span>)</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;H 不在变量 a 中&quot;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span>( <span class="string">&quot;M&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> a) :</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;M 不在变量 a 中&quot;</span>)</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;M 在变量 a 中&quot;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span> (<span class="string">r&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">R&#x27;\n&#x27;</span>)</span><br></pre></td></tr></table></figure><br>输出结果如下啊</p><blockquote><p>a + b 输出结果： HelloPython<br>a * 2 输出结果： HelloHello<br>a[1] 输出结果： e<br>a[1:4] 输出结果： ell<br>H 在变量 a 中<br>M 不在变量 a 中<br>\n<br>\n</p></blockquote><h3 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h3><p>字符串按字典序比较（ASCII/Unicode码值）：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;apple&quot;</span> &lt; <span class="string">&quot;banana&quot;</span>)  <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Apple&quot;</span> &lt; <span class="string">&quot;apple&quot;</span>)   <span class="comment"># True (大写字母ASCII码更小)</span></span><br></pre></td></tr></table></figure></p><h2 id="5-字符串格式化"><a href="#5-字符串格式化" class="headerlink" title="5. 字符串格式化"></a>5. 字符串格式化</h2><p>Python 支持格式化字符串的输出 。尽管这样可能会用到非常复杂的表达式，但最基本的用法是将一个值插入到一个有字符串格式符 %s 的字符串中。<br>有点像c欸(｡◕ˇ∀ˇ◕)<br>各个版本的我都搞下</p><h3 id="1-格式化-旧式"><a href="#1-格式化-旧式" class="headerlink" title="1. % 格式化 (旧式)"></a>1. % 格式化 (旧式)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">&quot;Alice&quot;</span></span><br><span class="line">age = <span class="number">25</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Name: %s, Age: %d&quot;</span> % (name, age))</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th>格式符</th><th>说明</th></tr></thead><tbody><tr><td><code>%s</code></td><td>字符串</td></tr><tr><td><code>%d</code></td><td>十进制整数</td></tr><tr><td><code>%f</code></td><td>浮点数</td></tr><tr><td><code>%x</code></td><td>十六进制整数</td></tr></tbody></table></div><h3 id="2-str-format-Python-2-6"><a href="#2-str-format-Python-2-6" class="headerlink" title="2. str.format() (Python 2.6+)"></a>2. str.format() (Python 2.6+)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Name: &#123;&#125;, Age: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(name, age))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Name: &#123;1&#125;, Age: &#123;0&#125;&quot;</span>.<span class="built_in">format</span>(age, name))  <span class="comment"># 按索引</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Name: &#123;n&#125;, Age: &#123;a&#125;&quot;</span>.<span class="built_in">format</span>(n=name, a=age))  <span class="comment"># 关键字</span></span><br></pre></td></tr></table></figure><h3 id="3-f-string-Python-3-6-推荐"><a href="#3-f-string-Python-3-6-推荐" class="headerlink" title="3. f-string (Python 3.6+ 推荐)"></a>3. f-string (Python 3.6+ 推荐)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Name: <span class="subst">&#123;name&#125;</span>, Age: <span class="subst">&#123;age&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Next year: <span class="subst">&#123;age + <span class="number">1</span>&#125;</span>&quot;</span>)  <span class="comment"># 支持表达式</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Name: <span class="subst">&#123;name.upper()&#125;</span>&quot;</span>)  <span class="comment"># 支持方法调用</span></span><br></pre></td></tr></table></figure><p><strong>格式化规范</strong>：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pi = <span class="number">3.1415926</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Pi: <span class="subst">&#123;pi:<span class="number">.2</span>f&#125;</span>&quot;</span>)      <span class="comment"># 保留2位小数: Pi: 3.14</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Hex: <span class="subst">&#123;<span class="number">255</span>:#0x&#125;</span>&quot;</span>)    <span class="comment"># 十六进制: Hex: 0xff</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Percent: <span class="subst">&#123;<span class="number">0.25</span>:<span class="number">.1</span>%&#125;</span>&quot;</span>) <span class="comment"># 百分比: Percent: 25.0%</span></span><br></pre></td></tr></table></figure></p><h2 id="6-三引号字符串"><a href="#6-三引号字符串" class="headerlink" title="6. 三引号字符串"></a>6. 三引号字符串</h2><p>python三引号允许一个字符串跨多行，字符串中可以包含换行符、制表符以及其他特殊字符。</p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul><li>使用三个单引号<code>&#39;&#39;&#39;</code>或双引号<code>&quot;&quot;&quot;</code></li><li><strong>保留所有格式</strong>（换行、缩进等）</li><li>常用于多行字符串、文档字符串(docstring)</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">multi_line = <span class="string">&quot;&quot;&quot;第一行</span></span><br><span class="line"><span class="string">第二行</span></span><br><span class="line"><span class="string">    第三行(带缩进)&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="文档字符串示例"><a href="#文档字符串示例" class="headerlink" title="文档字符串示例"></a>文档字符串示例</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">calculate</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;计算两个数的和与差</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        a: 第一个数</span></span><br><span class="line"><span class="string">        b: 第二个数</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        返回包含和与差的元组 (sum, difference)</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> a + b, a - b</span><br></pre></td></tr></table></figure><p>makedown玩家狂喜(⁎˃ᴗ˂⁎)，所见即所得万岁！！</p><h2 id="7-Unicode-字符串"><a href="#7-Unicode-字符串" class="headerlink" title="7. Unicode 字符串"></a>7. Unicode 字符串</h2><p>在Python2中，普通字符串是以8位ASCII码进行存储的，而Unicode字符串则存储为16位unicode字符串，这样能够表示更多的字符集。使用的语法是在字符串前面加上前缀 u。</p><h3 id="Python-3-的字符串"><a href="#Python-3-的字符串" class="headerlink" title="Python 3 的字符串"></a>Python 3 的字符串</h3><ul><li>Python 3 中所有字符串默认都是Unicode字符串（<code>str</code>类型）</li><li>使用<code>\u</code>转义表示Unicode字符</li><li>支持多语言字符</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">&quot;中文 Español Français&quot;</span></span><br><span class="line"><span class="built_in">print</span>(s)  <span class="comment"># 正常显示多语言</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Unicode码点</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\u03A9&quot;</span>)  <span class="comment"># 输出希腊字母Ω</span></span><br></pre></td></tr></table></figure><h3 id="编码转换"><a href="#编码转换" class="headerlink" title="编码转换"></a>编码转换</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># str → bytes</span></span><br><span class="line">data = <span class="string">&quot;中文&quot;</span>.encode(<span class="string">&quot;utf-8&quot;</span>)  <span class="comment"># b&#x27;\xe4\xb8\xad\xe6\x96\x87&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># bytes → str</span></span><br><span class="line">text = data.decode(<span class="string">&quot;utf-8&quot;</span>)   <span class="comment"># &#x27;中文&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong>：</p><ul><li>文件操作时注意指定编码：<code>open(&quot;file.txt&quot;, encoding=&quot;utf-8&quot;)</code></li><li>避免”编码地狱”：统一使用UTF-8编码</li></ul><h2 id="8-字符串内建函数"><a href="#8-字符串内建函数" class="headerlink" title="8. 字符串内建函数"></a>8. 字符串内建函数</h2><h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><div class="table-container"><table><thead><tr><th>方法</th><th>描述</th><th>示例</th><th>结果</th></tr></thead><tbody><tr><td><code>str.lower()</code></td><td>转为小写</td><td><code>&quot;Python&quot;.lower()</code></td><td><code>&#39;python&#39;</code></td></tr><tr><td><code>str.upper()</code></td><td>转为大写</td><td><code>&quot;Python&quot;.upper()</code></td><td><code>&#39;PYTHON&#39;</code></td></tr><tr><td><code>str.strip()</code></td><td>去除两端空白</td><td><code>&quot;  hello  &quot;.strip()</code></td><td><code>&#39;hello&#39;</code></td></tr><tr><td><code>str.split()</code></td><td>分割字符串</td><td><code>&quot;a,b,c&quot;.split(&#39;,&#39;)</code></td><td><code>[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]</code></td></tr><tr><td><code>str.join(iterable)</code></td><td>连接序列元素</td><td><code>&#39;,&#39;.join([&#39;a&#39;, &#39;b&#39;, &#39;c&#39;])</code></td><td><code>&#39;a,b,c&#39;</code></td></tr><tr><td><code>str.find(sub)</code></td><td>查找子串位置</td><td><code>&quot;python&quot;.find(&#39;th&#39;)</code></td><td><code>2</code></td></tr><tr><td><code>str.replace(old, new)</code></td><td>替换子串</td><td><code>&quot;hello&quot;.replace(&#39;l&#39;, &#39;L&#39;)</code></td><td><code>&#39;heLLo&#39;</code></td></tr><tr><td><code>str.startswith(prefix)</code></td><td>检查前缀</td><td><code>&quot;hello&quot;.startswith(&#39;he&#39;)</code></td><td><code>True</code></td></tr><tr><td><code>str.endswith(suffix)</code></td><td>检查后缀</td><td><code>&quot;hello&quot;.endswith(&#39;lo&#39;)</code></td><td><code>True</code></td></tr><tr><td><code>str.isdigit()</code></td><td>是否全数字</td><td><code>&quot;123&quot;.isdigit()</code></td><td><code>True</code></td></tr><tr><td><code>str.isalpha()</code></td><td>是否全字母</td><td><code>&quot;abc&quot;.isalpha()</code></td><td><code>True</code></td></tr></tbody></table></div><h3 id="重要方法详解"><a href="#重要方法详解" class="headerlink" title="重要方法详解"></a>重要方法详解</h3><p><strong>1. split() vs splitlines()</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">text = <span class="string">&quot;line1\nline2\r\nline3&quot;</span></span><br><span class="line"><span class="built_in">print</span>(text.split())        <span class="comment"># [&#x27;line1&#x27;, &#x27;line2&#x27;, &#x27;line3&#x27;] (默认按空白分割)</span></span><br><span class="line"><span class="built_in">print</span>(text.split(<span class="string">&#x27;\n&#x27;</span>))    <span class="comment"># [&#x27;line1&#x27;, &#x27;line2\r&#x27;, &#x27;line3&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(text.splitlines())   <span class="comment"># [&#x27;line1&#x27;, &#x27;line2&#x27;, &#x27;line3&#x27;] (智能识别换行符)</span></span><br></pre></td></tr></table></figure></p><p><strong>2. partition() 与 rpartition()</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">url = <span class="string">&quot;user:pass@domain.com&quot;</span></span><br><span class="line"><span class="built_in">print</span>(url.partition(<span class="string">&#x27;@&#x27;</span>))  <span class="comment"># (&#x27;user:pass&#x27;, &#x27;@&#x27;, &#x27;domain.com&#x27;)</span></span><br><span class="line"><span class="built_in">print</span>(url.rpartition(<span class="string">&#x27;.&#x27;</span>)) <span class="comment"># (&#x27;user:pass@domain&#x27;, &#x27;.&#x27;, &#x27;com&#x27;)</span></span><br></pre></td></tr></table></figure></p><p><strong>3. 字符串填充</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;42&quot;</span>.zfill(<span class="number">5</span>))      <span class="comment"># &#x27;00042&#x27; (左侧补零)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hello&quot;</span>.center(<span class="number">10</span>, <span class="string">&#x27;*&#x27;</span>))  <span class="comment"># &#x27;**hello***&#x27; (居中填充)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hello&quot;</span>.ljust(<span class="number">10</span>))  <span class="comment"># &#x27;hello     &#x27; (左对齐)</span></span><br></pre></td></tr></table></figure></p><ol><li><strong>split() vs splitlines()</strong></li></ol><ul><li><p><strong>split()</strong> - 切菜刀</p><ul><li>默认按空格/换行/制表符切：<code>&quot;a b c&quot;.split()</code> → <code>[&#39;a&#39;,&#39;b&#39;,&#39;c&#39;]</code></li><li>可以指定切什么：<code>&quot;a,b,c&quot;.split(&#39;,&#39;)</code> → <code>[&#39;a&#39;,&#39;b&#39;,&#39;c&#39;]</code></li><li>遇到连续分隔符会切出空字符串：<code>&quot;a,,b&quot;.split(&#39;,&#39;)</code> → <code>[&#39;a&#39;,&#39;&#39;,&#39;b&#39;]</code></li></ul></li><li><p><strong>splitlines()</strong> - 智能换行切割机</p><ul><li>专切换行，不管你是<code>\n</code>还是<code>\r\n</code>都能认</li><li><code>&quot;第一行\n第二行&quot;.splitlines()</code> → <code>[&#39;第一行&#39;,&#39;第二行&#39;]</code></li><li>不会像split()那样切出空行</li></ul></li></ul><ol><li><strong>partition() 和 rpartition()</strong></li></ol><ul><li>都是<strong>切三段的刀</strong>，找到第一个指定分隔符切成：<ul><li>分隔符前 | 分隔符自己 | 分隔符后</li></ul></li><li><p><strong>partition()</strong> - 从左往右找</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;账号:密码@网址&quot;</span>.partition(<span class="string">&#x27;@&#x27;</span>) → (<span class="string">&#x27;账号:密码&#x27;</span>, <span class="string">&#x27;@&#x27;</span>, <span class="string">&#x27;网址&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li><p><strong>rpartition()</strong> - 从右往左找</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;图片.jpg&quot;</span>.rpartition(<span class="string">&#x27;.&#x27;</span>) → (<span class="string">&#x27;图片&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;jpg&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li><p>找不到分隔符时：返回<code>(原字符串, &#39;&#39;, &#39;&#39;)</code></p></li></ul><ol><li><strong>字符串填充</strong></li></ol><ul><li><p><strong>zfill()</strong> - 补零神器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;5&quot;</span>.zfill(<span class="number">3</span>) → <span class="string">&#x27;005&#x27;</span>  <span class="comment"># 补到3位</span></span><br></pre></td></tr></table></figure></li><li><p><strong>center()</strong> - 文字居中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;hi&quot;</span>.center(<span class="number">6</span>,<span class="string">&#x27;*&#x27;</span>) → <span class="string">&#x27;**hi**&#x27;</span>  <span class="comment"># 总长度6，两边用*填</span></span><br></pre></td></tr></table></figure></li><li><p><strong>ljust()/rjust()</strong> - 左右对齐</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;hi&quot;</span>.ljust(<span class="number">4</span>) → <span class="string">&#x27;hi  &#x27;</span>  <span class="comment"># 长度4，右边补空格</span></span><br><span class="line"><span class="string">&quot;hi&quot;</span>.rjust(<span class="number">4</span>,<span class="string">&#x27;-&#x27;</span>) → <span class="string">&#x27;--hi&#x27;</span>  <span class="comment"># 左边补-</span></span><br></pre></td></tr></table></figure><h3 id="一句话总结"><a href="#一句话总结" class="headerlink" title="一句话总结"></a>一句话总结</h3></li><li><code>split()</code>：随便切，<code>splitlines()</code>专切换行</li><li><code>partition()</code>：切三段，从左/从右找分隔符</li><li>填充方法：<code>zfill</code>补零，<code>center</code>居中，<code>ljust/rjust</code>左右对齐</li></ul><h2 id="关键要点总结"><a href="#关键要点总结" class="headerlink" title="关键要点总结"></a>关键要点总结</h2><ol><li><strong>不可变性</strong>：字符串创建后不能修改，所有”修改”操作都返回新字符串</li><li><strong>编码规范</strong>：Python 3 默认使用Unicode，处理文件时明确指定编码</li><li><strong>性能考虑</strong>：<ul><li>避免循环中使用<code>+</code>拼接字符串（使用<code>join()</code>更高效）</li><li>频繁字符串操作考虑使用<code>io.StringIO</code></li></ul></li><li><strong>格式化选择</strong>：<ul><li>Python 3.6+ 优先使用f-string</li><li>需要兼容旧版本时用<code>str.format()</code></li></ul></li><li><strong>安全注意</strong>：<ul><li>避免用<code>eval()</code>处理字符串</li><li>SQL查询使用参数化而非字符串拼接</li></ul></li></ol><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>这还有多少部分啊啊！！凸(艹皿艹 )，写不动了捏<br>序列是 Python 中<strong>最基本的数据结构</strong>。<br>序列中的每个值都有对应的位置值，称之为索引，第一个索引是 0，第二个索引是 1，依此类推。<br>Python 有<code>6</code>个序列的内置类型，但最常见的是列表和元组。<br>列表都可以进行的操作包括<strong>索引，切片，加，乘，检查成员</strong>。<br>此外，Python <em>已经内置<strong>确定序列的长度</strong>以及<strong>确定最大和最小的元素</strong>的方法</em>。<br>列表的数据项不需要具有相同的类型<br>创建一个列表，只要把逗号分隔的不同的数据项使用方括号括起来即可。如下所示：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">list1 = [&#x27;Google&#x27;, &#x27;Runoob&#x27;, 1997, 2000]</span><br><span class="line">list2 = [1, 2, 3, 4, 5 ]</span><br><span class="line">list3 = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;]</span><br><span class="line">list4 = [&#x27;red&#x27;, &#x27;green&#x27;, &#x27;blue&#x27;, &#x27;yellow&#x27;, &#x27;white&#x27;, &#x27;black&#x27;]</span><br></pre></td></tr></table></figure><br>像不像数组啊喵<br><a href="https://www.runoob.com/python3/python3-list.html">详细解释点这里，点这里啊，你为什么不点￣へ￣</a></p><h2 id="创建列表（注意列表格式）【很重要所以我先放上来了】"><a href="#创建列表（注意列表格式）【很重要所以我先放上来了】" class="headerlink" title="创建列表（注意列表格式）【很重要所以我先放上来了】"></a>创建列表（注意列表格式）【很重要所以我先放上来了】</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 空列表</span></span><br><span class="line">empty_list = []</span><br><span class="line"></span><br><span class="line"><span class="comment"># 包含不同类型元素的列表</span></span><br><span class="line">mixed_list = [<span class="number">1</span>, <span class="string">&quot;hello&quot;</span>, <span class="number">3.14</span>, <span class="literal">True</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 嵌套列表</span></span><br><span class="line">nested_list = [[<span class="number">1</span>, <span class="number">2</span>], [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>]]</span><br></pre></td></tr></table></figure><h2 id="Python3-列表完全指南"><a href="#Python3-列表完全指南" class="headerlink" title="Python3 列表完全指南"></a>Python3 列表完全指南</h2><h3 id="1-列表基础"><a href="#1-列表基础" class="headerlink" title="1. 列表基础"></a>1. 列表基础</h3><p>列表是Python中最灵活的数据结构，用方括号<code>[]</code>表示，元素用逗号分隔。</p><h4 id="创建列表（注意列表格式）"><a href="#创建列表（注意列表格式）" class="headerlink" title="创建列表（注意列表格式）"></a>创建列表（注意列表格式）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 空列表</span></span><br><span class="line">empty_list = []</span><br><span class="line"></span><br><span class="line"><span class="comment"># 包含不同类型元素的列表</span></span><br><span class="line">mixed_list = [<span class="number">1</span>, <span class="string">&quot;hello&quot;</span>, <span class="number">3.14</span>, <span class="literal">True</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 嵌套列表</span></span><br><span class="line">nested_list = [[<span class="number">1</span>, <span class="number">2</span>], [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>]]</span><br></pre></td></tr></table></figure><p><strong>特点</strong>：</p><ul><li>有序集合（元素有固定位置）</li><li>可变（可以修改内容），这就比呢个啥字符串自由多了吧</li><li>可包含任意数据类型，ヾ(ﾟ∀ﾟゞ)z真的吗</li><li>支持重复元素</li></ul><h3 id="2-访问列表元素"><a href="#2-访问列表元素" class="headerlink" title="2. 访问列表元素"></a>2. 访问列表元素</h3><p>你看下面的东西，直接搬用吧</p><h4 id="索引访问-1"><a href="#索引访问-1" class="headerlink" title="索引访问"></a>索引访问</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fruits = [<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;cherry&quot;</span>]</span><br><span class="line"><span class="built_in">print</span>(fruits[<span class="number">0</span>])   <span class="comment"># &quot;apple&quot;（正向索引从0开始）</span></span><br><span class="line"><span class="built_in">print</span>(fruits[-<span class="number">1</span>])  <span class="comment"># &quot;cherry&quot;（负索引从-1开始）</span></span><br></pre></td></tr></table></figure><h4 id="切片操作"><a href="#切片操作" class="headerlink" title="切片操作"></a>切片操作</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">numbers = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="built_in">print</span>(numbers[<span class="number">1</span>:<span class="number">4</span>])  <span class="comment"># [1, 2, 3]（左闭右开）</span></span><br><span class="line"><span class="built_in">print</span>(numbers[:<span class="number">3</span>])   <span class="comment"># [0, 1, 2]</span></span><br><span class="line"><span class="built_in">print</span>(numbers[<span class="number">2</span>:])   <span class="comment"># [2, 3, 4, 5]</span></span><br><span class="line"><span class="built_in">print</span>(numbers[::<span class="number">2</span>])  <span class="comment"># [0, 2, 4]（步长为2）</span></span><br><span class="line"><span class="built_in">print</span>(numbers[::-<span class="number">1</span>]) <span class="comment"># [5, 4, 3, 2, 1, 0]（反转）</span></span><br></pre></td></tr></table></figure><h3 id="3-修改列表"><a href="#3-修改列表" class="headerlink" title="3. 修改列表"></a>3. 修改列表</h3><h4 id="更新元素"><a href="#更新元素" class="headerlink" title="更新元素"></a>更新元素</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fruits = [<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;cherry&quot;</span>]</span><br><span class="line">fruits[<span class="number">1</span>] = <span class="string">&quot;blueberry&quot;</span>  <span class="comment"># 直接通过索引修改</span></span><br></pre></td></tr></table></figure><p>极高的效率</p><h4 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 末尾添加</span></span><br><span class="line">fruits.append(<span class="string">&quot;orange&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定位置插入</span></span><br><span class="line">fruits.insert(<span class="number">1</span>, <span class="string">&quot;mango&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 合并列表</span></span><br><span class="line">fruits.extend([<span class="string">&quot;grape&quot;</span>, <span class="string">&quot;pear&quot;</span>])</span><br><span class="line"><span class="comment"># 等价于 fruits += [&quot;grape&quot;, &quot;pear&quot;]</span></span><br></pre></td></tr></table></figure><h4 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 按索引删除</span></span><br><span class="line"><span class="keyword">del</span> fruits[<span class="number">0</span>]</span><br><span class="line">popped = fruits.pop(<span class="number">1</span>)  <span class="comment"># 删除并返回被删元素</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 按值删除</span></span><br><span class="line">fruits.remove(<span class="string">&quot;cherry&quot;</span>)  <span class="comment"># 只删除第一个匹配项</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 清空列表</span></span><br><span class="line">fruits.clear()</span><br></pre></td></tr></table></figure><h3 id="4-列表运算符"><a href="#4-列表运算符" class="headerlink" title="4. 列表运算符"></a>4. 列表运算符</h3><p>又称为Python列表脚本操作符 ︿(￣︶￣)︿<br>| 运算符 | 描述               | 示例                         |<br>|————|——————————|———————————————|<br>| <code>+</code>    | 列表拼接           | <code>[1,2] + [3,4]</code> → <code>[1,2,3,4]</code>|<br>| <code>*</code>    | 重复列表           | <code>[0]*3</code> → <code>[0,0,0]</code>          |<br>| <code>in</code>   | 成员检测           | <code>2 in [1,2,3]</code> → <code>True</code>      |<br>| <code>==</code>   | 列表比较           | <code>[1,2] == [1,2]</code> → <code>True</code>    |</p><h3 id="5-常用列表方法"><a href="#5-常用列表方法" class="headerlink" title="5. 常用列表方法"></a>5. 常用列表方法</h3><div class="table-container"><table><thead><tr><th>方法</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td><code>len()</code></td><td>返回列表长度</td><td><code>len([1,2,3])</code> → <code>3</code></td></tr><tr><td><code>sort()</code></td><td>原地排序</td><td><code>[3,1,2].sort()</code> → <code>[1,2,3]</code></td></tr><tr><td><code>reverse()</code></td><td>反转列表</td><td><code>[1,2,3].reverse()</code> → <code>[3,2,1]</code></td></tr><tr><td><code>count()</code></td><td>统计元素出现次数</td><td><code>[1,2,2].count(2)</code> → <code>2</code></td></tr><tr><td><code>index()</code></td><td>返回元素首次出现的索引</td><td><code>[&quot;a&quot;,&quot;b&quot;].index(&quot;b&quot;)</code> → <code>1</code></td></tr><tr><td><code>copy()</code></td><td>浅拷贝列表</td><td><code>new = old.copy()</code></td></tr></tbody></table></div><h3 id="6-列表推导式"><a href="#6-列表推导式" class="headerlink" title="6. 列表推导式"></a>6. 列表推导式</h3><p>简洁创建列表的方式：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建平方数列表</span></span><br><span class="line">squares = [x**<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>)]  <span class="comment"># [0, 1, 4, 9, 16]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 带条件的推导式</span></span><br><span class="line">evens = [x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>) <span class="keyword">if</span> x%<span class="number">2</span>==<span class="number">0</span>]  <span class="comment"># [0, 2, 4, 6, 8]</span></span><br></pre></td></tr></table></figure><br>劲啊，我感觉到了算法题深深的恶意 ╥﹏╥</p><h3 id="7-注意事项"><a href="#7-注意事项" class="headerlink" title="7. 注意事项"></a>7. 注意事项</h3><ol><li><p><strong>可变性</strong>：列表可变，函数可能修改原始列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">modify</span>(<span class="params">lst</span>):</span><br><span class="line">    lst.append(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">my_list = []</span><br><span class="line">modify(my_list)  <span class="comment"># my_list会被修改</span></span><br></pre></td></tr></table></figure></li><li><p><strong>浅拷贝问题</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">original = [[<span class="number">1</span>,<span class="number">2</span>], [<span class="number">3</span>,<span class="number">4</span>]]</span><br><span class="line">copied = original.copy()</span><br><span class="line">copied[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">99</span>  <span class="comment"># 也会修改original!</span></span><br></pre></td></tr></table></figure></li><li><p><strong>性能考虑</strong>：</p><ul><li><code>append()</code>/<code>pop()</code>是O(1)操作</li><li><code>insert(0, x)</code>/<code>remove()</code>是O(n)操作</li></ul></li><li><p><strong>内存效率</strong>：</p><ul><li>列表比元组占用更多内存</li><li>大数据集考虑使用生成器或NumPy数组</li></ul></li></ol><h2 id="8-实用技巧（你猜为什么变成二级索引）"><a href="#8-实用技巧（你猜为什么变成二级索引）" class="headerlink" title="8. 实用技巧（你猜为什么变成二级索引）"></a>8. 实用技巧（你猜为什么变成二级索引）</h2><p>直接复制版用吧，这个真的很有用<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 同时遍历索引和值</span></span><br><span class="line"><span class="keyword">for</span> index, value <span class="keyword">in</span> <span class="built_in">enumerate</span>([<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>]):</span><br><span class="line">    <span class="built_in">print</span>(index, value)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 合并成字符串</span></span><br><span class="line">words = [<span class="string">&quot;Hello&quot;</span>, <span class="string">&quot;world&quot;</span>]</span><br><span class="line">sentence = <span class="string">&quot; &quot;</span>.join(words)  <span class="comment"># &quot;Hello world&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 快速去重（保持顺序）</span></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> OrderedDict</span><br><span class="line">unique = <span class="built_in">list</span>(OrderedDict.fromkeys([<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>]))  <span class="comment"># [1,2,3]</span></span><br></pre></td></tr></table></figure></p><p>列表是Python中最常用的数据结构之一，掌握这些操作可以大大提高编码效率！</p><p>马上到元组了，呼呼，快结束了捏</p><h2 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h2><p><a href="https://www.runoob.com/python3/python3-tuple.html">吾乃懒汉，讲解在这里了，速速收下</a></p><p>Python 的元组与列表类似，不同之处在于<strong>元组的元素不能修改</strong>。<br><strong>元组使用小括号 ( )，列表使用方括号 [ ]。</strong><br>元组创建很简单，只需要在括号中添加元素，并使用逗号隔开即可。<br>不信你看嘛╭(╯^╰)╮<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>tup1 = (<span class="string">&#x27;Google&#x27;</span>, <span class="string">&#x27;Runoob&#x27;</span>, <span class="number">1997</span>, <span class="number">2000</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tup2 = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> )</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tup3 = <span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;d&quot;</span>   <span class="comment">#  不需要括号也可以</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">type</span>(tup3)</span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;tuple&#x27;</span>&gt;</span><br></pre></td></tr></table></figure></p><h2 id="Python3-元组完全指南"><a href="#Python3-元组完全指南" class="headerlink" title="Python3 元组完全指南"></a>Python3 元组完全指南</h2><h3 id="1-元组基础"><a href="#1-元组基础" class="headerlink" title="1. 元组基础"></a>1. 元组基础</h3><p>元组是Python的不可变序列，用圆括号<code>()</code>表示，元素用逗号分隔。</p><h4 id="创建元组"><a href="#创建元组" class="headerlink" title="创建元组"></a>创建元组</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 空元组</span></span><br><span class="line">empty_tuple = ()</span><br><span class="line"></span><br><span class="line"><span class="comment">## 单元素元组（必须加逗号）</span></span><br><span class="line">single = (<span class="number">50</span>,)  <span class="comment"># 注意逗号</span></span><br><span class="line">not_tuple = (<span class="number">50</span>)  <span class="comment"># 这是整数，不是元组！</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 多元素元组</span></span><br><span class="line">tup1 = (<span class="string">&#x27;Google&#x27;</span>, <span class="string">&#x27;Runoob&#x27;</span>, <span class="number">1997</span>, <span class="number">2000</span>)</span><br><span class="line">tup2 = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">## 省略括号创建</span></span><br><span class="line">tup3 = <span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>  <span class="comment"># 自动识别为元组</span></span><br></pre></td></tr></table></figure><p><strong>特点</strong>：</p><ul><li><strong>不可变性</strong>（创建后不能修改） 这……肯定有他的优势</li><li><strong>有序集合</strong>（元素有固定位置） 这不显得你好找吗</li><li>可包含任意数据类型</li><li>比列表更节省内存，看见没，用户的内存又不是我的内存</li></ul><h3 id="2-访问元组元素"><a href="#2-访问元组元素" class="headerlink" title="2. 访问元组元素"></a>2. 访问元组元素</h3><p>看着用吧(〃’▽’〃)</p><h4 id="索引访问-2"><a href="#索引访问-2" class="headerlink" title="索引访问"></a>索引访问</h4><p>元组可以使用下标索引来访问元组中的值，如下实例:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tup = (<span class="string">&#x27;Google&#x27;</span>, <span class="string">&#x27;Runoob&#x27;</span>, <span class="string">&#x27;Taobao&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(tup[<span class="number">0</span>])   <span class="comment"># &#x27;Google&#x27;（正向索引从0开始）</span></span><br><span class="line"><span class="built_in">print</span>(tup[-<span class="number">1</span>])  <span class="comment"># &#x27;Taobao&#x27;（负索引从-1开始）</span></span><br></pre></td></tr></table></figure></p><h4 id="切片操作-1"><a href="#切片操作-1" class="headerlink" title="切片操作"></a>切片操作</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">numbers = (<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(numbers[<span class="number">1</span>:<span class="number">4</span>])  <span class="comment"># (1, 2, 3)（左闭右开）</span></span><br><span class="line"><span class="built_in">print</span>(numbers[:<span class="number">3</span>])   <span class="comment"># (0, 1, 2)</span></span><br><span class="line"><span class="built_in">print</span>(numbers[::<span class="number">2</span>])  <span class="comment"># (0, 2, 4)（步长为2）</span></span><br></pre></td></tr></table></figure><h3 id="3-元组操作"><a href="#3-元组操作" class="headerlink" title="3. 元组操作"></a>3. 元组操作</h3><p>元组中的元素值是不允许修改的，但我们可以对元组进行连接组合，如下实例:</p><h4 id="元组拼接"><a href="#元组拼接" class="headerlink" title="元组拼接"></a>元组拼接</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tup1 = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">tup2 = (<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">combined = tup1 + tup2  <span class="comment"># (1, 2, 3, &#x27;a&#x27;, &#x27;b&#x27;)</span></span><br></pre></td></tr></table></figure><h4 id="元组重复"><a href="#元组重复" class="headerlink" title="元组重复"></a>元组重复</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tup = (<span class="string">&#x27;Hi!&#x27;</span>,) * <span class="number">3</span>  <span class="comment"># (&#x27;Hi!&#x27;, &#x27;Hi!&#x27;, &#x27;Hi!&#x27;)</span></span><br></pre></td></tr></table></figure><p>h和那个啥差不多，别用错了啊</p><h4 id="成员检测"><a href="#成员检测" class="headerlink" title="成员检测"></a>成员检测</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="number">3</span> <span class="keyword">in</span> (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>))  <span class="comment"># True</span></span><br></pre></td></tr></table></figure><h3 id="4-元组不可变性"><a href="#4-元组不可变性" class="headerlink" title="4. 元组不可变性"></a>4. 元组不可变性</h3><h4 id="无法修改元素"><a href="#无法修改元素" class="headerlink" title="无法修改元素"></a>无法修改元素</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tup = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="comment"># tup[0] = 4  # 报错！TypeError</span></span><br></pre></td></tr></table></figure><h4 id="重新赋值"><a href="#重新赋值" class="headerlink" title="重新赋值"></a>重新赋值</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tup = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(tup))  <span class="comment"># 内存地址1</span></span><br><span class="line">tup = (<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)  <span class="comment"># 创建新元组</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(tup))  <span class="comment"># 新内存地址</span></span><br></pre></td></tr></table></figure><h3 id="5-元组内置函数"><a href="#5-元组内置函数" class="headerlink" title="5. 元组内置函数"></a>5. 元组内置函数</h3><div class="table-container"><table><thead><tr><th>函数</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td><code>len()</code></td><td>返回元组长度</td><td><code>len((1,2,3))</code> → <code>3</code></td></tr><tr><td><code>max()</code></td><td>返回最大值</td><td><code>max((1,3,2))</code> → <code>3</code></td></tr><tr><td><code>min()</code></td><td>返回最小值</td><td><code>min((1,3,2))</code> → <code>1</code></td></tr><tr><td><code>tuple()</code></td><td>将可迭代对象转为元组</td><td><code>tuple([1,2,3])</code> → <code>(1,2,3)</code></td></tr></tbody></table></div><h3 id="6-元组解包"><a href="#6-元组解包" class="headerlink" title="6. 元组解包"></a>6. 元组解包</h3><h3 id="基本解包"><a href="#基本解包" class="headerlink" title="基本解包"></a>基本解包</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tup = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">a, b, c = tup  <span class="comment"># a=1, b=2, c=3</span></span><br></pre></td></tr></table></figure><p>一一对应</p><h4 id="星号解包"><a href="#星号解包" class="headerlink" title="星号解包"></a>星号解包</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">first, *middle, last = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line"><span class="comment"># first=1, middle=[2,3,4], last=5</span></span><br></pre></td></tr></table></figure><h3 id="7-元组与列表对比"><a href="#7-元组与列表对比" class="headerlink" title="7. 元组与列表对比"></a>7. 元组与列表对比</h3><div class="table-container"><table><thead><tr><th>特性</th><th>元组</th><th>列表</th></tr></thead><tbody><tr><td>可变性</td><td>不可变</td><td>可变</td></tr><tr><td>语法</td><td><code>()</code></td><td><code>[]</code></td></tr><tr><td>内存占用</td><td>较小</td><td>较大</td></tr><tr><td>方法</td><td>较少</td><td>丰富</td></tr><tr><td>适用场景</td><td>数据保护/字典键/函数返回值</td><td>需要频繁修改的数据集合</td></tr></tbody></table></div><h3 id="8-使用场景"><a href="#8-使用场景" class="headerlink" title="8. 使用场景"></a>8. 使用场景</h3><h3 id="适合使用元组的情况"><a href="#适合使用元组的情况" class="headerlink" title="适合使用元组的情况"></a><strong>适合使用元组的情况</strong></h3><ol><li><p><strong>字典键</strong>（因为不可变）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dict_with_tuple = &#123;(<span class="number">1</span>,<span class="number">2</span>): <span class="string">&quot;value&quot;</span>&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>函数多返回值</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_stats</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>  <span class="comment"># 自动打包为元组</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">min</span>, <span class="built_in">max</span>, avg = get_stats()  <span class="comment"># 解包</span></span><br></pre></td></tr></table></figure></li><li><p><strong>保护数据不被修改</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CONSTANTS = (<span class="number">3.14</span>, <span class="number">2.718</span>)  <span class="comment"># 确保不会被意外修改</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="9-性能比较"><a href="#9-性能比较" class="headerlink" title="9. 性能比较"></a>9. 性能比较</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> timeit</span><br><span class="line"></span><br><span class="line">lst = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">tup = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(sys.getsizeof(lst))  <span class="comment"># 通常比元组大</span></span><br><span class="line"><span class="built_in">print</span>(sys.getsizeof(tup))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建速度测试</span></span><br><span class="line"><span class="built_in">print</span>(timeit.timeit(<span class="string">&#x27;(1,2,3)&#x27;</span>))  <span class="comment"># 通常比列表快</span></span><br><span class="line"><span class="built_in">print</span>(timeit.timeit(<span class="string">&#x27;[1,2,3]&#x27;</span>))</span><br></pre></td></tr></table></figure><h2 id="10-实用技巧"><a href="#10-实用技巧" class="headerlink" title="10. 实用技巧"></a>10. 实用技巧</h2><h3 id="元组与字符串转换"><a href="#元组与字符串转换" class="headerlink" title="元组与字符串转换"></a>元组与字符串转换</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chars = <span class="built_in">tuple</span>(<span class="string">&quot;Hello&quot;</span>)  <span class="comment"># (&#x27;H&#x27;, &#x27;e&#x27;, &#x27;l&#x27;, &#x27;l&#x27;, &#x27;o&#x27;)</span></span><br><span class="line">joined = <span class="string">&#x27;&#x27;</span>.join(chars)  <span class="comment"># &#x27;Hello&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="命名元组（更高级用法）"><a href="#命名元组（更高级用法）" class="headerlink" title="命名元组（更高级用法）"></a>命名元组（更高级用法）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> namedtuple</span><br><span class="line">Point = namedtuple(<span class="string">&#x27;Point&#x27;</span>, [<span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;y&#x27;</span>])</span><br><span class="line">p = Point(<span class="number">11</span>, y=<span class="number">22</span>)  <span class="comment"># p.x = 11, p.y = 22</span></span><br></pre></td></tr></table></figure><p>元组虽然简单，但在Python编程中非常重要，特别是在需要保证数据不被修改的场景下非常有用！</p><h2 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h2><p>哈哈哈，文章太长了，颜色都没有了（指的是makedown编辑器）<br>字典是另一种可变容器模型，且可存储任意类型对象。</p><p>字典的每个键值<code>key=&gt;value</code>对用冒号 : 分割，每个对之间用逗号(,)分割，整个字典包括在花括号<code>&#123;&#125;</code>中 ,格式如下所示：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;key1 : value1, key2 : value2, key3 : value3 &#125;</span><br></pre></td></tr></table></figure><br><a href="https://www.runoob.com/python3/python3-dictionary.html">看这里看这里，直接跳权威指南学习</a></p><h2 id="Python3-字典完全指南"><a href="#Python3-字典完全指南" class="headerlink" title="Python3 字典完全指南"></a>Python3 字典完全指南</h2><h3 id="1-字典基础"><a href="#1-字典基础" class="headerlink" title="1. 字典基础"></a>1. 字典基础</h3><p>字典是Python中的键值对集合，用花括号<code>&#123;&#125;</code>表示，键值对用冒号<code>:</code>分隔。</p><h3 id="创建字典"><a href="#创建字典" class="headerlink" title="创建字典"></a>创建字典</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 空字典</span></span><br><span class="line">empty_dict = &#123;&#125;</span><br><span class="line">empty_dict = <span class="built_in">dict</span>()  <span class="comment"># 等效写法</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 带初始值的字典</span></span><br><span class="line">person = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Alice&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">25</span>, <span class="string">&#x27;city&#x27;</span>: <span class="string">&#x27;New York&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用dict()构造函数</span></span><br><span class="line">person = <span class="built_in">dict</span>(name=<span class="string">&#x27;Bob&#x27;</span>, age=<span class="number">30</span>)  <span class="comment"># 键不用引号</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 混合类型键值</span></span><br><span class="line">mixed_dict = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Alice&#x27;</span>, <span class="number">1</span>: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], (<span class="number">1</span>,<span class="number">2</span>): <span class="string">&#x27;tuple key&#x27;</span>&#125;</span><br></pre></td></tr></table></figure><p><strong>特点</strong>：</p><ul><li><strong>键必须是不可变类型（字符串/数字/元组）</strong>WARING</li><li><strong>值可以是任意类型</strong></li><li><strong>键唯一，重复键会覆盖前值</strong> 注意覆盖关系，类似结构体在内存中的关系</li><li>Python 3.7+ 保持插入顺序</li></ul><h3 id="2-访问字典元素（记住上面创建字典的初值）"><a href="#2-访问字典元素（记住上面创建字典的初值）" class="headerlink" title="2. 访问字典元素（记住上面创建字典的初值）"></a>2. 访问字典元素（记住上面创建字典的初值）</h3><h3 id="基本访问"><a href="#基本访问" class="headerlink" title="基本访问"></a>基本访问</h3><p>把相应的键放入到方括号中j即可访问，不存在的键会报错<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(person[<span class="string">&#x27;name&#x27;</span>])  <span class="comment"># &#x27;Alice&#x27;</span></span><br><span class="line"><span class="comment"># print(person[&#x27;job&#x27;])  # KeyError，键不存在会报错</span></span><br></pre></td></tr></table></figure></p><h4 id="安全访问方法"><a href="#安全访问方法" class="headerlink" title="安全访问方法"></a>安全访问方法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># get()方法</span></span><br><span class="line"><span class="built_in">print</span>(person.get(<span class="string">&#x27;name&#x27;</span>))     <span class="comment"># &#x27;Alice&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(person.get(<span class="string">&#x27;job&#x27;</span>))      <span class="comment"># None（不报错）</span></span><br><span class="line"><span class="built_in">print</span>(person.get(<span class="string">&#x27;job&#x27;</span>, <span class="string">&#x27;N/A&#x27;</span>))  <span class="comment"># &#x27;N/A&#x27;（指定默认值）</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># setdefault()方法</span></span><br><span class="line">person.setdefault(<span class="string">&#x27;job&#x27;</span>, <span class="string">&#x27;Engineer&#x27;</span>)  <span class="comment"># 不存在则添加</span></span><br></pre></td></tr></table></figure><h3 id="3-修改字典"><a href="#3-修改字典" class="headerlink" title="3. 修改字典"></a>3. 修改字典</h3><p>向字典添加新内容的方法是增加新的键/值对，修改或删除已有键/值对</p><h4 id="添加-更新元素"><a href="#添加-更新元素" class="headerlink" title="添加/更新元素"></a>添加/更新元素</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">person[<span class="string">&#x27;age&#x27;</span>] = <span class="number">26</span>  <span class="comment"># 更新已有键</span></span><br><span class="line">person[<span class="string">&#x27;job&#x27;</span>] = <span class="string">&#x27;Engineer&#x27;</span>  <span class="comment"># 添加新键</span></span><br></pre></td></tr></table></figure><h4 id="合并字典"><a href="#合并字典" class="headerlink" title="合并字典"></a>合并字典</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># update()方法</span></span><br><span class="line">extra_info = &#123;<span class="string">&#x27;hobby&#x27;</span>: <span class="string">&#x27;reading&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">27</span>&#125;</span><br><span class="line">person.update(extra_info)  <span class="comment"># age被更新，hobby被添加</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Python 3.9+ 合并运算符</span></span><br><span class="line">new_person = person | extra_info  <span class="comment"># 创建新字典</span></span><br></pre></td></tr></table></figure><h3 id="4-删除元素"><a href="#4-删除元素" class="headerlink" title="4. 删除元素"></a>4. 删除元素</h3><p>能删单一的元素也能清空字典，清空只需一项操作。</p><h4 id="各种删除方法"><a href="#各种删除方法" class="headerlink" title="各种删除方法"></a>各种删除方法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># del语句</span></span><br><span class="line"><span class="keyword">del</span> person[<span class="string">&#x27;city&#x27;</span>]  <span class="comment"># 删除指定键</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># pop()方法</span></span><br><span class="line">age = person.pop(<span class="string">&#x27;age&#x27;</span>)  <span class="comment"># 删除并返回值</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># popitem()方法（Python 3.7+按LIFO顺序）</span></span><br><span class="line">key, value = person.popitem()  <span class="comment"># 删除最后一项</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># clear()方法</span></span><br><span class="line">person.clear()  <span class="comment"># 清空字典</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># del删除整个字典</span></span><br><span class="line"><span class="keyword">del</span> person  <span class="comment"># 字典对象被删除</span></span><br></pre></td></tr></table></figure><h3 id="5-字典视图对象"><a href="#5-字典视图对象" class="headerlink" title="5. 字典视图对象"></a>5. 字典视图对象</h3><h4 id="三种视图方法"><a href="#三种视图方法" class="headerlink" title="三种视图方法"></a>三种视图方法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">person = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Alice&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">25</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># keys() - 键视图</span></span><br><span class="line"><span class="built_in">print</span>(person.keys())    <span class="comment"># dict_keys([&#x27;name&#x27;, &#x27;age&#x27;])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># values() - 值视图</span></span><br><span class="line"><span class="built_in">print</span>(person.values())  <span class="comment"># dict_values([&#x27;Alice&#x27;, 25])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># items() - 键值对视图</span></span><br><span class="line"><span class="built_in">print</span>(person.items())   <span class="comment"># dict_items([(&#x27;name&#x27;, &#x27;Alice&#x27;), (&#x27;age&#x27;, 25)])</span></span><br></pre></td></tr></table></figure><p><strong>视图特性</strong>：</p><ul><li>动态反映字典变化</li><li>可迭代</li><li>支持集合操作（Python 3+）</li></ul><h3 id="6-字典推导式"><a href="#6-字典推导式" class="headerlink" title="6. 字典推导式"></a>6. 字典推导式</h3><h4 id="创建字典的简洁方式"><a href="#创建字典的简洁方式" class="headerlink" title="创建字典的简洁方式"></a>创建字典的简洁方式</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 基本形式</span></span><br><span class="line">squares = &#123;x: x**<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>)&#125;  <span class="comment"># &#123;0:0, 1:1, 2:4, 3:9, 4:16&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 带条件的推导式</span></span><br><span class="line">even_squares = &#123;x: x**<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>) <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">0</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 键值转换</span></span><br><span class="line">person = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;alice&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="string">&#x27;25&#x27;</span>&#125;</span><br><span class="line">upper_person = &#123;k.upper(): v <span class="keyword">for</span> k, v <span class="keyword">in</span> person.items()&#125;</span><br></pre></td></tr></table></figure><h3 id="7-常用字典方法"><a href="#7-常用字典方法" class="headerlink" title="7. 常用字典方法"></a>7. 常用字典方法</h3><div class="table-container"><table><thead><tr><th>方法</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td><code>len()</code></td><td>返回键值对数量</td><td><code>len(person)</code> → <code>3</code></td></tr><tr><td><code>copy()</code></td><td>浅拷贝</td><td><code>new = person.copy()</code></td></tr><tr><td><code>fromkeys()</code></td><td>用序列创建新字典</td><td><code>dict.fromkeys([&#39;a&#39;,&#39;b&#39;], 0)</code> → <code>&#123;&#39;a&#39;:0, &#39;b&#39;:0&#125;</code></td></tr><tr><td><code>in</code></td><td>检查键是否存在</td><td><code>&#39;name&#39; in person</code> → <code>True</code></td></tr><tr><td><code>reversed()</code></td><td>反向迭代键(Python 3.8+)</td><td><code>list(reversed(person))</code></td></tr></tbody></table></div><h3 id="8-字典与JSON转换"><a href="#8-字典与JSON转换" class="headerlink" title="8. 字典与JSON转换"></a>8. 字典与JSON转换</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="comment"># 字典转JSON字符串</span></span><br><span class="line">person_json = json.dumps(person)  <span class="comment"># &#x27;&#123;&quot;name&quot;: &quot;Alice&quot;, &quot;age&quot;: 25&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># JSON字符串转字典</span></span><br><span class="line">person_dict = json.loads(person_json)</span><br></pre></td></tr></table></figure><h3 id="9-高级技巧"><a href="#9-高级技巧" class="headerlink" title="9. 高级技巧"></a>9. 高级技巧</h3><h4 id="默认字典"><a href="#默认字典" class="headerlink" title="默认字典"></a>默认字典</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自动初始化不存在的键</span></span><br><span class="line">word_count = defaultdict(<span class="built_in">int</span>)  <span class="comment"># 默认值0</span></span><br><span class="line"><span class="keyword">for</span> word <span class="keyword">in</span> words:</span><br><span class="line">    word_count[word] += <span class="number">1</span></span><br></pre></td></tr></table></figure><h4 id="有序字典"><a href="#有序字典" class="headerlink" title="有序字典"></a>有序字典</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> OrderedDict</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保持插入顺序（Python 3.7+普通字典已有序）</span></span><br><span class="line">ordered = OrderedDict([(<span class="string">&#x27;a&#x27;</span>, <span class="number">1</span>), (<span class="string">&#x27;b&#x27;</span>, <span class="number">2</span>)])</span><br></pre></td></tr></table></figure><h4 id="合并多个字典"><a href="#合并多个字典" class="headerlink" title="合并多个字典"></a>合并多个字典</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Python 3.5+</span></span><br><span class="line">combined = &#123;**dict1, **dict2, **dict3&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Python 3.9+</span></span><br><span class="line">combined = dict1 | dict2 | dict3</span><br></pre></td></tr></table></figure><h3 id="10-性能与内存"><a href="#10-性能与内存" class="headerlink" title="10. 性能与内存"></a>10. 性能与内存</h3><ul><li><strong>查找速度</strong>：O(1)时间复杂度</li><li><strong>内存占用</strong>：比列表更大</li><li><strong>键哈希</strong>：键必须是可哈希对象（不可变类型）</li></ul><h3 id="11-常见错误与解决"><a href="#11-常见错误与解决" class="headerlink" title="11. 常见错误与解决"></a>11. 常见错误与解决</h3><ol><li><p><strong>KeyError异常</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 错误方式</span></span><br><span class="line">value = my_dict[<span class="string">&#x27;nonexistent_key&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 正确方式</span></span><br><span class="line">value = my_dict.get(<span class="string">&#x27;nonexistent_key&#x27;</span>, default_value)</span><br></pre></td></tr></table></figure></li><li><p><strong>可变对象作为键</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 错误：列表不可哈希</span></span><br><span class="line">bad_dict = &#123;[<span class="string">&#x27;a&#x27;</span>]: <span class="number">1</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 正确：使用元组</span></span><br><span class="line">good_dict = &#123;(<span class="string">&#x27;a&#x27;</span>,): <span class="number">1</span>&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>字典比较顺序</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Python 3.7+ 字典比较顺序敏感</span></span><br><span class="line">&#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>&#125; == &#123;<span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>, <span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>&#125;  <span class="comment"># False（Python 3.6及之前可能为True）</span></span><br></pre></td></tr></table></figure></li></ol><p>字典是Python中最重要和高效的数据结构之一，掌握这些技巧可以大幅提升编程效率！</p><p>马上结束了，呜呜(Ｔ▽Ｔ)</p><h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><p><strong>集合</strong>是一个<strong>无序的不重复元素序列</strong>。<br>集合中的<strong>元素不会重复</strong>，并且可以进行<strong>交集、并集、差集</strong>等常见的集合操作。<br>可以使用大括号<code>&#123; &#125;</code>创建集合，元素之间用逗号<code>,</code>分隔， 或者也可以使用<code>set()</code>函数创建集合。</p><p><a href="https://www.runoob.com/python3/python3-set.html">点这个，带你看集合指南</a></p><h2 id="Python3-集合完全指南"><a href="#Python3-集合完全指南" class="headerlink" title="Python3 集合完全指南"></a>Python3 集合完全指南</h2><h3 id="1-集合基础"><a href="#1-集合基础" class="headerlink" title="1. 集合基础"></a>1. 集合基础</h3><p>集合是Python中的无序不重复元素集，用花括号<code>&#123;&#125;</code>表示（空集合必须用<code>set()</code>创建）。</p><h3 id="创建集合"><a href="#创建集合" class="headerlink" title="创建集合"></a>创建集合</h3><p>注意：创建一个空集合必须用 set() 而不是 { }，因为 { } 是用来创建一个空字典。里面有初始值那你随意<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 空集合</span></span><br><span class="line">empty_set = <span class="built_in">set</span>()  <span class="comment"># 注意：&#123;&#125; 创建的是空字典</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 带初始值的集合</span></span><br><span class="line">fruits = &#123;<span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;orange&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>&#125;</span><br><span class="line">numbers = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从其他序列创建</span></span><br><span class="line">letters = <span class="built_in">set</span>(<span class="string">&#x27;abracadabra&#x27;</span>)  <span class="comment"># &#123;&#x27;a&#x27;, &#x27;b&#x27;, &#x27;r&#x27;, &#x27;c&#x27;, &#x27;d&#x27;&#125;</span></span><br></pre></td></tr></table></figure></p><p><strong>特点</strong>：</p><ul><li>元素唯一（自动去重）</li><li>无序（不记录插入顺序）</li><li>可包含不可变类型（数字/字符串/元组）</li><li>可变（可增删元素）</li></ul><p>到这里我已经很累了</p><h3 id="2-基本操作"><a href="#2-基本操作" class="headerlink" title="2. 基本操作"></a>2. 基本操作</h3><h4 id="添加元素-1"><a href="#添加元素-1" class="headerlink" title="添加元素"></a>添加元素</h4><p>语法格式如下：</p><blockquote><p>s.add( x )<br>s.update( x )    #参数可以是列表，元组，字典等</p></blockquote><p>将元素添加到集合中，如果元素已存在，则不进行任何操作。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">fruits = &#123;<span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>&#125;<span class="comment">#原有集合</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加单个元素</span></span><br><span class="line">fruits.add(<span class="string">&#x27;orange&#x27;</span>)  <span class="comment"># &#123;&#x27;apple&#x27;, &#x27;banana&#x27;, &#x27;orange&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加多个元素</span></span><br><span class="line">fruits.update([<span class="string">&#x27;kiwi&#x27;</span>, <span class="string">&#x27;mango&#x27;</span>])  <span class="comment"># 可接受任何可迭代对象</span></span><br></pre></td></tr></table></figure></p><h4 id="移除元素"><a href="#移除元素" class="headerlink" title="移除元素"></a>移除元素</h4><blockquote><p>s.remove( x )<br>s.discard( x )<br>s.pop() </p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安全移除（元素不存在不报错）</span></span><br><span class="line">fruits.discard(<span class="string">&#x27;apple&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 强制移除（元素不存在报KeyError）</span></span><br><span class="line">fruits.remove(<span class="string">&#x27;banana&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 随机移除并返回</span></span><br><span class="line">random_fruit = fruits.pop()  <span class="comment"># 集合为空时报KeyError</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 清空集合</span></span><br><span class="line">fruits.clear()  <span class="comment"># set()</span></span><br></pre></td></tr></table></figure><h3 id="3-集合运算"><a href="#3-集合运算" class="headerlink" title="3. 集合运算"></a>3. 集合运算</h3><p>要知道一件事，那就是在表格中看你不见的一般是<code>|</code>，这玩意会变成表格边边</p><h4 id="基本运算"><a href="#基本运算" class="headerlink" title="基本运算"></a>基本运算</h4><div class="table-container"><table><thead><tr><th>运算符/方法</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td>`</td><td><code>或</code>union()`</td><td>并集</td><td>`a</td><td>b`</td></tr><tr><td><code>&amp;</code> 或 <code>intersection()</code></td><td>交集</td><td><code>a &amp; b</code></td></tr><tr><td><code>-</code> 或 <code>difference()</code></td><td>差集</td><td><code>a - b</code></td></tr><tr><td><code>^</code> 或 <code>symmetric_difference()</code></td><td>对称差集（仅出现在一个集合中的元素）</td><td><code>a ^ b</code></td></tr></tbody></table></div><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">b = &#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a | b)  <span class="comment"># &#123;1, 2, 3, 4&#125;</span></span><br><span class="line"><span class="built_in">print</span>(a &amp; b)  <span class="comment"># &#123;2, 3&#125;</span></span><br><span class="line"><span class="built_in">print</span>(a - b)  <span class="comment"># &#123;1&#125;</span></span><br><span class="line"><span class="built_in">print</span>(a ^ b)  <span class="comment"># &#123;1, 4&#125;</span></span><br></pre></td></tr></table></figure><h3 id="4-集合关系判断"><a href="#4-集合关系判断" class="headerlink" title="4. 集合关系判断"></a>4. 集合关系判断</h3><div class="table-container"><table><thead><tr><th>方法</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td><code>issubset()</code> 或 <code>&lt;=</code></td><td>判断子集</td><td><code>a.issubset(b)</code></td></tr><tr><td><code>issuperset()</code> 或 <code>&gt;=</code></td><td>判断超集</td><td><code>a.issuperset(b)</code></td></tr><tr><td><code>isdisjoint()</code></td><td>判断无交集</td><td><code>a.isdisjoint(b)</code></td></tr></tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = &#123;<span class="number">1</span>, <span class="number">2</span>&#125;</span><br><span class="line">b = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a &lt;= b)  <span class="comment"># True (a是b的子集)</span></span><br><span class="line"><span class="built_in">print</span>(b &gt;= a)  <span class="comment"># True (b是a的超集)</span></span><br><span class="line"><span class="built_in">print</span>(a.isdisjoint(&#123;<span class="number">4</span>,<span class="number">5</span>&#125;))  <span class="comment"># True (无交集)</span></span><br></pre></td></tr></table></figure><h3 id="5-集合推导式"><a href="#5-集合推导式" class="headerlink" title="5. 集合推导式"></a>5. 集合推导式</h3><p>类似列表推导式，生成集合：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成字符集合（自动去重）</span></span><br><span class="line">letters = &#123;char <span class="keyword">for</span> char <span class="keyword">in</span> <span class="string">&#x27;abracadabra&#x27;</span>&#125;  <span class="comment"># &#123;&#x27;a&#x27;, &#x27;b&#x27;, &#x27;r&#x27;, &#x27;c&#x27;, &#x27;d&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 带条件的推导式</span></span><br><span class="line">squares = &#123;x**<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>) <span class="keyword">if</span> x%<span class="number">2</span>==<span class="number">0</span>&#125;  <span class="comment"># &#123;0, 4, 16, 36, 64&#125;</span></span><br></pre></td></tr></table></figure></p><h3 id="6-不可变集合（frozenset）"><a href="#6-不可变集合（frozenset）" class="headerlink" title="6. 不可变集合（frozenset）"></a>6. 不可变集合（frozenset）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建不可变集合</span></span><br><span class="line">immutable = <span class="built_in">frozenset</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 特性：</span></span><br><span class="line"><span class="comment"># - 不能增删元素</span></span><br><span class="line"><span class="comment"># - 可哈希（可用作字典键）</span></span><br><span class="line"><span class="comment"># - 支持集合运算</span></span><br></pre></td></tr></table></figure><h3 id="7-常用方法速查"><a href="#7-常用方法速查" class="headerlink" title="7. 常用方法速查"></a>7. 常用方法速查</h3><div class="table-container"><table><thead><tr><th>方法</th><th>描述</th><th>时间复杂度</th></tr></thead><tbody><tr><td><code>len(s)</code></td><td>返回元素个数</td><td>O(1)</td></tr><tr><td><code>x in s</code></td><td>成员检测</td><td>O(1)</td></tr><tr><td><code>copy()</code></td><td>浅拷贝</td><td>O(n)</td></tr><tr><td><code>difference_update()</code></td><td>原地差集操作</td><td>O(len(b))</td></tr><tr><td><code>intersection_update()</code></td><td>原地交集操作</td><td>O(len(b))</td></tr><tr><td><code>symmetric_difference_update()</code></td><td>原地对称差集操作</td><td>O(len(b))</td></tr></tbody></table></div><h3 id="8-实用技巧"><a href="#8-实用技巧" class="headerlink" title="8. 实用技巧"></a>8. 实用技巧</h3><h4 id="快速去重"><a href="#快速去重" class="headerlink" title="快速去重"></a>快速去重</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">names = [<span class="string">&#x27;Alice&#x27;</span>, <span class="string">&#x27;Bob&#x27;</span>, <span class="string">&#x27;Alice&#x27;</span>, <span class="string">&#x27;Charlie&#x27;</span>]</span><br><span class="line">unique_names = <span class="built_in">list</span>(<span class="built_in">set</span>(names))  <span class="comment"># 顺序可能改变</span></span><br></pre></td></tr></table></figure><h4 id="元素存在性测试"><a href="#元素存在性测试" class="headerlink" title="元素存在性测试"></a>元素存在性测试</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">valid_users = &#123;<span class="string">&#x27;Alice&#x27;</span>, <span class="string">&#x27;Bob&#x27;</span>, <span class="string">&#x27;Charlie&#x27;</span>&#125;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">input</span>(<span class="string">&#x27;用户名: &#x27;</span>) <span class="keyword">in</span> valid_users:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;访问 granted&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="集合与字典键转换"><a href="#集合与字典键转换" class="headerlink" title="集合与字典键转换"></a>集合与字典键转换</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 字典键转集合</span></span><br><span class="line">keys = &#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>&#125;.keys()  <span class="comment"># dict_keys对象</span></span><br><span class="line">keys_set = <span class="built_in">set</span>(keys)  <span class="comment"># &#123;&#x27;a&#x27;, &#x27;b&#x27;&#125;</span></span><br></pre></td></tr></table></figure><h3 id="9-性能特点"><a href="#9-性能特点" class="headerlink" title="9. 性能特点"></a>9. 性能特点</h3><ul><li><strong>查找速度</strong>：O(1) 时间复杂度</li><li><strong>内存占用</strong>：比列表更大</li><li><strong>适用场景</strong>：<ul><li>快速成员检测</li><li>数据去重</li><li>数学集合运算</li></ul></li></ul><h2 id="10-注意事项"><a href="#10-注意事项" class="headerlink" title="10. 注意事项"></a>10. 注意事项</h2><ol><li><p><strong>不可哈希元素</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 错误：列表不可哈希</span></span><br><span class="line">invalid_set = &#123;[<span class="number">1</span>,<span class="number">2</span>], [<span class="number">3</span>,<span class="number">4</span>]&#125;  <span class="comment"># TypeError</span></span><br></pre></td></tr></table></figure></li><li><p><strong>顺序不可靠</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Python 3.7+ 字典保持插入顺序，但集合仍然无序</span></span><br><span class="line"><span class="built_in">print</span>(&#123;<span class="number">1</span>, <span class="number">2</span>&#125; == &#123;<span class="number">2</span>, <span class="number">1</span>&#125;)  <span class="comment"># True</span></span><br></pre></td></tr></table></figure></li><li><p><strong>空集合陷阱</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">empty = &#123;&#125;    <span class="comment"># 这是字典！</span></span><br><span class="line">empty = <span class="built_in">set</span>() <span class="comment"># 这才是空集合</span></span><br></pre></td></tr></table></figure></li></ol><p>集合是处理唯一性数据和数学运算的强大工具，合理使用可以大幅提升代码效率和可读性！</p><p>到这里吧，就到这里吧，累了真的</p>]]></content>
      
      
      <categories>
          
          <category> 结构速查 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitHub项目仓库构建方法</title>
      <link href="/2025/03/31/GitHub%E9%A1%B9%E7%9B%AE%E4%BB%93%E5%BA%93%E6%9E%84%E5%BB%BA%E6%96%B9%E6%B3%95/"/>
      <url>/2025/03/31/GitHub%E9%A1%B9%E7%9B%AE%E4%BB%93%E5%BA%93%E6%9E%84%E5%BB%BA%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="GitHub项目本地仓库构建方法"><a href="#GitHub项目本地仓库构建方法" class="headerlink" title="GitHub项目本地仓库构建方法"></a>GitHub项目本地仓库构建方法</h1><blockquote><p>是这样的，我在本地的仓库中，想要把我想要的文件上传到GitHub上，但是我不想每次都去GitHub上找，所以我就想把我想要的文件上传到本地仓库中，然后再上传到GitHub上，这样就可以避免每次都去GitHub上找了。</p></blockquote><p>首先啊，你得确保GitHub上有一个空仓库。</p><p>当然，其实还是本人懒得不行，我想把相关的指令放网站上好找</p><h1 id="GitHub本地仓库构建与更新流程"><a href="#GitHub本地仓库构建与更新流程" class="headerlink" title="GitHub本地仓库构建与更新流程"></a>GitHub本地仓库构建与更新流程</h1><h2 id="1-前期准备"><a href="#1-前期准备" class="headerlink" title="1. 前期准备"></a>1. 前期准备</h2><ol><li><strong>安装Git</strong>：<a href="https://git-scm.com/">官网下载</a></li><li><strong>创建GitHub空仓库</strong>（不要初始化README）</li></ol><h2 id="2-首次上传项目"><a href="#2-首次上传项目" class="headerlink" title="2. 首次上传项目"></a>2. 首次上传项目</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入项目文件夹</span></span><br><span class="line"><span class="built_in">cd</span> /path/to/your/project   <span class="comment">#这个过程你可以直接在项目文件夹打开git</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化本地仓库</span></span><br><span class="line">git init</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加所有文件到暂存区</span></span><br><span class="line">git add .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交到本地仓库（必须写有意义的提交信息）</span></span><br><span class="line">git commit -m <span class="string">&quot;initial commit&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 关联远程仓库（注意替换URL）</span></span><br><span class="line">git remote add origin https://github.com/用户名/仓库名.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 推送到GitHub（注意分支名称）</span></span><br><span class="line">git push -u origin main  <span class="comment"># GitHub现在默认用main分支</span></span><br></pre></td></tr></table></figure><h2 id="3-后续更新项目"><a href="#3-后续更新项目" class="headerlink" title="3. 后续更新项目"></a>3. 后续更新项目</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看当前文件状态（可选）</span></span><br><span class="line">git status</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加所有修改到暂存区</span></span><br><span class="line">git add .  <span class="comment"># 注意add和点之间有空格！</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交到本地仓库（必须写有意义的提交信息）</span></span><br><span class="line">git commit -m <span class="string">&quot;fix: 更新了登录功能&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 推送到GitHub</span></span><br><span class="line">git push  <span class="comment"># 首次之后可以简写</span></span><br></pre></td></tr></table></figure><h2 id="关键注意事项"><a href="#关键注意事项" class="headerlink" title="关键注意事项"></a>关键注意事项</h2><ol><li><p><strong>分支名称问题</strong>：</p><ul><li>GitHub现在默认使用<code>main</code>分支而非<code>master</code></li><li>你不需要同时推送到master和main，只需推送到main即可</li></ul></li><li><p><strong>常见错误修正</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果遇到分支不匹配错误</span></span><br><span class="line">git branch -M main  <span class="comment"># 重命名本地分支为main</span></span><br><span class="line">git push -u origin main</span><br></pre></td></tr></table></figure></li><li><p><strong><code>.gitignore</code>文件</strong>：<br>在项目根目录创建<code>.gitignore</code>文件，避免上传临时文件/敏感信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 示例内容</span><br><span class="line">node_modules/</span><br><span class="line">.env</span><br><span class="line">*.log</span><br><span class="line">.DS_Store</span><br></pre></td></tr></table></figure></li><li><p><strong>SSH连接（可选但推荐）</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 替换HTTPS为SSH地址更安全</span></span><br><span class="line">git remote set-url origin git@github.com:用户名/仓库名.git</span><br></pre></td></tr></table></figure><p>首次使用SSH需要配置公钥，参考<a href="URL_ADDRESS   首次使用SSH需要配置公钥，参考[GitHub帮助文档](https://docs.github.com/en/authentication/connecting-to-github-with-ssh">GitHub帮助文档</a>。</p></li></ol><h2 id="简化工作流程（推荐使用）"><a href="#简化工作流程（推荐使用）" class="headerlink" title="简化工作流程（推荐使用）"></a>简化工作流程（推荐使用）</h2><ol><li><p><strong>使用别名</strong>（添加到<code>~/.bashrc</code>或<code>~/.zshrc</code>）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">alias</span> gs=<span class="string">&#x27;git status&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> ga=<span class="string">&#x27;git add .&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> gc=<span class="string">&#x27;git commit -m&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> gp=<span class="string">&#x27;git push&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>可视化工具推荐</strong>：</p><ul><li>GitHub Desktop</li><li>VS Code内置Git工具</li><li>GitKraken</li></ul></li></ol><hr><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><ol><li><p><strong>报错：remote origin already exists</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git remote remove origin</span><br><span class="line">git remote add origin [你的仓库URL]</span><br></pre></td></tr></table></figure></li><li><p><strong>报错：failed to push some refs</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git pull origin main --allow-unrelated-histories</span><br><span class="line">git push</span><br></pre></td></tr></table></figure></li><li><p><strong>误提交大文件后</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用BFG工具清理历史记录</span></span><br><span class="line">java -jar bfg.jar --strip-blobs-bigger-than 100M your-repo.git</span><br></pre></td></tr></table></figure><p>以下是多人协同维护 GitHub 项目的完整操作指南，包含权限管理、分支策略和协作流程：</p></li></ol><hr><h1 id="多人协作管理GitHub项目"><a href="#多人协作管理GitHub项目" class="headerlink" title="多人协作管理GitHub项目"></a>多人协作管理GitHub项目</h1><h2 id="1-基础协作设置"><a href="#1-基础协作设置" class="headerlink" title="1. 基础协作设置"></a><strong>1. 基础协作设置</strong></h2><h3 id="1-添加协作者"><a href="#1-添加协作者" class="headerlink" title="(1) 添加协作者"></a>(1) 添加协作者</h3><ul><li><strong>仓库设置</strong> → <strong>Collaborators</strong> → <strong>Add people</strong>（输入GitHub用户名）</li><li><strong>权限级别</strong>：<ul><li><code>Read</code>：仅查看</li><li><code>Write</code>：可推送代码</li><li><code>Admin</code>：可管理仓库设置</li></ul></li></ul><h3 id="2-推荐使用-Organization（组织）"><a href="#2-推荐使用-Organization（组织）" class="headerlink" title="(2) 推荐使用 Organization（组织）"></a>(2) 推荐使用 <strong>Organization（组织）</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 成员通过邀请加入组织</span></span><br><span class="line">Settings → Organizations → Invite member</span><br></pre></td></tr></table></figure><ul><li>可设置团队（Teams）分配不同仓库权限</li></ul><h2 id="2-标准协作流程（Git-Flow模型）"><a href="#2-标准协作流程（Git-Flow模型）" class="headerlink" title="2. 标准协作流程（Git Flow模型）"></a><strong>2. 标准协作流程（Git Flow模型）</strong></h2><h3 id="1-克隆仓库"><a href="#1-克隆仓库" class="headerlink" title="(1) 克隆仓库"></a>(1) 克隆仓库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/用户名/仓库名.git</span><br><span class="line"><span class="built_in">cd</span> 仓库名</span><br></pre></td></tr></table></figure><h3 id="2-创建特性分支"><a href="#2-创建特性分支" class="headerlink" title="(2) 创建特性分支"></a>(2) 创建特性分支</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b feature/新功能名称  <span class="comment"># 从main分支创建</span></span><br></pre></td></tr></table></figure><h3 id="3-提交更改"><a href="#3-提交更改" class="headerlink" title="(3) 提交更改"></a>(3) 提交更改</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;feat: 添加用户登录功能&quot;</span>  <span class="comment"># 使用语义化提交信息</span></span><br></pre></td></tr></table></figure><h3 id="4-同步主分支"><a href="#4-同步主分支" class="headerlink" title="(4) 同步主分支"></a>(4) 同步主分支</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull origin main  <span class="comment"># 定期同步避免冲突</span></span><br></pre></td></tr></table></figure><h3 id="5-推送分支"><a href="#5-推送分支" class="headerlink" title="(5) 推送分支"></a>(5) 推送分支</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -u origin feature/新功能名称</span><br></pre></td></tr></table></figure><h3 id="6-创建Pull-Request（PR）"><a href="#6-创建Pull-Request（PR）" class="headerlink" title="(6) 创建Pull Request（PR）"></a>(6) 创建Pull Request（PR）</h3><ol><li>GitHub仓库页面点击 <strong>New pull request</strong></li><li>选择 <code>feature/新功能名称</code> → <code>main</code> 分支</li><li>添加说明并@相关成员审查</li></ol><h3 id="7-代码审查后合并"><a href="#7-代码审查后合并" class="headerlink" title="(7) 代码审查后合并"></a>(7) 代码审查后合并</h3><ul><li>审查通过后点击 <strong>Merge pull request</strong></li><li>删除已合并的分支（勾选<code>Delete branch</code>）</li></ul><hr><h2 id="3-冲突解决方案"><a href="#3-冲突解决方案" class="headerlink" title="3. 冲突解决方案"></a><strong>3. 冲突解决方案</strong></h2><h3 id="1-拉取最新代码时遇到冲突"><a href="#1-拉取最新代码时遇到冲突" class="headerlink" title="(1) 拉取最新代码时遇到冲突"></a>(1) 拉取最新代码时遇到冲突</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git pull origin main</span><br><span class="line"><span class="comment"># 冲突文件会显示 &lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD 标记</span></span><br></pre></td></tr></table></figure><h3 id="2-手动解决冲突后"><a href="#2-手动解决冲突后" class="headerlink" title="(2) 手动解决冲突后"></a>(2) 手动解决冲突后</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add 冲突文件</span><br><span class="line">git commit -m <span class="string">&quot;fix: 解决与main分支的冲突&quot;</span></span><br><span class="line">git push</span><br></pre></td></tr></table></figure><h3 id="3-使用图形化工具（推荐）"><a href="#3-使用图形化工具（推荐）" class="headerlink" title="(3) 使用图形化工具（推荐）"></a>(3) 使用图形化工具（推荐）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git mergetool  <span class="comment"># 调用meld/vscode等工具</span></span><br></pre></td></tr></table></figure><h2 id="4-高级协作管理"><a href="#4-高级协作管理" class="headerlink" title="4. 高级协作管理"></a><strong>4. 高级协作管理</strong></h2><h3 id="1-保护主分支"><a href="#1-保护主分支" class="headerlink" title="(1) 保护主分支"></a>(1) 保护主分支</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在仓库设置中：</span></span><br><span class="line"><span class="string">Settings</span> <span class="string">→</span> <span class="string">Branches</span> <span class="string">→</span> <span class="string">Add</span> <span class="string">branch</span> <span class="string">protection</span> <span class="string">rule</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">☑</span> <span class="string">Require</span> <span class="string">pull</span> <span class="string">request</span> <span class="string">before</span> <span class="string">merging</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">☑</span> <span class="string">Require</span> <span class="string">approvals</span> <span class="string">(至少1人审查)</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">☑</span> <span class="string">Require</span> <span class="string">status</span> <span class="string">checks</span> <span class="string">to</span> <span class="string">pass</span> <span class="string">(CI/CD)</span></span><br></pre></td></tr></table></figure><h3 id="2-使用Issue跟踪任务"><a href="#2-使用Issue跟踪任务" class="headerlink" title="(2) 使用Issue跟踪任务"></a>(2) 使用Issue跟踪任务</h3><ul><li>关联PR与Issue：在提交信息中添加 <code>fix #123</code></li><li>项目看板：<code>Projects</code> → <code>New project</code></li></ul><h3 id="3-CI-CD集成"><a href="#3-CI-CD集成" class="headerlink" title="(3) CI/CD集成"></a>(3) CI/CD集成</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例.github/workflows/test.yml</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">Tests</span></span><br><span class="line"><span class="attr">on:</span> [<span class="string">push</span>, <span class="string">pull_request</span>]</span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">test:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">run:</span> <span class="string">pytest</span></span><br></pre></td></tr></table></figure><h2 id="5-常用协作命令速查"><a href="#5-常用协作命令速查" class="headerlink" title="5. 常用协作命令速查"></a><strong>5. 常用协作命令速查</strong></h2><div class="table-container"><table><thead><tr><th>场景</th><th>命令</th></tr></thead><tbody><tr><td>查看远程分支</td><td><code>git branch -r</code></td></tr><tr><td>同步他人分支</td><td><code>git fetch &amp;&amp; git checkout 分支名</code></td></tr><tr><td>撤销本地提交</td><td><code>git reset --soft HEAD~1</code></td></tr><tr><td>合并多个提交</td><td><code>git rebase -i HEAD~3</code></td></tr><tr><td>临时保存修改</td><td><code>git stash</code></td></tr></tbody></table></div><h2 id="6-最佳实践"><a href="#6-最佳实践" class="headerlink" title="6. 最佳实践"></a><strong>6. 最佳实践</strong></h2><ol><li><p><strong>分支命名规范</strong>：</p><ul><li><code>feature/</code>：新功能开发</li><li><code>fix/</code>：Bug修复</li><li><code>hotfix/</code>：紧急生产环境修复</li></ul></li><li><p><strong>提交信息格式</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type(scope): 描述</span><br></pre></td></tr></table></figure><p>常用type：<code>feat</code>, <code>fix</code>, <code>docs</code>, <code>style</code>, <code>refactor</code></p></li><li><p><strong>定期同步</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git fetch --all  <span class="comment"># 获取所有远程更新</span></span><br><span class="line">git <span class="built_in">log</span> --all --graph --oneline  <span class="comment"># 可视化分支</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="7-可视化工具推荐"><a href="#7-可视化工具推荐" class="headerlink" title="7. 可视化工具推荐"></a><strong>7. 可视化工具推荐</strong></h2><ol><li><strong>GitHub Desktop</strong>：适合新手图形化操作</li><li><strong>VS Code Git插件</strong>：内置冲突解决工具</li><li><strong>SourceTree</strong>：高级分支管理</li></ol><h1 id="将github上的项目获取到本地"><a href="#将github上的项目获取到本地" class="headerlink" title="将github上的项目获取到本地"></a>将github上的项目获取到本地</h1><p>将 GitHub 上的项目代码获取到本地主要有两种方式，以下是详细步骤说明：</p><h2 id="方法-1：使用-git-clone（推荐，可同步更新）"><a href="#方法-1：使用-git-clone（推荐，可同步更新）" class="headerlink" title="方法 1：使用 git clone（推荐，可同步更新）"></a><strong>方法 1：使用 <code>git clone</code>（推荐，可同步更新）</strong></h2><h3 id="适用场景："><a href="#适用场景：" class="headerlink" title="适用场景："></a>适用场景：</h3><ul><li>需要参与项目开发（可提交代码）</li><li>需要保持与远程仓库同步</li></ul><h3 id="操作步骤："><a href="#操作步骤：" class="headerlink" title="操作步骤："></a>操作步骤：</h3><ol><li><p><strong>复制仓库地址</strong>：</p><ul><li>在 GitHub 项目页点击绿色 <strong><code>Code</code></strong> 按钮</li><li>选择 <strong>HTTPS</strong> 或 <strong>SSH</strong>（推荐 SSH，需提前<a href="https://docs.github.com/en/authentication/connecting-to-github-with-ssh">配置密钥</a>）<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git@github.com:用户名/仓库名.git  <span class="comment"># SSH示例</span></span><br><span class="line">https://github.com/用户名/仓库名.git  <span class="comment"># HTTPS示例</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>克隆到本地</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打开终端（Git Bash/CMD/PowerShell等）</span></span><br><span class="line">git <span class="built_in">clone</span> 复制的仓库地址</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例（SSH方式）：</span></span><br><span class="line">git <span class="built_in">clone</span> git@github.com:torvalds/linux.git</span><br></pre></td></tr></table></figure></li><li><p><strong>进入项目目录</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> 仓库名  <span class="comment"># 自动创建的本地文件夹</span></span><br></pre></td></tr></table></figure></li></ol><hr><h2 id="方法-2：下载-ZIP（仅获取代码，不可同步）"><a href="#方法-2：下载-ZIP（仅获取代码，不可同步）" class="headerlink" title="方法 2：下载 ZIP（仅获取代码，不可同步）"></a><strong>方法 2：下载 ZIP（仅获取代码，不可同步）</strong></h2><h3 id="适用场景：-1"><a href="#适用场景：-1" class="headerlink" title="适用场景："></a>适用场景：</h3><ul><li>仅查看/使用代码（不参与开发）</li><li>网络环境无法使用 Git</li></ul><h3 id="操作步骤：-1"><a href="#操作步骤：-1" class="headerlink" title="操作步骤："></a>操作步骤：</h3><ol><li>在 GitHub 项目页点击 <strong><code>Code</code></strong> → <strong><code>Download ZIP</code></strong></li><li>解压 ZIP 文件到本地目录</li></ol><hr><h2 id="进阶操作"><a href="#进阶操作" class="headerlink" title="进阶操作"></a><strong>进阶操作</strong></h2><h3 id="1-克隆特定分支"><a href="#1-克隆特定分支" class="headerlink" title="1. 克隆特定分支"></a>1. 克隆特定分支</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> -b 分支名 仓库地址</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例：只克隆dev分支</span></span><br><span class="line">git <span class="built_in">clone</span> -b dev git@github.com:vuejs/vue.git</span><br></pre></td></tr></table></figure><h3 id="2-同步最新代码（已克隆的项目）"><a href="#2-同步最新代码（已克隆的项目）" class="headerlink" title="2. 同步最新代码（已克隆的项目）"></a>2. 同步最新代码（已克隆的项目）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull origin 分支名  <span class="comment"># 例如 git pull origin main</span></span><br></pre></td></tr></table></figure><h3 id="3-查看远程仓库信息"><a href="#3-查看远程仓库信息" class="headerlink" title="3. 查看远程仓库信息"></a>3. 查看远程仓库信息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote -v  <span class="comment"># 显示关联的远程仓库</span></span><br></pre></td></tr></table></figure><hr><h2 id="常见问题解决"><a href="#常见问题解决" class="headerlink" title="常见问题解决"></a><strong>常见问题解决</strong></h2><h3 id="1-权限被拒绝（Permission-denied）"><a href="#1-权限被拒绝（Permission-denied）" class="headerlink" title="1. 权限被拒绝（Permission denied）"></a>1. 权限被拒绝（Permission denied）</h3><ul><li><strong>SSH 方式</strong>：检查 <a href="https://docs.github.com/en/authentication/connecting-to-github-with-ssh">SSH 密钥是否配置正确</a></li><li><strong>HTTPS 方式</strong>：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global credential.helper store  <span class="comment"># 保存账号密码</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/用户名/仓库名.git  <span class="comment"># 首次需输入账号密码</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="2-网络连接超时"><a href="#2-网络连接超时" class="headerlink" title="2. 网络连接超时"></a>2. 网络连接超时</h3><ul><li>检查代理设置：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global http.proxy http://127.0.0.1:1080  <span class="comment"># 替换为你的代理端口</span></span><br></pre></td></tr></table></figure></li><li>或使用 GitHub 镜像站（如 <code>https://hub.fastgit.org</code>）</li></ul><hr><h2 id="可视化工具推荐"><a href="#可视化工具推荐" class="headerlink" title="可视化工具推荐"></a><strong>可视化工具推荐</strong></h2><div class="table-container"><table><thead><tr><th>工具</th><th>特点</th></tr></thead><tbody><tr><td><a href="https://desktop.github.com/">GitHub Desktop</a></td><td>官方图形化工具，一键克隆</td></tr><tr><td>VS Code</td><td>内置Git支持，<code>Ctrl+Shift+P</code> → <code>Git: Clone</code></td></tr><tr><td><a href="https://www.sourcetreeapp.com/">Sourcetree</a></td><td>高级分支管理</td></tr></tbody></table></div><p>如需参与协作开发，建议使用 <code>git clone</code> 方式并熟悉 <a href="https://guides.github.com/introduction/git-handbook/">Git 基本工作流程</a>。</p><p>以上便是简单的github本地和协同部署的基本方法，如果有什么问题请查阅官方文档，链接在这里：<a href="https://docs.github.com/en">GitHub 官方文档</a>》。</p><p>是不是一股子ai味道，不得不说这玩意是真的香，我以后会经常用的，但是感觉很死板啊，做这些列指令的页面太合适了woc</p>]]></content>
      
      
      <categories>
          
          <category> 仓库管理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 外部技术支持 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python 学习速查笔记（3）</title>
      <link href="/2025/03/30/python%E5%AD%A6%E4%B9%A0%E9%80%9F%E6%9F%A5%E7%AC%94%E8%AE%B0(3)/"/>
      <url>/2025/03/30/python%E5%AD%A6%E4%B9%A0%E9%80%9F%E6%9F%A5%E7%AC%94%E8%AE%B0(3)/</url>
      
        <content type="html"><![CDATA[<h1 id="python-学习速查笔记（3）"><a href="#python-学习速查笔记（3）" class="headerlink" title="python 学习速查笔记（3）"></a>python 学习速查笔记（3）</h1><blockquote><p>本章涉及<strong>数据类型转换</strong>，<strong>解释器</strong>，<strong>运算符</strong>，很快就可以结束</p></blockquote><h1 id="Python3-解释器"><a href="#Python3-解释器" class="headerlink" title="Python3 解释器"></a>Python3 解释器</h1><p>如果你是Linux<br>Linux/Unix的系统上，一般默认的 python 版本为 2.x，我们可以将 python3.x 安装在 /usr/local/python3 目录中。</p><p>安装完成后，我们可以将路径 /usr/local/python3/bin 添加到您的 Linux/Unix 操作系统的环境变量中，这样您就可以通过 shell 终端输入下面的命令来启动 Python3 。<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ PATH=$PATH:/usr/local/python3/bin/python3    # 设置环境变量</span><br><span class="line">$ python3 --version</span><br><span class="line">Python 3.4.0</span><br></pre></td></tr></table></figure><br>如果你是window</p><p>在Window系统下你可以通过以下命令来设置Python的环境变量，假设你的Python安装在 C:\Python34 下:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set path=%path%;C:\python34</span><br></pre></td></tr></table></figure></p><h2 id="交互式编程"><a href="#交互式编程" class="headerlink" title="交互式编程"></a>交互式编程</h2><p>我们可以在命令提示符中输入”Python”命令来启动Python解释器：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ python3</span><br></pre></td></tr></table></figure><br>执行以上命令后，出现如下窗口信息：</p><blockquote><p>$ python3<br>Python 3.4.0 (default, Apr 11 2014, 13:05:11)<br>[GCC 4.8.2] on linux<br>Type “help”, “copyright”, “credits” or “license” for more information.</p><blockquote><blockquote></blockquote></blockquote></blockquote><p>在 python 提示符中输入以下语句，然后按回车键查看运行效果：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print (&quot;Hello, Python!&quot;);</span><br></pre></td></tr></table></figure><br>以上命令执行结果如下：</p><blockquote><p>Hello, Python!</p></blockquote><p>当键入一个多行结构时，续行是必须的。我们可以看下如下 if 语句：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; flag = True</span><br><span class="line">&gt;&gt;&gt; if flag :</span><br><span class="line">...     print(&quot;flag 条件为 True!&quot;)</span><br><span class="line">... </span><br><span class="line">flag 条件为 True!</span><br></pre></td></tr></table></figure></p><h2 id="脚本式编程"><a href="#脚本式编程" class="headerlink" title="脚本式编程"></a>脚本式编程</h2><p>将如下代码拷贝至 hello.py文件中：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print (&quot;Hello, Python!&quot;);</span><br></pre></td></tr></table></figure><br>通过以下命令执行该脚本：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 hello.py</span><br></pre></td></tr></table></figure><br>输出结果为：</p><blockquote><p>Hello, Python!</p></blockquote><p>在Linux/Unix系统中，你可以在脚本顶部添加以下命令让Python脚本可以像SHELL脚本一样可直接执行：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#! /usr/bin/env python3</span><br></pre></td></tr></table></figure><br>然后修改脚本权限，使其有执行权限，命令如下：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ chmod +x hello.py</span><br></pre></td></tr></table></figure><br>执行以下命令：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./hello.py</span><br></pre></td></tr></table></figure><br>输出结果为：</p><blockquote><p>Hello, Python!</p></blockquote><h1 id="Python-运算符详解（库存）"><a href="#Python-运算符详解（库存）" class="headerlink" title="Python 运算符详解（库存）"></a>Python 运算符详解（库存）</h1><p>以下是 Python 中支持的各类运算符及其功能、实例和注意事项的详细说明。</p><h2 id="1-运算符总览表"><a href="#1-运算符总览表" class="headerlink" title="1. 运算符总览表"></a>1. 运算符总览表</h2><div class="table-container"><table><thead><tr><th>运算符类别</th><th>运算符示例</th><th>功能描述</th></tr></thead><tbody><tr><td>算术运算符</td><td><code>+</code>, <code>-</code>, <code>*</code>, <code>/</code> 等</td><td>基本数学运算</td></tr><tr><td>比较运算符</td><td><code>==</code>, <code>!=</code>, <code>&gt;</code>, <code>&lt;</code> 等</td><td>比较两个值的关系</td></tr><tr><td>赋值运算符</td><td><code>=</code>, <code>+=</code>, <code>-=</code> 等</td><td>给变量赋值</td></tr><tr><td>逻辑运算符</td><td><code>and</code>, <code>or</code>, <code>not</code></td><td>布尔逻辑运算</td></tr><tr><td>位运算符</td><td><code>&amp;</code>, `</td><td><code>,</code>^<code>,</code>~` 等</td><td>对二进制位进行操作</td></tr><tr><td>成员运算符</td><td><code>in</code>, <code>not in</code></td><td>检查元素是否在序列中</td></tr><tr><td>身份运算符</td><td><code>is</code>, <code>is not</code></td><td>比较对象的内存地址</td></tr><tr><td>运算符优先级</td><td>多种运算符组合</td><td>决定运算顺序的规则</td></tr></tbody></table></div><h2 id="2-详细说明与实例"><a href="#2-详细说明与实例" class="headerlink" title="2. 详细说明与实例"></a>2. 详细说明与实例</h2><h3 id="2-1-算术运算符"><a href="#2-1-算术运算符" class="headerlink" title="2.1 算术运算符"></a>2.1 算术运算符</h3><div class="table-container"><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th><th>结果</th></tr></thead><tbody><tr><td><code>+</code></td><td>加法</td><td><code>3 + 2</code></td><td>5</td></tr><tr><td><code>-</code></td><td>减法</td><td><code>5 - 2</code></td><td>3</td></tr><tr><td><code>*</code></td><td>乘法</td><td><code>3 * 4</code></td><td>12</td></tr><tr><td><code>/</code></td><td>除法</td><td><code>10 / 2</code></td><td>5.0</td></tr><tr><td><code>%</code></td><td>取模</td><td><code>10 % 3</code></td><td>1</td></tr><tr><td><code>**</code></td><td>幂运算</td><td><code>2 ** 3</code></td><td>8</td></tr><tr><td><code>//</code></td><td>整除</td><td><code>10 // 3</code></td><td>3</td></tr></tbody></table></div><p><strong>注意事项</strong>：</p><ul><li>除法(<code>/</code>)总是返回<strong>浮点数</strong></li><li>整除(<code>//</code>)<strong>向下取整</strong></li><li>幂运算(<code>**</code>)<strong>优先级高于其他算术运算符</strong><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line">a = <span class="number">21</span></span><br><span class="line">b = <span class="number">10</span></span><br><span class="line">c = <span class="number">0</span></span><br><span class="line">c = a + b</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;1 - c 的值为：&quot;</span>, c)</span><br><span class="line">c += a</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;2 - c 的值为：&quot;</span>, c)</span><br><span class="line">c *= a</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;3 - c 的值为：&quot;</span>, c)</span><br><span class="line">c /= a </span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;4 - c 的值为：&quot;</span>, c)</span><br><span class="line">c = <span class="number">2</span></span><br><span class="line">c %= a</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;5 - c 的值为：&quot;</span>, c)</span><br><span class="line">c **= a</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;6 - c 的值为：&quot;</span>, c)</span><br><span class="line">c //= a</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;7 - c 的值为：&quot;</span>, c)</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-2-比较运算符"><a href="#2-2-比较运算符" class="headerlink" title="2.2 比较运算符"></a>2.2 比较运算符</h3><div class="table-container"><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th><th>结果</th></tr></thead><tbody><tr><td><code>==</code></td><td>等于</td><td><code>3 == 2</code></td><td>False</td></tr><tr><td><code>!=</code></td><td>不等于</td><td><code>3 != 2</code></td><td>True</td></tr><tr><td><code>&gt;</code></td><td>大于</td><td><code>3 &gt; 2</code></td><td>True</td></tr><tr><td><code>&lt;</code></td><td>小于</td><td><code>3 &lt; 2</code></td><td>False</td></tr><tr><td><code>&gt;=</code></td><td>大于等于</td><td><code>3 &gt;= 3</code></td><td>True</td></tr><tr><td><code>&lt;=</code></td><td>小于等于</td><td><code>3 &lt;= 2</code></td><td>False</td></tr></tbody></table></div><p><strong>注意事项</strong>：</p><ul><li>可以链式比较：<code>1 &lt; 2 &lt; 3</code> 等价于 <code>1 &lt; 2 and 2 &lt; 3</code></li><li>比较字符串时按字典序</li></ul><h3 id="2-3-赋值运算符"><a href="#2-3-赋值运算符" class="headerlink" title="2.3 赋值运算符"></a>2.3 赋值运算符</h3><div class="table-container"><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th><th>等价于</th></tr></thead><tbody><tr><td><code>=</code></td><td>赋值</td><td><code>x = 5</code></td><td>-</td></tr><tr><td><code>+=</code></td><td>加后赋值</td><td><code>x += 3</code></td><td><code>x = x + 3</code></td></tr><tr><td><code>-=</code></td><td>减后赋值</td><td><code>x -= 2</code></td><td><code>x = x - 2</code></td></tr><tr><td><code>*=</code></td><td>乘后赋值</td><td><code>x *= 4</code></td><td><code>x = x * 4</code></td></tr><tr><td><code>/=</code></td><td>除后赋值</td><td><code>x /= 2</code></td><td><code>x = x / 2</code></td></tr><tr><td><code>%=</code></td><td>取模赋值</td><td><code>x %= 3</code></td><td><code>x = x % 3</code></td></tr><tr><td><code>**=</code></td><td>幂赋值</td><td><code>x **= 2</code></td><td><code>x = x ** 2</code></td></tr><tr><td><code>//=</code></td><td>整除赋值</td><td><code>x //= 2</code></td><td><code>x = x // 2</code></td></tr></tbody></table></div><p><strong>注意事项</strong>：</p><ul><li>增强赋值运算符更高效</li><li>可变对象的增强赋值可能就地修改对象</li></ul><h3 id="2-4-逻辑运算符"><a href="#2-4-逻辑运算符" class="headerlink" title="2.4 逻辑运算符"></a>2.4 逻辑运算符</h3><div class="table-container"><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th><th>结果</th></tr></thead><tbody><tr><td><code>and</code></td><td>逻辑与</td><td><code>True and False</code></td><td>False</td></tr><tr><td><code>or</code></td><td>逻辑或</td><td><code>True or False</code></td><td>True</td></tr><tr><td><code>not</code></td><td>逻辑非</td><td><code>not True</code></td><td>False</td></tr></tbody></table></div><p><strong>注意事项</strong>：</p><ul><li>短路特性：<code>and</code>和<code>or</code>会提前终止计算</li><li>返回最后一个求值的操作数，不一定是布尔值</li></ul><h3 id="2-5-位运算符"><a href="#2-5-位运算符" class="headerlink" title="2.5 位运算符"></a>2.5 位运算符</h3><p>按位运算符是把数字看作二进制来进行计算的。Python中的按位运算法则如下：</p><div class="table-container"><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th><th>结果</th></tr></thead><tbody><tr><td><code>&amp;</code></td><td>按位与</td><td><code>5 &amp; 3</code></td><td>1</td></tr><tr><td>`</td><td>`</td><td>按位或</td><td>`5</td><td>3`</td><td>7</td></tr><tr><td><code>^</code></td><td>按位异或</td><td><code>5 ^ 3</code></td><td>6</td></tr><tr><td><code>~</code></td><td>按位取反</td><td><code>~5</code></td><td>-6</td></tr><tr><td><code>&lt;&lt;</code></td><td>左移</td><td><code>5 &lt;&lt; 1</code></td><td>10</td></tr><tr><td><code>&gt;&gt;</code></td><td>右移</td><td><code>5 &gt;&gt; 1</code></td><td>2</td></tr></tbody></table></div><p>这里可能会显示错误，按位或运算符为“<code>|</code>”</p><p><code>&amp;</code><strong>按位与运算符</strong>：参与运算的两个值,如果两个相应位都为1,则该位的结果为1,否则为0    (a &amp; b) 输出结果 12 ，二进制解释： 0000 1100<br><code>|</code><strong>按位或运算符</strong>：只要对应的二个二进位有一个为1时，结果位就为1。    (a | b) 输出结果 61 ，二进制解释： 0011 1101<br><code>^</code><strong>按位异或运算符</strong>：当两对应的二进位相异时，结果为1    (a ^ b) 输出结果 49 ，二进制解释： 0011 0001<br><code>~</code><strong>按位取反运算符</strong>：对数据的每个二进制位取反,即把1变为0,把0变为1。~x 类似于 -x-1    (~a ) 输出结果 -61 ，二进制解释： 1100 0011， 在一个有符号二进制数的补码形式。<br><code>&lt;&lt;</code><strong>左移动运算符</strong>：运算数的各二进位全部左移若干位，由”&lt;&lt;”右边的数指定移动的位数，高位丢弃，低位补0。    a &lt;&lt; 2 输出结果 240 ，二进制解释： 1111 0000<br><code>&gt;&gt;</code><strong>右移动运算符</strong>：把”&gt;&gt;”左边的运算数的各二进位全部右移若干位，”&gt;&gt;”右边的数指定移动的位数    a &gt;&gt; 2 输出结果 15 ，二进制解释： 0000 1111</p><p><strong>注意事项</strong>：</p><ul><li>操作数会被转换为<strong>二进制</strong>形式</li><li>负数以<strong>补码</strong>形式表示</li></ul><h3 id="2-6-成员运算符"><a href="#2-6-成员运算符" class="headerlink" title="2.6 成员运算符"></a>2.6 成员运算符</h3><p>除了以上的一些运算符之外，Python还支持成员运算符，测试实例中包含了一系列的成员，包括字符串，列表或元组。</p><div class="table-container"><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th><th>结果</th></tr></thead><tbody><tr><td><code>in</code></td><td>在序列中</td><td><code>&#39;a&#39; in [&#39;a&#39;, &#39;b&#39;]</code></td><td>True</td></tr><tr><td><code>not in</code></td><td>不在序列中</td><td><code>&#39;c&#39; not in &#39;abc&#39;</code></td><td>False</td></tr></tbody></table></div><p><code>in</code><strong>如果在指定的序列中找到值返回 True，否则返回 False。</strong>x 在 y 序列中 , 如果 x 在 y 序列中返回 True。<br><code>not in</code><strong>如果在指定的序列中没有找到值返回 True，否则返回 False。</strong>x 不在 y 序列中 , 如果 x 不在 y 序列中返回 True。<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python3</span><br><span class="line"> </span><br><span class="line">a = 10</span><br><span class="line">b = 20</span><br><span class="line">list = [1, 2, 3, 4, 5 ]</span><br><span class="line"> </span><br><span class="line">if ( a in list ):</span><br><span class="line">   print (&quot;1 - 变量 a 在给定的列表中 list 中&quot;)</span><br><span class="line">else:</span><br><span class="line">   print (&quot;1 - 变量 a 不在给定的列表中 list 中&quot;)</span><br><span class="line"> </span><br><span class="line">if ( b not in list ):</span><br><span class="line">   print (&quot;2 - 变量 b 不在给定的列表中 list 中&quot;)</span><br><span class="line">else:</span><br><span class="line">   print (&quot;2 - 变量 b 在给定的列表中 list 中&quot;)</span><br><span class="line"> </span><br><span class="line"># 修改变量 a 的值</span><br><span class="line">a = 2</span><br><span class="line">if ( a in list ):</span><br><span class="line">   print (&quot;3 - 变量 a 在给定的列表中 list 中&quot;)</span><br><span class="line">else:</span><br><span class="line">   print (&quot;3 - 变量 a 不在给定的列表中 list 中&quot;)</span><br></pre></td></tr></table></figure></p><p><strong>注意事项</strong>：</p><ul><li><strong>适用于字符串、列表、元组、字典(检查键)等</strong></li><li><strong>字典中只检查键，不检查值</strong></li></ul><h3 id="2-7-身份运算符"><a href="#2-7-身份运算符" class="headerlink" title="2.7 身份运算符"></a>2.7 身份运算符</h3><p>身份运算符用于比较两个对象的存储单元</p><div class="table-container"><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th><th>结果</th></tr></thead><tbody><tr><td><code>is</code></td><td>是同一对象</td><td><code>a is b</code></td><td>取决于对象ID</td></tr><tr><td><code>is not</code></td><td>不是同一对象</td><td><code>a is not b</code></td><td>取决于对象ID</td></tr></tbody></table></div><p><code>is</code>    <strong>is 是判断两个标识符是不是引用自一个对象</strong>    x is y, 类似 id(x) == id(y) , 如果引用的是同一个对象则返回 True，否则返回 False<br><code>is not</code>    <strong>is not 是判断两个标识符是不是引用自不同对象</strong>    x is not y ， 类似 id(x) != id(y)。如果引用的不是同一个对象则返回结果 True，否则返回 False。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python3</span><br><span class="line"> </span><br><span class="line">a = 20</span><br><span class="line">b = 20</span><br><span class="line"> </span><br><span class="line">if ( a is b ):</span><br><span class="line">   print (&quot;1 - a 和 b 有相同的标识&quot;)</span><br><span class="line">else:</span><br><span class="line">   print (&quot;1 - a 和 b 没有相同的标识&quot;)</span><br><span class="line"> </span><br><span class="line">if ( id(a) == id(b) ):</span><br><span class="line">   print (&quot;2 - a 和 b 有相同的标识&quot;)</span><br><span class="line">else:</span><br><span class="line">   print (&quot;2 - a 和 b 没有相同的标识&quot;)</span><br><span class="line"> </span><br><span class="line"># 修改变量 b 的值</span><br><span class="line">b = 30</span><br><span class="line">if ( a is b ):</span><br><span class="line">   print (&quot;3 - a 和 b 有相同的标识&quot;)</span><br><span class="line">else:</span><br><span class="line">   print (&quot;3 - a 和 b 没有相同的标识&quot;)</span><br><span class="line"> </span><br><span class="line">if ( a is not b ):</span><br><span class="line">   print (&quot;4 - a 和 b 没有相同的标识&quot;)</span><br><span class="line">else:</span><br><span class="line">   print (&quot;4 - a 和 b 有相同的标识&quot;)#!/usr/bin/python3</span><br><span class="line"> </span><br><span class="line">a = 20</span><br><span class="line">b = 20</span><br><span class="line"> </span><br><span class="line">if ( a is b ):</span><br><span class="line">   print (&quot;1 - a 和 b 有相同的标识&quot;)</span><br><span class="line">else:</span><br><span class="line">   print (&quot;1 - a 和 b 没有相同的标识&quot;)</span><br><span class="line"> </span><br><span class="line">if ( id(a) == id(b) ):</span><br><span class="line">   print (&quot;2 - a 和 b 有相同的标识&quot;)</span><br><span class="line">else:</span><br><span class="line">   print (&quot;2 - a 和 b 没有相同的标识&quot;)</span><br><span class="line"> </span><br><span class="line"># 修改变量 b 的值</span><br><span class="line">b = 30</span><br><span class="line">if ( a is b ):</span><br><span class="line">   print (&quot;3 - a 和 b 有相同的标识&quot;)</span><br><span class="line">else:</span><br><span class="line">   print (&quot;3 - a 和 b 没有相同的标识&quot;)</span><br><span class="line"> </span><br><span class="line">if ( a is not b ):</span><br><span class="line">   print (&quot;4 - a 和 b 没有相同的标识&quot;)</span><br><span class="line">else:</span><br><span class="line">   print (&quot;4 - a 和 b 有相同的标识&quot;)</span><br></pre></td></tr></table></figure><p>实例输出结果为：</p><blockquote><p>1 - a 和 b 有相同的标识<br>2 - a 和 b 有相同的标识<br>3 - a 和 b 没有相同的标识<br>4 - a 和 b 没有相同的标识</p></blockquote><p><code>is</code> 用于判断两个变量<strong>引用对象是否为同一个</strong>， <code>==</code> 用于判断<strong>引用变量的值是否相等</strong>。</p><p><strong>注意事项</strong>：</p><ul><li>比较的是对象的内存地址</li><li>小整数和短字符串会被Python缓存</li></ul><h3 id="2-8-运算符优先级"><a href="#2-8-运算符优先级" class="headerlink" title="2.8 运算符优先级"></a>2.8 运算符优先级</h3><div class="table-container"><table><thead><tr><th>优先级</th><th>运算符</th></tr></thead><tbody><tr><td>1</td><td><code>()</code> (括号)</td></tr><tr><td>2</td><td><code>**</code> (幂)</td></tr><tr><td>3</td><td><code>+x</code>, <code>-x</code>, <code>~x</code> (一元运算符)</td></tr><tr><td>4</td><td><code>*</code>, <code>/</code>, <code>//</code>, <code>%</code></td></tr><tr><td>5</td><td><code>+</code>, <code>-</code></td></tr><tr><td>6</td><td><code>&lt;&lt;</code>, <code>&gt;&gt;</code></td></tr><tr><td>7</td><td><code>&amp;</code></td></tr><tr><td>8</td><td><code>^</code></td></tr><tr><td>9</td><td>`</td><td>`</td></tr><tr><td>10</td><td><code>==</code>, <code>!=</code>, <code>&gt;</code>, <code>&lt;</code>, <code>&gt;=</code>, <code>&lt;=</code></td></tr><tr><td>11</td><td><code>is</code>, <code>is not</code>, <code>in</code>, <code>not in</code></td></tr><tr><td>12</td><td><code>not</code></td></tr><tr><td>13</td><td><code>and</code></td></tr><tr><td>14</td><td><code>or</code></td></tr></tbody></table></div><p><strong>注意事项</strong>：</p><ul><li>使用括号可以明确优先级</li><li>同级别运算符从左到右计算(幂运算除外)</li></ul><h2 id="3-综合实例"><a href="#3-综合实例" class="headerlink" title="3. 综合实例"></a>3. 综合实例</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 算术运算符</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">2</span> + <span class="number">3</span> * <span class="number">4</span>)  <span class="comment"># 输出: 14 (先乘后加)</span></span><br><span class="line"><span class="built_in">print</span>((<span class="number">2</span> + <span class="number">3</span>) * <span class="number">4</span>)  <span class="comment"># 输出: 20 (括号优先)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 比较和逻辑运算符</span></span><br><span class="line">a = <span class="number">5</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">3</span> &lt; a &lt; <span class="number">7</span>)  <span class="comment"># 输出: True (链式比较)</span></span><br><span class="line"><span class="built_in">print</span>(a == <span class="number">5</span> <span class="keyword">and</span> <span class="keyword">not</span> a &lt; <span class="number">4</span>)  <span class="comment"># 输出: True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 位运算符</span></span><br><span class="line">x = <span class="number">10</span>  <span class="comment"># 1010</span></span><br><span class="line">y = <span class="number">4</span>   <span class="comment"># 0100</span></span><br><span class="line"><span class="built_in">print</span>(x &amp; y)  <span class="comment"># 输出: 0 (0000)</span></span><br><span class="line"><span class="built_in">print</span>(x | y)  <span class="comment"># 输出: 14 (1110)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 成员和身份运算符</span></span><br><span class="line">lst = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="number">2</span> <span class="keyword">in</span> lst)  <span class="comment"># 输出: True</span></span><br><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">b = a</span><br><span class="line"><span class="built_in">print</span>(a <span class="keyword">is</span> b)  <span class="comment"># 输出: True</span></span><br><span class="line"><span class="built_in">print</span>(a == [<span class="number">1</span>, <span class="number">2</span>])  <span class="comment"># 输出: True</span></span><br><span class="line"><span class="built_in">print</span>(a <span class="keyword">is</span> [<span class="number">1</span>, <span class="number">2</span>])  <span class="comment"># 输出: False</span></span><br></pre></td></tr></table></figure><h2 id="4-重要注意事项"><a href="#4-重要注意事项" class="headerlink" title="4. 重要注意事项"></a>4. 重要注意事项</h2><ol><li><p><strong>不可变对象与可变对象</strong>：</p><ul><li>对于不可变对象(数字、字符串、元组)，运算符通常会创建新对象</li><li>对于可变对象(列表、字典)，某些运算符(如<code>+=</code>)可能就地修改对象</li></ul></li><li><p><strong>浮点数精度问题</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="number">0.1</span> + <span class="number">0.2</span> == <span class="number">0.3</span>)  <span class="comment"># 输出: False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">round</span>(<span class="number">0.1</span> + <span class="number">0.2</span>, <span class="number">1</span>) == <span class="number">0.3</span>)  <span class="comment"># 正确比较方式</span></span><br></pre></td></tr></table></figure></li><li><p><strong>短路特性</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;函数被调用&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="literal">False</span> <span class="keyword">and</span> func()  <span class="comment"># func()不会被调用</span></span><br><span class="line"><span class="literal">True</span> <span class="keyword">or</span> func()    <span class="comment"># func()不会被调用</span></span><br></pre></td></tr></table></figure></li><li><p><strong><code>is</code>与<code>==</code>的区别</strong>：</p><ul><li><code>is</code>比较对象标识(内存地址)</li><li><code>==</code>比较对象值</li></ul></li><li><p><strong>增强赋值的陷阱</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">lst = [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">lst2 = lst</span><br><span class="line">lst += [<span class="number">3</span>]  <span class="comment"># 会修改lst和lst2</span></span><br><span class="line">lst = lst + [<span class="number">4</span>]  <span class="comment"># 创建新列表，不影响lst2</span></span><br></pre></td></tr></table></figure><h1 id="Python-运算符输出数据类型表"><a href="#Python-运算符输出数据类型表" class="headerlink" title="Python 运算符输出数据类型表"></a>Python 运算符输出数据类型表</h1></li></ol><blockquote><p>以下是 Python 中各类运算符运算结果的数据类型规则说明：</p></blockquote><h2 id="1-算术运算符结果类型"><a href="#1-算术运算符结果类型" class="headerlink" title="1. 算术运算符结果类型"></a>1. 算术运算符结果类型</h2><div class="table-container"><table><thead><tr><th>运算符</th><th>操作数类型组合</th><th>结果类型</th><th>示例</th></tr></thead><tbody><tr><td><code>+</code></td><td>int + int</td><td>int</td><td><code>3 + 2</code> → <code>5</code> (int)</td></tr><tr><td><code>+</code></td><td>int + float</td><td>float</td><td><code>3 + 2.0</code> → <code>5.0</code> (float)</td></tr><tr><td><code>+</code></td><td>float + float</td><td>float</td><td><code>3.0 + 2.0</code> → <code>5.0</code></td></tr><tr><td><code>-</code></td><td>同上规则</td><td>同上规则</td><td><code>5 - 2.0</code> → <code>3.0</code></td></tr><tr><td><code>*</code></td><td>同上规则</td><td>同上规则</td><td><code>3 * 2.0</code> → <code>6.0</code></td></tr><tr><td><code>/</code></td><td>任何数字组合</td><td>float</td><td><code>10 / 2</code> → <code>5.0</code></td></tr><tr><td><code>//</code></td><td>int // int</td><td>int</td><td><code>10 // 3</code> → <code>3</code></td></tr><tr><td><code>//</code></td><td>含float的操作数</td><td>float</td><td><code>10.0 // 3</code> → <code>3.0</code></td></tr><tr><td><code>%</code></td><td>同除法规则</td><td>同除法规则</td><td><code>10 % 3</code> → <code>1</code> (int)</td></tr><tr><td><code>**</code></td><td>同乘法规则</td><td>同乘法规则</td><td><code>2 ** 3</code> → <code>8</code> (int)</td></tr></tbody></table></div><p><strong>注意</strong>：字符串乘法(<code>str * int</code>)返回字符串</p><h2 id="2-比较运算符结果类型"><a href="#2-比较运算符结果类型" class="headerlink" title="2. 比较运算符结果类型"></a>2. 比较运算符结果类型</h2><div class="table-container"><table><thead><tr><th>运算符</th><th>结果类型</th><th>说明</th></tr></thead><tbody><tr><td><code>==</code></td><td>bool</td><td>所有比较运算都返回布尔值</td></tr><tr><td><code>!=</code></td><td>bool</td><td></td></tr><tr><td><code>&gt;</code></td><td>bool</td><td></td></tr><tr><td><code>&lt;</code></td><td>bool</td><td></td></tr><tr><td><code>&gt;=</code></td><td>bool</td><td></td></tr><tr><td><code>&lt;=</code></td><td>bool</td></tr></tbody></table></div><h2 id="3-赋值运算符结果类型"><a href="#3-赋值运算符结果类型" class="headerlink" title="3. 赋值运算符结果类型"></a>3. 赋值运算符结果类型</h2><div class="table-container"><table><thead><tr><th>运算符</th><th>结果类型</th><th>说明</th></tr></thead><tbody><tr><td><code>=</code></td><td>右侧表达式类型</td><td>返回赋值的值</td></tr><tr><td><code>+=</code></td><td>同算术运算规则</td><td>可能就地修改可变对象</td></tr><tr><td>其他复合赋值</td><td>同算术运算规则</td></tr></tbody></table></div><h2 id="4-逻辑运算符结果类型"><a href="#4-逻辑运算符结果类型" class="headerlink" title="4. 逻辑运算符结果类型"></a>4. 逻辑运算符结果类型</h2><div class="table-container"><table><thead><tr><th>运算符</th><th>操作数类型</th><th>结果类型</th><th>说明</th></tr></thead><tbody><tr><td><code>and</code></td><td>任意</td><td>最后一个求值的操作数</td><td>短路求值</td></tr><tr><td><code>or</code></td><td>任意</td><td>最后一个求值的操作数</td><td>短路求值</td></tr><tr><td><code>not</code></td><td>任意</td><td>bool</td><td>总是返回布尔值</td></tr></tbody></table></div><p>示例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="number">3</span> <span class="keyword">and</span> <span class="string">&#x27;hello&#x27;</span>)  <span class="comment"># &#x27;hello&#x27; (str)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">0</span> <span class="keyword">or</span> [])        <span class="comment"># [] (list)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="keyword">not</span> <span class="number">5</span>)          <span class="comment"># False (bool)</span></span><br></pre></td></tr></table></figure></p><h2 id="5-位运算符结果类型"><a href="#5-位运算符结果类型" class="headerlink" title="5. 位运算符结果类型"></a>5. 位运算符结果类型</h2><div class="table-container"><table><thead><tr><th>运算符</th><th>结果类型</th><th>说明</th></tr></thead><tbody><tr><td><code>&amp;</code></td><td>int</td><td>操作数会被转换为整数</td></tr><tr><td>`</td><td>`</td><td>int</td><td></td></tr><tr><td><code>^</code></td><td>int</td><td></td></tr><tr><td><code>~</code></td><td>int</td><td></td></tr><tr><td><code>&lt;&lt;</code></td><td>int</td><td></td></tr><tr><td><code>&gt;&gt;</code></td><td>int</td></tr></tbody></table></div><h2 id="6-成员运算符结果类型"><a href="#6-成员运算符结果类型" class="headerlink" title="6. 成员运算符结果类型"></a>6. 成员运算符结果类型</h2><div class="table-container"><table><thead><tr><th>运算符</th><th>结果类型</th><th>说明</th></tr></thead><tbody><tr><td><code>in</code></td><td>bool</td><td>总是返回布尔值</td></tr><tr><td><code>not in</code></td><td>bool</td></tr></tbody></table></div><h2 id="7-身份运算符结果类型"><a href="#7-身份运算符结果类型" class="headerlink" title="7. 身份运算符结果类型"></a>7. 身份运算符结果类型</h2><div class="table-container"><table><thead><tr><th>运算符</th><th>结果类型</th><th>说明</th></tr></thead><tbody><tr><td><code>is</code></td><td>bool</td><td>比较对象标识</td></tr><tr><td><code>is not</code></td><td>bool</td></tr></tbody></table></div><h2 id="8-特殊运算类型规则"><a href="#8-特殊运算类型规则" class="headerlink" title="8. 特殊运算类型规则"></a>8. 特殊运算类型规则</h2><div class="table-container"><table><thead><tr><th>运算</th><th>结果类型规则</th><th>示例</th></tr></thead><tbody><tr><td>字符串拼接(<code>+</code>)</td><td>str</td><td><code>&#39;a&#39; + &#39;b&#39;</code> → <code>&#39;ab&#39;</code></td></tr><tr><td>列表拼接(<code>+</code>)</td><td>list</td><td><code>[1] + [2]</code> → <code>[1, 2]</code></td></tr><tr><td>序列重复(<code>*</code>)</td><td>与左操作数相同</td><td><code>&#39;a&#39;*3</code> → <code>&#39;aaa&#39;</code></td></tr><tr><td>字典合并(`</td><td>`)</td><td>dict (Python 3.9+)</td><td>`{‘a’:1}</td><td>{‘b’:2}<code>→</code>{‘a’:1, ‘b’:2}`</td></tr></tbody></table></div><h1 id="类型转换规则总结"><a href="#类型转换规则总结" class="headerlink" title="类型转换规则总结"></a>类型转换规则总结</h1><ol><li><p><strong>算术运算</strong>：</p><ul><li><strong>只要有float参与，结果就是float</strong></li><li>除法(<code>/</code>)总是<strong>返回float</strong></li><li>整数运算可能自动转换为长整数(超出普通int范围时)</li></ul></li><li><p><strong>混合类型运算</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="number">3</span> + <span class="number">4.0</span>))     <span class="comment"># &lt;class &#x27;float&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="literal">True</span> + <span class="number">2</span>))    <span class="comment"># &lt;class &#x27;int&#x27;&gt; (True=1)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="literal">False</span> * <span class="number">3.5</span>)) <span class="comment"># &lt;class &#x27;float&#x27;&gt; (False=0)</span></span><br></pre></td></tr></table></figure></li><li><p><strong>布尔上下文</strong>：</p><ul><li><strong>在需要布尔值的上下文中，非零数字、非空序列/映射等被视为True</strong></li><li>逻辑运算符可能返回非布尔值</li></ul></li></ol><p><strong>重要提示</strong>：使用<code>type()</code>函数可以检查任何表达式的结果类型：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="number">3</span> / <span class="number">2</span>))    <span class="comment"># &lt;class &#x27;float&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="number">3</span> // <span class="number">2</span>))   <span class="comment"># &lt;class &#x27;int&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="string">&#x27;a&#x27;</span> * <span class="number">3</span>))  <span class="comment"># &lt;class &#x27;str&#x27;&gt;</span></span><br></pre></td></tr></table></figure></p><p>就到这里吧，得快点学习了</p>]]></content>
      
      
      <categories>
          
          <category> 结构速查 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vercel部署过程</title>
      <link href="/2025/03/25/vercel%E9%83%A8%E7%BD%B2%E8%BF%87%E7%A8%8B/"/>
      <url>/2025/03/25/vercel%E9%83%A8%E7%BD%B2%E8%BF%87%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="vercel部署过程"><a href="#vercel部署过程" class="headerlink" title="vercel部署过程"></a>vercel部署过程</h1><p>我懒的很，很多时候这里是放指令的地方，但是我网站访问偏慢，我也不知道是不是问ai更快啊QAQ，那我写这个有什么意义吗？<br>猜猜我为什么不发图，发图很费图床的好吧，而且代理站点有点远，上图床很大概率加载不出来┭┮﹏┭┮</p><p>文章参考地址：<a href="https://www.cnblogs.com/echolun/p/17524216.html">https://www.cnblogs.com/echolun/p/17524216.html</a></p><blockquote><p><strong>Vercel</strong>，一个支持静态和动态网站部署的云服务平台，其特点包括个人版免费、内置CICD、自动部署、GitHub集成和丰富的集成能力。文章详细讲解了如何部署、优势及注意事项，包括环境区分、部署保护和高级功能如Monorepos和Next.js项目支持。</p></blockquote><p><strong>但是这玩意部署的东西是墙外的，如果要墙内访问，请手动解析dns和解析一个国内域名，或者更暴力的，直接挂梯子出去访问</strong></p><p>你可以让其和你的git仓库联系上，可同步过来几个仓库，方便管理</p><p>我还是多啰嗦下啊，为什么选择Vercel</p><ul><li>个人版永久免费，每个月 100G 带宽（别人访问你的项目所耗费的流量），个人项目部署完全够用，需要注意的是团队模式收费，所以要协作你只能付费。</li><li>内置 CI CD，你可以理解成一个黑盒，项目丢进去，只需要将项目导入 vercel ，一句命令自动部署。</li><li>因为内置构建流程，支持代码推送、PR 自动触发构建，不同分支唯一地址，方便测试。</li><li>支持本地、测试、生产三种环境部署，仅仅是命令区别，上手成本极低。</li><li>丰富的集成能力，项目部署自动监控，端到端自动化测试等等，当然这些并并属于 vercel 自身的能力，但它可以为你提供集成入口，让这些成为你自动部署中自动进行的一步，比如构建生产后自动完成性能指标输出，自动化测试，以及后续项目监控等等。</li></ul><p>部署方便且便宜是最大的优点了，至于访问这个不是问题</p><h2 id="部署方式"><a href="#部署方式" class="headerlink" title="部署方式"></a>部署方式</h2><p>将项目导入 vercel 后，vercel 会自动检测并为项目所用的框架设置最佳构建配置和部署配置，这也是为什么导入项目就能直接构建的一部分原因，我们先说两种导入项目到 vercel 平台的两种方式。</p><h3 id="GitHub部署"><a href="#GitHub部署" class="headerlink" title="GitHub部署"></a>GitHub部署</h3><p>在<code>dashboard</code>点击<code>Add New</code>按钮选择 <code>Project</code>，这时会跳转到导入项目界面，选择你的<code>GitHub</code>账号（如果之前没绑定这里也可以绑定 GitHub 账号），然后点击导入按钮，这是会跳转到项目设置。</p><p><strong>这个过程会自动识别你的项目框架，如果没识别准确的话，请根据实际情况更改</strong><br>配置完毕后直接点击下面的 Deploy 进行部署，然后坐等构建就能看到 vercel 为我们部署后独一无二的<strong>预览地址</strong>了。这个网站如果要访问的话一般要梯子，请提前准备好。<br>你之后更新的项目，在后续的修改过程中，你修改项目代码，push 到仓库，GitHub 感知到代码变动，vercel 就会自动再次部署。<strong>这个过程完全自动</strong><br>我<code>GitHub</code>项目拷贝下来会有主分支，以及我的开发分支，vercel 虽然能自动部署，它怎么知道我要部署到什么环境，事实上 vercel 也已经做了提前预设，假设你的代码变动发生在 main 或者 master 分支，那么 vercel 就会自动构建部署生产环境，除此之外的分支，vercel 都会更新预览（测试）环境。</p><p>另外，让远程仓库代码变动有两种方式，<strong>第一种是直接本地推送代码，第二种就是提 PR 后合并到目标分支触发变动。</strong></p><p>假设你集成了<code>GitHub</code>，在你 PR 合并前，你甚至能在<code>GitHub PR</code>中直接看到你需要提 PR 的分支部署后的预览地址，直接看 vercel 帮你部署后的效果。</p><h3 id="本地部署"><a href="#本地部署" class="headerlink" title="本地部署"></a>本地部署</h3><p>你要觉得一些测试项目扔git上面太掉价，你又要一个假云服务器，就直接本地部署得了。</p><p><strong>我们需要在本地安装 vercel，建议是全局安装</strong>，这时候在不c盘战士后头累死你<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g vercel</span><br></pre></td></tr></table></figure><br>之后执行如下命令保证你本地登录了<code>vercel</code> 账号：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vercel login</span><br></pre></td></tr></table></figure><br>他会叫你邮箱验证的喔，去邮箱里面操作，不是卡住了o(￣ヘ￣o＃)</p><p>然后进入到项目根目录，执行<code>vercel</code>即可：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vercel</span><br></pre></td></tr></table></figure><br>之后你需要进行一些基础配置，比如你需要选择要部署的项目目录、构建命令和输出目录，如果直接回车就是执行默认配置，这些配置走完后项目就会进行部署，你可以直接等待终端部署完成后的预览地址，你可以回到 vercel 后台找到你刚才关联部署的项目，一样可以找到预览地址</p><p><strong>我的建议是除非你很熟练，那么先一路默认配置先，后头可以改的</strong><br>我们需要区分 GitHub 部署与本地部署的一些区别，集成 GitHub 后，vercel 会根据 GitHub 代码仓库分支变化，对应的自动部署匹配环境：</p><ul><li><strong>生产环境</strong>：假设 GitHub 主分支直接发生代码变动，比如 push，或者有 PR 合并到主分支都会导致生产环境重新部署，而主分支默认是 main 或者 master 分支，你可以在 GitHub 自定义你的主分支。</li><li><strong>预览环境</strong>：除了主分支之外的其他分支如果发生代码变动，vercel 会自动构建属于这个分支的独一无二的预览地址。<br>我们也可以直接通过命令来进行本地部署，但如果我们集成 GitHub，还是建议走 GitHub 工作流，这样构建会更加规范。</li></ul><p>因此构建命令更适用于本地部署，因为我们的项目并未集成 GitHub ，vercel 无处感知代码变化，这就需要开发来手动通过命令来达到不同环境部署更新的目的，接下来我们介绍不同环境的区别以及对应的命令。</p><p>你的项目结构请一定要清楚，使用什么框架进行部署</p><h2 id="构建命令与环境介绍"><a href="#构建命令与环境介绍" class="headerlink" title="构建命令与环境介绍"></a>构建命令与环境介绍</h2><p><code>vercel</code> 其实也分为<strong>开发环境，预览环境（测试环境）以及生产环境</strong>三个概念，在 vercel 团队版，你甚至能在预览环境直接进行评论（而且评论也能集成到 slack，挺符合目前我们的生态）<br>我们可以通过如下三个命令分别构建不同环境，个人感觉很重要的，因为你在编辑的时候看不见啊，要是谁可以搞个多语言通用的即时编辑器我会爱死他的。</p><ol><li><code>vercel dev：</code>这个命令用于启动本地的开发环境。它会模拟 Vercel 的云环境，让你可以在本地进行开发和测试。使用这个命令，你可以实时看到你的更改效果，而不需要将它们部署到预览或生产环境。</li><li><code>vercel：</code>这个命令用于将你的项目部署到 Vercel 的预览环境。预览环境是一个为了测试和分享而设立的临时环境，你可以在里面看到你的更改会在生产环境中出现的样子。这个命令非常适用于团队合作的场景，你可以用它来分享你的更改，获取反馈，然后在推向生产环境之前进行进一步的调整。</li><li><code>vercel --prod：</code>这个命令会将你的应用部署到生产环境。生产环境通常代表了你的应用的正式发布版本，所部署的内容会对公众可见。这个命令就是将你的项目部署上线的最终步骤。<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2>注意你的英语阅读能力或者有一个靠谱的阅读器或者翻译器，你会感谢我的噗噗。</li></ol><ul><li>vercel 部署对于文件大小写引用更为严格，比如我发现自己项目一些文件引用文件是小写，但引用某个字母大写，Jenkins部署这些非常正常，也不会报错，但vercel 会认为这是错误，并直接报错</li></ul><p>所以如果遇到这样的错误，直接找到<strong>构建错误信息的文件</strong>去看看资源是否存在，或者资源命是否大小写匹配<br>乐中乐之大小写错误，简单而又致命，<del>怎么这么大人还会大小写不分啊，杂鱼杂鱼</del></p><ul><li>主要对应版本号</li><li>你可能需要根据自身项目构建配置，对应的调整 vercel 平台的项目设置，在这里可以看到构建相关设置，在之前我们提到 vercel 会根据你的项目自动识别框架并初始化默认配置，然而这有些时候你的项目并没有叫这个的，记得核对更改</li><li><strong>vercel 平台环境并不支持 zip，我在很长一段时间构建项目时 vercel 一直给我报找不到 zip 命令的错误，但我并未发现我的包依赖中有这个包名，</strong><h2 id="未来展望"><a href="#未来展望" class="headerlink" title="未来展望"></a>未来展望</h2><strong>支持域名自定义</strong><br>你要一直用默认给你分配的那个又臭又长的地址，我相信你会疯的，点进去就一直转圈圈，你咖啡都凉了都进不去。<br>自用还好，你对外使用？，呦西，你也不想让别人看见你的地址环境吧，快去搞个域名使使。<br><strong>支持部署 URL 私有化与预览地址自定义（要钱）</strong><br>看见那个<code>要钱</code>了吗，我当然知道，但是我……哇达西，没钱啊┭┮﹏┭┮<br>所以这部分没体验过，拜拜~<br><strong>部署保护</strong><br>vercel 支持单个部署添加密码保护或者直接将部署设置为私有化部署，前者需要输入预设的密码才能访问地址，后者可以直接大范围让所有部署地址变成私有化，你可能需要密码或者 vercel 身份效验才能访问，比如企业版中我们可能不希望团队外任何人访问测试地址。<br><strong>丰富的集成能力</strong><br>除了前面提到的 GitHub 在集成上表现，vercel 其实提供了配套的对于项目部署中性能检测、项目安全、项目监控、端到端测试等一系列能力，当然现在我们的做法是分散了不同平台（比如 sentry），而非自动化部署一条线中的一部分。</li></ul><p>最后我发现我写这个基本上没啥大用处，更多的是作者无聊的体现，是的，作者的脑子已经不在这里了，它随着早上的洗脸水一起流到下水道去了。</p>]]></content>
      
      
      <categories>
          
          <category> 平台工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 部署平台工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python 学习速查笔记（2）</title>
      <link href="/2025/03/24/python%20%E5%AD%A6%E4%B9%A0%E9%80%9F%E6%9F%A5%E7%AC%94%E8%AE%B0(2)/"/>
      <url>/2025/03/24/python%20%E5%AD%A6%E4%B9%A0%E9%80%9F%E6%9F%A5%E7%AC%94%E8%AE%B0(2)/</url>
      
        <content type="html"><![CDATA[<h1 id="python-学习速查笔记（2）"><a href="#python-学习速查笔记（2）" class="headerlink" title="python 学习速查笔记（2）"></a>python 学习速查笔记（2）</h1><h1 id="Python-基本数据类型"><a href="#Python-基本数据类型" class="headerlink" title="Python 基本数据类型"></a>Python 基本数据类型</h1><blockquote><p>与上一篇不同，从这篇开始我将详细的开始解释各个部分</p></blockquote><ul><li>在Python 中的变量<strong>不需要声明</strong>。但是每个变量在<strong>使用前都必须赋值</strong>，变量赋值以后该变量才会被<strong>创建</strong>。</li><li>在 Python 中，<strong>变量就是变量，它没有类型</strong>，我们所说的”类型”是变量所指的<strong>内存中对象的类型</strong>。</li><li>等号<code>（=）</code>用来给变量赋值。</li></ul><p>等号（=）运算符左边是一个变量名,等号（=）运算符右边是存储在变量中的值。例如：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line">counter = <span class="number">100</span>          <span class="comment"># 整型变量</span></span><br><span class="line">miles   = <span class="number">1000.0</span>       <span class="comment"># 浮点型变量</span></span><br><span class="line">name    = <span class="string">&quot;runoob&quot;</span>     <span class="comment"># 字符串</span></span><br><span class="line"><span class="built_in">print</span> (counter)</span><br><span class="line"><span class="built_in">print</span> (miles)</span><br><span class="line"><span class="built_in">print</span> (name)</span><br></pre></td></tr></table></figure><br>若是执行以上程序会输出：</p><blockquote><p>100<br>1000.0<br>runoob</p></blockquote><h2 id="多个变量赋值"><a href="#多个变量赋值" class="headerlink" title="多个变量赋值"></a>多个变量赋值</h2><p>在Python允许你同时为多个变量赋值。例如：</p><blockquote><p>a = b = c = 1</p></blockquote><p>这三个整型变量这时都被赋值为1，<strong>从后向前赋值</strong>，这三个变量都被赋予相同的值，当然，为多个对象指定多个变量也是可以的,例如：</p><blockquote><p>a, b, c = 1, 2, “runoob”</p></blockquote><p>以上a为1，b为2，c为runoob，注意赋值的时候会<strong>变更数据类型</strong></p><h1 id="标准数据类型"><a href="#标准数据类型" class="headerlink" title="标准数据类型"></a>标准数据类型</h1><p>Python3 中常见的数据类型有：</p><blockquote><ul><li>Number（数字）</li><li>String（字符串）</li><li>bool（布尔类型）</li><li>List（列表）</li><li>Tuple（元组）</li><li>Set（集合）</li><li>Dictionary（字典）</li></ul></blockquote><p>字典类型为python特有的数据类型，其中又有如下的分类</p><ul><li><strong>不可变数据</strong>（3 个）：Number（数字）、String（字符串）、Tuple（元组）；</li><li><strong>可变数据</strong>（3 个）：List（列表）、Dictionary（字典）、Set（集合）。</li></ul><p>除此之外还有一些高级的数据类型，如字节数组类型(bytes)等等<br>接下来我将逐一分析学习</p><h2 id="Number（数字）"><a href="#Number（数字）" class="headerlink" title="Number（数字）"></a>Number（数字）</h2><p>在Python3中支持 <code>int</code>、<code>float</code>、<code>bool</code>、<code>complex</code>（复数）。<br>在Python 3里，<strong>只有一种整数类型</strong>即为 <code>int</code>，表示为长整型，没有Long和longlong。<br>内置的<code>type()</code>函数可以用来查询变量所指的<strong>对象类型</strong>。<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a, b, c, d = 20, 5.5, True, 4+3j</span><br><span class="line">&gt;&gt;&gt; print(type(a), type(b), type(c), type(d))</span><br><span class="line">&lt;class &#x27;int&#x27;&gt; &lt;class &#x27;float&#x27;&gt; &lt;class &#x27;bool&#x27;&gt; &lt;class &#x27;complex&#x27;&gt;</span><br></pre></td></tr></table></figure><br>你也可以使用isinstance 来判断所选数据类型是否正确,和type有点相似<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="number">111</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">isinstance</span>(a, <span class="built_in">int</span>)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><br><strong>当你指定一个值时，Number 对象就会被创建：</strong></p><blockquote><p>var1 = 1<br>var2 = 10</p></blockquote><p><strong>也可以使用del语句删除一些对象引用</strong>,具体的使用方法为<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">del var1[,var2[,var3[....,varN]]]</span><br></pre></td></tr></table></figure><br><strong>如果要删除单个或多个对象。</strong><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">del var</span><br><span class="line">del var_a, var_b</span><br></pre></td></tr></table></figure></p><h3 id="isinstance-和-type-关系分辨"><a href="#isinstance-和-type-关系分辨" class="headerlink" title="isinstance() 和 type()关系分辨"></a>isinstance() 和 type()关系分辨</h3><p><strong>type() 函数</strong><br>这玩意返回对象的<strong>实际类型</strong>，属于精准判断类型</p><ul><li>type() <strong>不会考虑继承关系</strong>，它只返回对象的确切类型。</li><li>如果对象是子类的实例，type() 只会返回子类类型，而不会认为它是父类类型。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>(<span class="title class_ inherited__">Animal</span>):  <span class="comment"># Dog 是 Animal 的子类</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">dog = Dog()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(dog))  <span class="comment"># 输出：&lt;class &#x27;__main__.Dog&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(dog) == Animal)  <span class="comment"># 输出：False</span></span><br><span class="line"><span class="comment">#这里 type(dog) 返回的是 Dog 类型，而不是 Animal 类型</span></span><br></pre></td></tr></table></figure><strong>isinstance() 函数</strong><br>这玩意检查的对象式某个类或者子类的实例，是大类查找，范围广</li><li>isinstance() <strong>会考虑继承关系</strong>，如果对象是子类的实例，它也会认为对象是父类的实例。</li><li>可以同时检查多个类型（传入一个元组）。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>(<span class="title class_ inherited__">Animal</span>):  <span class="comment"># Dog 是 Animal 的子类</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">dog = Dog()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">isinstance</span>(dog, Dog))  <span class="comment"># 输出：True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">isinstance</span>(dog, Animal))  <span class="comment"># 输出：True</span></span><br><span class="line"><span class="comment">#这里 isinstance(dog, Animal) 返回 True，因为 Dog 是 Animal 的子类。</span></span><br></pre></td></tr></table></figure>打比方就是在车子中，type()找的是小米su7这一种车，但是isinstance()找的是汽车这一个种类<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>(<span class="title class_ inherited__">Animal</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">dog = Dog()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 type()</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(dog) == Dog)    <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(dog) == Animal) <span class="comment"># False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 isinstance()</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">isinstance</span>(dog, Dog))    <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">isinstance</span>(dog, Animal)) <span class="comment"># True</span></span><br></pre></td></tr></table></figure>但是要注意一件事情：Python3 中，bool 是 int 的子类，True 和 False 可以和数字相加，<code>True==1、False==0</code> 会返回<code>True</code>，但可以通过<code>is</code>来判断类型。<h3 id="数值运算"><a href="#数值运算" class="headerlink" title="数值运算"></a>数值运算</h3>这玩意小学生都看得懂ok,我直接摆出来<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">5</span> + <span class="number">4</span>  <span class="comment"># 加法</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">4.3</span> - <span class="number">2</span> <span class="comment"># 减法</span></span><br><span class="line"><span class="number">2.3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">3</span> * <span class="number">7</span>  <span class="comment"># 乘法</span></span><br><span class="line"><span class="number">21</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">2</span> / <span class="number">4</span>  <span class="comment"># 除法，得到一个浮点数</span></span><br><span class="line"><span class="number">0.5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">2</span> // <span class="number">4</span> <span class="comment"># 除法，得到一个整数</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">17</span> % <span class="number">3</span> <span class="comment"># 取余 </span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">2</span> ** <span class="number">5</span> <span class="comment"># 乘方</span></span><br><span class="line"><span class="number">32</span></span><br></pre></td></tr></table></figure><strong>注意事项：</strong></li><li>Python可以<strong>同时为多个变量赋值</strong>，如a, b = 1, 2。</li><li>一个变量可以通过<strong>赋值</strong>指向<strong>不同类型</strong>的对象。</li><li>数值的<strong>除法</strong>包含两个运算符：<strong>/ 返回一个浮点数，// 返回一个整数</strong>。</li><li>在混合计算时，Python会把<strong>整型转换成为浮点数</strong>。<br>注意精度问题<br>Python 还支持复数，复数由实数部分和虚数部分构成，可以用 a + bj，或者 complex(a,b) 表示， <strong>复数的实部 a 和虚部 b 都是浮点型</strong>。<h2 id="String（字符串）"><a href="#String（字符串）" class="headerlink" title="String（字符串）"></a>String（字符串）</h2>Python中的字符串用单引号<code>&#39;</code>或双引号<code>&quot;</code>括起来，同时使用反斜杠<code>\</code>转义特殊字符。<br>字符串的截取的语法格式如下：<blockquote><p>变量[头下标:尾下标]    这个一般是单个字符访问</p></blockquote></li></ul><p>切片用于从字符串中提取子字符串，语法为：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">字符串[start:end:step]</span><br></pre></td></tr></table></figure></p><ul><li>start：起始索引（包含）。</li><li>end：结束索引（不包含）。</li><li>step：步长（可选，默认为 1）。</li></ul><p><strong>切片规则</strong></p><ul><li>如果省略 start，默认从字符串开头开始。</li><li>如果省略 end，默认到字符串末尾。</li><li>如果省略 step，默认为 1。</li><li>步长可以为负数，表示从右向左切片。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">&quot;Hello, World!&quot;</span></span><br><span class="line"><span class="comment"># 提取从索引 0 到 5 的子字符串（不包含索引 5）</span></span><br><span class="line"><span class="built_in">print</span>(s[<span class="number">0</span>:<span class="number">5</span>])  <span class="comment"># 输出：Hello</span></span><br><span class="line"><span class="comment"># 省略 start，从开头到索引 5</span></span><br><span class="line"><span class="built_in">print</span>(s[:<span class="number">5</span>])  <span class="comment"># 输出：Hello</span></span><br><span class="line"><span class="comment"># 省略 end，从索引 7 到末尾</span></span><br><span class="line"><span class="built_in">print</span>(s[<span class="number">7</span>:])  <span class="comment"># 输出：World!</span></span><br><span class="line"><span class="comment"># 使用负索引</span></span><br><span class="line"><span class="built_in">print</span>(s[-<span class="number">6</span>:-<span class="number">1</span>])  <span class="comment"># 输出：World</span></span><br><span class="line"><span class="comment"># 使用步长</span></span><br><span class="line"><span class="built_in">print</span>(s[::<span class="number">2</span>])  <span class="comment"># 输出：Hlo ol!（每隔一个字符取一个）</span></span><br><span class="line"><span class="comment"># 步长为负数，反转字符串</span></span><br><span class="line"><span class="built_in">print</span>(s[::-<span class="number">1</span>])  <span class="comment"># 输出：!dlroW ,olleH</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>索引值以 0 为开始值，-1 为从末尾的开始位置。</strong><br>在python中我们可以把字符串视为一个数组来理解，每个数字在自己的位置都有自己的编号，类似于门牌号一一对应，所以可以找到一个字符串的元素的具体位置</p><p>加号<code>+</code>是字符串的连接符， 星号<code>*</code>表示<strong>复制</strong>当前字符串，<strong>与之结合的数字为复制的次数</strong>。实例如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">str</span> = <span class="string">&#x27;Runoob&#x27;</span>  <span class="comment"># 定义一个字符串变量</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>)           <span class="comment"># 打印整个字符串</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>[<span class="number">0</span>:-<span class="number">1</span>])     <span class="comment"># 打印字符串第一个到倒数第二个字符（不包含倒数第一个字符）</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>[<span class="number">0</span>])        <span class="comment"># 打印字符串的第一个字符</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>[<span class="number">2</span>:<span class="number">5</span>])      <span class="comment"># 打印字符串第三到第五个字符（包含第五个字符）</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>[<span class="number">2</span>:])       <span class="comment"># 打印字符串从第三个字符开始到末尾</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span> * <span class="number">2</span>)       <span class="comment"># 打印字符串两次</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span> + <span class="string">&quot;TEST&quot;</span>)  <span class="comment"># 打印字符串和&quot;TEST&quot;拼接在一起</span></span><br></pre></td></tr></table></figure><br>输出结果如下：</p><blockquote><p>Runoob<br>Runoo<br>R<br>noo<br>noob<br>RunoobRunoob<br>RunoobTEST</p></blockquote><p>这里可以看出来啦，<strong>字符串索引规则</strong></p><ul><li><strong>索引从 0 开始</strong>：字符串的第一个字符的索引是 0，第二个字符的索引是 1，依此类推。</li><li>负索引：Python 支持负索引，从右向左计数，<strong>-1 表示最后一个字符</strong>，-2 表示倒数第二个字符，依此类推。</li><li>索引范围：如果索引超出字符串的长度，会抛出 IndexError 异常。</li></ul><p>Python 使用反斜杠<code>\</code>转义特殊字符，如果你不想让反斜杠发生转义，可以在字符串前面添加一个 <code>r</code>，表示原始字符串：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; print(&#x27;Ru\noob&#x27;)</span><br><span class="line">Ru</span><br><span class="line">oob</span><br><span class="line">&gt;&gt;&gt; print(r&#x27;Ru\noob&#x27;)</span><br><span class="line">Ru\noob</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><br>另外，反斜杠<code>(\)</code>可以作为续行符，表示下一行是上一行的延续。也可以使用<code>&quot;&quot;&quot;...&quot;&quot;&quot;</code>或者 <code>&#39;&#39;&#39;...&#39;&#39;&#39;</code>跨越多行。<br><strong>注意，Python 没有单独的字符类型，一个字符就是长度为1的字符串。</strong><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; word = &#x27;Python&#x27;</span><br><span class="line">&gt;&gt;&gt; print(word[0], word[5])</span><br><span class="line">P n</span><br><span class="line">&gt;&gt;&gt; print(word[-1], word[-6])</span><br><span class="line">n P</span><br></pre></td></tr></table></figure><br><strong>注意啊，只是拿字符串和数组进行结构类似比较，没有实际关系，在python中字符串不能被改变，想你个索引的部分赋值会干报错的</strong></p><p><strong>注意：</strong><br>1、反斜杠可以用来转义，使用r可以让反斜杠不发生转义。<br>2、字符串可以用+运算符连接在一起，用*运算符重复。<br>3、Python中的字符串有两种索引方式，从左往右以0开始，从右往左以-1开始。<br>4、Python中的字符串不能改变。</p><p><em>果需要修改字符串，可以创建一个新的字符串</em><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">&quot;Hello, World!&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 尝试修改字符会报错</span></span><br><span class="line"><span class="comment"># s[0] = &#x27;h&#x27;  # 报错：TypeError: &#x27;str&#x27; object does not support item assignment</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以通过切片和拼接创建新字符串</span></span><br><span class="line">new_s = <span class="string">&#x27;h&#x27;</span> + s[<span class="number">1</span>:]</span><br><span class="line"><span class="built_in">print</span>(new_s)  <span class="comment"># 输出：hello, World!</span></span><br></pre></td></tr></table></figure><br><strong>常用的字符串操作</strong><br>使用<code>len()</code>函数获取字符串的<strong>长度</strong>。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">&quot;Hello, World!&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(s))  <span class="comment"># 输出：13</span></span><br></pre></td></tr></table></figure><br>可以通过<strong>索引</strong>或<strong>直接遍历</strong>字符串中的字符。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">&quot;Hello&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过索引遍历</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s)):</span><br><span class="line">    <span class="built_in">print</span>(s[i])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 直接遍历字符</span></span><br><span class="line"><span class="keyword">for</span> char <span class="keyword">in</span> s:</span><br><span class="line">    <span class="built_in">print</span>(char)</span><br></pre></td></tr></table></figure><br>使用<code>in</code>关键字检查某个字符或子字符串是否存在于字符串中。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">&quot;Hello, World!&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;o&#x27;</span> <span class="keyword">in</span> s)  <span class="comment"># 输出：True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Python&#x27;</span> <span class="keyword">in</span> s)  <span class="comment"># 输出：False</span></span><br></pre></td></tr></table></figure></p><h2 id="bool（布尔类型）"><a href="#bool（布尔类型）" class="headerlink" title="bool（布尔类型）"></a>bool（布尔类型）</h2><p><strong>布尔类型即 True 或 False。</strong><br>在 Python 中，True 和 False 都是关键字，表示布尔值。注意格式转换<br>布尔类型可以用来控制程序的流程，比如判断某个条件是否成立，或者在某个条件满足时执行某段代码。<br><strong>布尔类型特点：</strong></p><ul><li>布尔类型只有两个值：True 和 False。没多的了</li><li><strong> bool 是 int 的子类</strong>，因此<strong>布尔值可以被看作整数</strong>来使用，其中<strong> True 等价于 1</strong>。</li><li>布尔类型<strong>可以和其他数据类型进行比较</strong>，比如数字、字符串等。在比较时，Python 会将 <strong>True 视为 1，False 视为 0</strong>。</li><li>布尔类型可以和<strong>逻辑运算符一起使用</strong>，包括 <code>and</code>、<code>or</code> 和 <code>not</code>。这些运算符可以用来<strong>组合多个布尔表达式</strong>，生成一个新的布尔值。</li><li>布尔类型也可以<strong>被转换成其他数据类型</strong>，比如整数、浮点数和字符串。在转换时，True 会被转换成 1，False 会被转换成 0。</li><li>可以使用 bool() 函数将其他类型的值转换为布尔值。以下值在转换为布尔值时为 False：None、False、零 (0、0.0、0j)、空序列（如 ‘’、()、[]）和空映射（如 {}）。其他所有值转换为布尔值时均为 True。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 布尔类型的值和类型</span></span><br><span class="line">a = <span class="literal">True</span></span><br><span class="line">b = <span class="literal">False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(a))  <span class="comment"># &lt;class &#x27;bool&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(b))  <span class="comment"># &lt;class &#x27;bool&#x27;&gt;</span></span><br><span class="line"><span class="comment"># 布尔类型的整数表现</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">int</span>(<span class="literal">True</span>))   <span class="comment"># 1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">int</span>(<span class="literal">False</span>))  <span class="comment"># 0</span></span><br><span class="line"><span class="comment"># 使用 bool() 函数进行转换</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bool</span>(<span class="number">0</span>))         <span class="comment"># False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bool</span>(<span class="number">42</span>))        <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bool</span>(<span class="string">&#x27;&#x27;</span>))        <span class="comment"># False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bool</span>(<span class="string">&#x27;Python&#x27;</span>))  <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bool</span>([]))        <span class="comment"># False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bool</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])) <span class="comment"># True</span></span><br><span class="line"><span class="comment"># 布尔逻辑运算</span></span><br><span class="line"><span class="built_in">print</span>(<span class="literal">True</span> <span class="keyword">and</span> <span class="literal">False</span>)  <span class="comment"># False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="literal">True</span> <span class="keyword">or</span> <span class="literal">False</span>)   <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="keyword">not</span> <span class="literal">True</span>)        <span class="comment"># False</span></span><br><span class="line"><span class="comment"># 布尔比较运算</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">5</span> &gt; <span class="number">3</span>)  <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">2</span> == <span class="number">2</span>) <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">7</span> &lt; <span class="number">4</span>)  <span class="comment"># False</span></span><br><span class="line"><span class="comment"># 布尔值在控制流中的应用</span></span><br><span class="line"><span class="keyword">if</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;This will always print&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> <span class="literal">False</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;This will also always print&quot;</span>)</span><br><span class="line">x = <span class="number">10</span></span><br><span class="line"><span class="keyword">if</span> x:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;x is non-zero and thus True in a boolean context&quot;</span>)</span><br></pre></td></tr></table></figure>这里要注意<strong>数据类型的真假性</strong>，因为在 Python 中，所有非零的数字和非空的字符串、列表、元组等数据类型都被视为 True，只有<strong> 0、空字符串、空列表、空元组</strong>等被视为 False。<h2 id="List（列表）"><a href="#List（列表）" class="headerlink" title="List（列表）"></a>List（列表）</h2>这玩意怕不是在python中用的最为频繁的数据类型之一<br>列表可以完成大多数<strong>集合类的数据结构实现</strong>。列表中<strong>元素的类型可以不相同</strong>，它支持数字，字符串甚至可以包含列表（所谓嵌套）。表中套表</li></ul><p>列表是写在方括号 [] 之间、用逗号分隔开的元素列表。</p><blockquote><p>变量[头下标:尾下标]</p></blockquote><p>和字符串一样，列表同样可以被索引和截取，列表被截取后返回一个包含所需元素的新列表。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建一个空列表</span></span><br><span class="line">empty_list = []</span><br><span class="line"><span class="comment"># 创建一个包含整数的列表</span></span><br><span class="line">numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="comment"># 创建一个包含不同类型元素的列表</span></span><br><span class="line">mixed_list = [<span class="number">1</span>, <span class="string">&quot;Hello&quot;</span>, <span class="number">3.14</span>, <span class="literal">True</span>]</span><br><span class="line"><span class="comment"># 创建一个嵌套列表（列表中的列表）</span></span><br><span class="line">nested_list = [[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>], [<span class="number">5</span>, <span class="number">6</span>]]</span><br></pre></td></tr></table></figure><br>从排列逻辑上这个和字符串相当像，但是列表式可以修改的，如果你要修改，请见下<br><strong>修改单个元素</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fruits = [<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;cherry&quot;</span>]</span><br><span class="line">fruits[<span class="number">1</span>] = <span class="string">&quot;blueberry&quot;</span></span><br><span class="line"><span class="built_in">print</span>(fruits)  <span class="comment"># 输出：[&#x27;apple&#x27;, &#x27;blueberry&#x27;, &#x27;cherry&#x27;]</span></span><br></pre></td></tr></table></figure><br><strong>修改多个元素（通过切片）</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">numbers = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">numbers[<span class="number">1</span>:<span class="number">4</span>] = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>]</span><br><span class="line"><span class="built_in">print</span>(numbers)  <span class="comment"># 输出：[0, 10, 20, 30, 4, 5]</span></span><br></pre></td></tr></table></figure></p><blockquote><p>Python 列表截取可以接收第三个参数，参数作用是截取的步长，以下实例在索引 1 到索引 4 的位置并设置为步长为 2（间隔一个位置）来截取字符串：</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">def reverseWords(input): </span><br><span class="line">    # 通过空格将字符串分隔符，把各个单词分隔为列表</span><br><span class="line">    inputWords = input.split(&quot; &quot;) </span><br><span class="line">    # 翻转字符串</span><br><span class="line">    # 假设列表 list = [1,2,3,4],  </span><br><span class="line">    # list[0]=1, list[1]=2 ，而 -1 表示最后一个元素 list[-1]=4 ( 与 list[3]=4 一样) </span><br><span class="line">    # inputWords[-1::-1] 有三个参数</span><br><span class="line">    # 第一个参数 -1 表示最后一个元素</span><br><span class="line">    # 第二个参数为空，表示移动到列表末尾</span><br><span class="line">    # 第三个参数为步长，-1 表示逆向</span><br><span class="line">    inputWords=inputWords[-1::-1] </span><br><span class="line">    # 重新组合字符串</span><br><span class="line">    output = &#x27; &#x27;.join(inputWords) </span><br><span class="line">    return output </span><br><span class="line">if __name__ == &quot;__main__&quot;: </span><br><span class="line">    input = &#x27;I like runoob&#x27;</span><br><span class="line">    rw = reverseWords(input) </span><br><span class="line">    print(rw)</span><br></pre></td></tr></table></figure><blockquote><p>runoob like I</p></blockquote><p>其他常用操作</p><h3 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h3><ul><li><strong>append()</strong>：在列表末尾添加一个元素。</li><li><strong>extend()</strong>：在列表末尾添加多个元素（传入一个可迭代对象）。</li><li><strong>insert()</strong>：在指定位置插入一个元素。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">fruits = [<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>]</span><br><span class="line"><span class="comment"># 添加单个元素</span></span><br><span class="line">fruits.append(<span class="string">&quot;cherry&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(fruits)  <span class="comment"># 输出：[&#x27;apple&#x27;, &#x27;banana&#x27;, &#x27;cherry&#x27;]</span></span><br><span class="line"><span class="comment"># 添加多个元素</span></span><br><span class="line">fruits.extend([<span class="string">&quot;orange&quot;</span>, <span class="string">&quot;grape&quot;</span>])</span><br><span class="line"><span class="built_in">print</span>(fruits)  <span class="comment"># 输出：[&#x27;apple&#x27;, &#x27;banana&#x27;, &#x27;cherry&#x27;, &#x27;orange&#x27;, &#x27;grape&#x27;]</span></span><br><span class="line"><span class="comment"># 在指定位置插入元素</span></span><br><span class="line">fruits.insert(<span class="number">1</span>, <span class="string">&quot;blueberry&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(fruits)  <span class="comment"># 输出：[&#x27;apple&#x27;, &#x27;blueberry&#x27;, &#x27;banana&#x27;, &#x27;cherry&#x27;, &#x27;orange&#x27;, &#x27;grape&#x27;]</span></span><br></pre></td></tr></table></figure>有加就有减<h3 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h3>-<strong> remove()</strong>：删除第一个匹配的元素。</li><li><strong>pop()</strong>：删除指定位置的元素（默认删除最后一个元素）。</li><li><strong>del 语句</strong>：删除指定位置的元素或切片。</li><li><strong>clear()</strong>：清空列表。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">fruits = [<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;cherry&quot;</span>, <span class="string">&quot;banana&quot;</span>]</span><br><span class="line"><span class="comment"># 删除第一个匹配的元素</span></span><br><span class="line">fruits.remove(<span class="string">&quot;banana&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(fruits)  <span class="comment"># 输出：[&#x27;apple&#x27;, &#x27;cherry&#x27;, &#x27;banana&#x27;]</span></span><br><span class="line"><span class="comment"># 删除指定位置的元素</span></span><br><span class="line">fruits.pop(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(fruits)  <span class="comment"># 输出：[&#x27;apple&#x27;, &#x27;banana&#x27;]</span></span><br><span class="line"><span class="comment"># 删除最后一个元素</span></span><br><span class="line">fruits.pop()</span><br><span class="line"><span class="built_in">print</span>(fruits)  <span class="comment"># 输出：[&#x27;apple&#x27;]</span></span><br><span class="line"><span class="comment"># 使用 del 语句删除元素</span></span><br><span class="line"><span class="keyword">del</span> fruits[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(fruits)  <span class="comment"># 输出：[]</span></span><br><span class="line"><span class="comment"># 清空列表</span></span><br><span class="line">fruits.clear()</span><br><span class="line"><span class="built_in">print</span>(fruits)  <span class="comment"># 输出：[]</span></span><br></pre></td></tr></table></figure><h3 id="查找元素"><a href="#查找元素" class="headerlink" title="查找元素"></a>查找元素</h3></li><li><strong>index()</strong>：返回第一个匹配元素的索引。</li><li><strong>in 关键字</strong>：检查元素是否存在于列表中<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">fruits = [<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;cherry&quot;</span>]</span><br><span class="line"><span class="comment"># 查找元素的索引</span></span><br><span class="line"><span class="built_in">print</span>(fruits.index(<span class="string">&quot;banana&quot;</span>))  <span class="comment"># 输出：1</span></span><br><span class="line"><span class="comment"># 检查元素是否存在</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;cherry&quot;</span> <span class="keyword">in</span> fruits)  <span class="comment"># 输出：True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;orange&quot;</span> <span class="keyword">in</span> fruits)  <span class="comment"># 输出：False</span></span><br></pre></td></tr></table></figure><h3 id="排序和反转"><a href="#排序和反转" class="headerlink" title="排序和反转"></a>排序和反转</h3></li><li><strong>sort()</strong>：对列表进行排序（默认升序）。</li><li><strong>reverse()</strong>：反转列表。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">numbers = [<span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">2</span>]</span><br><span class="line"><span class="comment"># 排序</span></span><br><span class="line">numbers.sort()</span><br><span class="line"><span class="built_in">print</span>(numbers)  <span class="comment"># 输出：[1, 1, 2, 3, 4, 5, 9]</span></span><br><span class="line"><span class="comment"># 反转</span></span><br><span class="line">numbers.reverse()</span><br><span class="line"><span class="built_in">print</span>(numbers)  <span class="comment"># 输出：[9, 5, 4, 3, 2, 1, 1]</span></span><br></pre></td></tr></table></figure><h3 id="针对列表的常用函数"><a href="#针对列表的常用函数" class="headerlink" title="针对列表的常用函数"></a>针对列表的常用函数</h3></li><li><strong>len()</strong>：返回列表的长度。</li><li><strong>min()</strong>：返回列表中的最小值。</li><li><strong>max()</strong>：返回列表中的最大值。</li><li><strong>sum()</strong>：返回列表中所有元素的和（仅适用于数值列表）。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(numbers))  <span class="comment"># 输出：5</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">min</span>(numbers))  <span class="comment"># 输出：1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">max</span>(numbers))  <span class="comment"># 输出：5</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>(numbers))  <span class="comment"># 输出：15</span></span><br></pre></td></tr></table></figure><h3 id="列表推导式"><a href="#列表推导式" class="headerlink" title="列表推导式"></a>列表推导式</h3>这是一种非常简洁快速的列表创建方式<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建一个包含 0 到 9 的平方的列表</span></span><br><span class="line">squares = [x**<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line"><span class="built_in">print</span>(squares)  <span class="comment"># 输出：[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]</span></span><br><span class="line"><span class="comment"># 创建一个包含偶数的列表</span></span><br><span class="line">evens = [x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>) <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(evens)  <span class="comment"># 输出：[0, 2, 4, 6, 8]</span></span><br></pre></td></tr></table></figure><h3 id="列表的嵌套"><a href="#列表的嵌套" class="headerlink" title="列表的嵌套"></a>列表的嵌套</h3>列表可以嵌套，但是在内存中的结构会显得比较复杂<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">matrix = [</span><br><span class="line">    [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">    [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>],</span><br><span class="line">    [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line">]</span><br><span class="line"><span class="comment"># 访问嵌套列表中的元素</span></span><br><span class="line"><span class="built_in">print</span>(matrix[<span class="number">1</span>][<span class="number">2</span>])  <span class="comment"># 输出：6</span></span><br></pre></td></tr></table></figure><h2 id="Tuple（元组）"><a href="#Tuple（元组）" class="headerlink" title="Tuple（元组）"></a>Tuple（元组）</h2>这玩意和列表及其接近，不同之处在于<strong>元组的元素不能修改。</strong>元组写在小括号<code>()</code>里，元素之间用逗号隔开。<br>元组中的元素类型也可以不相同：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="built_in">tuple</span> = ( <span class="string">&#x27;abcd&#x27;</span>, <span class="number">786</span> , <span class="number">2.23</span>, <span class="string">&#x27;runoob&#x27;</span>, <span class="number">70.2</span>  )</span><br><span class="line">tinytuple = (<span class="number">123</span>, <span class="string">&#x27;runoob&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">tuple</span>)             <span class="comment"># 输出完整元组</span></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">tuple</span>[<span class="number">0</span>])          <span class="comment"># 输出元组的第一个元素</span></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">tuple</span>[<span class="number">1</span>:<span class="number">3</span>])        <span class="comment"># 输出从第二个元素开始到第三个元素</span></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">tuple</span>[<span class="number">2</span>:])         <span class="comment"># 输出从第三个元素开始的所有元素</span></span><br><span class="line"><span class="built_in">print</span> (tinytuple * <span class="number">2</span>)     <span class="comment"># 输出两次元组</span></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">tuple</span> + tinytuple) <span class="comment"># 连接元组</span></span><br></pre></td></tr></table></figure><strong>输出结果如下：</strong><blockquote><p>(‘abcd’, 786, 2.23, ‘runoob’, 70.2)<br>abcd<br>(786, 2.23)<br>(2.23, ‘runoob’, 70.2)<br>(123, ‘runoob’, 123, ‘runoob’)<br>(‘abcd’, 786, 2.23, ‘runoob’, 70.2, 123, ‘runoob’)</p></blockquote></li></ul><p><em><br>可以把字符串看作一种特殊的元组。</em><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; tup = (1, 2, 3, 4, 5, 6)</span><br><span class="line">&gt;&gt;&gt; print(tup[0])</span><br><span class="line">1</span><br><span class="line">&gt;&gt;&gt; print(tup[1:5])</span><br><span class="line">(2, 3, 4, 5)</span><br><span class="line">&gt;&gt;&gt; tup[0] = 11  # 修改元组元素的操作是非法的</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">TypeError: &#x27;tuple&#x27; object does not support item assignment</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure></p><ul><li>虽然tuple的元素不可改变，但它可以包含可变的对象，比如list列表。</li><li>构造包含 0 个或 1 个元素的元组比较特殊，所以有一些额外的语法规则：<br>例如：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tup1 = ()    # 空元组</span><br><span class="line">tup2 = (20,) # 一个元素，需要在元素后添加逗号</span><br></pre></td></tr></table></figure>如果你想创建<strong>只有一个元素</strong>的元组，需要注意在<strong>元素后面添加一个逗号</strong>，以区分它是一个元组而不是一个普通的值，这是因为在没有逗号的情况下，<strong>Python会将括号解释为数学运算中的括号，而不是元组的表示</strong>。</li></ul><p>如果不添加逗号，如下所示，它将被解释为一个普通的值而不是元组：</p><blockquote><p>not_a_tuple = (42)</p></blockquote><p>这样的话，not_a_tuple 将是整数类型而不是元组类型。<br>string、list 和 tuple 都属于 sequence（序列）。<br><strong>注意：</strong></p><p>1、与字符串一样，<strong>元组的元素不能修改</strong>。很像一个大号的字符串<br>2、元组也可以被<strong>索引和切片</strong>，方法一样。<br>3、注意构造包含 0 或 1 个元素的元组的特殊语法规则。<br>4、元组也可以使用 + 操作符进行拼接<br>基本和列表做好区分即可，性质基本上一致</p><h2 id="Set（集合）"><a href="#Set（集合）" class="headerlink" title="Set（集合）"></a>Set（集合）</h2><p>Python 中的<strong>集合（Set）</strong>是一种<strong>无序、可变</strong>的数据类型，用于<strong>存储唯一的元素</strong>。<br>集合中的元素不会重复，并且可以进行<strong>交集、并集、差集</strong>等常见的集合操作。就像是正常的数学集合操作<br>在 Python 中，集合使用大括号<code>&#123;&#125;</code>表示，元素之间用逗号<code>,</code>分隔。<br>另外，也可以使用<code>set()</code>函数创建集合。<br><strong>这里注意下：</strong>语法重叠<br><strong>创建一个空集合必须用 set() 而不是 { }，因为 { } 是用来创建一个空字典。</strong><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">parame = &#123;value01,value02,...&#125;</span><br><span class="line">或者</span><br><span class="line">set(value)</span><br></pre></td></tr></table></figure><br>以下给出一个简单的实例<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"></span><br><span class="line">sites = &#123;<span class="string">&#x27;Google&#x27;</span>, <span class="string">&#x27;Taobao&#x27;</span>, <span class="string">&#x27;Runoob&#x27;</span>, <span class="string">&#x27;Facebook&#x27;</span>, <span class="string">&#x27;Zhihu&#x27;</span>, <span class="string">&#x27;Baidu&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(sites)   <span class="comment"># 输出集合，重复的元素被自动去掉</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 成员测试</span></span><br><span class="line"><span class="keyword">if</span> <span class="string">&#x27;Runoob&#x27;</span> <span class="keyword">in</span> sites :</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Runoob 在集合中&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Runoob 不在集合中&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># set可以进行集合运算</span></span><br><span class="line">a = <span class="built_in">set</span>(<span class="string">&#x27;abracadabra&#x27;</span>)</span><br><span class="line">b = <span class="built_in">set</span>(<span class="string">&#x27;alacazam&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a - b)     <span class="comment"># a 和 b 的差集</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a | b)     <span class="comment"># a 和 b 的并集</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a &amp; b)     <span class="comment"># a 和 b 的交集</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a ^ b)     <span class="comment"># a 和 b 中不同时存在的元素</span></span><br></pre></td></tr></table></figure><br>输出结果：</p><blockquote><p>{‘Zhihu’, ‘Baidu’, ‘Taobao’, ‘Runoob’, ‘Google’, ‘Facebook’}<br>Runoob 在集合中<br>{‘b’, ‘c’, ‘a’, ‘r’, ‘d’}<br>{‘r’, ‘b’, ‘d’}<br>{‘b’, ‘c’, ‘a’, ‘z’, ‘m’, ‘r’, ‘l’, ‘d’}<br>{‘c’, ‘a’}<br>{‘z’, ‘b’, ‘m’, ‘r’, ‘l’, ‘d’}</p></blockquote><h2 id="Dictionary（字典）"><a href="#Dictionary（字典）" class="headerlink" title="Dictionary（字典）"></a>Dictionary（字典）</h2><p>这玩意是python中特有的数据类型，是<strong>内置数据类型</strong>，<strong>重要也非常有用</strong><br><em>列表是有序的对象集合，字典是无序的对象集合</em>。两者之间的区别在于：字典当中的元素是通过<strong>键</strong>（key）来存取的，而不是通过<strong>偏移存取</strong>。<br>这个数据结构存储的是<strong>键值对</strong>，字典是<strong>无序的</strong>，可变的，且键必须是<strong>唯一的</strong><br><em>字典用花括号 {} 表示，键值对之间用逗号 , 分隔</em>大体构建实例如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建一个空字典</span></span><br><span class="line">empty_dict = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个包含键值对的字典</span></span><br><span class="line">person = &#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Alice&quot;</span>,</span><br><span class="line">    <span class="string">&quot;age&quot;</span>: <span class="number">25</span>,</span><br><span class="line">    <span class="string">&quot;city&quot;</span>: <span class="string">&quot;New York&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 dict() 函数创建字典</span></span><br><span class="line">another_dict = <span class="built_in">dict</span>(name=<span class="string">&quot;Bob&quot;</span>, age=<span class="number">30</span>, city=<span class="string">&quot;San Francisco&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 嵌套字典</span></span><br><span class="line">nested_dict = &#123;</span><br><span class="line">    <span class="string">&quot;person1&quot;</span>: &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;Alice&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">25</span>&#125;,</span><br><span class="line">    <span class="string">&quot;person2&quot;</span>: &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;Bob&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">30</span>&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="访问字典元素"><a href="#访问字典元素" class="headerlink" title="访问字典元素"></a>访问字典元素</h3><p><strong>通过键访问值</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">person = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;Alice&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">25</span>, <span class="string">&quot;city&quot;</span>: <span class="string">&quot;New York&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问键对应的值</span></span><br><span class="line"><span class="built_in">print</span>(person[<span class="string">&quot;name&quot;</span>])  <span class="comment"># 输出：Alice</span></span><br><span class="line"><span class="built_in">print</span>(person[<span class="string">&quot;age&quot;</span>])   <span class="comment"># 输出：25</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果键不存在，会抛出 KeyError</span></span><br><span class="line"><span class="comment"># print(person[&quot;gender&quot;])  # 报错：KeyError: &#x27;gender&#x27;</span></span><br></pre></td></tr></table></figure><br><strong>使用 get() 方法访问值</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(person.get(<span class="string">&quot;name&quot;</span>))        <span class="comment"># 输出：Alice</span></span><br><span class="line"><span class="built_in">print</span>(person.get(<span class="string">&quot;gender&quot;</span>))      <span class="comment"># 输出：None</span></span><br><span class="line"><span class="built_in">print</span>(person.get(<span class="string">&quot;gender&quot;</span>, <span class="string">&quot;N/A&quot;</span>))  <span class="comment"># 输出：N/A（默认值）</span></span><br></pre></td></tr></table></figure><br>这玩意可以避免键不存在时的错误，键不在返回返回<code>None</code>或指定的<code>默认值</code></p><h3 id="修改字典"><a href="#修改字典" class="headerlink" title="修改字典"></a>修改字典</h3><p><strong>添加或修改键值对</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">person = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;Alice&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">25</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加新键值对</span></span><br><span class="line">person[<span class="string">&quot;city&quot;</span>] = <span class="string">&quot;New York&quot;</span></span><br><span class="line"><span class="built_in">print</span>(person)  <span class="comment"># 输出：&#123;&#x27;name&#x27;: &#x27;Alice&#x27;, &#x27;age&#x27;: 25, &#x27;city&#x27;: &#x27;New York&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改已有键的值</span></span><br><span class="line">person[<span class="string">&quot;age&quot;</span>] = <span class="number">26</span></span><br><span class="line"><span class="built_in">print</span>(person)  <span class="comment"># 输出：&#123;&#x27;name&#x27;: &#x27;Alice&#x27;, &#x27;age&#x27;: 26, &#x27;city&#x27;: &#x27;New York&#x27;&#125;</span></span><br></pre></td></tr></table></figure><br><strong>合并字典</strong><br>使用 update() 方法可以将一个字典的键值对合并到另一个字典中。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">person = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;Alice&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">25</span>&#125;</span><br><span class="line">extra_info = &#123;<span class="string">&quot;city&quot;</span>: <span class="string">&quot;New York&quot;</span>, <span class="string">&quot;gender&quot;</span>: <span class="string">&quot;Female&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">person.update(extra_info)</span><br><span class="line"><span class="built_in">print</span>(person)  <span class="comment"># 输出：&#123;&#x27;name&#x27;: &#x27;Alice&#x27;, &#x27;age&#x27;: 25, &#x27;city&#x27;: &#x27;New York&#x27;, &#x27;gender&#x27;: &#x27;Female&#x27;&#125;</span></span><br></pre></td></tr></table></figure></p><h3 id="删除字典元素"><a href="#删除字典元素" class="headerlink" title="删除字典元素"></a>删除字典元素</h3><ul><li><strong>del 语句</strong>：删除指定键的键值对。</li><li><strong>pop() 方法</strong>：删除指定键的键值对，并返回对应的值。</li><li><strong>popitem()</strong> 方法：删除并返回最后一个键值对（Python 3.7 及以上版本）。</li><li><strong>clear()</strong> 方法：清空字典。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">person = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;Alice&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">25</span>, <span class="string">&quot;city&quot;</span>: <span class="string">&quot;New York&quot;</span>&#125;</span><br><span class="line"><span class="comment"># 删除指定键值对</span></span><br><span class="line"><span class="keyword">del</span> person[<span class="string">&quot;age&quot;</span>]</span><br><span class="line"><span class="built_in">print</span>(person)  <span class="comment"># 输出：&#123;&#x27;name&#x27;: &#x27;Alice&#x27;, &#x27;city&#x27;: &#x27;New York&#x27;&#125;</span></span><br><span class="line"><span class="comment"># 删除并返回指定键的值</span></span><br><span class="line">city = person.pop(<span class="string">&quot;city&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(city)    <span class="comment"># 输出：New York</span></span><br><span class="line"><span class="built_in">print</span>(person)  <span class="comment"># 输出：&#123;&#x27;name&#x27;: &#x27;Alice&#x27;&#125;</span></span><br><span class="line"><span class="comment"># 删除并返回最后一个键值对</span></span><br><span class="line">last_item = person.popitem()</span><br><span class="line"><span class="built_in">print</span>(last_item)  <span class="comment"># 输出：(&#x27;name&#x27;, &#x27;Alice&#x27;)</span></span><br><span class="line"><span class="built_in">print</span>(person)     <span class="comment"># 输出：&#123;&#125;</span></span><br><span class="line"><span class="comment"># 清空字典</span></span><br><span class="line">person.clear()</span><br><span class="line"><span class="built_in">print</span>(person)  <span class="comment"># 输出：&#123;&#125;</span></span><br></pre></td></tr></table></figure><h3 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h3><strong>获取所有键、值或键值对</strong></li><li><strong>keys()</strong>：返回字典中所有的键。</li><li><strong>values()</strong>：返回字典中所有的值。</li><li><strong>items()</strong>：返回字典中所有的键值对<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">person = &#123;&quot;name&quot;: &quot;Alice&quot;, &quot;age&quot;: 25, &quot;city&quot;: &quot;New York&quot;&#125;</span><br><span class="line"># 获取所有键</span><br><span class="line">print(person.keys())   # 输出：dict_keys([&#x27;name&#x27;, &#x27;age&#x27;, &#x27;city&#x27;])</span><br><span class="line"># 获取所有值</span><br><span class="line">print(person.values()) # 输出：dict_values([&#x27;Alice&#x27;, 25, &#x27;New York&#x27;])</span><br><span class="line"># 获取所有键值对</span><br><span class="line">print(person.items())  # 输出：dict_items([(&#x27;name&#x27;, &#x27;Alice&#x27;), (&#x27;age&#x27;, 25), (&#x27;city&#x27;, &#x27;New York&#x27;)])</span><br></pre></td></tr></table></figure><strong>检查键是否存在</strong>，用<code>in</code>(重复了？)<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;name&quot;</span> <span class="keyword">in</span> person)  <span class="comment"># 输出：True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;gender&quot;</span> <span class="keyword">in</span> person)  <span class="comment"># 输出：False</span></span><br></pre></td></tr></table></figure>使用 len() 函数获取字典中键值对的数量，字典长度<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(person))  <span class="comment"># 输出：3</span></span><br></pre></td></tr></table></figure><h2 id="bytes-类型"><a href="#bytes-类型" class="headerlink" title="bytes 类型"></a>bytes 类型</h2>在 Python3 中，bytes 类型表示的是不可变的二进制序列（byte sequence）。<br>与字符串类型不同的是，bytes 类型中的元素是整数值（0 到 255 之间的整数），而不是 Unicode 字符。<br>bytes 类型通常用于处理二进制数据，比如图像文件、音频文件、视频文件等等。在网络编程中，也经常使用 bytes 类型来传输二进制数据。<br>创建 bytes 对象的方式有多种，最常见的方式是使用 b 前缀：<br>此外，也可以使用 bytes() 函数将其他类型的对象转换为 bytes 类型。bytes() 函数的第一个参数是要转换的对象，第二个参数是编码方式，如果省略第二个参数，则默认使用 UTF-8 编码：<blockquote><p>x = bytes(“hello”, encoding=”utf-8”)</p></blockquote></li></ul><p>与字符串类型类似，bytes 类型也支持许多操作和方法，如切片、拼接、查找、替换等等。同时，由于 bytes 类型是不可变的，因此在进行修改操作时需要创建一个新的 bytes 对象。例如：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x = b&quot;hello&quot;</span><br><span class="line">y = x[1:3]  # 切片操作，得到 b&quot;el&quot;</span><br><span class="line">z = x + b&quot;world&quot;  # 拼接操作，得到 b&quot;helloworld&quot;</span><br></pre></td></tr></table></figure><br>需要注意的是，bytes 类型中的元素是整数值，因此在进行比较操作时需要使用相应的整数值。例如：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x = b&quot;hello&quot;</span><br><span class="line">if x[0] == ord(&quot;h&quot;):</span><br><span class="line">    print(&quot;The first element is &#x27;h&#x27;&quot;)</span><br></pre></td></tr></table></figure><br>其中 ord() 函数用于将字符转换为相应的整数值。</p>]]></content>
      
      
      <categories>
          
          <category> 结构速查 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python 学习速查笔记（1）</title>
      <link href="/2025/03/17/python%20%E5%AD%A6%E4%B9%A0%E9%80%9F%E6%9F%A5%E7%AC%94%E8%AE%B0(1)/"/>
      <url>/2025/03/17/python%20%E5%AD%A6%E4%B9%A0%E9%80%9F%E6%9F%A5%E7%AC%94%E8%AE%B0(1)/</url>
      
        <content type="html"><![CDATA[<h1 id="python-学习速查笔记"><a href="#python-学习速查笔记" class="headerlink" title="python 学习速查笔记"></a>python 学习速查笔记</h1><blockquote><p>很多遍了，这次我一定要干掉这篇文章QAQ，大致结构先给出来，方便查看</p></blockquote><p>[TOC]</p><h1 id="python基础语法部分"><a href="#python基础语法部分" class="headerlink" title="python基础语法部分"></a>python基础语法部分</h1><h2 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h2><p>Python 3 默认使用 <code>UTF-8</code> 编码，所有字符串均为<code>Unicode</code> 字符串。如果需要指定其他编码，可以在文件开头添加如下声明：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: cp-1252 -*-</span></span><br></pre></td></tr></table></figure><br>此声明允许使用 Windows-1252 字符集，适用于保加利亚语、白俄罗斯语、马其顿语、俄语、塞尔维亚语等<br>主要是东欧语系</p><h2 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h2><ul><li>标识符的<strong>第一个字符必须是字母或下划线</strong> _。</li><li>其他部分可以由字母、数字和下划线组成。</li><li><strong>标识符对大小写敏感</strong>。</li><li>Python 3 支持非 ASCII 标识符，例如中文变量名。<br>但是不建议使用中文变量名，不方便维护<h2 id="保留字（关键字）"><a href="#保留字（关键字）" class="headerlink" title="保留字（关键字）"></a>保留字（关键字）</h2>Python 的保留字（关键字）不能用作标识符。可以通过<code>keyword</code> 模块查看所有关键字：<br>在编译器中使用运行以下即可<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> keyword</span><br><span class="line"><span class="built_in">print</span>(keyword.kwlist)</span><br></pre></td></tr></table></figure>输出为<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">&#x27;False&#x27;</span>, <span class="string">&#x27;None&#x27;</span>, <span class="string">&#x27;True&#x27;</span>, <span class="string">&#x27;and&#x27;</span>, <span class="string">&#x27;as&#x27;</span>, <span class="string">&#x27;assert&#x27;</span>, <span class="string">&#x27;break&#x27;</span>, <span class="string">&#x27;class&#x27;</span>, <span class="string">&#x27;continue&#x27;</span>, <span class="string">&#x27;def&#x27;</span>, <span class="string">&#x27;del&#x27;</span>, <span class="string">&#x27;elif&#x27;</span>, <span class="string">&#x27;else&#x27;</span>, <span class="string">&#x27;except&#x27;</span>, <span class="string">&#x27;finally&#x27;</span>, <span class="string">&#x27;for&#x27;</span>, <span class="string">&#x27;from&#x27;</span>, <span class="string">&#x27;global&#x27;</span>, <span class="string">&#x27;if&#x27;</span>, <span class="string">&#x27;import&#x27;</span>, <span class="string">&#x27;in&#x27;</span>, <span class="string">&#x27;is&#x27;</span>, <span class="string">&#x27;lambda&#x27;</span>, <span class="string">&#x27;nonlocal&#x27;</span>, <span class="string">&#x27;not&#x27;</span>, <span class="string">&#x27;or&#x27;</span>, <span class="string">&#x27;pass&#x27;</span>, <span class="string">&#x27;raise&#x27;</span>, <span class="string">&#x27;return&#x27;</span>, <span class="string">&#x27;try&#x27;</span>, <span class="string">&#x27;while&#x27;</span>, <span class="string">&#x27;with&#x27;</span>, <span class="string">&#x27;yield&#x27;</span>]</span><br></pre></td></tr></table></figure>基本不会命名这些吧，建议命名直接明确，并加上注释<h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2></li><li>单行注释以 # 开头。</li><li>多行注释可以使用多个 #，或使用三引号 ‘’’ 和 “””<br>不嫌麻烦用#来多行也行，一般使用快捷键部署<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这是单行注释</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">这是多行注释</span></span><br><span class="line"><span class="string">可以写多行内容</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">这也是多行注释</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h2 id="行与缩进"><a href="#行与缩进" class="headerlink" title="行与缩进"></a>行与缩进</h2>Python 使用缩进来表示代码块，不需要使用大括号 {}。同一代码块的语句必须保持相同的缩进空格数。（要是爬眼睛看瞎建议还是加上括号)<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;True&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;False&quot;</span>)</span><br></pre></td></tr></table></figure>缩进不一致会导致<code>IndentationError</code>错误。<h2 id="多行语句"><a href="#多行语句" class="headerlink" title="多行语句"></a>多行语句</h2>句子太长会影响到可读性，在python可以将一行玩意换行</li><li>使用反斜杠<code>\</code>实现多行语句：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">total = item_one + \</span><br><span class="line">        item_two + \</span><br><span class="line">        item_three</span><br></pre></td></tr></table></figure></li><li>在 []、{} 或 () 中的多行语句不需要反斜杠:<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">total = [<span class="string">&#x27;item_one&#x27;</span>, <span class="string">&#x27;item_two&#x27;</span>, <span class="string">&#x27;item_three&#x27;</span>,</span><br><span class="line">         <span class="string">&#x27;item_four&#x27;</span>, <span class="string">&#x27;item_five&#x27;</span>]</span><br></pre></td></tr></table></figure><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2>Python 支持四种数字类型：</li><li>int：整数，如 1。</li><li>bool：布尔值，如 True。</li><li>float：浮点数，如 1.23、3E-2。</li><li>complex：复数，如 1 + 2j。</li><li>string:字符串，如 hello<br>可以使用<code>sys.getsizeof()</code>函数查看对象的内存占用</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="comment"># 测试整数</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;整数 10 的内存占用:&quot;</span>, sys.getsizeof(<span class="number">10</span>))  <span class="comment"># 28 字节</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;大整数 10**100 的内存占用:&quot;</span>, sys.getsizeof(<span class="number">10</span>**<span class="number">100</span>))  <span class="comment"># 72 字节</span></span><br><span class="line"><span class="comment"># 测试布尔值</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;True 的内存占用:&quot;</span>, sys.getsizeof(<span class="literal">True</span>))  <span class="comment"># 28 字节</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;False 的内存占用:&quot;</span>, sys.getsizeof(<span class="literal">False</span>))  <span class="comment"># 28 字节</span></span><br><span class="line"><span class="comment"># 测试浮点数</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;3.14 的内存占用:&quot;</span>, sys.getsizeof(<span class="number">3.14</span>))  <span class="comment"># 24 字节</span></span><br><span class="line"><span class="comment"># 测试复数</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;1 + 2j 的内存占用:&quot;</span>, sys.getsizeof(<span class="number">1</span> + <span class="number">2j</span>))  <span class="comment"># 32 字节</span></span><br><span class="line"><span class="comment"># 测试字符串</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&#x27;hello&#x27; 的内存占用:&quot;</span>, sys.getsizeof(<span class="string">&quot;hello&quot;</span>))  <span class="comment"># 54 字节</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&#x27;你好&#x27; 的内存占用:&quot;</span>, sys.getsizeof(<span class="string">&quot;你好&quot;</span>))  <span class="comment"># 76 字节</span></span><br><span class="line">````</span><br><span class="line"></span><br><span class="line"><span class="comment">### 整形（int）</span></span><br><span class="line">整数是没有**小数部分**的数字，例如 `<span class="number">1</span>`、`<span class="number">100</span>`、`-<span class="number">50</span>`。</span><br><span class="line">- Python <span class="number">3</span> 中只有一种整数类型 `<span class="built_in">int</span>`，没有 Python <span class="number">2</span> 中的 `long` 类型。</span><br><span class="line">- 整数可以无限大（仅受内存限制）。</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line">a = <span class="number">10</span></span><br><span class="line">  b = -<span class="number">5</span></span><br><span class="line">  c = <span class="number">12345678901234567890</span>  <span class="comment"># 大整数</span></span><br></pre></td></tr></table></figure><p><strong>注意事项：</strong></p><ul><li>整数运算时，除法<code>/</code>会返回浮点数，整除 <code>//</code> 会返回整数。</li><li>可以使用 <code>int()</code>(格式转换形式) 函数将<strong>其他类型</strong>转换为<strong>整数</strong>。<h3 id="布尔型-bool"><a href="#布尔型-bool" class="headerlink" title="布尔型(bool)"></a>布尔型(bool)</h3>布尔值只有两个取值：True 和 False</li><li>布尔值是整数的子类，True 相当于 1，False 相当于 0。</li><li>常用于条件判断和逻辑运算。（这玩意只能逻辑运算吧）<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">is_valid = <span class="literal">True</span></span><br><span class="line">is_empty = <span class="literal">False</span></span><br></pre></td></tr></table></figure><strong>注意事项：</strong><br>在逻辑运算中，<code>and</code>、<code>or</code>、<code>not</code> 是布尔运算的<strong>关键字</strong>。<br><strong>非布尔值在条件判断中会被隐式转换为布尔值</strong>，例如 0、””、[] 会被视为 False，其他值被视为 True。<strong>(注意输出的格式转换)</strong><h3 id="浮点型（float）"><a href="#浮点型（float）" class="headerlink" title="浮点型（float）"></a>浮点型（float）</h3>浮点数是带有小数部分的数字，例如 1.23、-0.5、3E-2（科学计数法表示）。</li><li>浮点数的精度有限，可能存在精度丢失问题。</li><li>支持科学计数法表示，例如 3E-2 表示 0.03。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">3.14</span></span><br><span class="line">b = -<span class="number">0.001</span></span><br><span class="line">c = <span class="number">2.5e3</span>  <span class="comment"># 2500.0</span></span><br></pre></td></tr></table></figure></li><li>浮点数运算时可能会出现<strong>精度问题</strong>，例如 0.1 + 0.2 的结果是 0.30000000000000004。</li><li>可以使用<code>round()</code>函数对浮点数进行<strong>四舍五入</strong>。<h3 id="复数"><a href="#复数" class="headerlink" title="复数"></a>复数</h3>复数由实部和虚部组成，形式为<code>a + bj</code>，其中<code>a</code>是实部，<code>b</code>是虚部，<code>j</code> 表示虚数单位。<strong>这玩意不是函数，也不是公式</strong></li><li>可以使用 <code>real</code> 和 <code>imag</code>属性分别获取实部和虚部。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">1</span> + <span class="number">2j</span></span><br><span class="line">b = <span class="number">3.5</span> - <span class="number">4.7j</span></span><br><span class="line"><span class="built_in">print</span>(a.real)  <span class="comment"># 输出实部：1.0</span></span><br><span class="line"><span class="built_in">print</span>(a.imag)  <span class="comment"># 输出虚部：2.0</span></span><br></pre></td></tr></table></figure><strong>注意事项：</strong></li><li>复数的运算规则与数学中的复数运算一致。</li><li><strong>复数不能直接比较大小</strong>。你告诉我咋比吗，你告诉我呀<h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3>字符串是由字符组成的序列，用单引号<code>&#39;</code>、双引号<code>&quot;</code>或三引号<code>&#39;&#39;&#39;</code>、<code>&quot;&quot;&quot;</code> 表示。<br><strong><em>多行字符串可以换行</em></strong></li><li>字符串是<code>不可变</code>的，<strong>修改字符串会生成一个新的字符串</strong>。</li><li>支持<strong>索引</strong>和<strong>切片</strong>操作。</li><li>支持多种字符串操作，如<strong>拼接、重复、格式化</strong>等。<br>可以吧字符串理解成一个数组<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">s1 = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line">s2 = <span class="string">&quot;world&quot;</span></span><br><span class="line">s3 = <span class="string">&#x27;&#x27;&#x27;多行</span></span><br><span class="line"><span class="string">字符串&#x27;&#x27;&#x27;</span></span><br><span class="line">s4 = <span class="string">&quot;Python&quot;</span></span><br><span class="line"><span class="built_in">print</span>(s1[<span class="number">0</span>])      <span class="comment"># 输出：h</span></span><br><span class="line"><span class="built_in">print</span>(s2[<span class="number">1</span>:<span class="number">4</span>])    <span class="comment"># 输出：orl</span></span><br><span class="line"><span class="built_in">print</span>(s1 + s2)    <span class="comment"># 输出：helloworld</span></span><br><span class="line"><span class="built_in">print</span>(s4 * <span class="number">2</span>)     <span class="comment"># 输出：PythonPython</span></span><br></pre></td></tr></table></figure><strong>注意事项：</strong></li><li>字符串的<strong>索引从 0 开始</strong>，支持负索引（从右向左）。</li><li>切片操作<code>str[start:end:step]</code>中，<code>start</code> 包含，<code>end</code> 不包含。</li><li>使用<code>r</code>前缀可以创建原始字符串，避免转义字符生效，例如<code>r&quot;\n&quot;</code>会直接输出<code>\n</code>。</li><li>字符串格式化推荐使用<code>f-string（Python 3.6+）</code>，例如 <code>f&quot;Hello, &#123;name&#125;&quot;</code>。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span> = <span class="string">&#x27;123456789&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>[<span class="number">0</span>:-<span class="number">1</span>])  <span class="comment"># 输出第一个到倒数第二个字符</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>[<span class="number">2</span>:<span class="number">5</span>])   <span class="comment"># 输出第三到第五个字符</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span> * <span class="number">2</span>)    <span class="comment"># 输出字符串两次</span></span><br></pre></td></tr></table></figure><h2 id="空行"><a href="#空行" class="headerlink" title="空行"></a>空行</h2>函数之间或类的方法之间用空行分隔，表示一段新的代码的开始。类和函数入口之间也用一行空行分隔，以突出函数入口的开始。<br>空行与代码缩进不同，空行并不是 Python 语法的一部分。书写时不插入空行，Python 解释器运行也不会出错。但是空行的作用在于分隔两段不同功能或含义的代码，便于日后代码的维护或重构。<br><strong>记住：空行也是程序代码的一部分。</strong><h2 id="用户输入"><a href="#用户输入" class="headerlink" title="用户输入"></a>用户输入</h2>使用<code>input()</code>函数等待用户输入<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">input</span>(<span class="string">&quot;\n\n按下 enter 键后退出。&quot;</span>)</span><br></pre></td></tr></table></figure>以上代码中 ，\n\n 在结果输出前会输出两个新的空行。一旦用户按下 enter 键时，程序将退出。<h2 id="同一行多条语句"><a href="#同一行多条语句" class="headerlink" title="同一行多条语句"></a>同一行多条语句</h2>如果想要在同一行执行多个语句可以使用分号<code>;</code>分隔多条语句：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys; x = <span class="string">&#x27;runoob&#x27;</span>; sys.stdout.write(x + <span class="string">&#x27;\n&#x27;</span>)</span><br></pre></td></tr></table></figure>使用脚本执行以上代码，输出结果为：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">runoob</span><br></pre></td></tr></table></figure>使用交互式命令行执行，输出结果为：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; import sys; x = &#x27;runoob&#x27;; sys.stdout.write(x + &#x27;\n&#x27;)</span><br><span class="line">runoob</span><br><span class="line">7</span><br></pre></td></tr></table></figure>此处的 7 表示字符数，runoob 有 6 个字符，\n 表示一个字符，加起来 7 个字符。<h2 id="代码组"><a href="#代码组" class="headerlink" title="代码组"></a>代码组</h2>缩进相同的语句构成代码组，通常用于<code>if</code>、<code>while</code>、<code>def</code>和 <code>class</code> 等复合语句。首行以<strong>关键字</strong>开始，以<strong>冒号( : )</strong>结束，该行之后的一行或多行代码构成代码组。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> expression : </span><br><span class="line">   suite</span><br><span class="line"><span class="keyword">elif</span> expression : </span><br><span class="line">   suite </span><br><span class="line"><span class="keyword">else</span> : </span><br><span class="line">   suite</span><br></pre></td></tr></table></figure><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><code>print</code>默认输出是换行的，如果要实现不换行需要在变量末尾加上 <code>end=&quot;&quot;：</code>j接下来是例子<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line">x=<span class="string">&quot;a&quot;</span></span><br><span class="line">y=<span class="string">&quot;b&quot;</span></span><br><span class="line"><span class="comment"># 换行输出</span></span><br><span class="line"><span class="built_in">print</span>( x )</span><br><span class="line"><span class="built_in">print</span>( y )</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;---------&#x27;</span>)</span><br><span class="line"><span class="comment"># 不换行输出</span></span><br><span class="line"><span class="built_in">print</span>( x, end=<span class="string">&quot; &quot;</span> )</span><br><span class="line"><span class="built_in">print</span>( y, end=<span class="string">&quot; &quot;</span> )</span><br><span class="line"><span class="built_in">print</span>()</span><br></pre></td></tr></table></figure><h2 id="import-与-from…import-模块导入-很重要"><a href="#import-与-from…import-模块导入-很重要" class="headerlink" title="import 与 from…import(模块导入)[很重要]"></a>import 与 from…import(模块导入)[很重要]</h2></li><li>在<strong> python </strong>用 <code>import</code> 或者 <code>from...import</code> 来导入相应的模块。</li><li>将整个模块(somemodule)导入，格式为： <code>import somemodule</code></li><li>从某个模块中导入某个函数,格式为： <code>from somemodule import somefunction</code></li><li>从某个模块中导入多个函数,格式为： <code>from somemodule import firstfunc, secondfunc, thirdfunc</code></li><li>将某个模块中的全部函数导入，格式为： <code>from somemodule import *</code></li></ul><pre><code class="lang-python">import sys    #导入sys模块print(sys.path)&quot;&quot;&quot;print (&#39;命令行参数为:&#39;)for i in sys.argv:   print (i)&quot;&quot;&quot;from sys import argv, path    #导入 sys 模块的 argv,path 成员print(path)     # 因为已经导入path成员，所以此处引用时不需要加sys.path`</code></pre><h2 id="命令行参数"><a href="#命令行参数" class="headerlink" title="命令行参数"></a>命令行参数</h2><p>使用 <code>python -h</code> 查看命令行参数帮助信息。在对应终端键入即可,例如</p><blockquote><p>$ python -h<br>usage: python [option] … [-c cmd | -m mod | file | -] [arg] …<br>Options and arguments (and corresponding environment variables):<br>-c cmd : program passed in as string (terminates option list)<br>-d     : debug output from parser (also PYTHONDEBUG=x)<br>-E     : ignore environment variables (such as PYTHONPATH)<br>-h     : print this help message and exit</p><p>[ etc. ]</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 结构速查 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring框架说人话版</title>
      <link href="/2025/01/07/Spring%E6%A1%86%E6%9E%B6%E8%AF%B4%E4%BA%BA%E8%AF%9D%E7%89%88/"/>
      <url>/2025/01/07/Spring%E6%A1%86%E6%9E%B6%E8%AF%B4%E4%BA%BA%E8%AF%9D%E7%89%88/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring框架说人话版本"><a href="#Spring框架说人话版本" class="headerlink" title="Spring框架说人话版本"></a>Spring框架说人话版本</h1><blockquote><p>这东西简单但是不知道考什么，量又很大，我在此进行说人话版本更新，自行复习加深</p><h1 id="Spring框架概述Spring框架概述"><a href="#Spring框架概述Spring框架概述" class="headerlink" title="Spring框架概述Spring框架概述"></a>Spring框架概述Spring框架概述</h1><p>Spring框架是一个广泛使用的Java企业级开发框架，其体系结构由多个模块组成，每个模块都有其特定的功能和作用。</p></blockquote><p>简单来说就是这玩意是由各个模块搭建起来的，所以要先知道整体构成</p><p><strong>该框架由四个部分完成构建</strong></p><ul><li>核心容器（Core Container）</li><li>数据访问/集成层（Data Access/Integration）</li><li>Web层（Web）</li><li>其他模块（Other Modules）</li></ul><p>而其中包含的模块才是运作的核心</p><h2 id="核心容器部分-特殊区域为着重点"><a href="#核心容器部分-特殊区域为着重点" class="headerlink" title="核心容器部分(特殊区域为着重点)"></a>核心容器部分(特殊区域为着重点)</h2><blockquote><p>Beans模块：提供了BeanFactory，是工厂模式实现的经典，Spring将管理对象称为Bean。</p><ul><li>Core核心模块：提供了Spring框架的基本组成部分，包括IoC和DI功能。</li><li>Context上下文模块：构建于核心模块之上，它是访问定义配置的任何对象的媒介，扩展了BeanFactory的功能，其中ApplicationContext是Context模块的核心接口。<h2 id="数据访问-集成层部分"><a href="#数据访问-集成层部分" class="headerlink" title="数据访问/集成层部分"></a>数据访问/集成层部分</h2>JDBC模块：提供了一个JDBC的抽象层，大幅度地减少了在开发中对数据库的操作的编码。</li><li>ORM模块：提供了与多个第三方持久层框架的良好整合。</li><li>OXM模块：提供了一个支持对象/XML映射的抽象层实现，如JAXB、Castor、XMLBeans、JiBX和XStream。<h2 id="web层部分"><a href="#web层部分" class="headerlink" title="web层部分"></a>web层部分</h2></li><li>Web模块：提供了基础的针对Web开发的集成特性，例如多方文件上传，利用Servlet监听器进行IoC容器初始化以及Web应用上下文。</li><li>Servlet模块：也称做Spring-webmvc模块，包含Spring的模型-视图-控制器（MVC）和REST Web Services实现的Web应用程序。</li><li>WebSocket模块：Spring 4.0以后新增功能，提供了WebSocket和SockJS的实现，以及对STOMP的支持。</li><li>Portlet模块：类似Servlet模块的功能，提供了Portlet环境下的MVC实现。<h2 id="其他模块部分"><a href="#其他模块部分" class="headerlink" title="其他模块部分"></a>其他模块部分</h2>AOP模块：提供了面向方面编程的支持，允许定义方法拦截器和切入点，将代码按照功能进行分离，以降低耦合性。</li><li>Aspects模块：提供了与AspectJ的集成功能，Aspect是一个功能强大且成熟的面向方面编程的框架。</li><li>Instrumentation模块：提供了类工具的支持和类加载器的实现，可以在特定的应用服务器中使用。</li><li>Messaging模块：Spring 4.0以后新增的模块，提供了对消息传递体系结构和协议的支持。</li><li>Test模块：提供了对单元测试和集成测试的支持。<h1 id="spring的核心机制-依赖注入-控制反转"><a href="#spring的核心机制-依赖注入-控制反转" class="headerlink" title="spring的核心机制:依赖注入/控制反转"></a>spring的核心机制:依赖注入/控制反转</h1><code>spring的核心机制:依赖注入/控制反转</code></li></ul></blockquote><p>这个作用机制，也就是该框架是通过什么机制运作的<br><strong>依赖注入是实现控制反转的方式</strong>这个关系搞清楚</p><h2 id="控制反转（IoC）"><a href="#控制反转（IoC）" class="headerlink" title="控制反转（IoC）"></a>控制反转（IoC）</h2><p>是一种<strong>设计原则</strong>，<code>它将对象的创建和管理的控制权从应用程序代码转移到框架或容器中</code>。这样，容器负责对象的<code>生命周期</code>管理，使得代码更加灵活和可测试。<br>控制反转主要通过以下两种方式实现：</p><blockquote><p><strong>1、依赖注入（Dependency Injection，DI）：</strong></p><ul><li>通过将对象的依赖关系在运行时注入到对象中，而不是在对象内部创建依赖。可以通过构造函数、属性或方法实现。</li></ul></blockquote><p><strong>2、服务定位器（Service Locator）：</strong></p><ul><li>提供一个集中式的注册表来查找和获取服务（对象）。虽然实现了控制反转，但通常不如依赖注入灵活，因为仍需显式请求服务。<h2 id="什么是依赖注入？"><a href="#什么是依赖注入？" class="headerlink" title="什么是依赖注入？"></a>什么是依赖注入？</h2>依赖注入是一种<strong>设计模式</strong>，<code>允许在运行时将对象的依赖关系注入到对象中，而不是在对象内部创建这些依赖</code>。这种方式降低了对象之间的耦合，提高了代码的可测试性和可维护性。<br>好的，下面我们以<code>AdminInfo</code>类为例，讲解依赖注入的几种主要类型。</li></ul><p><strong>依赖注入的类型</strong></p><blockquote><p>依赖注入主要有三种类型：<code>构造函数注入</code>、<code>属性注入</code>和<code>方法注入</code>。<br><del>完整代码见其他文章</del>，这部分可以说就是记单词,<strong>如果要引入注入另一个类的话，先引入包，然后调用方法即可</strong></p><h3 id="构造函数注入-sss"><a href="#构造函数注入-sss" class="headerlink" title="构造函数注入(sss)"></a>构造函数注入(sss)</h3><p>构造函数注入是通过类的构造函数将依赖对象传递给目标对象。在创建对象时，<strong>依赖关系在构造时就被注入</strong>。</p></blockquote><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ssm.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AdminInfo</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String pwd;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 默认构造函数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AdminInfo</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 带参数的构造函数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AdminInfo</span><span class="params">(String name, String pwd)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.pwd = pwd;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AdminService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> AdminInfo adminInfo;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过构造函数注入AdminInfo</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AdminService</span><span class="params">(AdminInfo adminInfo)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.adminInfo = adminInfo;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>其中这段是重点部分，以后的代码不提供完整块</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过构造函数注入AdminInfo</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AdminService</span><span class="params">(AdminInfo adminInfo)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.adminInfo = adminInfo;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>AdminInfo是示例类名，自由替换<code>AdminInfo</code></p><h3 id="属性注入-sss"><a href="#属性注入-sss" class="headerlink" title="属性注入(sss)"></a>属性注入(sss)</h3><p>属性注入是通过公共属性或setter方法将依赖对象注入到目标对象中。这种方式在对象创建后，<strong>可以随时修改依赖关系</strong>。</p><p>示例代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Setter方法进行属性注入</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAdminInfo</span><span class="params">(AdminInfo adminInfo)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.adminInfo = adminInfo;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><br>AdminInfo是示例类名，自由替换<code>AdminInfo</code></p><h3 id="方法注入"><a href="#方法注入" class="headerlink" title="方法注入"></a>方法注入</h3><p>方法注入是通过方法参数将依赖对象传递给目标对象的方法。这种方式适用于需要在<strong>特定方法中使用依赖的情况</strong>。<br>示例代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AdminService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">displayAdminInfo</span><span class="params">(AdminInfo adminInfo)</span> &#123;</span><br><span class="line">        adminInfo.print();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>AdminInfo是示例类名，自由替换<code>AdminInfo</code></p><h3 id="小总结"><a href="#小总结" class="headerlink" title="小总结"></a>小总结</h3><ul><li><strong>构造函数注入</strong>：在对象创建时通过构造函数传入依赖，适合于必须依赖的情况。</li><li><strong>属性注入</strong>：通过setter方法注入依赖，适合于可选依赖或需要在对象创建后修改依赖的情况。</li><li><strong>方法注入</strong>：通过方法参数传入依赖，适合于在特定方法中使用依赖的情况。<br>以上代码没有调用的部分，只有创建部分<br>需要记住的是<code>AdminService</code>和<code>setAdminInfo</code>和<code>displayAdminInfo</code><h2 id="Spring-Bean的装配"><a href="#Spring-Bean的装配" class="headerlink" title="Spring Bean的装配"></a>Spring Bean的装配</h2>在Java Web应用中，<code>ContextLoaderListener</code>和<code>ContextLoaderServlet</code>是两种常用的载入方式，用于初始化Spring应用上下文。<br>这里提一点，<strong>先配置再使用</strong><h3 id="ContextLoaderListener"><a href="#ContextLoaderListener" class="headerlink" title="ContextLoaderListener"></a>ContextLoaderListener</h3><strong>配置示例</strong>：<blockquote><p>在<code>web.xml</code>中配置<code>ContextLoaderListener</code>：</p></blockquote></li></ul><p>只有这部分要动</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>/WEB-INF/applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>完整的不是人记的，这是配置文件，不是代码！！</strong><br>扔个完整版</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee </span></span></span><br><span class="line"><span class="string"><span class="tag">                             http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;3.1&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>/WEB-INF/applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 其他配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>使用实例：</strong><br>在<code>applicationContext.xml</code>中定义<code>Bean</code>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.example.MyBean&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h3 id="ContextLoaderServlet"><a href="#ContextLoaderServlet" class="headerlink" title="ContextLoaderServlet"></a>ContextLoaderServlet</h3><p><strong>配置示例：</strong></p><blockquote><p>在<code>web.xml</code>中配置<code>ContextLoaderServlet</code>：</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springDispatcher<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>/WEB-INF/spring-servlet.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 其他配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>使用实例：</strong><br>在<code>applicationContext.xml</code>中定义<code>Bean</code>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myController&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.example.MyController&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h3 id="小总结-1"><a href="#小总结-1" class="headerlink" title="小总结"></a>小总结</h3><ul><li>ContextLoaderListener：用于加载根应用上下文，适合于整个应用共享的Bean。</li><li>ContextLoaderServlet：用于加载Web应用上下文，通常与Spring MVC结合使用，处理特定请求。<h2 id="六大注解（s）"><a href="#六大注解（s）" class="headerlink" title="六大注解（s）"></a>六大注解（s）</h2></li><li>①@component注解 </li><li>②@Repository注解 </li><li>③@ Service注解 </li><li>④@Controller注解   </li><li>⑤@ Autowired注解 </li><li>⑥@resourse注解<h3 id="1-Component"><a href="#1-Component" class="headerlink" title="1. @Component"></a>1. <code>@Component</code></h3></li><li><strong>作用</strong>：标识一个类为<code>Spring的组件</code>，Spring会自动扫描并注册为Bean。</li><li><strong>使用场景</strong>：用于任何Spring管理的组件，通常用于通用的类。</li></ul><h3 id="2-Repository"><a href="#2-Repository" class="headerlink" title="2. @Repository"></a>2. <code>@Repository</code></h3><ul><li><strong>作用</strong>：标识一个类为<code>数据访问层的组件</code>，通常用于持久化操作。</li><li><strong>使用场景</strong>：用于DAO（数据访问对象）类，Spring会为其提供异常转换等功能。</li></ul><h3 id="3-Service"><a href="#3-Service" class="headerlink" title="3. @Service"></a>3. <code>@Service</code></h3><ul><li><strong>作用</strong>：标识一个类为<code>服务层的组件</code>，通常用于业务逻辑处理。</li><li><strong>使用场景</strong>：用于Service类，表示该类包含业务逻辑。</li></ul><h3 id="4-Controller"><a href="#4-Controller" class="headerlink" title="4. @Controller"></a>4. <code>@Controller</code></h3><ul><li><strong>作用</strong>：标识一个类为<code>控制层的组件</code>，通常用于处理请求。</li><li><strong>使用场景</strong>：用于Spring MVC中的控制器类，负责接收和处理用户请求。</li></ul><h3 id="5-Autowired"><a href="#5-Autowired" class="headerlink" title="5. @Autowired"></a>5. <code>@Autowired</code></h3><ul><li><strong>作用</strong>：用于自动注入<code>Spring容器中的Bean</code>。</li><li><strong>使用场景</strong>：可以用于构造函数、属性或方法上，Spring会根据类型自动注入相应的Bean。</li></ul><h3 id="6-Resource"><a href="#6-Resource" class="headerlink" title="6. @Resource"></a>6. <code>@Resource</code></h3><ul><li><strong>作用</strong>：用于按名称<code>自动注入Bean</code>。</li><li><strong>使用场景</strong>：可以用于属性上，Spring会根据Bean的名称进行注入，通常用于与JNDI结合使用。<h1 id="Spring-ADP"><a href="#Spring-ADP" class="headerlink" title="Spring ADP"></a>Spring ADP</h1><h2 id="什么是AOP-什么是OOP"><a href="#什么是AOP-什么是OOP" class="headerlink" title="什么是AOP?什么是OOP?"></a>什么是AOP?什么是OOP?</h2><strong>AOP</strong>（面向切面编程）是一种通过切面来分离横切关注点（如日志、事务等）的编程范式；<br><strong>OOP</strong>（面向对象编程）是一种通过对象和类来组织代码和数据的编程范式。<h2 id="Aop和OOP的区别"><a href="#Aop和OOP的区别" class="headerlink" title="Aop和OOP的区别"></a>Aop和OOP的区别</h2>OOP（面向对象编程）<strong>关注对象及其行为的组织</strong>，而 AOP（面向切面编程）<strong>关注在不改变业务逻辑的情况下处理横切关注点</strong>（如日志、事务等）。<h3 id="AOP的常用术语"><a href="#AOP的常用术语" class="headerlink" title="AOP的常用术语:"></a>AOP的常用术语:</h3>好的，以下是AOP的常用术语及其英文单词：</li></ul><blockquote><ol><li><strong>切面（Aspect）</strong></li><li><strong>连接点（Join Point）</strong></li><li><strong>切入点（Pointcut）</strong></li><li><strong>通知（Advice</strong></li><li><strong>目标对象（Target Object）</strong></li></ol></blockquote><ol><li><strong>代理对象（Proxy Object）</strong></li><li><p><strong>织入（Weaving）</strong></p><h3 id="Xml注解：通知-给一段代码问是什么通知"><a href="#Xml注解：通知-给一段代码问是什么通知" class="headerlink" title="Xml注解：通知-给一段代码问是什么通知?"></a>Xml注解：通知-给一段代码问是什么通知?</h3></li><li><p><strong>返回通知</strong>：<code>myAfterReturnAdvice</code></p></li><li><strong>异常通知</strong>：<code>MyThrowingAdvice</code></li><li><strong>环绕通知</strong>：<code>myAroundAdvice</code></li><li><strong>前置通知</strong>：<code>browse</code></li><li><strong>后置通知</strong>：<code>After</code></li></ol><p>这些通知分别对应于AOP中的不同切面行为。</p><h2 id="Spring的数据库的编程"><a href="#Spring的数据库的编程" class="headerlink" title="Spring的数据库的编程"></a>Spring的数据库的编程</h2><p>XML配置Spring JDBC数据源的示例：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">&lt;!-- 配置数据源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span> <span class="comment">&lt;!-- 配置驱动 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/mydb&quot;</span>/&gt;</span> <span class="comment">&lt;!-- 配置地址 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span> <span class="comment">&lt;!-- 配置用户名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;password&quot;</span>/&gt;</span> <span class="comment">&lt;!-- 配置密码 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 其他Bean配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="Spring-MVC简介"><a href="#Spring-MVC简介" class="headerlink" title="Spring MVC简介"></a>Spring MVC简介</h1><h2 id="1-MVC这三个字母代表什么"><a href="#1-MVC这三个字母代表什么" class="headerlink" title="1. MVC这三个字母代表什么"></a>1. MVC这三个字母代表什么</h2><ul><li><strong>M</strong>：Model（模型） - 代表应用程序的数据和业务逻辑。</li><li><strong>V</strong>：View（视图） - 代表用户界面，负责展示数据。</li><li><strong>C</strong>：Controller（控制器） - 处理用户请求，协调模型和视图之间的交互。</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置处理器 Handle，映射为&quot;/hello&quot;请求 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">&quot;/hello&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.springmvc.controller.Hellocontroller&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置视图解析器，将控制器方法返回的逻辑视图解析为物理视图 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>核心部分为：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置处理器 Handle，映射为&quot;/hello&quot;请求 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">&quot;/hello&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.springmvc.controller.Hellocontroller&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置视图解析器，将控制器方法返回的逻辑视图解析为物理视图 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Spring-MVC的请求流程"><a href="#Spring-MVC的请求流程" class="headerlink" title="Spring MVC的请求流程"></a>Spring MVC的请求流程</h2><blockquote><p>一句话就是<code>请求到达</code>，<code>请求映射</code>，<code>调用处理器</code>，<code>返回模型</code>，<code>视图解析</code>，<code>渲染视图</code><br><code>@RequestMapping</code> 是 Spring MVC 中用于处理请求的注解，主要用于将 HTTP 请求映射到特定的处理方法或类上。</p><h1 id="Spring-MVC注解-RequestMapping"><a href="#Spring-MVC注解-RequestMapping" class="headerlink" title="Spring MVC注解 @RequestMapping"></a>Spring MVC注解 @RequestMapping</h1><h2 id="1-基本用法"><a href="#1-基本用法" class="headerlink" title="1. 基本用法"></a>1. 基本用法</h2><ul><li><strong>类级别</strong>：可以在控制器类上使用，表示该类中的所有请求处理方法的公共路径前缀。</li><li><strong>方法级别</strong>：可以在具体的方法上使用，表示该方法处理的特定请求。</li></ul></blockquote><ol><li>示例代码<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span> <span class="comment">// 类级别的请求映射</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/get&quot;, method = RequestMethod.GET)</span> <span class="comment">// 方法级别的请求映射</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUser</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;获取用户信息&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/create&quot;, method = RequestMethod.POST)</span> <span class="comment">// 方法级别的请求映射</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">createUser</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;创建用户成功&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><code>@RequestMapping</code> 是 Spring MVC 中非常重要的注解，用于定义请求的路由和处理逻辑。<br>Spring MVC 标签库主要用于在 JSP 页面中简化与 Spring MVC 的集成，提供了一些方便的标签来处理表单、URL、消息等。以下是一些常用的 Spring MVC 标签库及其功能：<h1 id="Spring-MVC-标签库"><a href="#Spring-MVC-标签库" class="headerlink" title="Spring MVC 标签库"></a>Spring MVC 标签库</h1><h2 id="1-引入标签库"><a href="#1-引入标签库" class="headerlink" title="1. 引入标签库"></a>1. 引入标签库</h2>在 JSP 页面中使用 Spring MVC 标签库之前，需要引入相关的标签库：<br>（引库可以不用看）<figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ taglib uri=<span class="string">&quot;http://www.springframework.org/tags&quot;</span> prefix=<span class="string">&quot;spring&quot;</span> %&gt;</span><br><span class="line">&lt;%@ taglib uri=<span class="string">&quot;http://www.springframework.org/tags/form&quot;</span> prefix=<span class="string">&quot;form&quot;</span> %&gt;</span><br></pre></td></tr></table></figure></li></ol><h2 id="2-常用标签"><a href="#2-常用标签" class="headerlink" title="2. 常用标签"></a>2. 常用标签</h2><h3 id="1-lt-form-form-gt"><a href="#1-lt-form-form-gt" class="headerlink" title="1. &lt;form:form&gt;"></a>1. <code>&lt;form:form&gt;</code></h3><ul><li>用于创建表单，自动绑定表单数据到模型对象。</li><li>示例：<figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;form:form modelAttribute=<span class="string">&quot;user&quot;</span> action=<span class="string">&quot;create&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">    &lt;form:input path=<span class="string">&quot;username&quot;</span> /&gt;</span><br><span class="line">    &lt;form:input path=<span class="string">&quot;password&quot;</span> type=<span class="string">&quot;password&quot;</span> /&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;提交&quot;</span> /&gt;</span><br><span class="line">&lt;/form:form&gt;</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-lt-form-input-gt"><a href="#2-lt-form-input-gt" class="headerlink" title="2. &lt;form:input&gt;"></a>2. <code>&lt;form:input&gt;</code></h3><ul><li>用于创建输入框，绑定到模型属性。</li><li>示例：<figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;form:input path=<span class="string">&quot;email&quot;</span> /&gt;</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-lt-form-select-gt"><a href="#3-lt-form-select-gt" class="headerlink" title="3. &lt;form:select&gt;"></a>3. <code>&lt;form:select&gt;</code></h3><ul><li>用于创建下拉选择框，绑定到模型属性。</li><li>示例：<figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;form:select path=<span class="string">&quot;gender&quot;</span>&gt;</span><br><span class="line">    &lt;form:option value=<span class="string">&quot;male&quot;</span>&gt;男&lt;/form:option&gt;</span><br><span class="line">    &lt;form:option value=<span class="string">&quot;female&quot;</span>&gt;女&lt;/form:option&gt;</span><br><span class="line">&lt;/form:select&gt;</span><br></pre></td></tr></table></figure></li></ul><h3 id="4-lt-form-checkbox-gt"><a href="#4-lt-form-checkbox-gt" class="headerlink" title="4. &lt;form:checkbox&gt;"></a>4. <code>&lt;form:checkbox&gt;</code></h3><ul><li>用于创建复选框，绑定到模型属性。</li><li>示例：<figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;form:checkbox path=<span class="string">&quot;subscribe&quot;</span> /&gt; 订阅新闻</span><br></pre></td></tr></table></figure></li></ul><h3 id="5-lt-form-errors-gt"><a href="#5-lt-form-errors-gt" class="headerlink" title="5. &lt;form:errors&gt;"></a>5. <code>&lt;form:errors&gt;</code></h3><ul><li>用于显示表单验证错误信息。</li><li><p>示例：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;form:errors path=<span class="string">&quot;username&quot;</span> cssClass=<span class="string">&quot;error&quot;</span> /&gt;</span><br></pre></td></tr></table></figure><h3 id="标签汇总如下"><a href="#标签汇总如下" class="headerlink" title="标签汇总如下"></a>标签汇总如下</h3><p><strong><form:form>,<form:input>,<form:select>,<form:checkbox>,<form:errors></strong>-</p><h1 id="类型转换，数抗脆式化和数据校验"><a href="#类型转换，数抗脆式化和数据校验" class="headerlink" title="类型转换，数抗脆式化和数据校验"></a>类型转换，数抗脆式化和数据校验</h1><h2 id="1-类型转换"><a href="#1-类型转换" class="headerlink" title="1. 类型转换"></a>1. 类型转换</h2><p><strong>类型转换是将请求参数转换为控制器方法所需的Java类型的过程。Spring MVC提供了自动类型转换的功能。</strong></p></li><li><p><strong>使用示例</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/submit&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">submit</span><span class="params">(<span class="meta">@RequestParam(&quot;age&quot;)</span> <span class="type">int</span> age)</span> &#123;</span><br><span class="line">    <span class="comment">// age参数会自动转换为int类型</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>自定义类型转换</strong>：可以通过实现<code>Converter</code>接口来自定义类型转换。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringToUserConverter</span> <span class="keyword">implements</span> <span class="title class_">Converter</span>&lt;String, User&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">convert</span><span class="params">(String source)</span> &#123;</span><br><span class="line">        <span class="comment">// 自定义转换逻辑</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>(source);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="2-数据格式化"><a href="#2-数据格式化" class="headerlink" title="2. 数据格式化"></a>2. 数据格式化</h2><p><code>数据格式化用于将对象属性格式化为字符串，或将字符串解析为对象属性。Spring提供了</code>@InitBinder<code>注解来注册自定义的格式化器。</code></p><ul><li><p><strong>使用示例</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@InitBinder</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initBinder</span><span class="params">(WebDataBinder binder)</span> &#123;</span><br><span class="line">    binder.registerCustomEditor(Date.class, <span class="keyword">new</span> <span class="title class_">CustomDateEditor</span>(<span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd&quot;</span>), <span class="literal">true</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>自定义格式化</strong>：可以实现<code>PropertyEditor</code>接口或使用<code>@InitBinder</code>来注册格式化器。</p></li></ul><h2 id="3-数据校验"><a href="#3-数据校验" class="headerlink" title="3. 数据校验"></a>3. 数据校验</h2><p><strong>数据校验用于验证用户输入的数据是否符合预期的格式或规则</strong>。Spring MVC支持JSR-303（Bean Validation）规范。</p><ul><li><strong>使用示例</strong>：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Min(18)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@PostMapping(&quot;/register&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">register</span><span class="params">(<span class="meta">@Valid</span> <span class="meta">@ModelAttribute</span> User user, BindingResult result)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (result.hasErrors()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;registerForm&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 处理注册逻辑</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="SpringMVC-的文件上传和下载"><a href="#SpringMVC-的文件上传和下载" class="headerlink" title="SpringMVC 的文件上传和下载"></a>SpringMVC 的文件上传和下载</h1></li></ul><h2 id="1-Spring-MVC-文件上传的作用与配置"><a href="#1-Spring-MVC-文件上传的作用与配置" class="headerlink" title="1. Spring MVC 文件上传的作用与配置"></a>1. Spring MVC 文件上传的作用与配置</h2><h3 id="1-1-配置文件扫描"><a href="#1-1-配置文件扫描" class="headerlink" title="1.1 配置文件扫描"></a>1.1 配置文件扫描</h3><p>在Spring配置文件中，需要启用文件上传的支持，通常通过<code>MultipartResolver</code>来实现。可以使用<code>CommonsMultipartResolver</code>或<code>StandardServletMultipartResolver</code>。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;multipartResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxUploadSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10485760&quot;</span>/&gt;</span> <span class="comment">&lt;!-- 设置最大上传文件大小 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-2-文件解析类"><a href="#1-2-文件解析类" class="headerlink" title="1.2 文件解析类"></a>1.2 文件解析类</h3><p><code>CommonsMultipartResolver</code>是基于Apache Commons FileUpload库的实现，负责解析上传的文件。它会将上传的文件封装为<code>MultipartFile</code>对象，方便后续处理。</p><h2 id="2-上传文件的主要代码"><a href="#2-上传文件的主要代码" class="headerlink" title="2. 上传文件的主要代码"></a>2. 上传文件的主要代码</h2><p>在控制器中处理文件上传时，通常会使用<code>MultipartFile</code>对象。以下是一个简单的文件上传示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.MultipartFile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileUploadController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/upload&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">handleFileUpload</span><span class="params">(<span class="meta">@RequestParam(&quot;file&quot;)</span> MultipartFile file)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!file.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 指定文件保存路径</span></span><br><span class="line">                <span class="type">File</span> <span class="variable">destinationFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;/path/to/upload/directory/&quot;</span> + file.getOriginalFilename());</span><br><span class="line">                <span class="comment">// 将上传的文件保存到指定路径</span></span><br><span class="line">                file.transferTo(destinationFile);</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;文件上传成功：&quot;</span> + destinationFile.getAbsolutePath();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;文件上传失败：&quot;</span> + e.getMessage();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;上传的文件为空&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>核心代码部分（记这个）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/upload&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">handleFileUpload</span><span class="params">(<span class="meta">@RequestParam(&quot;file&quot;)</span> MultipartFile file)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!file.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 指定文件保存路径</span></span><br><span class="line">                <span class="type">File</span> <span class="variable">destinationFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;/path/to/upload/directory/&quot;</span> + file.getOriginalFilename());</span><br><span class="line">                <span class="comment">// 将上传的文件保存到指定路径</span></span><br><span class="line">                file.transferTo(destinationFile);</span><br></pre></td></tr></table></figure><p>代码说明：</p><ul><li><strong><code>@RequestParam(&quot;file&quot;) MultipartFile file</code></strong>：接收上传的文件。</li><li><strong><code>file.transferTo(destinationFile)</code></strong>：将上传的文件保存到指定的路径。<h1 id="SpingMVC的国际化和拦截器"><a href="#SpingMVC的国际化和拦截器" class="headerlink" title="SpingMVC的国际化和拦截器"></a>SpingMVC的国际化和拦截器</h1><h2 id="1-配置国际化支持"><a href="#1-配置国际化支持" class="headerlink" title="1. 配置国际化支持"></a>1. 配置国际化支持</h2>在Spring配置文件中，需要配置<code>MessageSource</code>，通常使用<code>ResourceBundleMessageSource</code>来加载消息资源文件。</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;messageSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.context.support.ResourceBundleMessageSource&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basename&quot;</span> <span class="attr">value</span>=<span class="string">&quot;messages&quot;</span>/&gt;</span> <span class="comment">&lt;!-- 指定资源文件的基础名称 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-Spring-MVC的拦截器"><a href="#2-Spring-MVC的拦截器" class="headerlink" title="2. Spring MVC的拦截器"></a>2. Spring MVC的拦截器</h2><p>拦截器用于在请求到达控制器之前或响应返回之前进行处理，常用于日志记录、权限检查等</p><h2 id="2-配置拦截器（拦截器配置代码要考）"><a href="#2-配置拦截器（拦截器配置代码要考）" class="headerlink" title="2. 配置拦截器（拦截器配置代码要考）"></a>2. 配置拦截器（拦截器配置代码要考）</h2><p>在Spring配置文件中配置拦截器。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.example.MyInterceptor&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="Mybatis"><a href="#Mybatis" class="headerlink" title="Mybatis"></a>Mybatis</h1><h2 id="1-SQL-语句"><a href="#1-SQL-语句" class="headerlink" title="1. SQL 语句"></a>1. SQL 语句</h2><h3 id="1-1-根据-ID-查询词数据"><a href="#1-1-根据-ID-查询词数据" class="headerlink" title="1.1 根据 ID 查询词数据"></a>1.1 根据 ID 查询词数据</h3><p>使用 <code>&lt;select&gt;</code> 标签来<code>查询数据</code>。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectWordById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Word&quot;</span>&gt;</span></span><br><span class="line">    SELECT * FROM words WHERE id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>id</strong>：查询的唯一标识符。</li><li><strong>parameterType</strong>：输入参数的类型。</li><li><strong>resultType</strong>：返回结果的类型。</li></ul><h3 id="1-2-新增一条数据"><a href="#1-2-新增一条数据" class="headerlink" title="1.2 新增一条数据"></a>1.2 新增一条数据</h3><p>使用 <code>&lt;insert&gt;</code> 标签来<code>插入数据</code>。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertWord&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Word&quot;</span>&gt;</span></span><br><span class="line">    INSERT INTO words (word, definition) VALUES (#&#123;word&#125;, #&#123;definition&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>parameterType</strong>：传入的对象类型，通常是一个 Java Bean。</li></ul><h3 id="1-3-修改数据"><a href="#1-3-修改数据" class="headerlink" title="1.3 修改数据"></a>1.3 修改数据</h3><p>使用 <code>&lt;update&gt;</code> 标签来<code>更新数据</code>。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateWord&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Word&quot;</span>&gt;</span></span><br><span class="line">    UPDATE words SET definition = #&#123;definition&#125; WHERE id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-4-删除数据"><a href="#1-4-删除数据" class="headerlink" title="1.4 删除数据"></a>1.4 删除数据</h3><p>使用 <code>&lt;delete&gt;</code> 标签来<code>删除数据</code>。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteWord&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span>&gt;</span></span><br><span class="line">    DELETE FROM words WHERE id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-映射"><a href="#2-映射" class="headerlink" title="2. 映射"></a>2. 映射</h2><p>p166配置映射<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta"><span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta"><span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.mybatis.mapper.UserInfoMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 根据用户编号获取用户信息 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findUserInfoById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;userInfoMap&quot;</span>&gt;</span></span><br><span class="line">        SELECT *</span><br><span class="line">        FROM user_info WHERE id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">&quot;UserInfo&quot;</span> <span class="attr">id</span>=<span class="string">&quot;userInfoMap&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;uid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;uname&quot;</span> <span class="attr">column</span>=<span class="string">&quot;userName&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;upass&quot;</span> <span class="attr">column</span>=<span class="string">&quot;password&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h1 id="关联映射"><a href="#关联映射" class="headerlink" title="关联映射"></a>关联映射</h1><h2 id="1-一对一映射"><a href="#1-一对一映射" class="headerlink" title="1. 一对一映射"></a>1. 一对一映射</h2><ul><li><strong>定义</strong>：一个对象对应一个对象。</li><li><strong>例子</strong>：一个用户有一个个人资料。</li></ul><h2 id="2-一对多映射"><a href="#2-一对多映射" class="headerlink" title="2. 一对多映射"></a>2. 一对多映射</h2><ul><li><strong>定义</strong>：一个对象对应多个对象。</li><li><strong>例子</strong>：一个用户可以有多个订单。</li></ul><h2 id="3-多对多映射"><a href="#3-多对多映射" class="headerlink" title="3. 多对多映射"></a>3. 多对多映射</h2><ul><li><strong>定义</strong>：多个对象可以对应多个对象。</li><li><strong>例子</strong>：一个用户可以有多个角色，而一个角色也可以被多个用户拥有。</li></ul><h2 id="小总结-2"><a href="#小总结-2" class="headerlink" title="小总结"></a>小总结</h2><ul><li><strong>一对一</strong>：一对一。</li><li><strong>一对多</strong>：一对多。</li><li><strong>多对多</strong>：多对多。<br>这样好记多了吧。<h1 id="动态SQL"><a href="#动态SQL" class="headerlink" title="动态SQL"></a>动态SQL</h1>动态 SQL 是指在 SQL 查询中根据条件动态生成不同的 SQL 语句。在 MyBatis 中，可以使用 <code>&lt;if&gt;</code>、<code>&lt;where&gt;</code> 和 <code>&lt;set&gt;</code> 标签来实现动态 SQL。</li></ul><h2 id="1-lt-if-gt-标签"><a href="#1-lt-if-gt-标签" class="headerlink" title="1. &lt;if&gt; 标签"></a>1. <code>&lt;if&gt;</code> 标签</h2><p><strong>功能</strong>：根据条件判断是否生成某个 SQL 片段。</p><p><strong>使用方法</strong>：</p><ul><li>在 <code>&lt;if&gt;</code> 标签中，可以使用 <code>test</code> 属性来指定条件表达式。</li><li>如果条件为 true，则生成 <code>&lt;if&gt;</code> 标签内的 SQL 片段。</li></ul><p><strong>示例</strong>：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findUsers&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">    SELECT * FROM users</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;userName != null&quot;</span>&gt;</span></span><br><span class="line">            AND userName = #&#123;userName&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;age != null&quot;</span>&gt;</span></span><br><span class="line">            AND age = #&#123;age&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><br>在这个示例中，如果 <code>userName</code> 或 <code>age</code> 不为 null，则相应的条件会被添加到 SQL 查询中。</p><h2 id="2-lt-where-gt-标签"><a href="#2-lt-where-gt-标签" class="headerlink" title="2. &lt;where&gt; 标签"></a>2. <code>&lt;where&gt;</code> 标签</h2><p><strong>功能</strong>：自动处理 SQL 查询中的 WHERE 子句，避免手动添加 AND 或 OR。</p><p><strong>使用方法</strong>：</p><ul><li><code>&lt;where&gt;</code> 标签会自动在生成的 SQL 语句前添加 “WHERE” 关键字，并在第一个条件前自动添加 “AND” 或 “OR”。</li></ul><p><strong>示例</strong>：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findUsers&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">    SELECT * FROM users</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;userName != null&quot;</span>&gt;</span></span><br><span class="line">            userName = #&#123;userName&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;age != null&quot;</span>&gt;</span></span><br><span class="line">            AND age = #&#123;age&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><br>在这个示例中，如果 <code>userName</code> 不为 null，<code>WHERE</code> 后面会直接跟上 <code>userName = #&#123;userName&#125;</code>，如果 <code>age</code> 不为 null，<code>AND age = #&#123;age&#125;</code> 会被添加。</p><h3 id="3-lt-set-gt-标签"><a href="#3-lt-set-gt-标签" class="headerlink" title="3. &lt;set&gt; 标签"></a>3. <code>&lt;set&gt;</code> 标签</h3><p><strong>功能</strong>：用于动态生成 UPDATE 语句中的 SET 子句。</p><p><strong>使用方法</strong>：</p><ul><li><code>&lt;set&gt;</code> 标签会自动处理 SET 子句中的逗号，避免手动添加。</li></ul><p><strong>示例</strong>：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">    UPDATE users</span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;userName != null&quot;</span>&gt;</span></span><br><span class="line">            userName = #&#123;userName&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;age != null&quot;</span>&gt;</span></span><br><span class="line">            age = #&#123;age&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    WHERE id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><br>在这个示例中，如果 <code>userName</code> 或 <code>age</code> 不为 null，相应的字段会被更新，并且逗号会自动处理。<br><strong>总结如下</strong></p><ul><li><strong><code>&lt;if&gt;</code></strong>：根据条件生成 SQL 片段。</li><li><strong><code>&lt;where&gt;</code></strong>：自动处理 WHERE 子句。</li><li><strong><code>&lt;set&gt;</code></strong>：自动处理 UPDATE 语句中的 SET 子句。<h2 id="Spring整合MyBaits"><a href="#Spring整合MyBaits" class="headerlink" title="Spring整合MyBaits"></a>Spring整合MyBaits</h2>这部分建议直接看书得了p222~223xml配置<br>p22应用</li></ul>]]></content>
      
      
      <categories>
          
          <category> 杂项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring框架汇总</title>
      <link href="/2025/01/03/Spring%E6%A1%86%E6%9E%B6%E6%B1%87%E6%80%BB/"/>
      <url>/2025/01/03/Spring%E6%A1%86%E6%9E%B6%E6%B1%87%E6%80%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring框架汇总"><a href="#Spring框架汇总" class="headerlink" title="Spring框架汇总"></a>Spring框架汇总</h1><h2 id="Spring框架概述"><a href="#Spring框架概述" class="headerlink" title="Spring框架概述"></a>Spring框架概述</h2><blockquote><p>单独列出状态的是重点区域</p></blockquote><p>Spring框架是一个广泛使用的Java企业级开发框架，其体系结构由多个模块组成，每个模块都有其特定的功能和作用。</p><h3 id="1-核心容器（Core-Container）"><a href="#1-核心容器（Core-Container）" class="headerlink" title="1. 核心容器（Core Container）"></a>1. 核心容器（Core Container）</h3><p>核心容器提供了Spring的基本功能，是其他模块建立的基础，主要由Beans模块、Core模块、Context模块和Spring EL模块组成，介绍如下：</p><blockquote><ul><li><strong>Beans模块</strong>：提供了<code>BeanFactory</code>，是工厂模式实现的经典，Spring将管理对象称为Bean。</li><li><strong>Core核心模块</strong>：提供了Spring框架的基本组成部分，包括IoC和DI功能。</li><li><strong>Context上下文模块</strong>：构建于核心模块之上，它是访问定义配置的任何对象的媒介，扩展了<code>BeanFactory</code>的功能，其中<code>ApplicationContext</code>是Context模块的核心接口。</li><li><strong>Spring EL模块</strong>：是Spring 3.0后新增的模块，提供了Spring表达式语言支持，是运行时查询和操作对象图的强大的表达式语言。</li></ul></blockquote><h3 id="2-数据访问-集成层（Data-Access-Integration）"><a href="#2-数据访问-集成层（Data-Access-Integration）" class="headerlink" title="2. 数据访问/集成层（Data Access/Integration）"></a>2. 数据访问/集成层（Data Access/Integration）</h3><p>数据访问/集成层包括JDBC、ORM、OXM、JMS和Transactions模块，介绍如下：</p><blockquote><ul><li><strong>JDBC模块</strong>：提供了一个JDBC的抽象层，大幅度地减少了在开发中对数据库的操作的编码。</li><li><strong>ORM模块</strong>：提供了与多个第三方持久层框架的良好整合。</li><li><strong>OXM模块</strong>：提供了一个支持对象/XML映射的抽象层实现，如JAXB、Castor、XMLBeans、JiBX和XStream。</li><li><strong>JMS模块</strong>：指Java消息传递服务，包含使用和产生消息的特性，自Spring 4.1版本以后，提供了与Spring-messaging模块的集成。</li><li><strong>Transactions模块</strong>：支持对实现特殊接口以及所有POJO类的编程和声明式的事务管理。</li></ul></blockquote><h3 id="3-Web层（Web）"><a href="#3-Web层（Web）" class="headerlink" title="3. Web层（Web）"></a>3. Web层（Web）</h3><p>Web层包括WebSocket、Servlet、Web和Portlet模块，介绍如下：</p><ul><li><strong>Web模块</strong>：提供了基础的针对Web开发的集成特性，例如多方文件上传，利用Servlet监听器进行IoC容器初始化以及Web应用上下文。</li><li><strong>Servlet模块</strong>：也称做Spring-webmvc模块，包含Spring的模型-视图-控制器（MVC）和REST Web Services实现的Web应用程序。</li><li><strong>WebSocket模块</strong>：Spring 4.0以后新增功能，提供了WebSocket和SockJS的实现，以及对STOMP的支持。</li><li><strong>Portlet模块</strong>：类似Servlet模块的功能，提供了Portlet环境下的MVC实现。</li></ul><h3 id="4-其他模块（Other-Modules）"><a href="#4-其他模块（Other-Modules）" class="headerlink" title="4. 其他模块（Other Modules）"></a>4. 其他模块（Other Modules）</h3><p>Spring的其他模块还有AOP、Aspects、Instrumentation、Messaging以及Test模块，介绍如下：</p><blockquote><ul><li><strong>AOP模块</strong>：提供了面向方面编程的支持，允许定义方法拦截器和切入点，将代码按照功能进行分离，以降低耦合性。</li><li><strong>Aspects模块</strong>：提供了与AspectJ的集成功能，Aspect是一个功能强大且成熟的面向方面编程的框架。</li><li><strong>Instrumentation模块</strong>：提供了类工具的支持和类加载器的实现，可以在特定的应用服务器中使用。</li><li><strong>Messaging模块</strong>：Spring 4.0以后新增的模块，提供了对消息传递体系结构和协议的支持。</li><li><strong>Test模块</strong>：提供了对单元测试和集成测试的支持。</li></ul></blockquote><h2 id="spring的核心机制-依赖注入-控制反转"><a href="#spring的核心机制-依赖注入-控制反转" class="headerlink" title="spring的核心机制:依赖注入/控制反转"></a>spring的核心机制:依赖注入/控制反转</h2><h3 id="什么是IoC（控制反转）？"><a href="#什么是IoC（控制反转）？" class="headerlink" title="什么是IoC（控制反转）？"></a>什么是IoC（控制反转）？</h3><p>IoC（Inversion of Control，控制反转）是一种<code>设计原则</code>，<code>它将对象的创建和管理的控制权从应用程序代码转移到框架或容器中</code>。这样，容器负责对象的生命周期管理，使得代码更加灵活和可测试。</p><p><strong>如何实现控制反转？</strong></p><p>控制反转主要通过以下两种方式实现：</p><ol><li><p><strong>依赖注入（Dependency Injection，DI）</strong>：</p><ul><li>通过将对象的依赖关系在运行时注入到对象中，而不是在对象内部创建依赖。可以通过构造函数、属性或方法实现。</li></ul></li><li><p><strong>服务定位器（Service Locator）</strong>：</p><ul><li>提供一个集中式的注册表来查找和获取服务（对象）。虽然实现了控制反转，但通常不如依赖注入灵活，因为仍需显式请求服务。</li></ul></li></ol><h3 id="什么是依赖注入？"><a href="#什么是依赖注入？" class="headerlink" title="什么是依赖注入？"></a>什么是依赖注入？</h3><p>依赖注入是一种<code>设计模式</code>，<code>允许在运行时将对象的依赖关系注入到对象中，而不是在对象内部创建这些依赖</code>。这种方式降低了对象之间的耦合，提高了代码的可测试性和可维护性。<br>好的，下面我们以<code>AdminInfo</code>类为例，讲解依赖注入的几种主要类型。</p><h3 id="依赖注入的类型"><a href="#依赖注入的类型" class="headerlink" title="依赖注入的类型"></a>依赖注入的类型</h3><p>依赖注入主要有三种类型：<code>构造函数注入</code>、<code>属性注入</code>和<code>方法注入</code>。我们将分别通过<code>AdminInfo</code>类的例子来说明这三种类型。</p><h4 id="1-构造函数注入"><a href="#1-构造函数注入" class="headerlink" title="1. 构造函数注入"></a>1. 构造函数注入</h4><p>构造函数注入是通过类的构造函数将依赖对象传递给目标对象。在创建对象时，依赖关系在构造时就被注入。</p><p><strong>示例代码</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ssm.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AdminInfo</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String pwd;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 默认构造函数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AdminInfo</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 带参数的构造函数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AdminInfo</span><span class="params">(String name, String pwd)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.pwd = pwd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打印方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(id + <span class="string">&quot;--&quot;</span> + name + <span class="string">&quot; -- &quot;</span> + pwd);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.ssm.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ssm.entity.AdminInfo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AdminService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> AdminInfo adminInfo;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过构造函数注入AdminInfo</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AdminService</span><span class="params">(AdminInfo adminInfo)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.adminInfo = adminInfo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">displayAdminInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        adminInfo.print();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">AdminInfo</span> <span class="variable">admin</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AdminInfo</span>(<span class="string">&quot;admin&quot;</span>, <span class="string">&quot;password&quot;</span>);</span><br><span class="line">        <span class="type">AdminService</span> <span class="variable">service</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AdminService</span>(admin); <span class="comment">// 依赖注入</span></span><br><span class="line">        service.displayAdminInfo(); <span class="comment">// 输出: 0--admin -- password</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-属性注入"><a href="#2-属性注入" class="headerlink" title="2. 属性注入"></a>2. 属性注入</h4><p>属性注入是通过公共属性或setter方法将依赖对象注入到目标对象中。这种方式在对象创建后，可以随时修改依赖关系。</p><p><strong>示例代码</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ssm.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AdminInfo</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String pwd;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 默认构造函数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AdminInfo</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 带参数的构造函数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AdminInfo</span><span class="params">(String name, String pwd)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.pwd = pwd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打印方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(id + <span class="string">&quot;--&quot;</span> + name + <span class="string">&quot; -- &quot;</span> + pwd);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.ssm.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ssm.entity.AdminInfo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AdminService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> AdminInfo adminInfo;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Setter方法进行属性注入</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAdminInfo</span><span class="params">(AdminInfo adminInfo)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.adminInfo = adminInfo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">displayAdminInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        adminInfo.print();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">AdminInfo</span> <span class="variable">admin</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AdminInfo</span>(<span class="string">&quot;admin&quot;</span>, <span class="string">&quot;password&quot;</span>);</span><br><span class="line">        <span class="type">AdminService</span> <span class="variable">service</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AdminService</span>();</span><br><span class="line">        service.setAdminInfo(admin); <span class="comment">// 通过setter方法注入</span></span><br><span class="line">        service.displayAdminInfo(); <span class="comment">// 输出: 0--admin -- password</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-方法注入"><a href="#3-方法注入" class="headerlink" title="3. 方法注入"></a>3. 方法注入</h4><p>方法注入是通过方法参数将依赖对象传递给目标对象的方法。这种方式适用于需要在特定方法中使用依赖的情况。</p><p><strong>示例代码</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ssm.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AdminInfo</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String pwd;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 默认构造函数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AdminInfo</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 带参数的构造函数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AdminInfo</span><span class="params">(String name, String pwd)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.pwd = pwd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打印方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(id + <span class="string">&quot;--&quot;</span> + name + <span class="string">&quot; -- &quot;</span> + pwd);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.ssm.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ssm.entity.AdminInfo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AdminService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">displayAdminInfo</span><span class="params">(AdminInfo adminInfo)</span> &#123;</span><br><span class="line">        adminInfo.print();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">AdminInfo</span> <span class="variable">admin</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AdminInfo</span>(<span class="string">&quot;admin&quot;</span>, <span class="string">&quot;password&quot;</span>);</span><br><span class="line">        <span class="type">AdminService</span> <span class="variable">service</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AdminService</span>();</span><br><span class="line">        service.displayAdminInfo(admin); <span class="comment">// 输出: 0--admin -- password</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>构造函数注入</strong>：在对象创建时通过构造函数传入依赖，适合于必须依赖的情况。</li><li><strong>属性注入</strong>：通过setter方法注入依赖，适合于可选依赖或需要在对象创建后修改依赖的情况。</li><li><strong>方法注入</strong>：通过方法参数传入依赖，适合于在特定方法中使用依赖的情况。</li></ul><h2 id="Spring-Bean的装配"><a href="#Spring-Bean的装配" class="headerlink" title="Spring Bean的装配"></a>Spring Bean的装配</h2><p>在Java Web应用中，<code>ContextLoaderListener</code>和<code>ContextLoaderServlet</code>是两种常用的载入方式，用于初始化Spring应用上下文。</p><h3 id="1-ContextLoaderListener"><a href="#1-ContextLoaderListener" class="headerlink" title="1. ContextLoaderListener"></a>1. ContextLoaderListener</h3><p><code>ContextLoaderListener</code>是一个ServletContextListener，用于在Web应用启动时加载Spring的应用上下文。它通常用于加载根应用上下文，适合于整个应用共享的Bean。</p><p><strong>配置示例</strong>：</p><p>在<code>web.xml</code>中配置<code>ContextLoaderListener</code>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee </span></span></span><br><span class="line"><span class="string"><span class="tag">                             http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;3.1&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>/WEB-INF/applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 其他配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>使用示例</strong>：</p><p>在<code>applicationContext.xml</code>中定义Bean：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans </span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.example.MyBean&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 其他Bean定义 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-ContextLoaderServlet"><a href="#2-ContextLoaderServlet" class="headerlink" title="2. ContextLoaderServlet"></a>2. ContextLoaderServlet</h3><p><code>ContextLoaderServlet</code>是一个Servlet，用于加载Spring的Web应用上下文。它通常用于处理特定的请求，并可以与Spring MVC结合使用。</p><p><strong>配置示例</strong>：</p><p>在<code>web.xml</code>中配置<code>ContextLoaderServlet</code>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee </span></span></span><br><span class="line"><span class="string"><span class="tag">                             http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;3.1&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springDispatcher<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springDispatcher<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>/WEB-INF/spring-servlet.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 其他配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>使用示例</strong>：</p><p>在<code>spring-servlet.xml</code>中定义Bean：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans </span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myController&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.example.MyController&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 其他Bean定义 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>ContextLoaderListener</strong>：用于加载根应用上下文，适合于整个应用共享的Bean。</li><li><strong>ContextLoaderServlet</strong>：用于加载Web应用上下文，通常与Spring MVC结合使用，处理特定请求。</li></ul><p><strong>以下是基于注解的Bean装配中常用的六个注解的简单介绍：</strong></p><h3 id="1-Component"><a href="#1-Component" class="headerlink" title="1. @Component"></a>1. <code>@Component</code></h3><ul><li><strong>作用</strong>：标识一个类为<code>Spring的组件</code>，Spring会自动扫描并注册为Bean。</li><li><strong>使用场景</strong>：用于任何Spring管理的组件，通常用于通用的类。</li></ul><h3 id="2-Repository"><a href="#2-Repository" class="headerlink" title="2. @Repository"></a>2. <code>@Repository</code></h3><ul><li><strong>作用</strong>：标识一个类为<code>数据访问层的组件</code>，通常用于持久化操作。</li><li><strong>使用场景</strong>：用于DAO（数据访问对象）类，Spring会为其提供异常转换等功能。</li></ul><h3 id="3-Service"><a href="#3-Service" class="headerlink" title="3. @Service"></a>3. <code>@Service</code></h3><ul><li><strong>作用</strong>：标识一个类为<code>服务层的组件</code>，通常用于业务逻辑处理。</li><li><strong>使用场景</strong>：用于Service类，表示该类包含业务逻辑。</li></ul><h3 id="4-Controller"><a href="#4-Controller" class="headerlink" title="4. @Controller"></a>4. <code>@Controller</code></h3><ul><li><strong>作用</strong>：标识一个类为<code>控制层的组件</code>，通常用于处理请求。</li><li><strong>使用场景</strong>：用于Spring MVC中的控制器类，负责接收和处理用户请求。</li></ul><h3 id="5-Autowired"><a href="#5-Autowired" class="headerlink" title="5. @Autowired"></a>5. <code>@Autowired</code></h3><ul><li><strong>作用</strong>：用于自动注入<code>Spring容器中的Bean</code>。</li><li><strong>使用场景</strong>：可以用于构造函数、属性或方法上，Spring会根据类型自动注入相应的Bean。</li></ul><h3 id="6-Resource"><a href="#6-Resource" class="headerlink" title="6. @Resource"></a>6. <code>@Resource</code></h3><ul><li><strong>作用</strong>：用于按名称<code>自动注入Bean</code>。</li><li><strong>使用场景</strong>：可以用于属性上，Spring会根据Bean的名称进行注入，通常用于与JNDI结合使用。<h2 id="Spring-ADP"><a href="#Spring-ADP" class="headerlink" title="Spring ADP"></a>Spring ADP</h2></li></ul><h3 id="OOP（面向对象编程）"><a href="#OOP（面向对象编程）" class="headerlink" title="OOP（面向对象编程）"></a>OOP（面向对象编程）</h3><ul><li><strong>定义</strong>：一种编程范式，通过“对象”来组织代码，<code>强调数据</code>和<code>方法的封装</code>。</li><li><strong>特点</strong>：封装、继承和多态。</li><li><strong>应用</strong>：适用于构建复杂系统，通过对象之间的交互实现功能。</li></ul><h3 id="AOP（面向切面编程）"><a href="#AOP（面向切面编程）" class="headerlink" title="AOP（面向切面编程）"></a>AOP（面向切面编程）</h3><ul><li><strong>定义</strong>：一种编程范式，关注<code>横切关注点</code>（如日志、事务等），通过切面来增强模块功能。</li><li><strong>特点</strong>：切面、切入点、通知和织入。</li><li><strong>应用</strong>：用于处理跨多个模块的关注点，提高代码的可维护性。</li></ul><p><strong>AOP的常用术语:</strong><br>好的，以下是AOP的常用术语及其英文单词：</p><ol><li><strong>切面（Aspect）</strong></li><li><strong>连接点（Join Point）</strong></li><li><strong>切入点（Pointcut）</strong></li><li><strong>通知（Advice</strong></li><li><strong>目标对象（Target Object）</strong></li><li><strong>代理对象（Proxy Object）</strong></li><li><strong>织入（Weaving）</strong></li></ol><h3 id="Xml注解：通知-给一段代码问是什么通知"><a href="#Xml注解：通知-给一段代码问是什么通知" class="headerlink" title="Xml注解：通知-给一段代码问是什么通知?"></a>Xml注解：通知-给一段代码问是什么通知?</h3><ol><li><strong>返回通知</strong>：<code>myAfterReturnAdvice</code></li><li><strong>异常通知</strong>：<code>MyThrowingAdvice</code></li><li><strong>环绕通知</strong>：<code>myAroundAdvice</code></li><li><strong>前置通知</strong>：<code>browse</code></li><li><strong>后置通知</strong>：<code>After</code><br>这些通知分别对应于AOP中的不同切面行为。</li></ol><h2 id="Spring的数据库的编程"><a href="#Spring的数据库的编程" class="headerlink" title="Spring的数据库的编程"></a>Spring的数据库的编程</h2><p>当然可以，以下是一个使用XML配置Spring JDBC数据源的示例：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans </span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置数据源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span> <span class="comment">&lt;!-- 配置驱动 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/mydb&quot;</span>/&gt;</span> <span class="comment">&lt;!-- 配置地址 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span> <span class="comment">&lt;!-- 配置用户名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;password&quot;</span>/&gt;</span> <span class="comment">&lt;!-- 配置密码 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 其他Bean配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Spring-MVC简介"><a href="#Spring-MVC简介" class="headerlink" title="Spring MVC简介"></a>Spring MVC简介</h2><h3 id="配置说明："><a href="#配置说明：" class="headerlink" title="配置说明："></a>配置说明：</h3><ul><li><strong>driverClassName</strong>：配置数据库驱动类。</li><li><strong>url</strong>：配置数据库连接地址。</li><li><strong>username</strong>：配置数据库用户名。</li><li><strong>password</strong>：配置数据库密码。</li></ul><p>这个XML配置示例展示了如何在Spring中设置JDBC数据源。<br>好的，以下是关于Spring MVC的简介：</p><h3 id="1-MVC这三个字母代表什么"><a href="#1-MVC这三个字母代表什么" class="headerlink" title="1. MVC这三个字母代表什么"></a>1. MVC这三个字母代表什么</h3><ul><li><strong>M</strong>：Model（模型） - 代表应用程序的数据和业务逻辑。</li><li><strong>V</strong>：View（视图） - 代表用户界面，负责展示数据。</li><li><strong>C</strong>：Controller（控制器） - 处理用户请求，协调模型和视图之间的交互。</li></ul><h3 id="2-配置文件springmvc-xml"><a href="#2-配置文件springmvc-xml" class="headerlink" title="2. 配置文件springmvc.xml"></a>2. 配置文件springmvc.xml</h3><p><code>springmvc.xml</code>是Spring MVC的配置文件，通常包含以下内容：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans </span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/mvc </span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 启用Spring MVC注解 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置视图解析器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/views/&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 其他Bean配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-Spring-MVC的请求流程"><a href="#3-Spring-MVC的请求流程" class="headerlink" title="3. Spring MVC的请求流程"></a>3. Spring MVC的请求流程</h3><p>Spring MVC的请求流程通常包括以下几个步骤：</p><ol><li><strong>请求到达DispatcherServlet</strong>：用户发送请求，首先到达前端控制器<code>DispatcherServlet</code>。</li><li><strong>请求映射</strong>：<code>DispatcherServlet</code>根据请求URL查找对应的处理器（Controller）。</li><li><strong>调用处理器</strong>：找到对应的Controller后，调用其处理方法。</li><li><strong>返回模型和视图</strong>：Controller处理完请求后，返回模型数据和视图名称。</li><li><strong>视图解析（看上方代码要考）</strong>：<code>DispatcherServlet</code>使用视图解析器将视图名称解析为具体的视图。</li><li><strong>渲染视图</strong>：最终，视图被渲染并返回给用户。<blockquote><p>一句话就是<code>请求到达</code>，<code>请求映射</code>，<code>调用处理器</code>，<code>返回模型</code>，<code>视图解析</code>，<code>渲染视图</code><br><code>@RequestMapping</code> 是 Spring MVC 中用于处理请求的注解，主要用于将 HTTP 请求映射到特定的处理方法或类上。以下是关于 <code>@RequestMapping</code> 的一些关键点：</p><h2 id="Spring-MVC注解-RequestMapping"><a href="#Spring-MVC注解-RequestMapping" class="headerlink" title="Spring MVC注解  @RequestMapping"></a>Spring MVC注解  @RequestMapping</h2><h3 id="1-基本用法"><a href="#1-基本用法" class="headerlink" title="1. 基本用法"></a>1. 基本用法</h3></blockquote></li></ol><ul><li><strong>类级别</strong>：可以在控制器类上使用，表示该类中的所有请求处理方法的公共路径前缀。</li><li><strong>方法级别</strong>：可以在具体的方法上使用，表示该方法处理的特定请求。</li></ul><h3 id="2-示例代码"><a href="#2-示例代码" class="headerlink" title="2. 示例代码"></a>2. 示例代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span> <span class="comment">// 类级别的请求映射</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/get&quot;, method = RequestMethod.GET)</span> <span class="comment">// 方法级别的请求映射</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUser</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;获取用户信息&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/create&quot;, method = RequestMethod.POST)</span> <span class="comment">// 方法级别的请求映射</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">createUser</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;创建用户成功&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>@RequestMapping</code> 是 Spring MVC 中非常重要的注解，用于定义请求的路由和处理逻辑。<br>Spring MVC 标签库主要用于在 JSP 页面中简化与 Spring MVC 的集成，提供了一些方便的标签来处理表单、URL、消息等。以下是一些常用的 Spring MVC 标签库及其功能：</p><h2 id="Spring-MVC-标签库"><a href="#Spring-MVC-标签库" class="headerlink" title="Spring MVC 标签库"></a>Spring MVC 标签库</h2><h3 id="1-引入标签库"><a href="#1-引入标签库" class="headerlink" title="1. 引入标签库"></a>1. 引入标签库</h3><p>在 JSP 页面中使用 Spring MVC 标签库之前，需要引入相关的标签库：<br>（引库可以不用看）<br><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ taglib uri=<span class="string">&quot;http://www.springframework.org/tags&quot;</span> prefix=<span class="string">&quot;spring&quot;</span> %&gt;</span><br><span class="line">&lt;%@ taglib uri=<span class="string">&quot;http://www.springframework.org/tags/form&quot;</span> prefix=<span class="string">&quot;form&quot;</span> %&gt;</span><br></pre></td></tr></table></figure></p><h3 id="2-常用标签"><a href="#2-常用标签" class="headerlink" title="2. 常用标签"></a>2. 常用标签</h3><h4 id="1-lt-form-form-gt"><a href="#1-lt-form-form-gt" class="headerlink" title="1. &lt;form:form&gt;"></a>1. <code>&lt;form:form&gt;</code></h4><ul><li>用于创建表单，自动绑定表单数据到模型对象。</li><li>示例：<figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;form:form modelAttribute=<span class="string">&quot;user&quot;</span> action=<span class="string">&quot;create&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">    &lt;form:input path=<span class="string">&quot;username&quot;</span> /&gt;</span><br><span class="line">    &lt;form:input path=<span class="string">&quot;password&quot;</span> type=<span class="string">&quot;password&quot;</span> /&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;提交&quot;</span> /&gt;</span><br><span class="line">&lt;/form:form&gt;</span><br></pre></td></tr></table></figure></li></ul><h4 id="2-lt-form-input-gt"><a href="#2-lt-form-input-gt" class="headerlink" title="2. &lt;form:input&gt;"></a>2. <code>&lt;form:input&gt;</code></h4><ul><li>用于创建输入框，绑定到模型属性。</li><li>示例：<figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;form:input path=<span class="string">&quot;email&quot;</span> /&gt;</span><br></pre></td></tr></table></figure></li></ul><h4 id="3-lt-form-select-gt"><a href="#3-lt-form-select-gt" class="headerlink" title="3. &lt;form:select&gt;"></a>3. <code>&lt;form:select&gt;</code></h4><ul><li>用于创建下拉选择框，绑定到模型属性。</li><li>示例：<figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;form:select path=<span class="string">&quot;gender&quot;</span>&gt;</span><br><span class="line">    &lt;form:option value=<span class="string">&quot;male&quot;</span>&gt;男&lt;/form:option&gt;</span><br><span class="line">    &lt;form:option value=<span class="string">&quot;female&quot;</span>&gt;女&lt;/form:option&gt;</span><br><span class="line">&lt;/form:select&gt;</span><br></pre></td></tr></table></figure></li></ul><h4 id="4-lt-form-checkbox-gt"><a href="#4-lt-form-checkbox-gt" class="headerlink" title="4. &lt;form:checkbox&gt;"></a>4. <code>&lt;form:checkbox&gt;</code></h4><ul><li>用于创建复选框，绑定到模型属性。</li><li>示例：<figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;form:checkbox path=<span class="string">&quot;subscribe&quot;</span> /&gt; 订阅新闻</span><br></pre></td></tr></table></figure></li></ul><h4 id="5-lt-form-errors-gt"><a href="#5-lt-form-errors-gt" class="headerlink" title="5. &lt;form:errors&gt;"></a>5. <code>&lt;form:errors&gt;</code></h4><ul><li>用于显示表单验证错误信息。</li><li>示例：<figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;form:errors path=<span class="string">&quot;username&quot;</span> cssClass=<span class="string">&quot;error&quot;</span> /&gt;</span><br></pre></td></tr></table></figure></li></ul><h2 id="类型转换，数抗脆式化和数据校验"><a href="#类型转换，数抗脆式化和数据校验" class="headerlink" title="类型转换，数抗脆式化和数据校验"></a>类型转换，数抗脆式化和数据校验</h2><h3 id="1-类型转换"><a href="#1-类型转换" class="headerlink" title="1. 类型转换"></a>1. 类型转换</h3><p><strong>类型转换是将请求参数转换为控制器方法所需的Java类型的过程。Spring MVC提供了自动类型转换的功能。</strong></p><ul><li><p><strong>使用示例</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/submit&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">submit</span><span class="params">(<span class="meta">@RequestParam(&quot;age&quot;)</span> <span class="type">int</span> age)</span> &#123;</span><br><span class="line">    <span class="comment">// age参数会自动转换为int类型</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>自定义类型转换</strong>：可以通过实现<code>Converter</code>接口来自定义类型转换。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringToUserConverter</span> <span class="keyword">implements</span> <span class="title class_">Converter</span>&lt;String, User&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">convert</span><span class="params">(String source)</span> &#123;</span><br><span class="line">        <span class="comment">// 自定义转换逻辑</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>(source);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-数据格式化"><a href="#2-数据格式化" class="headerlink" title="2. 数据格式化"></a>2. 数据格式化</h3><p><code>数据格式化用于将对象属性格式化为字符串，或将字符串解析为对象属性。Spring提供了</code>@InitBinder<code>注解来注册自定义的格式化器。</code></p><ul><li><p><strong>使用示例</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@InitBinder</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initBinder</span><span class="params">(WebDataBinder binder)</span> &#123;</span><br><span class="line">    binder.registerCustomEditor(Date.class, <span class="keyword">new</span> <span class="title class_">CustomDateEditor</span>(<span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd&quot;</span>), <span class="literal">true</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>自定义格式化</strong>：可以实现<code>PropertyEditor</code>接口或使用<code>@InitBinder</code>来注册格式化器。</p></li></ul><h3 id="3-数据校验"><a href="#3-数据校验" class="headerlink" title="3. 数据校验"></a>3. 数据校验</h3><p><strong>数据校验用于验证用户输入的数据是否符合预期的格式或规则</strong>。Spring MVC支持JSR-303（Bean Validation）规范。</p><ul><li><strong>使用示例</strong>：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Min(18)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@PostMapping(&quot;/register&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">register</span><span class="params">(<span class="meta">@Valid</span> <span class="meta">@ModelAttribute</span> User user, BindingResult result)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (result.hasErrors()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;registerForm&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 处理注册逻辑</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="SpringMVC-的文件上传和下载"><a href="#SpringMVC-的文件上传和下载" class="headerlink" title="SpringMVC 的文件上传和下载"></a>SpringMVC 的文件上传和下载</h2></li></ul><h3 id="1-Spring-MVC-文件上传的作用与配置"><a href="#1-Spring-MVC-文件上传的作用与配置" class="headerlink" title="1. Spring MVC 文件上传的作用与配置"></a>1. Spring MVC 文件上传的作用与配置</h3><h4 id="1-1-配置文件扫描"><a href="#1-1-配置文件扫描" class="headerlink" title="1.1 配置文件扫描"></a>1.1 配置文件扫描</h4><p>在Spring配置文件中，需要启用文件上传的支持，通常通过<code>MultipartResolver</code>来实现。可以使用<code>CommonsMultipartResolver</code>或<code>StandardServletMultipartResolver</code>。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;multipartResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxUploadSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10485760&quot;</span>/&gt;</span> <span class="comment">&lt;!-- 设置最大上传文件大小 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="1-2-文件解析类"><a href="#1-2-文件解析类" class="headerlink" title="1.2 文件解析类"></a>1.2 文件解析类</h4><p><code>CommonsMultipartResolver</code>是基于Apache Commons FileUpload库的实现，负责解析上传的文件。它会将上传的文件封装为<code>MultipartFile</code>对象，方便后续处理。</p><h3 id="2-上传文件的主要代码"><a href="#2-上传文件的主要代码" class="headerlink" title="2. 上传文件的主要代码"></a>2. 上传文件的主要代码</h3><p>在控制器中处理文件上传时，通常会使用<code>MultipartFile</code>对象。以下是一个简单的文件上传示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.MultipartFile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileUploadController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/upload&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">handleFileUpload</span><span class="params">(<span class="meta">@RequestParam(&quot;file&quot;)</span> MultipartFile file)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!file.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 指定文件保存路径</span></span><br><span class="line">                <span class="type">File</span> <span class="variable">destinationFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;/path/to/upload/directory/&quot;</span> + file.getOriginalFilename());</span><br><span class="line">                <span class="comment">// 将上传的文件保存到指定路径</span></span><br><span class="line">                file.transferTo(destinationFile);</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;文件上传成功：&quot;</span> + destinationFile.getAbsolutePath();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;文件上传失败：&quot;</span> + e.getMessage();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;上传的文件为空&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码说明：</p><ul><li><strong><code>@RequestParam(&quot;file&quot;) MultipartFile file</code></strong>：接收上传的文件。</li><li><strong><code>file.transferTo(destinationFile)</code></strong>：将上传的文件保存到指定的路径。<br>在Spring MVC中，国际化和拦截器是两个重要的功能模块，分别用于处理多语言支持和请求的拦截与处理。以下是对这两个功能的详细介绍：<h2 id="SpingMVC的国际化和拦截器"><a href="#SpingMVC的国际化和拦截器" class="headerlink" title="SpingMVC的国际化和拦截器"></a>SpingMVC的国际化和拦截器</h2><h3 id="1-Spring-MVC的国际化"><a href="#1-Spring-MVC的国际化" class="headerlink" title="1. Spring MVC的国际化"></a>1. Spring MVC的国际化</h3></li></ul><p>国际化（i18n）是指支持多种语言和地区的功能。Spring MVC通过<code>MessageSource</code>接口和相关配置来实现国际化。</p><h4 id="1-1-配置国际化支持"><a href="#1-1-配置国际化支持" class="headerlink" title="1.1 配置国际化支持"></a>1.1 配置国际化支持</h4><p>在Spring配置文件中，需要配置<code>MessageSource</code>，通常使用<code>ResourceBundleMessageSource</code>来加载消息资源文件。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;messageSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.context.support.ResourceBundleMessageSource&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basename&quot;</span> <span class="attr">value</span>=<span class="string">&quot;messages&quot;</span>/&gt;</span> <span class="comment">&lt;!-- 指定资源文件的基础名称 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="1-2-创建消息资源文件"><a href="#1-2-创建消息资源文件" class="headerlink" title="1.2 创建消息资源文件"></a>1.2 创建消息资源文件</h4><p>在项目的<code>src/main/resources</code>目录下创建<code>messages.properties</code>、<code>messages_zh.properties</code>、<code>messages_en.properties</code>等文件，分别用于不同语言的消息。</p><p><strong>messages.properties</strong>（默认语言）<br><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">greeting</span>=<span class="string">Hello</span></span><br></pre></td></tr></table></figure></p><p><strong>messages_zh.properties</strong>（中文）<br><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">greeting</span>=<span class="string">你好</span></span><br></pre></td></tr></table></figure></p><h4 id="1-3-使用国际化消息"><a href="#1-3-使用国际化消息" class="headerlink" title="1.3 使用国际化消息"></a>1.3 使用国际化消息</h4><p>在控制器或视图中使用<code>MessageSource</code>来获取国际化消息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.MessageSource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestHeader;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GreetingController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MessageSource messageSource;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/greeting&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">greeting</span><span class="params">(<span class="meta">@RequestHeader(name = &quot;Accept-Language&quot;, required = false)</span> String locale)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> messageSource.getMessage(<span class="string">&quot;greeting&quot;</span>, <span class="literal">null</span>, locale);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-Spring-MVC的拦截器"><a href="#2-Spring-MVC的拦截器" class="headerlink" title="2. Spring MVC的拦截器"></a>2. Spring MVC的拦截器</h3><p>拦截器用于在请求到达控制器之前或响应返回之前进行处理，常用于日志记录、权限检查等。</p><h4 id="2-1-创建拦截器"><a href="#2-1-创建拦截器" class="headerlink" title="2.1 创建拦截器"></a>2.1 创建拦截器</h4><p>实现<code>HandlerInterceptor</code>接口，重写相应的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 在请求处理之前执行</span></span><br><span class="line">        System.out.println(<span class="string">&quot;请求路径: &quot;</span> + request.getRequestURI());</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">// 返回true表示继续处理请求，返回false则终止请求</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 在请求处理之后执行</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 在整个请求完成之后执行</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-配置拦截器（拦截器配置代码要考）"><a href="#2-2-配置拦截器（拦截器配置代码要考）" class="headerlink" title="2.2 配置拦截器（拦截器配置代码要考）"></a>2.2 配置拦截器（拦截器配置代码要考）</h4><p>在Spring配置文件中配置拦截器。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.example.MyInterceptor&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure><p>或者在Java配置中使用<code>WebMvcConfigurer</code>接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> <span class="title class_">MyInterceptor</span>()).addPathPatterns(<span class="string">&quot;/**&quot;</span>); <span class="comment">// 拦截所有请求</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MyBatis 是一个持久层框架，主要用于简化数据库操作。以下是关于 MyBatis 中 SQL 语句的基本用法，包括插入、查询、更新和删除操作，以及映射的相关内容。</p><h2 id="Mybatis"><a href="#Mybatis" class="headerlink" title="Mybatis"></a>Mybatis</h2><h3 id="1-SQL-语句"><a href="#1-SQL-语句" class="headerlink" title="1. SQL 语句"></a>1. SQL 语句</h3><h4 id="1-1-根据-ID-查询词数据"><a href="#1-1-根据-ID-查询词数据" class="headerlink" title="1.1 根据 ID 查询词数据"></a>1.1 根据 ID 查询词数据</h4><p>使用 <code>&lt;select&gt;</code> 标签来<code>查询数据</code>。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectWordById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Word&quot;</span>&gt;</span></span><br><span class="line">    SELECT * FROM words WHERE id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>id</strong>：查询的唯一标识符。</li><li><strong>parameterType</strong>：输入参数的类型。</li><li><strong>resultType</strong>：返回结果的类型。</li></ul><h4 id="1-2-新增一条数据"><a href="#1-2-新增一条数据" class="headerlink" title="1.2 新增一条数据"></a>1.2 新增一条数据</h4><p>使用 <code>&lt;insert&gt;</code> 标签来<code>插入数据</code>。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertWord&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Word&quot;</span>&gt;</span></span><br><span class="line">    INSERT INTO words (word, definition) VALUES (#&#123;word&#125;, #&#123;definition&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>parameterType</strong>：传入的对象类型，通常是一个 Java Bean。</li></ul><h4 id="1-3-修改数据"><a href="#1-3-修改数据" class="headerlink" title="1.3 修改数据"></a>1.3 修改数据</h4><p>使用 <code>&lt;update&gt;</code> 标签来<code>更新数据</code>。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateWord&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Word&quot;</span>&gt;</span></span><br><span class="line">    UPDATE words SET definition = #&#123;definition&#125; WHERE id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="1-4-删除数据"><a href="#1-4-删除数据" class="headerlink" title="1.4 删除数据"></a>1.4 删除数据</h4><p>使用 <code>&lt;delete&gt;</code> 标签来<code>删除数据</code>。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteWord&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span>&gt;</span></span><br><span class="line">    DELETE FROM words WHERE id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-映射"><a href="#2-映射" class="headerlink" title="2. 映射"></a>2. 映射</h3><p>p166配置映射<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta"><span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta"><span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.mybatis.mapper.UserInfoMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 根据用户编号获取用户信息 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findUserInfoById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;userInfoMap&quot;</span>&gt;</span></span><br><span class="line">        SELECT *</span><br><span class="line">        FROM user_info WHERE id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">&quot;UserInfo&quot;</span> <span class="attr">id</span>=<span class="string">&quot;userInfoMap&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;uid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;uname&quot;</span> <span class="attr">column</span>=<span class="string">&quot;userName&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;upass&quot;</span> <span class="attr">column</span>=<span class="string">&quot;password&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="关联映射"><a href="#关联映射" class="headerlink" title="关联映射"></a>关联映射</h2><h3 id="1-一对一映射"><a href="#1-一对一映射" class="headerlink" title="1. 一对一映射"></a>1. 一对一映射</h3><ul><li><strong>定义</strong>：一个对象对应一个对象。</li><li><strong>例子</strong>：一个用户有一个个人资料。</li></ul><h3 id="2-一对多映射"><a href="#2-一对多映射" class="headerlink" title="2. 一对多映射"></a>2. 一对多映射</h3><ul><li><strong>定义</strong>：一个对象对应多个对象。</li><li><strong>例子</strong>：一个用户可以有多个订单。</li></ul><h3 id="3-多对多映射"><a href="#3-多对多映射" class="headerlink" title="3. 多对多映射"></a>3. 多对多映射</h3><ul><li><strong>定义</strong>：多个对象可以对应多个对象。</li><li><strong>例子</strong>：一个用户可以有多个角色，而一个角色也可以被多个用户拥有。</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li><strong>一对一</strong>：一对一。</li><li><strong>一对多</strong>：一对多。</li><li><strong>多对多</strong>：多对多。<br>这样好记多了吧。<h2 id="动态SQL"><a href="#动态SQL" class="headerlink" title="动态SQL"></a>动态SQL</h2>动态 SQL 是指在 SQL 查询中根据条件动态生成不同的 SQL 语句。在 MyBatis 中，可以使用 <code>&lt;if&gt;</code>、<code>&lt;where&gt;</code> 和 <code>&lt;set&gt;</code> 标签来实现动态 SQL。</li></ul><h3 id="1-lt-if-gt-标签"><a href="#1-lt-if-gt-标签" class="headerlink" title="1. &lt;if&gt; 标签"></a>1. <code>&lt;if&gt;</code> 标签</h3><p><strong>功能</strong>：根据条件判断是否生成某个 SQL 片段。</p><p><strong>使用方法</strong>：</p><ul><li>在 <code>&lt;if&gt;</code> 标签中，可以使用 <code>test</code> 属性来指定条件表达式。</li><li>如果条件为 true，则生成 <code>&lt;if&gt;</code> 标签内的 SQL 片段。</li></ul><p><strong>示例</strong>：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findUsers&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">    SELECT * FROM users</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;userName != null&quot;</span>&gt;</span></span><br><span class="line">            AND userName = #&#123;userName&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;age != null&quot;</span>&gt;</span></span><br><span class="line">            AND age = #&#123;age&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><br>在这个示例中，如果 <code>userName</code> 或 <code>age</code> 不为 null，则相应的条件会被添加到 SQL 查询中。</p><h3 id="2-lt-where-gt-标签"><a href="#2-lt-where-gt-标签" class="headerlink" title="2. &lt;where&gt; 标签"></a>2. <code>&lt;where&gt;</code> 标签</h3><p><strong>功能</strong>：自动处理 SQL 查询中的 WHERE 子句，避免手动添加 AND 或 OR。</p><p><strong>使用方法</strong>：</p><ul><li><code>&lt;where&gt;</code> 标签会自动在生成的 SQL 语句前添加 “WHERE” 关键字，并在第一个条件前自动添加 “AND” 或 “OR”。</li></ul><p><strong>示例</strong>：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findUsers&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">    SELECT * FROM users</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;userName != null&quot;</span>&gt;</span></span><br><span class="line">            userName = #&#123;userName&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;age != null&quot;</span>&gt;</span></span><br><span class="line">            AND age = #&#123;age&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><br>在这个示例中，如果 <code>userName</code> 不为 null，<code>WHERE</code> 后面会直接跟上 <code>userName = #&#123;userName&#125;</code>，如果 <code>age</code> 不为 null，<code>AND age = #&#123;age&#125;</code> 会被添加。</p><h3 id="3-lt-set-gt-标签"><a href="#3-lt-set-gt-标签" class="headerlink" title="3. &lt;set&gt; 标签"></a>3. <code>&lt;set&gt;</code> 标签</h3><p><strong>功能</strong>：用于动态生成 UPDATE 语句中的 SET 子句。</p><p><strong>使用方法</strong>：</p><ul><li><code>&lt;set&gt;</code> 标签会自动处理 SET 子句中的逗号，避免手动添加。</li></ul><p><strong>示例</strong>：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">    UPDATE users</span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;userName != null&quot;</span>&gt;</span></span><br><span class="line">            userName = #&#123;userName&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;age != null&quot;</span>&gt;</span></span><br><span class="line">            age = #&#123;age&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    WHERE id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><br>在这个示例中，如果 <code>userName</code> 或 <code>age</code> 不为 null，相应的字段会被更新，并且逗号会自动处理。<br><strong>总结如下</strong></p><ul><li><strong><code>&lt;if&gt;</code></strong>：根据条件生成 SQL 片段。</li><li><strong><code>&lt;where&gt;</code></strong>：自动处理 WHERE 子句。</li><li><strong><code>&lt;set&gt;</code></strong>：自动处理 UPDATE 语句中的 SET 子句。<h2 id="Spring整合MyBaits"><a href="#Spring整合MyBaits" class="headerlink" title="Spring整合MyBaits"></a>Spring整合MyBaits</h2>这部分建议直接看书得了p222~223xml配置<br>p22应用</li></ul>]]></content>
      
      
      <categories>
          
          <category> 杂项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安卓开发考试题库</title>
      <link href="/2025/01/02/%E5%AE%89%E5%8D%93%E5%BC%80%E5%8F%91%E8%80%83%E8%AF%95%E9%A2%98%E5%BA%93/"/>
      <url>/2025/01/02/%E5%AE%89%E5%8D%93%E5%BC%80%E5%8F%91%E8%80%83%E8%AF%95%E9%A2%98%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h1 id="安卓开发考试题库"><a href="#安卓开发考试题库" class="headerlink" title="安卓开发考试题库"></a>安卓开发考试题库</h1><blockquote><p>直接背好吧，我自己也不会去看解析，答案直接给<br>时间也不多了，在这提前祝大家新年快乐，加油把这最后一科秒了吧</p></blockquote><p>我也求求了，不要让我反复更新了QAQ</p><blockquote><p>大题的话，这个还真不好背，正常人都是Ctrl大法完成的，尽量背吧</p><h1 id="单选题"><a href="#单选题" class="headerlink" title="单选题"></a>单选题</h1></blockquote><ol><li><p>Android查看应用程序日志的工具是(   <strong><code>A</code></strong>   )</p><ul><li><strong>A、 logcat</strong>     </li><li>B、 console</li><li>C、 ddms       </li><li>D、 tomcat</li></ul></li><li><p>在程序中输出一条日志，下面代码正确的是(  <strong><code>B</code></strong>   )</p><ul><li>A、Log.i(context,”msg”);   </li><li><strong>B、Log.i(“tag”,”msg”);</strong></li><li>C、Log.i(“msg”);</li><li>D、Log.i();</li></ul></li><li><p>Android项目中放置常量的string.xml位于哪个目录下(  <strong><code>C</code></strong>   )</p><ul><li>A、 res/layout    </li><li>B、 layout   </li><li><strong>C、res/values</strong>   </li><li>D、assets</li></ul></li><li><p>ConstraintLayout中当你想要让多个视图以等宽或等高的方式排列时，你应该使用什么？(   <strong><code>C</code></strong>   )</p><ul><li>A. app:layout_constraintWidth_default=”match_parent”</li><li>B. app:layout_constraintHeight_default=”wrap_content”</li><li><strong>C. app:layout_constraintDimensionRatio=”1:1”</strong></li><li>D. app:layout_constraintWidth_percent 和app:layout_constraintHeight_percent</li></ul></li><li><p>如果在帧布局FrameLayout中放入三个所有属性值相同按钮，能够在屏幕上显示的是(  <strong><code>A</code></strong>  ) </p><ul><li><strong>A、最后一个被添加的按钮</strong>      </li><li>B、第一个被添加的按钮     </li><li>C、第二个被动添加的按钮      </li><li>D、三个按钮都能显示</li></ul></li><li><p>为了给一个线性布局设置自身相对于父控件的位置，应该怎么设置(   <strong><code>A</code></strong>   )</p><ul><li><strong>A、 android:layout_gravity=”right”</strong>    </li><li>B、 android:gravity=”right”</li><li>C、 android:orientation=”vertical”</li><li>D、 android:layout_height=”match_parent”    </li></ul></li><li><p>在程序中得到一个按钮对象b后，向此按钮添加点击事件，下面代码正确的是（   <strong><code>A</code></strong>   ）</p><ul><li><strong>A、 b.setOnClickListener( )</strong></li><li>B、 b.setOnclickListener( )</li><li>C、 b.setOnclick( )</li><li>D、 b.setOnLongClickListener( )</li></ul></li><li><p>下列不属于android布局的是 (   <strong><code>C</code></strong>   )</p><ul><li>A、FrameLayout </li><li>B、LinearLayout </li><li><strong>C、TableRow</strong></li><li>D、ConstraintLayout</li></ul></li><li><p>关于Handler的说法不正确的是(   <strong><code>A</code></strong>   )[本人认为是D]</p><ul><li><strong>A、它实现不同进程间通信的一种机制</strong></li><li>B、 它避免了在新线程中刷新UI的操作</li><li>C、 它采用队列的方式来存储Message</li><li>D、 它实现不同线程间通信的一种机制</li></ul></li><li><p>Activity生命周期中最后一个需要执行的方法是什么（   <strong><code>D</code></strong>   ）</p><ul><li>A、onStart                    </li><li>B、onCreate </li><li>C、onStop                     </li><li><strong>D、onDestroy</strong></li></ul></li><li><p>Android是如何组织Activity的（   <strong><code>B</code></strong>   ）</p><ul><li>A、 以堆的方式组织Activity          </li><li><strong>B、 以栈的方式组织Activity</strong></li><li>C、 以树形方式组织Activity          </li><li>D、 以链式方式组织Activity</li></ul></li><li><p>一个应用程序如果要访问另一个应用程序的数据库，需要通过（   <strong><code>C</code></strong>   ）来实现</p><ul><li>A、BroadcastReceiver          </li><li>B、Activity</li><li><strong>C、ContentProvider</strong>            </li><li>D、Service</li></ul></li><li><p>RecyclerView.Adapter的哪个方法用于创建新的ViewHolder实例(  <strong><code>A</code></strong>  )</p><ul><li><strong>A. onCreateViewHolder()</strong>    </li><li>B. onBindViewHolder()</li><li>C. getItemCount()          </li><li>D. onAttachedToRecyclerView()</li></ul></li><li><p>下列关于内存回收的说明，哪个是正确的（   <strong><code>B</code></strong>   ）                                    </p><ul><li>A.程序员必须创建一个线程来释放内存</li><li><strong>B.内存回收程序负责释放无用内存</strong></li><li>C.内存回收程序允许程序员直接释放内存</li><li>D.内存回收程序可以在指定的时间释放内存对象</li></ul></li><li><p>在Android Oreo (API level 26)及以上版本中，创建通知时必须指定什么(   <strong><code>B</code></strong>   )</p><ul><li>A. Notification ID        </li><li><strong>B. Notification Channel</strong></li><li>C. Notification Title     </li><li>D. Notification Icon</li></ul></li><li><p>Activity生命周期中第一个需要执行的方法是什么（   <strong><code>B</code></strong>   ）</p><ul><li>A、onStart    </li><li>B、<strong>onCreate</strong> </li><li>C、onReStart   </li><li>D、onResume </li></ul></li><li><p>关于线程说法不正确的是（   <strong><code>B</code></strong>   ）[本人认为是A]                                                  </p><ul><li>A、 在 android 中，我们可以在主线程中，创建一个新的线程</li><li><strong>B、 在创建的新线程中，它可以操作 UI 组件</strong></li><li>C、 新线程可以和 Handler 共同使用</li><li>D、 创建的 Handler 对象，它隶属于创建它的线程</li></ul></li><li><p>一个Intent对象调用getExtras( )方法返回的是一个什么类型（  <strong><code>D</code></strong>   ）</p><ul><li>A、int                         </li><li>B、string     </li><li>C、Serializable                </li><li><strong>D、Bundle</strong></li></ul></li><li><p>关于service生命周期的onCreate()和onStartCommand()说法正确的是（   <strong><code>D</code></strong>   ）</p><ul><li>A、当第一次启动的时候先后调用onStartCommand()和onCreate()方法</li><li>B、当第一次启动的时候只会调用onCreate()方法</li><li>C、如果service已经启动，将先后调用onCreate()和onStartCommand()方法</li><li><strong>D、如果service已经启动，只会执行onStartCommand()方法，不再执行onCreate()方法</strong></li></ul></li><li><p>关于 BroadcastReceiver 的说法不正确的是（  <strong><code>B</code></strong>  ）</p><ul><li>A、是用来接收广播 Intent 的</li><li><strong>B、一个广播 Intent 只能被一个订阅了此广播的 BroadcastReceiver 所接收</strong></li><li>C、对有序广播，系统会根据接收者声明的优先级别按顺序逐个执行接收者</li><li>D、接收者声明的优先级别在的 android:priority 属性中声明，数值越大优先级别越高</li></ul></li><li><p>使用HttpUrlConnection实现移动互联时,设置读取超时属性的方法是（  <strong><code>B</code></strong>  ）</p><ul><li>A、setTimeout()                   </li><li><strong>B、setReadTimeout()</strong> </li><li>C、setConnectTimeout()             </li><li>D、setRequestMethod()</li></ul></li><li><p>在ConstraintLayout中，如何设置一个视图与父布局顶部对齐？(  <strong><code>A</code></strong>  )</p><ul><li><strong>A. app:layout_constraintTop_toTopOf=”parent”</strong></li><li>B. android:layout_alignParentTop=”true”</li><li>C. app:layout_constraintStart_toStartOf=”parent”</li><li>D. android:gravity=”top”</li></ul></li><li><p>以下属于调用摄像头硬件的权限的是：（  <strong><code>A</code></strong>  ）</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">A.&lt;uses-permission android:name=&quot;android.permission.CAMERA&quot;/&gt;</span><br><span class="line">B.&lt;uses-permission android:name=&quot;android.permission.MOUNT_UNMOUNT_FILESYSTEMS&quot; /&gt;</span><br><span class="line">C.&lt;uses-permission android:name=&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot;/&gt;</span><br><span class="line">D.&lt;uses-permission android:name=&quot;android.permission.INTERNET&quot;/&gt;</span><br></pre></td></tr></table></figure><ol><li><p>什么是Intent的主要用途？(  <strong><code>D</code></strong>  )</p><ul><li>A. 启动服务  </li><li>B. 发送广播  </li><li>C. 进行组件间通信  </li><li><strong>D. 所有上述选项</strong></li></ul></li><li><p>使用HttpURLConnection的Get方式请求数据时,下列哪个属性是必须设置的（  <strong><code>B</code></strong>  ）</p><ul><li>A、connection.setDoOutput(true)</li><li><strong>B、connection.connect()</strong></li><li>C、connection.setRequestMethod(“POST”)</li><li>D、connection.setDoInput(true)</li></ul></li><li><p>对于AlertDialog的描述不正确的是(  <strong><code>A</code></strong>  )</p><ul><li><strong>A、使用new关键字创建AlertDialog的实例</strong></li><li>B、对话框的显示需要调用show方法</li><li>C、setPositiveButton方法是用来加确定按钮的</li><li>D、setNegativeButton方法是用来加取消按钮的</li></ul></li><li><p>Android解析xml的方法中，将整个文件加载到内存中进行解析的是?(  <strong><code>C</code></strong>  )</p><ul><li>A、SAX    </li><li>B、PULL     </li><li><strong>C、DOM</strong>   </li><li>D 、JSON</li></ul></li><li><p>下列对SharePreferences存、取文件的说法中不正确的是：（  <strong><code>C</code></strong>  ）</p><ul><li>A、属于移动存储解决方案   </li><li>B、sharePreferences处理的就是key-value对  </li><li><strong>C、读取xml文件的路径是/sdcard/shared_prefx</strong>  </li><li>D、信息的保存格式是xml</li></ul></li><li><p>下列说法哪一个不正确（  <strong><code>B</code></strong>  ）</p><ul><li>A、Java程序经编译后会产生字节码    </li><li><strong>B、java虚拟机加载.java文件</strong></li><li>C、javac是编译的命令           </li><li>D、javadoc是文档化的命令</li></ul></li><li><p>关于Socket通讯正确的是（  <strong><code>A</code></strong>  ）</p><ul><li><strong>A、服务器端需要ServerSocket需要绑定端口号</strong></li><li>B、服务器端需要ServerSocket需要绑定端口号和IP地址 </li><li>C、客户端需要Socket，需要绑定端口号</li><li>D、客户端需要ServerSocket，需要绑定端口号</li></ul></li><li><p>在Android中，哪种类型的存储适用于保存小量的数据？(  <strong><code>B</code></strong>  )</p><ul><li>A. SQLite数据库      </li><li><strong>B. SharedPreferences</strong></li><li>C. 文件系统           </li><li>D. 网络存储</li></ul></li><li><p>ScrollView可以有几个子view （  <strong><code>A</code></strong>  ）</p><ul><li><strong>A. 1个</strong>           </li><li>B. 2个        </li><li>C. 3个        </li><li>D. 无限制</li></ul></li><li><p>Activity从可见状态变为半透明遮盖状态时，生命周期中哪个方法被调用（  <strong><code>B</code></strong>  ）</p><ul><li>A.onStop()                    </li><li><strong>B. onPause()</strong>                           </li><li>C. onRestart()                 </li><li>D.onStart()</li></ul></li><li><p>一个应用程序如果要访问另一个应用程序的数据库，需要通过（   <strong><code>C</code></strong>   ）来实现</p><ul><li>A.BroadcastReceiver            </li><li>B.Activity</li><li><strong>C.ContentProvider</strong>              </li><li>D.Service</li></ul></li></ol><h1 id="多选题"><a href="#多选题" class="headerlink" title="多选题"></a>多选题</h1><ol><li><p>下面关于Android触摸事件监听器的说法正确的是（   <strong><code>ACD</code></strong>   ）</p><ul><li>A. 处理短时间单击按钮事件需要实现OnClickListener接口  </li><li>B. 处理长时间单击按钮事件需要实现OnTouchListener接口  </li><li>C. 处理屏幕触摸事件需要实现OnTouchListener接口  </li><li>D. 响应屏幕触摸事件的方法为onTouch（）</li></ul></li><li><p>关于线程说法正确的是（    <strong><code>ACD</code></strong>    ）</p><ul><li>A. 在 android 中，我们可以在主线程中，创建一个新的线程</li><li>B. 在创建的新线程中，它可以操作 UI 组件</li><li>C. 新线程可以和 Handler 共同使用</li><li>D. 创建的 Handler 对象，它隶属于创建它的线程</li></ul></li><li><p>下列哪些可以用来实现Activity之间的数据传递？（  <strong><code>ABD</code></strong> ）[本人认为是ACD] </p><ul><li>A. Intent                  </li><li>B. Bundle</li><li>C. SharedPreferences       </li><li>D. Static Variables</li></ul></li><li><p>哪些是Android支持的网络请求方式？（   <strong><code>ABCD</code></strong>    ）</p><ul><li>A. GET      </li><li>B. POST      </li><li>C. PUT      </li><li>D. DELETE</li></ul></li><li><p>下列哪些布局不能实现内部控件的相互重叠 （  <strong><code>AC</code></strong>   ）</p><ul><li>A. LineaLayout          </li><li>B. ConstraintLayout</li><li>C. TableLayout           </li><li>D. FrameLayout</li></ul></li><li><p>下面说法错误的是（   <strong><code>ABCD</code></strong>    ）</p><ul><li>A．Android采用单线程模型 </li><li>B．Android会默认会为线程创建一个关联的消息队列 </li><li>C．Handler会与多个线程以及该线程的消息队列对应 </li><li>D．程序组件首先通过Handler把消息传送给Looper，Looper把消息放入队列</li></ul></li><li><p>对于AlertDialog的描述正确的是（    <strong><code>BCD</code></strong>    ）</p><ul><li>A.使用new关键字创建AlertDialog的实例</li><li>B.对话框的显示需要调用show方法</li><li>C.setPositiveButton方法是用来加确定按钮的</li><li>D.setNegativeButton方法是用来加取消按钮的</li></ul></li><li><p>在android中使用Menu时可能需要重写的方法有 (   <strong><code>AC</code></strong>    )</p><ul><li>A.onCreateOptionsMenu()  </li><li>B.onCreateMenu()</li><li>C.onOptionsItemSelected()</li><li>D.onItemSelected()</li></ul></li><li><p>下列代码可以为TextView设置所显示文字的语句是（   <strong><code>AB</code></strong>    ）</p><ul><li>A,在配置文件中用属性 android:text=”abc”</li><li>B,在程序中用TextView对象的setText(“abc”)方法</li><li>C,在程序中用TextView的静态方法setText(“abc”)</li><li>D,在配置文件中用属性 android:value=”abc”</li></ul></li><li><p>下面关于Intent对象与Intent过滤器的说法正确的是（   <strong><code>ACD</code></strong>   ）</p><ul><li>A. 为了通过匹配，Intent中的每个种类必须与过滤器中的种类匹配</li><li>B. 为了通过匹配，过滤器中的种类必须是Intent对象中种类的子集</li><li>C. 为了通过匹配，Intent对象中的种类必须是过滤器中种类的子集</li><li>D. 过滤器中必须包含至少一个<action>标签</li></ul></li><li><p>下列哪些是RecyclerView中常用的布局管理器？(   <strong><code>ABC</code></strong>    )</p><ul><li>A. LinearLayoutManager        </li><li>B. GridLayoutManager</li><li>C. StaggeredGridLayoutManager </li><li>D. FrameLayout</li></ul></li><li><p>为了提高RecyclerView的性能，可以采取哪些措施？（   <strong><code>ABCD</code></strong>   ）</p><ul><li>A. 使用ViewHolder模式      </li><li>B. 减少视图层次</li><li>C. 实现缓存策略             </li><li>D. 避免在主线程中执行耗时操作</li></ul></li><li><p>下列关于Toast的说法不正确的是（  <strong><code>ABD</code></strong>    ）[本人认为是ACD]</p><ul><li>A. 只能通过Toast.makeText(）来创建  </li><li>B. 可以显示图片  </li><li>C. 可以设置显示时间长短 </li><li>D. 只能显示文本内容 </li></ul></li><li><p>下面关于Intent 的作用的叙述不正确的是 (   <strong><code>BCD</code></strong>    ) </p><ul><li>A.intent是连接四大组件的纽带,可以实现界面间切换，可以包含动作和动作数据</li><li>B.是一段长生命周期的没有用户界面的程序， 可以保持应用在后台运行而不会因为切换页面而消失 </li><li>C.实现应用程序间的数据共享 </li><li>D.处理一个应用程序整体性的工作 </li></ul></li><li><p>在android中使用Menu时可能需要重写的方法有 (   <strong><code>AC</code></strong>    )</p><ul><li>A.onCreateOptionsMenu()</li><li>B.onCreateMenu()</li><li>C.onOptionsItemSelected()</li><li>D.onItemSelected()</li></ul></li><li><p>在web开发领域主要的数据交互格式有（  <strong><code>AC</code></strong>  ）</p><ul><li>A，XML        </li><li>B,HTML  </li><li>C,JSON        </li><li>D,AJAX</li></ul></li><li><p>安卓为新建线程与UI线程之间的交互设计了下列哪些类（   <strong><code>ABC</code></strong>    ）</p><ul><li>A. Handler      </li><li>B. Looper</li><li>C. Message      </li><li>D. Tools</li></ul></li></ol><h1 id="简答题"><a href="#简答题" class="headerlink" title="简答题"></a>简答题</h1><p>1.写出代码实现存储字符串“helloworld”到文件名为data的文件中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">FileOutputStream outputStream=openFileOutput(<span class="string">&quot;data&quot;</span>, Context.MODE_PRIVATE);</span><br><span class="line">BufferedWriter bufferedWriter=<span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(outputStream));</span><br><span class="line">bufferedWriter.write(“helloworld”);</span><br><span class="line">bufferedWriter.close();</span><br></pre></td></tr></table></figure><p>2.Android应用程序的4大组件是什么？<br><strong>Service  Activity     BroadcastReceiver    ContentProvider </strong></p><p>3、简单介绍怎样实现监听每分钟的时间变化，可用代码表示<br>编写广播接收器类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TimeChangeReceiver</span> <span class="keyword">extends</span> <span class="title class_">BroadcastReceiver</span>&#123;</span><br><span class="line">    <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onReceive</span><span class="params">(Context context, Intent intent)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(i==<span class="number">59</span>) &#123;</span><br><span class="line">            Toast.makeText(SecondActivity.<span class="built_in">this</span>, <span class="string">&quot;Time has changed&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">            i=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> i++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>动态注册广播接收器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">IntentFilter intentFilter=<span class="keyword">new</span> <span class="title class_">IntentFilter</span>();</span><br><span class="line">intentFilter.addAction(<span class="string">&quot;android.intent.action.TIME_TICK&quot;</span>);</span><br><span class="line">TimeChangeReceiver timeChangeReceiver=<span class="keyword">new</span> <span class="title class_">TimeChangeReceiver</span>();</span><br><span class="line">registerReceiver(timeChangeReceiver,intentFilter);</span><br></pre></td></tr></table></figure><p>4、写出Activity的四种启动模式（4分）<br><strong>standard   singletop   singletask   singleInstance</strong></p><p>5、使用SharedPreferences存储两个参数，username=“lucy”，password=“123456”，写出代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SharedPreferences sharedPreferences= getApplicationContext().getSharedPreferences(<span class="string">&quot;userInfo&quot;</span>,<span class="number">0</span>);</span><br><span class="line">SharedPreferences.Editor editor=sharedPreferences.edit();</span><br><span class="line">editor.putString(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;lucy&quot;</span>);</span><br><span class="line">editor.putString(<span class="string">&quot;password&quot;</span>,<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">editor.commit();</span><br></pre></td></tr></table></figure><p>6、写出Android应用程序开发中的常用布局方式，四种以上。<br><strong>LinearLayout   ConstraintLayout    FrameLayout   TableLayout</strong></p><p>7、已知一个自定义广播接收器的过滤器的action属性为“com.example.broadcasttest”,写出代码发送一条广播，让这个接收器接收到</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Intent intent=<span class="keyword">new</span> <span class="title class_">Intent</span>(<span class="string">&quot;com.example.broadcasttest&quot;</span>);</span><br><span class="line">sendBroadcast(intent);</span><br></pre></td></tr></table></figure><p>8、已知一个字符串String hello=“hello world”，简述怎样实现将它分享至朋友圈。可用代码代替。(5分)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Intent intent=<span class="keyword">new</span>  <span class="title class_">Intent</span>(Intent.ACTION_SEND);</span><br><span class="line">intent.setType(<span class="string">&quot;text/plain&quot;</span>);</span><br><span class="line">intent.putExtra(Intent.EXTRA_TEXT,<span class="string">&quot;文本内容&quot;</span>);</span><br><span class="line">startActivity(intent);</span><br></pre></td></tr></table></figure><p>9、创建任意一个新项目，在Manifest文件中为FirstActivity设置启动方式为singleTop，为SecondActivity设置启动方式为singleTask，ThirdActivity不作设置。在FirstActivity中点击按钮启动SecondActivity，在SecondActivity中启动ThirdActivity，在ThirdActivity中点击按钮启动SecondActivity。简单画出Activity返回栈的图表示以上几个步骤变化。</p><h1 id="编程题："><a href="#编程题：" class="headerlink" title="编程题："></a>编程题：</h1><p>1、利用广播接收器监听广播，实现每隔2分钟弹出一个Toast显示“helloworld”。<br>广播接收器类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TimeChangeReceiver</span> <span class="keyword">extends</span> <span class="title class_">BroadcastReceiver</span>&#123;</span><br><span class="line">    <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onReceive</span><span class="params">(Context context, Intent intent)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(i==<span class="number">1</span>) &#123;</span><br><span class="line">            Toast.makeText(SecondActivity.<span class="built_in">this</span>, <span class="string">&quot;Time has changed&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">            i=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> i=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>动态注册广播接收器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">IntentFilter intentFilter=<span class="keyword">new</span> <span class="title class_">IntentFilter</span>();</span><br><span class="line">intentFilter.addAction(<span class="string">&quot;android.intent.action.TIME_TICK&quot;</span>);</span><br><span class="line">TimeChangeReceiver timeChangeReceiver=<span class="keyword">new</span> <span class="title class_">TimeChangeReceiver</span>();</span><br><span class="line">registerReceiver(timeChangeReceiver,intentFilter);</span><br></pre></td></tr></table></figure><p>2、编写一个MainActivity和MyService，在MainActivity中的onCreate()函数中为两个按钮分别设置点击事件监听器，点击第一个按钮启动服务弹出一个Toast显示“您点击了第一个按钮”，点击第二个按钮启动服务弹出一个Toast显示“您点击了第二个按钮”在MainAtivity的onCreate()中写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">bt1=(Button) findViewById(R.id.button1);</span><br><span class="line">        bt.setOnClickListener(<span class="keyword">new</span> <span class="title class_">OnClickListener</span>()&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line">Intent intent=<span class="keyword">new</span> <span class="title class_">Intent</span>(MainActivity.<span class="built_in">this</span>,MyService.class);</span><br><span class="line">intent.setAction(<span class="string">&quot;button1&quot;</span>);                </span><br><span class="line">MainActivity.<span class="built_in">this</span>.startService(intent);</span><br><span class="line">&#125;&#125;);</span><br><span class="line">        bt2=(Button) findViewById(R.id.button2);        </span><br><span class="line">        bt2.setOnClickListener(<span class="keyword">new</span> <span class="title class_">OnClickListener</span>()&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line">Intent intent2=<span class="keyword">new</span> <span class="title class_">Intent</span>(MainActivity.<span class="built_in">this</span>,MyService.class);</span><br><span class="line">intent2.setAction(<span class="string">&quot;button2&quot;</span>);</span><br><span class="line">MainActivity.<span class="built_in">this</span>.startService(intent2);</span><br><span class="line">&#125;&#125;);</span><br></pre></td></tr></table></figure><p>在MyService的onStartCommand()中写 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">String action=intent.getAction();             </span><br><span class="line"><span class="keyword">if</span>(action.equals(<span class="string">&quot;button1&quot;</span>))</span><br><span class="line">&#123;</span><br><span class="line">Toast.makeText(<span class="built_in">this</span>, <span class="string">&quot;您点击了第一个按钮&quot;</span>,  Toast.LENGTH_SHORT).show();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(action.equals(<span class="string">&quot;button2&quot;</span>))</span><br><span class="line">&#123;</span><br><span class="line">Toast.makeText(<span class="built_in">this</span>, <span class="string">&quot;您点击了第二个按钮&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、写出一个类ActivityCollector实现活动管理，有3个方法分别可以实现添加活动到List、从List移除活动、结束List中的所有活动。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ActivityCollector</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;Activity&gt; activities=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">addActivity</span><span class="params">(Activity activity)</span>&#123;</span><br><span class="line">        activities.add(activity);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">removeActivity</span><span class="params">(Activity activity)</span>&#123;</span><br><span class="line">        activities.remove(activity);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">finishAll</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(Activity activity:activities)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!activity.isFinishing())&#123;</span><br><span class="line">                activity.finish();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        activities.clear();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、在上题的基础上结合文字叙述怎样实现随时随地退出程序。<br>（1）编写一个Activity的基类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BaseActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(<span class="meta">@Nullable</span> Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        ActivityCollector.addActivity(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onDestroy</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>.onDestroy();</span><br><span class="line">        ActivityCollector.removeActivity(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（2）使所有的Activity都继承BaseActivity<br>（3）不管在什么地方想要退出程序，只需要调用<br>ActivityCollector.finishAll()即可</p><p>祝各位武运昌隆！</p>]]></content>
      
      
      <categories>
          
          <category> 杂项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>习概复习总览</title>
      <link href="/2025/01/01/%E4%B9%A0%E6%A6%82%E5%A4%8D%E4%B9%A0%E6%80%BB%E8%A7%88/"/>
      <url>/2025/01/01/%E4%B9%A0%E6%A6%82%E5%A4%8D%E4%B9%A0%E6%80%BB%E8%A7%88/</url>
      
        <content type="html"><![CDATA[<h1 id="习概复习总览"><a href="#习概复习总览" class="headerlink" title="习概复习总览"></a>习概复习总览</h1><blockquote><p>二次复习部分为名词解释题部分：六个必须坚持，国家治理体系和治理能力，新发展理念，两个毫不动摇”，国家安全<br>简答题部分：为什么说中国特色社会主义是社会主义而不是其他什么主义？，全面阐述四个自信，党的十八大后，党面临的主要任务是什么？，全面建成社会主义现代化强国的战略安排，中国式现代化的本质要求，中国式现代化如何创造人类文明新形态？，构建高水平社会主义市场经济体制关键，全过程人民民主四个特征，统一战线</p><h1 id="一、名词解释"><a href="#一、名词解释" class="headerlink" title="一、名词解释"></a>一、名词解释</h1></blockquote><ol><li><p><strong>六个必须坚持</strong></p><ul><li>必须坚持<code>人民至上</code>。</li><li>必须坚持<code>自信自立</code>。</li><li>必须坚持<code>守正创新</code>。</li><li>必须坚持<code>问题导向</code>。</li><li>必须坚持<code>系统观念</code>。</li><li>必须坚持<code>胸怀天下</code>。</li></ul></li><li><p><strong>两个确立</strong></p><ul><li><code>党的十八届六中全会</code>明确了习近平同志党中央的核心、全党的核心地位。</li><li><code>党的十九大</code>把<strong>习近平新时代中国特色社会主义思想</strong>确立为党必须<code>长期坚持</code>的<code>指导思想</code>。</li></ul></li><li><p><strong>四个自信</strong></p><ul><li><strong>坚持道路自信、理论自信、制度自信、文化自信。</strong></li></ul></li><li><p><strong>“四个全面”战略布局</strong></p><ul><li>全面<code>建设社会主义现代化国家</code>。</li><li>全面<code>深化改革</code>。</li><li>全面<code>依法治国</code>。</li><li>全面<code>从严治党</code>。</li></ul></li><li><p><strong>“三个进一步解放”</strong></p><ul><li>进一步<code>解放思想</code>。</li><li>进一步<code>解放和发展社会生产力</code>。</li><li>进一步<code>解放和增强社会活力</code>。</li><li>习近平指出：“<strong>这‘三个进一步解放’既是改革的目的，又是改革的条件。</strong>”</li></ul></li><li><p><strong>国家治理体系和治理能力</strong></p><ul><li><code>国家治理体系和治理能力</code>是一个国家<code>制度</code>和<code>执行能力</code>的集中体现。</li><li>推进国家治理体系和治理能力现代化，必须坚定<strong>中国特色社会主义制度自信</strong>。</li><li>推进国家治理体系和治理能力现代化，必须更好发挥<strong>中国特色社会主义制度优势</strong>。</li><li>推进国家治理体系和治理能力现代化，必须把<strong>中国特色社会主义制度转化为国家治理效能</strong>。</li></ul></li><li><p><strong>新发展理念</strong></p><ul><li>习近平指出，新时代抓发展，必须更加突出发展理念，<strong>坚定不移贯彻<code>创新</code>、<code>协调</code>、<code>绿色</code>、<code>开放</code>、<code>共享</code>的新发展理念</strong>。</li></ul></li><li><p><strong>社会主义基本经济制度</strong></p><ul><li><strong>社会主义基本经济制度包括<code>公有制</code>为主体、<code>多种所有制经济</code>共同发展，<code>按劳分配</code>为主体、<code>多种分配方式</code>并存，社会主义市场经济体制。</strong></li></ul></li><li><p><strong>“两个毫不动摇”</strong></p><ul><li><code>公有制经济</code>和<code>非公有制经济</code>都是<strong>社会主义市场经济</strong>的重要组成部分，都是我国经济社会发展的<code>重要基础</code>。<strong>要毫不动摇巩固和发展公有制经济，毫不动摇鼓励、支持、引导非公有制经济发展。</strong></li></ul></li><li><p><strong>创新驱动发展战略</strong></p><ul><li>创新驱动发展战略，就是要坚持<code>创新是第一动力</code>，<strong>把创新驱动落实到现代化建设整个进程和各个方面，以创新推动经济转型发展，全面提升创新能力和效率</strong>，把创新发展主动权牢牢掌握在自己手中。</li></ul></li><li><p><strong>基本政治制度</strong></p><ul><li><strong><code>中国共产党领导的多党合作和政治协商制度</code>、<code>民族区域自治制度</code>、<code>基层群众自治制度</code>构成了我国的<code>基本政治制度</code>，反映了我国社会主义民主政治的<code>独特优势</code>，是保障各政党、各阶层、各民族和基层人民群众当家作主的<code>重要基础</code></strong>。</li></ul></li><li><p><strong>国家安全</strong></p><ul><li>国家安全是指<code>国家政权</code>、<code>主权</code>、<code>统一和领土完整</code>、<code>人民福祉</code>、<code>经济社会可持续发展</code>和<code>国家其他重大利益</code>相对处于<strong>没有危险和不受内外威胁的状态</strong>，以及保障持续安全状态的能力。</li></ul></li></ol><h1 id="二、简答题等"><a href="#二、简答题等" class="headerlink" title="二、简答题等"></a>二、简答题等</h1><ol><li><p><strong>为什么说中国特色社会主义是社会主义而不是其他什么主义？</strong></p><ul><li><code>中国特色社会主义坚持了科学社会主义基本原则。</code>中国特色社会主义之所以是社会主义，而不是其他什么主义，就是因为我们始终坚持科学社会主义原则，并根据新的时代条件赋予其鲜明的中国特色。中国特色社会主义写出了科学社会主义的“新版本”。当代中国的伟大社会变革，<strong>不是简单延续</strong><code>我国历史文化的母版</code>，<strong>不是简单套用</strong><code>马克思主义经典作家设想的模板</code>，<strong>不是其他</strong><code>国家社会主义实践的再版</code>，<strong>也不是</strong><code>国外现代化发展的翻版</code>。</li></ul></li><li><p><strong>全面阐述四个自信</strong></p><ul><li>道路是实现途径，理论体系是行动指南，制度是根本保障，文化是精神力量，四者统一于中国特色社会主义伟大实践。<strong>新时代坚持和发展中国特色社会主义，必须坚持<code>道路</code>自信、<code>理论</code>自信、<code>制度</code>自信、<code>文化</code>自信</strong>。<strong>坚定道路自信</strong>，就是坚信中国特色社会主义道路是我国实现社会主义现代化、创造人民美好生活的必由之路，是<code>实现中华民族伟大复兴的必由之路</code>。<strong>坚定理论自信</strong>，就是坚信中国特色社会主义理论体系是指导党和人民实现中华民族伟大复兴的<code>正确理论</code>，是立足时代前沿、与时俱进的<code>科学理论</code>。<strong>坚定制度自信</strong>，就是坚信中国特色社会主义制度是当代中国发展进步的<code>根本制度保障</code>，是具有明显制度优势、强大自我完善能力的<code>先进制度</code>。<strong>坚定文化自信</strong>，就是坚信中国特色社会主义文化积淀着中华民族最深层的<code>精神追求</code>，代表者中华民族独特的精神标识，是激励全党全国各族人民奋勇前进的强大精神力量。这一文化，源自于中华民族5000多年文明历史所孕育的中华优秀传统文化，熔铸于党领导人民在革命、建设、改革中创造的革命文化和社会主义先进文化，植根于<strong>中国特色社会主义伟大实践</strong>。</li></ul></li><li><p><strong>党的十八大后，党面临的主要任务是什么？</strong></p><ul><li><strong>党的十八大后，党面临的主要任务是，实现第一个百年奋斗目标，开启实现第二个百年奋斗目标新征程，朝着实现中华民族伟大复兴的宏伟目标继续前进</strong>。</li></ul></li><li><p><strong>为什么社会主要矛盾变化是关系全局的历史性变化？</strong></p><ul><li>① <strong>党的十八大以来，经过科学分析，我们党及时作出我国社会主要矛盾已经转化为<code>人民日益增长的美好生活需要和不平衡不充分的发展之间的矛盾</code>的重大战略判断</strong>。</li><li>② 经过长期的发展，人民对美好生活的向往更加强烈、需求日益广泛，不仅对物质文化生活提出了更高要求，而且在民主、法治、公平、正义、安全、环境等方面的要求日益增长，人民对美好生活的向往总体上已经从“有没有”转向“好不好”，<strong>人民群众的需求呈现多样化、多层次、多方面的特点，再只讲“物质文化需要”已不能全面真实反映人民群众的愿望和要求</strong>。</li><li>③ <strong>新时代我国社会主要矛盾的变化，是关系全局的历史性变化，对党和国家工作提出了许多新要求</strong>。要在继续推动发展的基础上，着力解决好发展不平衡不充分问题，大力提升发展质量和效益，更好满足人民在经济、政治、文化、社会、生态等方面日益增长的需要，更好推动人的全面发展、社会全面进步。</li><li>④ <strong>新时代我国社会主要矛盾的变化，是在社会主义初级阶段中发生的变化，没有改变对我国社会主义所处历史阶段的判断</strong>。</li></ul></li><li><p><strong>全面建成社会主义现代化强国的战略安排</strong></p><ul><li>从<strong>2020年到2035年</strong><code>基本实现社会主义现代化</code>。</li><li>从<strong>2035年到本世纪中叶</strong><code>把我国建成富强民主文明和谐美丽的社会主义现代化强国</code>。</li></ul></li><li><p><strong>中国式现代化的五个特色</strong></p><ul><li>中国式现代化是<code>人口规模巨大的现代化</code>。</li><li>中国式现代化是<code>全体人民共同富裕的现代化</code>。</li><li>中国式现代化是<code>物质文明和精神文明向协调的现代化</code>。</li><li>中国式现代化是<code>人与自然和谐共生的现代化</code>。</li><li>中国式现代化是<code>走和平发展道路的现代化</code>。</li></ul></li><li><p><strong>中国式现代化的本质要求</strong></p><ul><li><strong>坚持中国共产党领导，坚持中国特色社会主义，实现高质量发展，发展全过程人民民主，丰富人民精神世界，实现全体人民共同富裕，促进人与自然和谐共生，推动构建人民命运共同体，创造人类文明新形态</strong>。</li></ul></li><li><p><strong>中国式现代化如何创造人类文明新形态？</strong></p><ul><li>① <strong>中国式现代化，深深植根于中华优秀传统文化</strong>，体现科学社会主义的先进本质，借鉴吸收一切人类优秀文明成果，代表人类文明进步的发展方向，是一种全新的人类文明形态。</li><li>② <strong>中国式现代化提供了一种全新的现代化模式</strong>。打破了“现代化=西方化”的迷思，展现了不同于西方现代化的新图景。</li><li>③ <strong>中国式现代化是对西方式现代化理论和实践的重大超越</strong>。坚持社会主义目标和方向，摒弃了以资本为中心的、两极分化的、物质主义膨账的、对外扩张掠夺的西方现代化老路，打破了只有走资本主义道路才能实现现代化的神话，有效避免了西方现代化的矛盾弊端。中国式现代化蕴含的独特世界观、价值观、历史观、文明观、民主观、生态观等及其伟大实践，是对世界现代化理论和实践的重大创新。</li><li>④ <strong>中国式现代化为广大发展中国家提供了全新选择</strong>。中国式现代化坚持从本国实际出发，独立自主制定实现现代化的路线方针政策和战略，坚持依靠本国力量、依靠广大人民群众的辛勤劳动来实现现代化，同时积极学习借鉴一切人类优秀文明成果，尽可能利用一切外部有利条件，始终把国家和民族发展进步的命运牢牢掌握在自己手中。</li></ul></li><li><p><strong>全面深化改革的总目标</strong></p><ul><li>① 新时代全面深化改革开放具有<code>全面性</code>、<code>系统性</code>、<code>整体性</code>的鲜明特点，必须将其作为一个<code>系统工程</code>来把握。</li><li>② 全面深化改革的总目标是：<strong>完善和发展中国特色社会主义制度、推进国家治理体系和治理能力现代化</strong>。</li><li>③ 全面深化改革必须牢牢把握总目标，实施好“六个紧紧围绕”的路线图。</li></ul></li><li><p><strong>构建高水平社会主义市场经济体制关键</strong></p><ul><li><strong>构建高水平社会主义市场经济体制，关键是要处理好政府和市场的关系</strong>。以习近平同志为核心的党中央提出使市场在资源配置中起决定性作用，更好发挥政府作用，这是我们党在理论和实践上的重大推进，是对中国特色社会主义建设规律认识的一个新突破。市场在资源配置中起决定性作用，就是把市场机制能有效调节的经济活动交给市场，推动资源配置实现效益最大化和效率最优化。更好发挥政府作用，就是要在保证市场发挥决定性作用的前提下，管好那些市场管不了或管不好的事情。</li></ul></li><li><p><strong>全过程人民民主四个特征</strong></p><ul><li>全过程人民民主是<code>过程民主</code>和<code>成果民主</code>的统一。</li><li>全过程人民民主是<code>程序民主</code>和<code>实质民主</code>的统一。</li><li>全过程人民民主是<code>直接民主</code>和<code>间接民主</code>的统一。</li><li>全过程人民民主是<code>人民民主</code>和<code>国家意志</code>的统一。</li></ul></li><li><p><strong>统一战线</strong></p><ul><li><strong>中国共产党领导的、以工农联盟为基础的，包括全体社会主义劳动者、社会主义事业的建设者、拥护社会主义的爱国者、拥护祖国统一和致力于中华民族伟大复兴的爱国者的广泛的爱国统一战线。</strong></li></ul></li><li><p><strong>中国特色社会主义法治道路的核心要义</strong></p><ul><li>中国特色社会主义法治道路的核心要义，<strong>就是要坚持党的领导，坚持中国特色社会主义制度，贯彻中国社会主义法治理论</strong>。党的领导是中国特色社会主义<code>最本质的特征</code>，是社会主义法治<code>最根本的保证</code>。中国特色社会主义制度是中国特色社会主义法治体系的<code>根本制度基础</code>，是全面推进依法治国的<code>根本制度保障</code>。中国特色社会主义法治理论是<code>中国特色社会主义法治体系</code>的<code>理论指导和学理支撑</code>，是全面推进依法治国的<code>行动指南</code>。这三个方面规定和确保了中国特色社会主义法治体系的制度属性和前进方向。</li></ul></li><li><p><strong>如何坚持和发展新时代“枫桥经验”“浦江经验”？</strong></p><ul><li>坚持和发展新时代“枫桥经验”“浦江经验”，<strong>完善正确处理新形势下人民内部矛盾机制</strong>。随着经济社会结构加速转型，大量流动人口出现，城乡社区成员构成越来越多样化，社会矛盾也越来越多样化，对基层社会治理和公共服务都提出了更高要求。要积极践行新时代“枫桥经验”“浦江经验”，把干部主动下沉服务和激发群众自治活力结合起来，探索社会矛盾纠纷多元预防调处化解综合机制，畅通和规范群众诉求表达、利益协调、权益保障通道，及时把矛盾纠纷化解在基层、化解在萌芽状态。</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 杂项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作系统考试方案大纲</title>
      <link href="/2024/12/30/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
      <url>/2024/12/30/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h2 id="操作系统考试方案大纲"><a href="#操作系统考试方案大纲" class="headerlink" title="操作系统考试方案大纲"></a>操作系统考试方案大纲</h2><h2 id="操作系统绪论和处理器管理"><a href="#操作系统绪论和处理器管理" class="headerlink" title="操作系统绪论和处理器管理"></a>操作系统绪论和处理器管理</h2><blockquote><p>部分内容已在期中中出现过，期末内容包含期中部分</p></blockquote><p><strong>请通过右边的大纲栏快速复习查找</strong></p><blockquote><p>所以按照以下格式标注知识点重合性:</p><ul><li>期中+期末：（<strong>A</strong>）</li><li>期中 ：(<strong>B</strong>)</li><li>期末：（<strong>C</strong>）</li><li>必考部分{大题}（<strong>S</strong>）</li></ul></blockquote><p><em>请着重关注A,C部分，B部分稍作关注</em></p><h3 id="设计和构建操作系统的基本目标（A）"><a href="#设计和构建操作系统的基本目标（A）" class="headerlink" title="设计和构建操作系统的基本目标（A）"></a>设计和构建操作系统的基本目标（A）</h3><ol><li><strong>方便性</strong>：操作系统应提供用户友好的界面，简化用户操作。</li><li><strong>有效性</strong>：系统资源的管理和调度应高效，以提高整体性能。</li><li><strong>可扩充性</strong>：系统应支持模块化设计，便于未来功能的扩展和升级。</li><li><p><strong>开放性</strong>：操作系统应支持开放标准，促进软件和硬件的兼容性。</p><h3 id="操作系统管理功能（C）"><a href="#操作系统管理功能（C）" class="headerlink" title="操作系统管理功能（C）"></a>操作系统管理功能（C）</h3></li><li><p><strong>处理器管理</strong>：负责调度和分配CPU资源，以确保各个进程的高效执行。</p></li><li><strong>存储管理</strong>：管理内存的分配与回收，确保数据的有效存储和访问。</li><li><strong>I/O设备管理</strong>：协调和控制输入输出设备的操作，提供统一的接口。</li><li><strong>文件管理</strong>：负责文件的创建、删除、读写及权限管理，确保数据的安全性和完整性。</li><li><strong>网络管理</strong>：处理网络连接和数据传输，确保系统与其他设备的有效通信。</li><li><p><strong>用户接口</strong>：提供用户与操作系统交互的方式，包括命令行和图形界面。</p><h3 id="操作系统特性-A"><a href="#操作系统特性-A" class="headerlink" title="操作系统特性(A)"></a>操作系统特性(A)</h3></li><li><p><strong>并发性</strong><br><1> <strong>宏观上</strong>，多个程序在计算机内同时发生。<br><2><strong> 微观上</strong>，任何时候只有一个程序在CPU上运行，操作系统通过时间片轮转实现并发执行。</p></li><li><p><strong>共享性</strong>：多个用户或进程可以共享系统资源，提高资源利用率。</p></li><li><p><strong>不确定性</strong>：系统的行为在不同条件下可能会有所不同，增加了程序执行的复杂性。</p></li><li><p><strong>虚拟性</strong>：操作系统通过抽象和虚拟化技术，在逻辑上提供资源，而不直接依赖于物理资源的限制。</p><h3 id="操作系统引入多道系统的好处-C"><a href="#操作系统引入多道系统的好处-C" class="headerlink" title="操作系统引入多道系统的好处(C)"></a>操作系统引入多道系统的好处(C)</h3></li></ol><ul><li><strong>提高资源（CPU）利用率</strong>：通过同时运行多个程序，提高CPU利用率</li><li><strong>内存和I/O设备的利用率。</strong></li><li><strong>提高系统吞吐率</strong>：多道程序设计能够在单位时间内处理更多任务，提升系统的整体吞吐能力。</li><li><strong>有中断技术作为支撑</strong>：中断技术使得操作系统能够有效地管理和调度多个程序的执行。<h3 id="操作系统的人机接口-C"><a href="#操作系统的人机接口-C" class="headerlink" title="操作系统的人机接口(C)"></a>操作系统的人机接口(C)</h3></li></ul><ol><li><p><strong>操作界面</strong><br><1> <strong>命令行界面</strong>：用户通过输入命令与系统进行交互，适合高级用户。<br><2> <strong>图形化界面</strong>：通过图形元素和鼠标操作，提供直观的用户体验，适合普通用户。</p></li><li><p><strong>系统调用和编程接口</strong>：提供程序与操作系统之间的交互方式，使得应用程序能够请求系统资源和服务。</p><h3 id="进程的状态和转换-A"><a href="#进程的状态和转换-A" class="headerlink" title="进程的状态和转换(A)"></a>进程的状态和转换(A)</h3></li><li><p><strong>进程状态</strong><br><1> <strong>运行态</strong>：进程正在CPU上执行。<br><2> <strong>就绪态</strong>：进程已准备好运行，但等待CPU分配。<br><3> <strong>等待态</strong>：进程因等待某些事件（如I/O操作）而暂停执行。</p></li><li><p><strong>进程状态的转换</strong><br>进程状态之间的转换可以通过以下方式表示：</p><p>```plaintext<br>+—————-+        +—————-+<br>|           |        |           |<br>|  就绪态   | &lt;—— |  运行态   |<br>|           |        |           |<br>+—————-+        +—————-+</p><pre><code>  ^                    |  |                    |  |                    v</code></pre><p>+—————-+        +—————-+<br>|           |        |           |<br>|  等待态   | &lt;—— |  中断     |<br>|           |        |           |<br>+—————-+        +—————-+</p><h3 id="进程控制块（A）"><a href="#进程控制块（A）" class="headerlink" title="进程控制块（A）"></a>进程控制块（A）</h3></li><li><p><strong>进程描述信息</strong>：包含进程的基本信息，如进程ID、进程状态、优先级等。</p></li><li><strong>进程控制信息</strong>：用于管理进程的调度和执行，包括程序计数器、调度信息等。</li><li><strong>进程拥有资源情况</strong>：记录进程所占用的资源，如内存、I/O设备等。</li><li><strong>进程的CPU现场信息</strong>：保存进程在被中断时的CPU寄存器状态，以便后续恢复执行。</li></ol><h4 id="进程控制块与进程的关系"><a href="#进程控制块与进程的关系" class="headerlink" title="进程控制块与进程的关系"></a>进程控制块与进程的关系</h4><p><code>进程控制块与进程一一对应，一个进程必须有一个控制块，且一个控制块必须且只能对着一个进程</code></p><h3 id="进程控制原语（A）"><a href="#进程控制原语（A）" class="headerlink" title="进程控制原语（A）"></a>进程控制原语（A）</h3><p>进程的控制类型包括：<br><code>创建进程</code>，<code>阻塞进程</code>，<code>唤醒进程</code>，<code>挂起进程</code>，<code>激活进程</code>，<code>撤销进程</code></p><p>所谓的原语，是指在<code>管态</code>下执行的，具有<code>原子性</code>的，能实现塔顶系统功能的<code>程序段</code></p><p>原子性是指执行过程中<code>不允许被中断</code></p><h3 id="多道环境下调度例题-lt-小题大题-gt-（S）"><a href="#多道环境下调度例题-lt-小题大题-gt-（S）" class="headerlink" title="多道环境下调度例题&lt;小题大题&gt;（S）"></a>多道环境下调度例题&lt;小题大题&gt;（S）</h3><h3 id="进程同步和进程互斥（B）"><a href="#进程同步和进程互斥（B）" class="headerlink" title="进程同步和进程互斥（B）"></a>进程同步和进程互斥（B）</h3><ol><li><p><strong>进程同步</strong><br>进程同步是指多个进程协调执行顺序，以确保共享数据的一致性。</p></li><li><p><strong>进程互斥</strong><br>进程互斥是指在同一时刻只有一个进程可以访问共享资源，以防止数据冲突。</p><h3 id="临界区和使用规则（B）"><a href="#临界区和使用规则（B）" class="headerlink" title="临界区和使用规则（B）"></a>临界区和使用规则（B）</h3></li></ol><h4 id="临界区"><a href="#临界区" class="headerlink" title="临界区"></a>临界区</h4><p>临界区是指访问共享资源的<code>程序代码片段</code>，确保在同一时刻只有一个进程可以执行该代码。</p><h4 id="使用规则"><a href="#使用规则" class="headerlink" title="使用规则"></a>使用规则</h4><ol><li><strong>有空让进</strong>：如果临界区为空，允许进程进入。</li><li><strong>无空等待</strong>：如果临界区已被占用，进程应等待。</li><li><strong>多中择一</strong>：如果多个进程请求进入临界区，选择其中一个进入。</li><li><p><strong>有限等待</strong>：每个进程在等待进入临界区时，应该在有限时间内被允许进入。</p><h3 id="进程通信（A）"><a href="#进程通信（A）" class="headerlink" title="进程通信（A）"></a>进程通信（A）</h3></li><li><p><strong>低级通信</strong><br>低级通信通常指通过操作系统提供的基本机制进行进程间的直接通信。</p></li><li><p><strong>高级通信</strong>  </p><ul><li><strong>共享存储区</strong>：多个进程可以访问同一块内存区域，<code>效率最高</code>。</li><li><strong>消息通信</strong>：进程通过发送和接收消息进行通信，适合松耦合的进程。</li><li><strong>管道通信</strong>：通过管道传输数据，使用<code>生产者-消费者</code>方式进行通信的共享文件<code>效率最低</code>，适用于简单的进程间通信。<h3 id="进程死锁的预防机制（A）"><a href="#进程死锁的预防机制（A）" class="headerlink" title="进程死锁的预防机制（A）"></a>进程死锁的预防机制（A）</h3></li></ul></li></ol><h4 id="四大死锁预防条件"><a href="#四大死锁预防条件" class="headerlink" title="四大死锁预防条件"></a>四大死锁预防条件</h4><ol><li><strong>破坏不可抢占条件</strong>：允许抢占资源，强制释放某些进程持有的资源。</li><li><strong>破坏请求和保持条件</strong>：进程在请求资源时，不持有其他资源。</li><li><strong>破坏循环等待条件</strong>：对资源进行排序，确保资源请求遵循一定的顺序。</li><li><strong>互斥使用</strong>：确保资源在某一时刻只能被一个进程使用。</li></ol><h3 id="进程死锁的避免机制（A）"><a href="#进程死锁的避免机制（A）" class="headerlink" title="进程死锁的避免机制（A）"></a>进程死锁的避免机制（A）</h3><p>死锁避免机制通过动态分析资源分配情况，确保系统始终处于安全状态，从而避免死锁的发生。</p><h4 id="死锁避免的典型算法"><a href="#死锁避免的典型算法" class="headerlink" title="死锁避免的典型算法"></a>死锁避免的典型算法</h4><ul><li><strong>银行家算法</strong>：核心思想是根据当前资源分配情况和进程的最大需求，判断是否安全地分配资源，确保系统不会进入不安全状态。<code>例题见大题</code><h3 id="进程死锁的检测和解决（A）"><a href="#进程死锁的检测和解决（A）" class="headerlink" title="进程死锁的检测和解决（A）"></a>进程死锁的检测和解决（A）</h3></li></ul><ol><li><p><strong>检测时机</strong><br>死锁检测通常在系统资源分配的特定时刻进行，例如在资源请求时或定期检查系统状态。</p></li><li><p><strong>检测手段</strong>  </p><ul><li><strong>资源分配图</strong>：通过构建进程-资源分配图来检测死锁。图详情见<code>p68 2.21</code></li></ul></li><li><strong>死锁解除</strong></li></ol><p>死锁解除可以通过以下方式实现：</p><ul><li><code>资源剥夺</code>：强制从某些进程中剥夺资源，释放被占用的资源。</li><li><code>进程终止</code>：终止某些进程以打破死锁。</li><li><code>回滚</code>：将某些进程回滚到安全状态，释放资源。<h3 id="银行家算法，信号量和p-v操作，作业调度-lt-大题小题-gt-（SS）"><a href="#银行家算法，信号量和p-v操作，作业调度-lt-大题小题-gt-（SS）" class="headerlink" title="银行家算法，信号量和p/v操作，作业调度&lt;大题小题&gt;（SS）"></a>银行家算法，信号量和p/v操作，作业调度&lt;大题小题&gt;（SS）</h3></li></ul><h2 id="存储管理"><a href="#存储管理" class="headerlink" title="存储管理"></a>存储管理</h2><h3 id="分页和分段存储比较（C）"><a href="#分页和分段存储比较（C）" class="headerlink" title="分页和分段存储比较（C）"></a>分页和分段存储比较（C）</h3><div class="table-container"><table><thead><tr><th>特性</th><th>分页存储</th><th>分段存储</th></tr></thead><tbody><tr><td>存储单位</td><td>页面（固定大小）</td><td>段（可变大小）</td></tr><tr><td>地址空间</td><td>逻辑地址空间被划分为固定大小的页面</td><td>逻辑地址空间被划分为逻辑段</td></tr><tr><td>内存管理</td><td>页表管理</td><td>段表管理</td></tr><tr><td>访问效率</td><td>由于固定大小，页的管理较简单</td><td>段的大小不一，管理复杂</td></tr><tr><td>内存碎片</td><td>内部碎片（页未完全使用）</td><td>外部碎片（段大小不一）</td></tr><tr><td>适用场景</td><td>适合大多数程序</td><td>适合需要逻辑结构的程序</td></tr></tbody></table></div><p><strong>分页存储管理机制的主要优点是解决了内存碎片的问题</strong></p><h3 id="页面置换算法（C）"><a href="#页面置换算法（C）" class="headerlink" title="页面置换算法（C）"></a>页面置换算法（C）</h3><h4 id="1-先进先出页面置换算法（FIFO）"><a href="#1-先进先出页面置换算法（FIFO）" class="headerlink" title="1. 先进先出页面置换算法（FIFO）"></a>1. 先进先出页面置换算法（FIFO）</h4><h5 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h5><ul><li>FIFO算法维护一个页面队列，记录页面的加载顺序。</li><li>当发生页面缺失时，检查当前内存中的页面。</li><li>如果内存已满，按照FIFO原则，替换队列中最早进入的页面。</li></ul><h5 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h5><p>假设内存容量为3页，页面访问序列为：1, 2, 3, 4, 1, 2, 5, 1, 2, 3, 4, 5。</p><ul><li>初始状态：空内存</li><li>加载1：内存[1]</li><li>加载2：内存[1, 2]</li><li>加载3：内存[1, 2, 3]</li><li>加载4：内存[2, 3, 4]（替换1）</li><li>加载1：内存[3, 4, 1]（替换2）</li><li>加载2：内存[4, 1, 2]（替换3）</li><li>加载5：内存[1, 2, 5]（替换4）</li></ul><hr><h4 id="2-时钟页面置换算法"><a href="#2-时钟页面置换算法" class="headerlink" title="2. 时钟页面置换算法"></a>2. 时钟页面置换算法</h4><h5 id="工作原理-1"><a href="#工作原理-1" class="headerlink" title="工作原理"></a>工作原理</h5><ul><li>时钟算法使用一个循环队列（类似时钟）来管理页面的使用情况。</li><li>每个页面都有一个使用位（referenced bit），表示该页面是否被访问过。</li><li>当发生页面缺失时，检查当前指针指向的页面：<ul><li>如果使用位为1，将其置为0，并移动指针到下一个页面。</li><li>如果使用位为0，替换该页面，并加载新页面。</li></ul></li></ul><h5 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h5><p>假设内存容量为3页，页面访问序列为：1, 2, 3, 4, 1, 2, 5, 1, 2, 3, 4, 5。</p><ul><li>初始状态：空内存，指针指向第一个页面。</li><li>加载1：内存[1]，指针指向1。</li><li>加载2：内存[1, 2]，指针指向2。</li><li>加载3：内存[1, 2, 3]，指针指向3。</li><li>加载4：内存[2, 3, 4]（替换1），指针指向3。</li><li>加载1：内存[3, 4, 1]（替换2），指针指向4。</li><li>加载2：内存[4, 1, 2]（替换3），指针指向1。</li><li>加载5：内存[1, 2, 5]（替换4），指针指向2。<h3 id="存储管理-lt-大题小题-gt-（S）"><a href="#存储管理-lt-大题小题-gt-（S）" class="headerlink" title="存储管理&lt;大题小题&gt;（S）"></a>存储管理&lt;大题小题&gt;（S）</h3></li></ul><h2 id="I-O设备管理"><a href="#I-O设备管理" class="headerlink" title="I/O设备管理"></a>I/O设备管理</h2><h3 id="设备管理模块的设计目标-lt-简答-gt-（C）"><a href="#设备管理模块的设计目标-lt-简答-gt-（C）" class="headerlink" title="设备管理模块的设计目标&lt;简答&gt;（C）"></a>设备管理模块的设计目标&lt;简答&gt;（C）</h3><blockquote><ol><li>提高系统的利用率，实现设备的并行运行。</li><li>采用虚拟技术，实现设备的动态分配。</li><li>采用缓冲技术，减少主机和外设的速度差异。</li><li>方便用户使用，屏蔽设备的物理特性。</li><li>实现与文件系统等其他模块的有机协同工作。<h3 id="设备控制方式及对比-lt-简答-gt-（C）"><a href="#设备控制方式及对比-lt-简答-gt-（C）" class="headerlink" title="设备控制方式及对比&lt;简答&gt;（C）"></a>设备控制方式及对比&lt;简答&gt;（C）</h3></li></ol></blockquote><ul><li><strong>典型控制方式</strong>：CPU参与度高，效率低。</li><li><strong>基于询问的设备控制</strong>：CPU参与度<code>最高</code>，效率<code>最低</code>。</li><li><strong>基于中断的设备控制</strong>：CPU参与度中等，效率较高。</li><li><strong>基于DMA的设备控制</strong>：CPU参与度低，效率高。</li><li><strong>基于通道的设备控制</strong>：CPU参与度<code>最低</code>，效率<code>最高</code>。<h3 id="缓冲技术的基本思想（C）"><a href="#缓冲技术的基本思想（C）" class="headerlink" title="缓冲技术的基本思想（C）"></a>缓冲技术的基本思想（C）</h3></li></ul><ol><li><p><strong>写操作的缓冲</strong><br>进程执行<code>写</code>操作<code>输出数据</code>时，申请缓冲区，不断地把数据写到缓冲区，直到被装满。进程继续运行，系统将缓冲区内容传到I/O设备。</p></li><li><p><strong>读操作的缓冲</strong><br>进程执行<code>读</code>操作<code>输入数据</code>时，申请缓冲区，系统将内容读到缓冲区，根据进程要求，把需要的内容从缓冲区传送给进程。</p><h3 id="引入缓冲技术的目标（C）"><a href="#引入缓冲技术的目标（C）" class="headerlink" title="引入缓冲技术的目标（C）"></a>引入缓冲技术的目标（C）</h3></li><li><p><strong>改善主机和I/O设备之间速度不匹配的问题</strong><br>通过缓冲技术，可以有效地解决主机与I/O设备之间的速度差异，确保数据传输的顺畅。</p></li><li><p><strong>提高CPU和I/O设备的并行性，提高资源利用率</strong><br>缓冲技术允许CPU在等待I/O操作完成时继续执行其他任务，从而提高系统的整体效率和资源利用率。</p></li><li><p><strong>减少I/O中断次数，放宽对CPU中断响应的要求</strong><br>通过使用缓冲区，可以减少频繁的I/O中断，从而降低对CPU中断响应的要求，提高系统的稳定性。</p><h3 id="硬盘的存储空间管理（C）"><a href="#硬盘的存储空间管理（C）" class="headerlink" title="硬盘的存储空间管理（C）"></a>硬盘的存储空间管理（C）</h3></li></ol><p>访问硬盘上的数据依赖以下三个参数：</p><ol><li><p><strong>柱面号/磁道号</strong><br>柱面号或磁道号指的是数据位于硬盘上某个特定半径的磁道上。</p></li><li><p><strong>扇区号/块号</strong><br>是指数据位于某磁道的哪一个扇区上</p></li><li><p><strong>磁头号/盘片号</strong><br>数据位于哪一个盘面上</p><h3 id="I-O设备管理大题小题（SS）"><a href="#I-O设备管理大题小题（SS）" class="headerlink" title="I/O设备管理大题小题（SS）"></a>I/O设备管理大题小题（SS）</h3></li></ol><h2 id="文件管理"><a href="#文件管理" class="headerlink" title="文件管理"></a>文件管理</h2><h3 id="文件目录的基本要求（C）"><a href="#文件目录的基本要求（C）" class="headerlink" title="文件目录的基本要求（C）"></a>文件目录的基本要求（C）</h3><p>文件目录要能满足以下的功能性和性能要求：</p><ol><li><p><strong>实现按名存储</strong><br>文件目录应能够根据文件名进行存储和管理，方便用户通过文件名快速找到所需文件。</p></li><li><p><strong>提高检索速度</strong><br>文件目录应具备高效的检索机制，以提高文件的查找速度，减少用户等待时间。</p></li><li><p><strong>实现文件共享</strong><br>文件目录应支持文件共享功能，允许多个用户或进程同时访问同一文件，提高资源利用率。</p></li><li><p><strong>允许文件重名</strong><br>文件目录应允许同一目录下存在同名文件，通过不同的路径或其他标识来区分，从而提高灵活性。</p></li></ol><p><code>文件控制块的有序集合就构成了文件目录</code></p><h3 id="允许文件重名的条件"><a href="#允许文件重名的条件" class="headerlink" title="允许文件重名的条件"></a>允许文件重名的条件</h3><p>允许文件重名的条件通常包括以下几点：</p><ol><li><p><strong>不同的目录路径</strong><br>同一文件名可以在不同的目录中存在。例如，<code>/folder1/file.txt</code> 和 <code>/folder2/file.txt</code> 可以同时存在。</p></li><li><p><strong>文件扩展名的区分</strong><br>在某些系统中，文件名的扩展名可以作为区分的依据。例如，<code>file.txt</code> 和 <code>file.doc</code> 可以同时存在。</p></li><li><p><strong>使用唯一标识符</strong><br>系统可以为每个文件分配一个唯一的标识符（如文件ID），即使文件名相同，系统仍能通过标识符来区分不同的文件。</p></li><li><p><strong>版本控制</strong><br>在版本控制系统中，同一文件的不同版本可以使用相同的文件名，通过版本号或时间戳来区分。</p></li><li><p><strong>命名空间</strong><br>在某些系统中，文件名可能会被放置在不同的命名空间中，从而允许相同的文件名存在于不同的命名空间中。</p></li></ol><h3 id="不同文件物理结构的性能对比（C）"><a href="#不同文件物理结构的性能对比（C）" class="headerlink" title="不同文件物理结构的性能对比（C）"></a>不同文件物理结构的性能对比（C）</h3><div class="table-container"><table><thead><tr><th>性能指标</th><th>顺序文件结构</th><th>链接文件结构</th><th>索引文件结构</th></tr></thead><tbody><tr><td>读取性能</td><td>顺序读取，随机读取都高</td><td>顺序读取一般，随机读取速度差</td><td>顺序读取一般，随机读取速度高</td></tr><tr><td>插入删除性能</td><td>开销大</td><td>开销小</td><td>开销小</td></tr><tr><td>文件拓展性</td><td>受限</td><td>好</td><td>好</td></tr><tr><td>系统资源使用率</td><td>差</td><td>好</td><td>好</td></tr><tr><td>可靠性</td><td>强</td><td>会受影响</td><td>强</td></tr></tbody></table></div><h3 id="文件安全的基本要求（C）"><a href="#文件安全的基本要求（C）" class="headerlink" title="文件安全的基本要求（C）"></a>文件安全的基本要求（C）</h3><p>文件安全应满足以下基本要求：</p><ol><li><strong>保障有权限的合法用户对文件的各种合法操作</strong>  </li></ol><ol><li><strong>防止没权限的用户对文件的非法操作</strong>  </li></ol><ol><li><strong>防止非法用户冒充合法用户对文件进行操作</strong>  </li></ol><ol><li><strong>防止有权限的合法用户对文件的非法操作</strong>  </li></ol><h3 id="文件管理题目（S）"><a href="#文件管理题目（S）" class="headerlink" title="文件管理题目（S）"></a>文件管理题目（S）</h3>]]></content>
      
      
      <categories>
          
          <category> 杂项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一个简单的p站作者查询脚本</title>
      <link href="/2024/12/03/%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84p%E7%AB%99%E4%BD%9C%E8%80%85%E6%9F%A5%E8%AF%A2%E8%84%9A%E6%9C%AC/"/>
      <url>/2024/12/03/%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84p%E7%AB%99%E4%BD%9C%E8%80%85%E6%9F%A5%E8%AF%A2%E8%84%9A%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<h1 id="一个简单的p站作者查询脚本"><a href="#一个简单的p站作者查询脚本" class="headerlink" title="一个简单的p站作者查询脚本"></a>一个简单的p站作者查询脚本</h1><blockquote><p>使用这部分请保证网络条件允许访问相关网站</p><p>本脚本仅供学习使用，也为本人学习练习使用，如违规使用导致涉及ip封禁，或者触犯法律和本人无关 </p></blockquote><p><strong>找到该脚本的源码可以-&gt;<a href="https://github.com/XH-Ayane/pixiv_downloader">点这里</a></strong></p><h2 id="一、脚本功能"><a href="#一、脚本功能" class="headerlink" title="一、脚本功能"></a>一、脚本功能</h2><ul><li>支持通过一个完整的pid来进行快速访问</li><li>支持通过一个完整的pid来进行对该pid对应作者的作品悉数爬取</li><li>爬取的作品会创建一个文件夹进行保存</li></ul><h2 id="二、编写过程"><a href="#二、编写过程" class="headerlink" title="二、编写过程"></a>二、编写过程</h2><h3 id="1、环境配置"><a href="#1、环境配置" class="headerlink" title="1、环境配置"></a>1、环境配置</h3><blockquote><p>本脚本已经内置环境下载部分，但是请准备python环境</p><p>手动部署环境如下</p></blockquote><p>在脚本文件内打开终端完成，键入以下来完成环境配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install selenium</span><br><span class="line">pip install requests</span><br></pre></td></tr></table></figure><h3 id="2、导入必要的库"><a href="#2、导入必要的库" class="headerlink" title="2、导入必要的库"></a>2、导入必要的库</h3><p>在脚本的开头，导入所需的库：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> font</span><br></pre></td></tr></table></figure><h3 id="3、检查并安装库"><a href="#3、检查并安装库" class="headerlink" title="3、检查并安装库"></a>3、检查并安装库</h3><p><strong>编写一个函数来检查并安装缺失的库：</strong></p><p><strong>1. 安装库的函数</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">install</span>(<span class="params">package</span>):</span><br><span class="line">    subprocess.check_call([sys.executable, <span class="string">&quot;-m&quot;</span>, <span class="string">&quot;pip&quot;</span>, <span class="string">&quot;install&quot;</span>, package])</span><br></pre></td></tr></table></figure><br>定义一个名为 <code>install</code> 的函数，用于安装指定的 Python 包。</p><p><code>subprocess.check_call(...)：</code>这个函数用于在 Python 中调用外部命令。在这里，它调用 pip 来安装指定的包。</p><p><code>sys.executable：</code>返回当前 Python 解释器的路径，确保在正确的 Python 环境中执行安装命令。</p><p><code>&quot;-m&quot;, &quot;pip&quot;, &quot;install&quot;, package：</code>这是传递给 Python 的参数，表示使用 <code>pip</code> 模块来安装指定的包</p><p><strong>2. 尝试导入 requests 库</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">except</span> ImportError:</span><br><span class="line">    install(<span class="string">&#x27;requests&#x27;</span>)</span><br></pre></td></tr></table></figure><p>尝试导入 <code>requests</code> 库，这是一个用于发送 HTTP 请求的流行库。</p><p><code>try</code>块：尝试执行 <code>import requests</code>。</p><p><code>except ImportError</code>：如果 <code>requests</code> 库未安装，Python 会抛出 <code>ImportError</code> 异常，进入 <code>except</code> 块。</p><p><code>install(&#39;requests&#39;)</code>：调用之前定义的 <code>install</code> 函数，安装 <code>requests</code> 库。</p><p><strong>3. 尝试导入 selenium 库及其组件</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line">    <span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line">    <span class="keyword">from</span> selenium.webdriver.chrome.service <span class="keyword">import</span> Service</span><br><span class="line">    <span class="keyword">from</span> webdriver_manager.microsoft <span class="keyword">import</span> EdgeChromiumDriverManager</span><br><span class="line"><span class="keyword">except</span> ImportError:</span><br><span class="line">    install(<span class="string">&#x27;selenium&#x27;</span>)</span><br></pre></td></tr></table></figure><p>尝试导入 <code>selenium</code> 库及其相关组件，这些组件用于自动化浏览器操作。</p><p><code>try</code> 块：尝试导入 <code>selenium</code> 的多个模块：<br>from selenium import webdriver：导入 webdriver，用于控制浏览器。</p><p>from selenium.webdriver.common.by import By：导入 By 类，用于定位网页元素。</p><p>from selenium.webdriver.chrome.service import Service：导入 Service 类，用于管理 ChromeDriver 的服务。</p><p>from webdriver_manager.microsoft import EdgeChromiumDriverManager：导入 EdgeChromiumDriverManager，用于自动下载和管理 <code>Microsoft Edge</code> 的 <code>WebDriver</code>。</p><p>except ImportError：如果 selenium 库未安装，Python 会抛出 ImportError 异常，进入 <code>except</code> 块。</p><p>install(‘selenium’)：调用之前定义的 <code>install</code> 函数，安装 <code>selenium</code> 库。</p><h3 id="4、函数jump-to-author"><a href="#4、函数jump-to-author" class="headerlink" title="4、函数jump_to_author"></a>4、函数<code>jump_to_author</code></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">jump_to_author</span>():</span><br><span class="line">    uid = uid_entry.get()</span><br><span class="line">    driver = webdriver.Edge(service=Service(EdgeChromiumDriverManager().install()))</span><br><span class="line">    author_url = <span class="string">&quot;https://www.pixiv.net/users/&quot;</span> + uid</span><br><span class="line">    driver.get(author_url)</span><br></pre></td></tr></table></figure><ol><li><p><strong>获取用户输入的 UID</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uid = uid_entry.get()</span><br></pre></td></tr></table></figure><ul><li>从 Tkinter 界面的输入框中获取用户输入的 UID（用户 ID），并将其存储在变量 <code>uid</code> 中。</li></ul></li><li><p><strong>初始化 WebDriver</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">driver = webdriver.Edge(service=Service(EdgeChromiumDriverManager().install()))</span><br></pre></td></tr></table></figure><ul><li>使用 <code>webdriver_manager</code> 自动下载和管理 Microsoft Edge 的 WebDriver。</li><li>创建一个 <code>webdriver.Edge</code> 实例，允许脚本控制 Edge 浏览器。</li></ul></li><li><p><strong>构建用户页面 URL</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">author_url = <span class="string">&quot;https://www.pixiv.net/users/&quot;</span> + uid</span><br></pre></td></tr></table></figure><ul><li>根据用户输入的 UID 构建 Pixiv 用户页面的 URL。</li></ul></li><li><p><strong>打开用户页面</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">driver.get(author_url)</span><br></pre></td></tr></table></figure><ul><li>使用 WebDriver 打开构建的用户页面 URL。</li></ul></li></ol><h3 id="5、函数-download-all-works"><a href="#5、函数-download-all-works" class="headerlink" title="5、函数 download_all_works"></a>5、函数 <code>download_all_works</code></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">download_all_works</span>():</span><br><span class="line">    uid = uid_entry.get()</span><br><span class="line">    author_url = <span class="string">&quot;https://www.pixiv.net/users/&quot;</span> + uid</span><br><span class="line">    </span><br><span class="line">    driver = webdriver.Edge(service=Service(EdgeChromiumDriverManager().install()))</span><br><span class="line">    driver.get(author_url)</span><br><span class="line"></span><br><span class="line">    driver.implicitly_wait(<span class="number">10</span>)</span><br><span class="line">    works = driver.find_elements(By.CSS_SELECTOR, <span class="string">&quot;a[href*=&#x27;/artworks/&#x27;]&quot;</span>)</span><br><span class="line">    work_links = [work.get_attribute(<span class="string">&#x27;href&#x27;</span>) <span class="keyword">for</span> work <span class="keyword">in</span> works]</span><br><span class="line"></span><br><span class="line">    os.makedirs(uid, exist_ok=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    max_requests = <span class="number">100</span></span><br><span class="line">    request_count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> link <span class="keyword">in</span> work_links:</span><br><span class="line">        <span class="keyword">if</span> request_count &gt;= max_requests:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;达到最大请求次数，暂停一段时间...&quot;</span>)</span><br><span class="line">            time.sleep(<span class="number">3600</span>)</span><br><span class="line">            request_count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            driver.get(link)</span><br><span class="line">            time.sleep(random.uniform(<span class="number">2</span>, <span class="number">5</span>))</span><br><span class="line"></span><br><span class="line">            img_element = driver.find_element(By.CSS_SELECTOR, <span class="string">&quot;img[src*=&#x27;img-master&#x27;]&quot;</span>)</span><br><span class="line">            img_url = img_element.get_attribute(<span class="string">&#x27;src&#x27;</span>)</span><br><span class="line"></span><br><span class="line">            img_data = requests.get(img_url).content</span><br><span class="line">            img_name = os.path.join(uid, img_url.split(<span class="string">&#x27;/&#x27;</span>)[-<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(img_name, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> handler:</span><br><span class="line">                handler.write(img_data)</span><br><span class="line"></span><br><span class="line">            request_count += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;请求失败: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">            time.sleep(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    driver.quit()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;所有作品已下载。&quot;</span>)</span><br></pre></td></tr></table></figure><ol><li><p><strong>获取用户输入的 UID</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uid = uid_entry.get()</span><br></pre></td></tr></table></figure><ul><li>从 Tkinter 界面的输入框中获取用户输入的 UID。</li></ul></li><li><p><strong>构建用户页面 URL</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">author_url = <span class="string">&quot;https://www.pixiv.net/users/&quot;</span> + uid</span><br></pre></td></tr></table></figure><ul><li>根据用户输入的 UID 构建 Pixiv 用户页面的 URL。</li></ul></li><li><p><strong>初始化 WebDriver</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">driver = webdriver.Edge(service=Service(EdgeChromiumDriverManager().install()))</span><br><span class="line">driver.get(author_url)</span><br></pre></td></tr></table></figure><ul><li>创建一个 <code>webdriver.Edge</code> 实例，并打开用户页面。</li></ul></li><li><p><strong>隐式等待</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">driver.implicitly_wait(<span class="number">10</span>)</span><br></pre></td></tr></table></figure><ul><li>设置隐式等待时间为 10 秒，确保在查找元素时，如果元素未立即出现，WebDriver 会等待最多 10 秒。</li></ul></li><li><p><strong>查找作品链接</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">works = driver.find_elements(By.CSS_SELECTOR, <span class="string">&quot;a[href*=&#x27;/artworks/&#x27;]&quot;</span>)</span><br><span class="line">work_links = [work.get_attribute(<span class="string">&#x27;href&#x27;</span>) <span class="keyword">for</span> work <span class="keyword">in</span> works]</span><br></pre></td></tr></table></figure><ul><li>使用 CSS 选择器查找所有包含 <code>/artworks/</code> 的链接，表示该用户的作品。</li><li>将找到的链接存储在 <code>work_links</code> 列表中。</li></ul></li><li><p><strong>创建用户目录</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">os.makedirs(uid, exist_ok=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><ul><li>创建一个以 UID 命名的目录，用于存储下载的作品。如果目录已存在，则不会引发错误。</li></ul></li><li><p><strong>设置请求限制</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">max_requests = <span class="number">100</span></span><br><span class="line">request_count = <span class="number">0</span></span><br></pre></td></tr></table></figure><ul><li>设置最大请求次数为 100 次，防止过于频繁的请求导致被封禁。</li></ul></li><li><p><strong>循环下载作品</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> link <span class="keyword">in</span> work_links:</span><br></pre></td></tr></table></figure><ul><li>遍历每个作品链接，进行下载。</li></ul></li><li><p><strong>请求次数检查</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> request_count &gt;= max_requests:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;达到最大请求次数，暂停一段时间...&quot;</span>)</span><br><span class="line">    time.sleep(<span class="number">3600</span>)</span><br><span class="line">    request_count = <span class="number">0</span></span><br></pre></td></tr></table></figure><ul><li>如果请求次数达到最大值，暂停 1 小时，然后重置请求计数。</li></ul></li><li><p><strong>下载作品</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    driver.get(link)</span><br><span class="line">    time.sleep(random.uniform(<span class="number">2</span>, <span class="number">5</span>))</span><br><span class="line"></span><br><span class="line">    img_element = driver.find_element(By.CSS_SELECTOR, <span class="string">&quot;img[src*=&#x27;img-master&#x27;]&quot;</span>)</span><br><span class="line">    img_url = img_element.get_attribute(<span class="string">&#x27;src&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    img_data = requests.get(img_url).content</span><br><span class="line">    img_name = os.path.join(uid, img_url.split(<span class="string">&#x27;/&#x27;</span>)[-<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(img_name, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> handler:</span><br><span class="line">        handler.write(img_data)</span><br><span class="line"></span><br><span class="line">    request_count += <span class="number">1</span></span><br></pre></td></tr></table></figure><ul><li>使用 <code>try</code> 块来处理可能出现的异常。</li><li>打开作品链接，随机等待 2 到 5 秒，以模拟人类行为，避免被检测为机器人。</li><li>查找作品的图片元素，获取其 URL。</li><li>使用 <code>requests</code> 库下载图片数据。</li><li>将图片保存到之前创建的目录中，文件名为图片 URL 的最后一部分。</li><li>增加请求计数。</li></ul></li><li><p><strong>异常处理</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;请求失败: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">    time.sleep(<span class="number">10</span>)</span><br></pre></td></tr></table></figure><ul><li>如果在下载过程中发生任何异常，打印错误信息并等待 10 秒后继续。</li></ul></li><li><p><strong>关闭 WebDriver</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">driver.quit()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;所有作品已下载。&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li>下载完成后，关闭 WebDriver，释放资源。</li><li>打印下载完成的消息。</li></ul></li></ol><p><strong>这两个函数的主要功能是：</strong></p><ul><li><code>jump_to_author</code>：根据用户输入的 UID 跳转到该用户的 Pixiv 页面。</li><li><code>download_all_works</code>：下载该用户的所有作品，并将其保存到本地目录中。</li></ul><p>通过使用 Selenium 自动化浏览器操作和 Requests 下载图片，这个脚本实现了对 Pixiv 用户作品的快速访问和下载。</p><h3 id="6、Tkinter-界面代码"><a href="#6、Tkinter-界面代码" class="headerlink" title="6、Tkinter 界面代码"></a>6、Tkinter 界面代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">window = Tk()</span><br><span class="line">window.title(<span class="string">&quot;Pixiv作者查询&quot;</span>)</span><br><span class="line">window.geometry(<span class="string">&quot;400x400&quot;</span>)</span><br><span class="line">window.configure(bg=<span class="string">&quot;#f0f0f0&quot;</span>)</span><br></pre></td></tr></table></figure><ol><li><strong>创建主窗口</strong>：<ul><li><code>window = Tk()</code>：初始化 Tkinter 主窗口。</li><li><code>window.title(&quot;Pixiv作者查询&quot;)</code>：设置窗口标题为 “Pixiv作者查询”。</li><li><code>window.geometry(&quot;400x400&quot;)</code>：设置窗口大小为 400x400 像素。</li><li><code>window.configure(bg=&quot;#f0f0f0&quot;)</code>：设置窗口背景颜色为浅灰色。</li></ul></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置字体</span></span><br><span class="line">title_font = font.Font(family=<span class="string">&quot;Helvetica&quot;</span>, size=<span class="number">16</span>, weight=<span class="string">&quot;bold&quot;</span>)</span><br><span class="line">label_font = font.Font(family=<span class="string">&quot;Helvetica&quot;</span>, size=<span class="number">12</span>)</span><br></pre></td></tr></table></figure><ol><li><strong>设置字体</strong>：<ul><li>使用 <code>font.Font</code> 创建字体对象，定义标题和标签的字体样式。</li></ul></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建一个Frame用于组织控件</span></span><br><span class="line">frame = Frame(window, bg=<span class="string">&quot;#f0f0f0&quot;</span>)</span><br><span class="line">frame.pack(pady=<span class="number">20</span>)</span><br></pre></td></tr></table></figure><ol><li><strong>创建 Frame</strong>：<ul><li><code>frame = Frame(window, bg=&quot;#f0f0f0&quot;)</code>：创建一个 Frame 组件，用于组织其他控件。</li><li><code>frame.pack(pady=20)</code>：将 Frame 添加到主窗口，并设置上下边距为 20 像素。</li></ul></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建标签和输入框</span></span><br><span class="line">uid_label = Label(frame, text=<span class="string">&quot;请输入UID：&quot;</span>, bg=<span class="string">&quot;#f0f0f0&quot;</span>, font=label_font)</span><br><span class="line">uid_label.pack(pady=<span class="number">5</span>)</span><br><span class="line">uid_entry = Entry(frame, width=<span class="number">30</span>, font=label_font)</span><br><span class="line">uid_entry.pack(pady=<span class="number">5</span>)</span><br></pre></td></tr></table></figure><ol><li><strong>创建标签和输入框</strong>：<ul><li><code>uid_label</code>：创建一个标签，提示用户输入 UID。</li><li><code>uid_entry</code>：创建一个输入框，用户可以在其中输入 UID。</li><li>使用 <code>pack()</code> 方法将标签和输入框添加到 Frame 中，并设置上下边距。</li></ul></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建按钮</span></span><br><span class="line">jump_button = Button(frame, text=<span class="string">&quot;跳转到作者界面&quot;</span>, command=jump_to_author, bg=<span class="string">&quot;#4CAF50&quot;</span>, fg=<span class="string">&quot;white&quot;</span>, font=label_font)</span><br><span class="line">jump_button.pack(pady=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">download_button = Button(frame, text=<span class="string">&quot;下载作者所有作品&quot;</span>, command=download_all_works, bg=<span class="string">&quot;#2196F3&quot;</span>, fg=<span class="string">&quot;white&quot;</span>, font=label_font)</span><br><span class="line">download_button.pack(pady=<span class="number">10</span>)</span><br></pre></td></tr></table></figure><ol><li><strong>创建按钮</strong>：<ul><li><code>jump_button</code>：创建一个按钮，点击后调用 <code>jump_to_author</code> 函数，背景色为绿色。</li><li><code>download_button</code>：创建一个按钮，点击后调用 <code>download_all_works</code> 函数，背景色为蓝色。</li><li>使用 <code>pack()</code> 方法将按钮添加到 Frame 中，并设置上下边距。</li></ul></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加提示语到窗口底部</span></span><br><span class="line">info_frame = Frame(window, bg=<span class="string">&quot;#f0f0f0&quot;</span>)</span><br><span class="line">info_frame.pack(side=BOTTOM, pady=<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">info_label = Label(info_frame, text=<span class="string">&quot;在运行后请等待片刻，请勿关闭脚本&quot;</span>, bg=<span class="string">&quot;#f0f0f0&quot;</span>, font=label_font)</span><br><span class="line">info_label.pack(pady=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">info_label2 = Label(info_frame, text=<span class="string">&quot;请保证您的网络可以正常访问pixiv&quot;</span>, bg=<span class="string">&quot;#f0f0f0&quot;</span>, font=label_font)</span><br><span class="line">info_label2.pack(pady=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">info_label3 = Label(info_frame, text=<span class="string">&quot;仅供学习交流使用，禁止用于违法用途&quot;</span>, bg=<span class="string">&quot;#f0f0f0&quot;</span>, font=label_font)</span><br><span class="line">info_label3.pack(pady=<span class="number">2</span>)</span><br></pre></td></tr></table></figure><ol><li><strong>添加提示信息</strong>：<ul><li>创建一个新的 Frame <code>info_frame</code>，用于放置提示信息。</li><li>创建多个标签 <code>info_label</code>、<code>info_label2</code> 和 <code>info_label3</code>，分别提供运行提示、网络要求和使用声明。</li><li>使用 <code>pack()</code> 方法将这些标签添加到 <code>info_frame</code> 中，并设置上下边距。</li></ul></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 运行Tkinter窗口的主循环</span></span><br><span class="line">window.mainloop()</span><br></pre></td></tr></table></figure><ol><li><strong>启动主循环</strong>：<ul><li><code>window.mainloop()</code>：启动 Tkinter 的事件循环，等待用户操作。</li></ul></li></ol><p>该代码创建了一个简单的 Tkinter 界面，允许用户输入 Pixiv UID，并提供两个按钮以跳转到作者界面或下载作者的所有作品。</p><h2 id="三、测试和调试"><a href="#三、测试和调试" class="headerlink" title="三、测试和调试"></a>三、测试和调试</h2><p>调试完打包运行即可</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 脚本项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>毛泽东思想概论的考试重点</title>
      <link href="/2024/11/19/%E6%AF%9B%E6%B3%BD%E4%B8%9C%E6%80%9D%E6%83%B3%E6%A6%82%E8%AE%BA%E8%80%83%E8%AF%95%E9%87%8D%E7%82%B9%E5%8C%BA%E5%9F%9F/"/>
      <url>/2024/11/19/%E6%AF%9B%E6%B3%BD%E4%B8%9C%E6%80%9D%E6%83%B3%E6%A6%82%E8%AE%BA%E8%80%83%E8%AF%95%E9%87%8D%E7%82%B9%E5%8C%BA%E5%9F%9F/</url>
      
        <content type="html"><![CDATA[<h2 id="毛泽东思想概论的考试重点"><a href="#毛泽东思想概论的考试重点" class="headerlink" title="毛泽东思想概论的考试重点"></a>毛泽东思想概论的考试重点</h2><blockquote><p><strong>这是毛泽东思想概论的考试重点部分，属于个人复习用文章</strong></p><p>本文章分为三个部分来复习</p><ul><li>名词解释</li><li>简答题</li><li>论述题<h1 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h1><strong>1.群众路线内容及本质<code>P29</code></strong></li></ul></blockquote><ul><li>群众路线，就是一切为了群众，一切依靠群众，从群众中来，到群众中去，把党的正确主张变为群众的自觉行动。 </li><li>群众路线本质上体现的是马克思主义关于人民群众是历史的创造者这一基本原理。</li></ul><p><strong>2.独立自主<code>P30</code></strong></p><p>独立自主，就是坚持独立思考，走自己的路，就是坚定不移地维护民族独立、捍卫国家主权，把立足点放在依靠自己力量的基础上，同时积极争取外援，开展国际经济文化交流，学习外国一切对我们有益的先进事物。</p><p><strong>3.毛泽东思想<code>P37</code></strong></p><p>毛泽东思想是马克思主义中国化时代化的第一个重大理论成果，是 马克思列宁主义在中国的运用和发展，是被实践证明了的关于中国革命和建设的正确的理论原则和经验总结，是中国共产党集体智慧的结晶，是党必须长期坚持的指导思想。</p><p><strong>4.社会主义本质<code>P152</code></strong></p><p>社会主义的本质，是解放生产力，发展生产力，消灭剥削，消除两极分化，最终达到共同富裕。</p><p><strong>5.解放思想<code>P155</code></strong></p><p>我们讲解放思想，是指在马克思主义指导下打破习惯势力和主观偏见的束缚，研究新情况，解决新问题。</p><p><strong>6.四项基本原则<code>P160</code></strong></p><p>坚持社会主义道路，坚持无产阶级专政，坚持共产党的领导，坚持马列主义毛泽东思想</p><p><strong>7.一国两制<code>P176</code></strong></p><ul><li><p>“一国两制”是邓小平在坚持四项基本原则的基础上，从中国的实际出发提出的实现祖国和平统一的伟大构想。</p></li><li><p>“一国两制”的构想是邓小平运用辩证唯物主义和历史唯物主义，坚持实事求是，把和平共处原则用于解决一个国家的统一问题，既体现了坚持祖国统一、维护国家主权的原则性，又体现了照顾历史实际和现实可能的灵活性，是对马克思主义国家学说的创造性发展。</p></li></ul><p><strong>8.公有制经济范围<code>P207</code></strong></p><p>建立社会主义市场经济体制，必须坚持和完善公有制为主体、多种所有制经济共同发展的社会主义基本经济制度。一方面，必须毫不动摇地巩固和发展公有制经济。公有制经济不仅包括国有经济和集体经济，还包括混合所有制经济中的国有成分和集体成分。</p><p><strong>9.依法治国<code>P212</code></strong></p><ul><li>依法治国，就是广大人民群众在党的领导下，依照宪法和法律规定，通过各种途径和形式管理国家事务，管理经济文化事业，管理社会事务，保证国家各项工作都依法进行，逐步实现社会主义民主的制度化、法律化，使这种制度和法律不因领导人的改变而改变，不因领导人看法和注意力的改变而改变。</li><li>依法治国，是党领导人民治理国家的基本方略，是发展社会主义市场经济的客观需要，是社会文明进步的重要标志，是国家长治久安的重要保障。</li></ul><p><strong>10.五个统筹<code>P238</code></strong></p><ul><li>统筹城乡发展</li><li>统筹区域发展</li><li>统筹经济社会发展</li><li>统筹人与自然和谐发展</li><li>统筹国内发展和对外开放</li></ul><h1 id="简答题"><a href="#简答题" class="headerlink" title="简答题"></a>简答题</h1><p><strong>1.马克思主义中国化时代化的内涵<code>P4</code></strong></p><p>马克思主义中国化时代化，就是立足中国国情和时代特点，坚持把马克思主义基本原理同中国具体实际相结合、同中华优秀传统文化相结合，深入研究和解决中国革命、建设、改革不同历史时期的实际问题，真正搞懂面临的时代课题，不断吸收新的时代内容，科学回答时代提出的重 大理论和实践课题，创造新的理论成果。</p><p><strong>2.毛泽东思想的主要内容<code>P20-25</code></strong></p><p>新民主主义革命理论, 社会主义革命和社会主义建设理论, 革命军队建设和军事战略的理论, 政策和策略的理论，思想政治工作和文化工作的理论, 党的建设理论。</p><p><strong>3.第二次历史决议是在哪次会议上提出，报告全称，灵魂概要<code>P26</code></strong></p><p>1981年党的十一届六中全会通过的《中国共产党中央委员会关于建国以来党的若干历史问题的决议》指出：“毛泽东思想的活的灵魂，是贯串于上述各个组成部分的立场、观点和方法，它们有三个基本方面，即实事求是，群众路线，独立自主。“</p><p><strong>4.新民主主义革命的动力<code>P47</code></strong></p><ul><li>新民主主义革命的动力包括无产阶级、农民阶级、城市小资产阶级和民族资产阶级。</li><li>无产阶级是中国革命最基本的动力。</li><li>农民是中国革命的主力军。</li><li>城市小资产阶级是无产阶级的可靠同盟者。</li><li>民族资产阶级也是中国革命的动力之一。</li></ul><p><strong>5.科学发展观的科学内涵<code>P228-237</code></strong></p><ul><li>推动经济社会发展是科学发展观的第一要义</li><li>以人为本是科学发展观的核心立场</li><li>全面协调可持续是科学发展观的基本要求</li><li>统筹兼顾是科学发展观的根本方法</li></ul><h1 id="材料分析"><a href="#材料分析" class="headerlink" title="材料分析"></a>材料分析</h1><p><strong>1.毛泽东关于社会主义社会两类不同性质的矛盾表述<code>P99</code></strong></p><ul><li>关于社会主义社会两类不同性质的矛盾。毛泽东强调：在我们面前有两类社会矛盾，这就是敌我矛盾和人民内部矛盾，这是两类性质完全不同的矛盾。</li><li>关于正确处理两类不同性质社会矛盾的基本方法。毛泽东指出：敌我之间和人民内部这两类矛盾的性质不同，解决的方法也不同。简单地说起来，前者是分清敌我的问题，后者是分清是非的问题。</li></ul><p><strong>2.中国共产党百年奋斗的历史经验<code>P128</code></strong></p><p>坚持党的领导，坚持人民至上，坚持理论创新，坚持独立自主，坚持中国道路，坚持胸怀天下，坚持开拓创新，坚持敢于斗争，坚持统一战线，坚持自我革命</p><p><strong>3.建设中国特色社会主义的十条基本经验<code>P142</code></strong></p><ul><li>坚持以邓小平理论为指导，不断推进理论创新 </li><li>坚持以经济建设为中心，用发展的办法解决前进中的问题</li><li>坚持改革开放，不断完善社会主义市场经济体制 </li><li>坚持四项基本原则，发展社会主义民主政治 </li><li>坚持物质文明和精神文明两手抓，实行依法治国和以德治国相结合 </li><li>坚持稳定压倒一切的方针，正确处理改革发展稳定的关系 </li><li>坚持党对军队的绝对领导，走中国特色的精兵之路 </li><li>坚持团结一切可以团结的力遂，不断增强中华民族的凝聚力 </li><li>坚持独立自主的和平外交政策，维护世界和平与促进共同发展 </li><li>坚持加强和改善党的领导，全面推进党的建设新的伟大工程</li></ul><p><strong>4.谈谈党的思想路线重新确立<code>P154-155</code></strong></p><ul><li>坚持解放思想、实事求是，有力推动和保证了拨乱反正的进行。</li><li>坚持解放思想、实事求是，破除了僵化的社会主义模式观念，坚持走自己的路。</li><li>坚持解放思想、实事求是，一切从社会主义初级阶段的实际出发。</li><li>坚持解放思想、实事求是，坚持以“三个有利于”作为检验一切工作是非得失的根本标准，破除了在改革开放进程中离开发展生产力抽象谈论姓“社”姓“资”的思维定势，把我国的改革开放和现代化建设推进到一个新的阶段。</li></ul><p><strong>5.为什么改革是第二次革命<code>P167</code></strong></p><p>改革是一场深刻的社会变革，是中国的第二次革命，是实现中国现代化的必由之路，是社会主义制度的自我完善和发展。邓小平指出：“改革的性质同过去的革命一样，也是为了 扫除发展社会生产力的障碍，使中国摆脱贫穷落后的状态。从这个意义上说，改革也可以叫革命性的变革。”改革不是原有经济体制的细枝末节的修补，它的实质和目标是要从根本上改变束缚我国生产力发展的经济体制，建立充满生机和活力的社会主义新经济体制，同时相应地改革政治体 制和其他方面的体制，以实现中国的社会主义现代化。</p><p><strong>6. 邓小平的社会主义市场经济理论具有丰富的内涵<code>P171</code></strong></p><ul><li>一是计划经济和市场经济不是划分社会制度的标志，计划经济不等于社会主义，市场经济也不等于资本主义；</li><li>二是计划和市场都是经济手段，对经济活动的调节各有优劣，社会主义实行市场经济是要把两者优势结合起来；三是市场经济作 为资源配置手段本身不具有制度属性，可以和不同的社会制度结合，从而表现出不同的性质。坚持社会主义制度与市场经济的结合，是社会主义市场经济的特色所在、优势所在。</li></ul><p><strong>7.怎样贯彻三个代表重要思想<code>P201</code></strong></p><p>贯彻“三个代表”重要思想，关键在坚持与时俱进，核心在坚持党的先进性，本质在坚持执政为民。全党同志要牢牢把握这个根本要求，不断增强贯彻”三个代表”重要思想的自觉性和坚定性。</p><h1 id="论述题"><a href="#论述题" class="headerlink" title="论述题"></a>论述题</h1><p><strong>1.以人为本是科学发展观的核心立场的理论要点<code>P232</code></strong></p><ul><li>以人为本，坚持了历史唯物主义的基本立场和基本观点，坚持把人民的利益放在首位，体现了人民当家作主的历史地位，体现了我们党立党为公、执政为民的执政理念。<blockquote><p>人民群众是历史的创造者，是推动社会发展的决定性力量；人民群众是生产力中最活跃、最革命的因素，创造了社会的物质财富和精神财富。 胡锦涛指出：相信谁、依靠谁、为了谁，是否始终站在最广大人民的立场上，是区分唯物史观和唯心史观的分水岭，也是判断马克思主义政党的试金石。</p></blockquote></li><li>坚持以人为本，就要充分发挥人民群众的主人翁作 用，营造充分发挥人民群众聪明才智的社会环境，不断增强全社会的创造 活力，形成全体人民团结奋斗的强大力量。</li><li>坚持以人为本，就要坚持立党为公、执政为民，始终把最广大人民的根本利益作为我们一切工作的出发点和落脚点，真正做到权为民所用、情为民所系、利为民所谋。</li><li>坚持以人为本，就要坚持发展为了人民，始终把最广大人民的根本利益放在第一位。</li><li>坚持以人为本，就要坚持发展依靠人民，从人民群众的伟大创造中汲取智慧和力量。</li><li>坚持以人为本，就要坚持发展成果由人民共享，着力提高人民物质文化生活水平。</li><li>坚持以人为本，最终是为了实现人的全面发展。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 杂项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/11/07/hello-world/"/>
      <url>/2024/11/07/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>使用hexo+github完成个博客搭建部署（一）</title>
      <link href="/2024/09/26/%E4%BD%BF%E7%94%A8hexo-github%E5%AE%8C%E6%88%90%E4%B8%AA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E9%83%A8%E7%BD%B2%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2024/09/26/%E4%BD%BF%E7%94%A8hexo-github%E5%AE%8C%E6%88%90%E4%B8%AA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E9%83%A8%E7%BD%B2%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="使用hexo-github完成个人博客部署搭建（一）"><a href="#使用hexo-github完成个人博客部署搭建（一）" class="headerlink" title="使用hexo+github完成个人博客部署搭建（一）"></a>使用hexo+github完成个人博客部署搭建（一）</h1><blockquote><p>本篇文章文章参考了Fomalhaut大佬的<a href="https://www.fomal.cc/posts/e593433d.html">Hexo博客搭建基础教程(一)</a></p></blockquote><p>本人只是个小白，这篇文章是个简单的过程描述文章，也是个测试文章</p><h2 id="1-环境与工具准备"><a href="#1-环境与工具准备" class="headerlink" title="1 环境与工具准备"></a>1 环境与工具准备</h2><ul><li>操作系统：Windows10</li><li>Node</li><li>Git</li><li>Hexo</li><li>文本编辑器(强烈推荐VSCODE)</li><li>GitHub 帐号</li><li>一个域名（我都还没有搞域名）</li><li>云服务器（一定选稳定的，可以备份的）</li></ul><p><em>我们需要一些辅助的工具来完成部署，但是你使用终端也可以完成部署的啦</em></p><h2 id="2-Node的安装"><a href="#2-Node的安装" class="headerlink" title="2.Node的安装"></a>2.Node的安装</h2><p>1.打开Node官网，下载和自己系统相配的Node的安装程序就可以啦，注意版本如果你不怕折腾可以高一点，建议还是不要选太高的版本下载地址：<a href="https://nodejs.org/en/download/">https://nodejs.org/en/download/</a></p><p>2.下载后安装<br>安装的位置可以保持到c盘，你也可以部署到其他位置，但是可能有些奇怪的问题具体教程百度(不过坑比较多就是了)!</p><p>3.安装完成后，检查是否安装成功。在键盘按下<strong>win + R</strong>键，输入<strong>CMD</strong>，然后回车，打开CMD窗口，执行<strong>node -v</strong>命令，看到版本信息，则说明安装成功。</p><p>4.修改npm源。（如果你拥有VPN或者网络超级好你可以试试直接运行命令）</p><p>npm下载各种模块，默认是从国处服务器下载，速度较慢，建议配置成淘宝镜像。打开CMD窗口，运行如下命令:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config set registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure></p><h2 id="3-安装hexo"><a href="#3-安装hexo" class="headerlink" title="3.安装hexo"></a>3.安装hexo</h2><p>1.在<strong>Git BASH</strong>输入如下命令安装,使用终端也行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>2.安装完后输入hexo -v验证是否安装成功。（就在当前指令窗口运行）</p><h2 id="4-GitHub注册和创建仓库"><a href="#4-GitHub注册和创建仓库" class="headerlink" title="4.GitHub注册和创建仓库"></a>4.GitHub注册和创建仓库</h2><p>会想到用GitHub部署的人，注册之类的活感觉不用再说了，网上的视频教程一大堆，一般卡住人的是网络问题，整个vpn或者加速器就行</p><p><em>这里我直接讲仓库创建</em></p><p>1.注册完成后，点击右上角的+按钮，选择<code>New repository</code>，创建一个<code>&lt;用户名&gt;.github.io</code>的仓库。</p><ul><li><strong>一定要用自己用户名，要不以后404进不去页</strong></li><li>Description：为描述仓库（选填）</li><li>勾选 Initialize this repository with a README 初始化一个 README.md 文件</li><li>点击 Creat repository 进行创建<h2 id="5-连接到GitHub"><a href="#5-连接到GitHub" class="headerlink" title="5.连接到GitHub"></a>5.连接到GitHub</h2>1.执行以下命令生成ssh公钥，此公钥用于你的计算机连接Github</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;你的邮箱&quot;</span><br></pre></td></tr></table></figure><p>之后打开C盘下用户文件夹下的.ssh的文件夹，会看到 id_rsa.pub</p><p>使用文本编辑器打开（记事本，vscode,等等）<br>把里面的玩意全部都复制下来（别剪切！！）</p><p>2.将 SSH KEY 配置到 GitHub</p><p>进入github，点击右上角头像 选择settings，进入设置页后选择 SSH and GPG keys，名字随便起一个，公钥填到Key那一栏。</p><p>3.测试连接，回到本地打开终端，输入以下指令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>出现连接到账户的信息，说明已经完成大半，至此起码完成了环境准备工作。</p><h2 id="6-初始化-Hexo-项目"><a href="#6-初始化-Hexo-项目" class="headerlink" title="6.初始化 Hexo 项目"></a>6.初始化 Hexo 项目</h2><p>1.在目标路径（我这里选的路径为【C:/Hexo-bok】）打开cmd命令窗口，执行<code>hexo init</code>初始化项目。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init hexo-bok(项目名)</span><br></pre></td></tr></table></figure><p>也可以自行创建一个文件夹后打开控制台输入<code>hexo init</code></p><p>2.进入项目文件夹，输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i</span><br></pre></td></tr></table></figure><p>完成依赖安装</p><p><strong>注意保持全程网络环境稳定</strong></p><p>初始化项目后，hexo-bok有如下结构：</p><ul><li>【node_modules】：依赖包</li><li>【scaffolds】：生成文章的一些模板</li><li>【source】：用来存放你的文章</li><li>【themes】：主题</li><li>【.npmignore】：发布时忽略的文件（可忽略）</li><li>【_config.landscape.yml】：主题的配置文件</li><li>【config.yml】：博客的配置文件</li><li>【package.json】：项目名称、描述、版本、运行和开发等信息</li></ul><p>3.输入<code>hexo server</code>或者<code>hexo s</code>启动项目</p><p>4.打开浏览器，输入地址：<a href="http://localhost:4000/">http://localhost:4000/</a> ，看到一个网页跳出，说明你的博客已经构建成功了。</p><h2 id="7-将静态博客挂载到-GitHub-Pages"><a href="#7-将静态博客挂载到-GitHub-Pages" class="headerlink" title="7.将静态博客挂载到 GitHub Pages"></a>7.将静态博客挂载到 GitHub Pages</h2><ol><li>安装 hexo-deployer-git</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><ol><li>修改 _config.yml 文件</li></ol><p>在blog-demo目录下的_config.yml，就是整个Hexo框架的配置文件了。可以在里面修改大部分的配置。详细可参考官方的<a href="https://hexo.io/zh-cn/docs/configuration">配置描述</a>。</p><p>主要修改最后一行的配置，将repository修改为你自己的github项目地址即可，还有分支要改为main代表主分支（注意缩进）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: git@github.com:Fomalhaut-Blog/Fomalhaut-Blog.github.io.git</span><br><span class="line">  branch: main</span><br></pre></td></tr></table></figure><ol><li>修改好配置后，运行如下命令，将代码部署到 GitHub<br>输入三次<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean; hexo generate; hexo deploy  // VSCODE终端</span><br></pre></td></tr></table></figure>可以简化输入为<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo c; hexo g; hexo d</span><br></pre></td></tr></table></figure></li></ol><ul><li>hexo clean：删除之前生成的文件，若未生成过静态文件，可忽略此命令。</li><li>hexo generate：生成静态文章，可以用hexo g缩写</li><li>hexo deploy：部署文章，可以用hexo d缩写<blockquote><p>注意：deploy时可能要你输入 username 和 password。正常键入github信息即可</p></blockquote></li></ul><p>如果出现<code>Deploy done</code>，则说明部署成功了。</p><p>稍等两分钟，打开浏览器访问：<strong>https://&lt;你的github用户名&gt;.github.io</strong> ，这时候我们就可以看到博客内容了。</p>]]></content>
      
      
      <categories>
          
          <category> 杂项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实验小记 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
