<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>一个相当简要的java要点总结</title>
      <link href="/2025/06/30/%E4%B8%80%E4%B8%AA%E7%9B%B8%E5%BD%93%E7%AE%80%E8%A6%81%E7%9A%84java%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/"/>
      <url>/2025/06/30/%E4%B8%80%E4%B8%AA%E7%9B%B8%E5%BD%93%E7%AE%80%E8%A6%81%E7%9A%84java%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="一个相当简要的java要点总结（这算摸鱼文吧）"><a href="#一个相当简要的java要点总结（这算摸鱼文吧）" class="headerlink" title="一个相当简要的java要点总结（这算摸鱼文吧）"></a>一个相当简要的java要点总结（这算摸鱼文吧）</h1><h2 id="一、Java语言深度解析"><a href="#一、Java语言深度解析" class="headerlink" title="一、Java语言深度解析"></a>一、Java语言深度解析</h2><blockquote><p>噗噗，这份笔记我有一个更好，更全的，这个只是为了快点背，如果要查看全面详细，费劲本大爷心思精细书写的请转《java快速学习速查》系列</p></blockquote><p>因为不想排版所以很多直接包裹在代码块里了，这篇文章更多的是为了测试mermaid是否可以正常渲染</p><h3 id="1-1-语言本质剖析"><a href="#1-1-语言本质剖析" class="headerlink" title="1.1 语言本质剖析"></a>1.1 语言本质剖析</h3><p>Java是一种严格遵循”Write Once, Run Anywhere”原则的<strong>高级编程语言</strong>，其核心特性包括：</p><ul><li><strong>跨平台性</strong>：通过JVM实现字节码的跨平台执行</li><li><strong>面向对象</strong>：完全基于对象的编程范式（封装&#x2F;继承&#x2F;多态）</li><li><strong>自动内存管理</strong>：垃圾回收机制(GC)自动处理内存分配与释放</li><li><strong>多线程支持</strong>：原生支持多线程并发编程</li></ul><h3 id="1-2-发展历程详解"><a href="#1-2-发展历程详解" class="headerlink" title="1.2 发展历程详解"></a>1.2 发展历程详解</h3><blockquote><p>有种写书人既视感，很啰嗦欸</p></blockquote><table><thead><tr><th>时间节点</th><th>重大事件</th><th>技术影响</th></tr></thead><tbody><tr><td>1991</td><td>Oak语言诞生</td><td>面向家电嵌入式系统</td></tr><tr><td>1995.5.23</td><td>正式更名Java</td><td>首个公开版本JDK 1.0a2</td></tr><tr><td>1998</td><td>J2SE 1.2发布</td><td>引入集合框架&#x2F;JIT编译器</td></tr><tr><td>2004</td><td>J2SE 5.0</td><td>泛型&#x2F;自动装箱&#x2F;注解等革命性特性</td></tr><tr><td>2014</td><td>Java 8</td><td>Lambda表达式&#x2F;Stream API</td></tr></tbody></table><h2 id="二、开发环境专业配置"><a href="#二、开发环境专业配置" class="headerlink" title="二、开发环境专业配置"></a>二、开发环境专业配置</h2><h3 id="2-1-JDK组件架构"><a href="#2-1-JDK组件架构" class="headerlink" title="2.1 JDK组件架构"></a>2.1 JDK组件架构</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">    JDK--&gt;开发工具(javac/javadoc/jdb)</span><br><span class="line">    JDK--&gt;JRE--&gt;JVM</span><br><span class="line">    JDK--&gt;JRE--&gt;核心类库(rt.jar等)</span><br></pre></td></tr></table></figure><p>这是个图（解析不出来算了，我也不想我也不想耗费资源）</p><h3 id="2-2-环境变量原理"><a href="#2-2-环境变量原理" class="headerlink" title="2.2 环境变量原理"></a>2.2 环境变量原理</h3><ul><li><strong>JAVA_HOME</strong>：指向JDK安装根目录<ul><li>示例：<code>C:\Program Files\Java\jdk-17.0.2</code></li></ul></li><li><strong>PATH</strong>：添加<code>%JAVA_HOME%\bin</code>使系统识别命令</li><li><strong>CLASSPATH</strong>（可选）：指定类加载路径</li></ul><p>验证命令示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看版本</span></span><br><span class="line">java -version</span><br><span class="line">javac -version</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看环境变量</span></span><br><span class="line"><span class="built_in">echo</span> %JAVA_HOME%</span><br></pre></td></tr></table></figure><h2 id="三、HelloWorld深度解读"><a href="#三、HelloWorld深度解读" class="headerlink" title="三、HelloWorld深度解读"></a>三、HelloWorld深度解读</h2><h3 id="3-1-程序结构分解"><a href="#3-1-程序结构分解" class="headerlink" title="3.1 程序结构分解"></a>3.1 程序结构分解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 类声明：访问修饰符 + class关键字 + 类名</span></span><br><span class="line"><span class="comment"> * 要求：类名与文件名严格一致（区分大小写）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 主方法：程序唯一入口</span></span><br><span class="line"><span class="comment">     * public static void 固定写法</span></span><br><span class="line"><span class="comment">     * String[] args 用于接收命令行参数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 系统输出语句</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Hello World!&quot;</span>); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-编译执行全流程"><a href="#3-2-编译执行全流程" class="headerlink" title="3.2 编译执行全流程"></a>3.2 编译执行全流程</h3><ol><li><p><strong>编译阶段</strong>（生成字节码）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javac -encoding UTF-8 HelloWorld.java</span><br></pre></td></tr></table></figure><ul><li>生成<code>HelloWorld.class</code>文件</li><li><code>-encoding</code>参数解决中文乱码</li></ul></li><li><p><strong>运行阶段</strong>（JVM解释执行）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java HelloWorld</span><br></pre></td></tr></table></figure><blockquote><p>注意：运行时不需要.class后缀</p></blockquote></li></ol><h2 id="四、代码规范最佳实践"><a href="#四、代码规范最佳实践" class="headerlink" title="四、代码规范最佳实践"></a>四、代码规范最佳实践</h2><h3 id="4-1-注释规范模板"><a href="#4-1-注释规范模板" class="headerlink" title="4.1 注释规范模板"></a>4.1 注释规范模板</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 单行注释：方法内部简短说明</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 多行注释：复杂逻辑说明</span></span><br><span class="line"><span class="comment"> * 第二行说明</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 类/方法文档注释（支持HTML标签）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 作者</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> 参数说明</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 返回值说明</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h3 id="4-2-命名规范细则"><a href="#4-2-命名规范细则" class="headerlink" title="4.2 命名规范细则"></a>4.2 命名规范细则</h3><table><thead><tr><th>元素类型</th><th>规范示例</th><th>错误示例</th></tr></thead><tbody><tr><td>类名</td><td><code>UserService</code></td><td><code>userService</code></td></tr><tr><td>方法名</td><td><code>getUserName()</code></td><td><code>GetUserName()</code></td></tr><tr><td>变量名</td><td><code>studentCount</code></td><td><code>StudentCount</code></td></tr><tr><td>常量名</td><td><code>MAX_SIZE</code></td><td><code>maxSize</code></td></tr></tbody></table><h2 id="五、数据类型系统详解"><a href="#五、数据类型系统详解" class="headerlink" title="五、数据类型系统详解"></a>五、数据类型系统详解</h2><h3 id="5-1-基本类型内存布局"><a href="#5-1-基本类型内存布局" class="headerlink" title="5.1 基本类型内存布局"></a>5.1 基本类型内存布局</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">pie</span><br><span class="line">    title 基本类型内存占比</span><br><span class="line">    &quot;byte&quot; : 1</span><br><span class="line">    &quot;short&quot; : 2</span><br><span class="line">    &quot;int&quot; : 4</span><br><span class="line">    &quot;long&quot; : 8</span><br><span class="line">    &quot;float&quot; : 4</span><br><span class="line">    &quot;double&quot; : 8</span><br><span class="line">    &quot;char&quot; : 2</span><br><span class="line">    &quot;boolean&quot; : 1</span><br></pre></td></tr></table></figure><p>这是个饼图你信不信，反正我是信了，解析的出来就解析出来，没有就罢了</p><h3 id="5-2-类型转换原理"><a href="#5-2-类型转换原理" class="headerlink" title="5.2 类型转换原理"></a>5.2 类型转换原理</h3><p><strong>自动转换规则</strong>（满足以下任一条件）：</p><ol><li>目标类型范围大于源类型<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"><span class="type">double</span> <span class="variable">d</span> <span class="operator">=</span> i;  <span class="comment">// 自动转换</span></span><br></pre></td></tr></table></figure></li><li>表达式中的自动提升<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">byte</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">r</span> <span class="operator">=</span> b + <span class="number">20</span>;  <span class="comment">// byte自动提升为int</span></span><br></pre></td></tr></table></figure></li></ol><p><strong>强制转换风险点</strong>：</p><p>掉精度警告，数据类型报错警告，类型组合相性警告</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">double</span> <span class="variable">price</span> <span class="operator">=</span> <span class="number">99.99</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">discount</span> <span class="operator">=</span> (<span class="type">int</span>)price;  <span class="comment">// 丢失小数部分（得99）</span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> (<span class="type">char</span>)<span class="number">1000</span>;  <span class="comment">// 可能产生意外字符</span></span><br></pre></td></tr></table></figure><h2 id="六、运算符高级应用"><a href="#六、运算符高级应用" class="headerlink" title="六、运算符高级应用"></a>六、运算符高级应用</h2><h3 id="6-1-位运算实战"><a href="#6-1-位运算实战" class="headerlink" title="6.1 位运算实战"></a>6.1 位运算实战</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 权限控制示例</span></span><br><span class="line"><span class="keyword">final</span> <span class="type">int</span> <span class="variable">READ</span> <span class="operator">=</span> <span class="number">1</span> &lt;&lt; <span class="number">0</span>;  <span class="comment">// 0001</span></span><br><span class="line"><span class="keyword">final</span> <span class="type">int</span> <span class="variable">WRITE</span> <span class="operator">=</span> <span class="number">1</span> &lt;&lt; <span class="number">1</span>; <span class="comment">// 0010</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">permission</span> <span class="operator">=</span> READ | WRITE;  <span class="comment">// 0011(3)</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">canRead</span> <span class="operator">=</span> (permission &amp; READ) != <span class="number">0</span>;</span><br></pre></td></tr></table></figure><h3 id="6-2-运算符优先级表"><a href="#6-2-运算符优先级表" class="headerlink" title="6.2 运算符优先级表"></a>6.2 运算符优先级表</h3><table><thead><tr><th>优先级</th><th>运算符</th><th>结合性</th></tr></thead><tbody><tr><td>1</td><td><code>() [] .</code></td><td>左→右</td></tr><tr><td>2</td><td><code>! ~ ++ --</code></td><td>右→左</td></tr><tr><td>3</td><td><code>* / %</code></td><td>左→右</td></tr><tr><td>4</td><td><code>+ -</code></td><td>左→右</td></tr><tr><td>5</td><td><code>&lt;&lt; &gt;&gt; &gt;&gt;&gt;</code></td><td>左→右</td></tr><tr><td>6</td><td><code>&lt; &lt;= &gt; &gt;=</code></td><td>左→右</td></tr></tbody></table><h2 id="七、企业级编码规范"><a href="#七、企业级编码规范" class="headerlink" title="七、企业级编码规范"></a>七、企业级编码规范</h2><ol><li><p><strong>防御式编程</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对象判空</span></span><br><span class="line"><span class="keyword">if</span> (obj == <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;参数不能为空&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>常量定义原则</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用枚举替代魔法数字</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">Color</span> &#123;</span><br><span class="line">    RED(<span class="string">&quot;#FF0000&quot;</span>), </span><br><span class="line">    GREEN(<span class="string">&quot;#00FF00&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String hexCode;</span><br><span class="line">    <span class="comment">// 构造方法...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>文档化要求</strong>：</p><ul><li>所有public类&#x2F;方法必须包含JavaDoc</li><li>复杂算法需要添加实现思路说明</li><li>修改历史通过@since标记</li></ul></li></ol><p>没搞完喔，等着更新……，先用着</p>]]></content>
      
      
      <categories>
          
          <category> 要点总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL数据库系统学习笔记（3）</title>
      <link href="/2025/05/25/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%883%EF%BC%89/"/>
      <url>/2025/05/25/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%883%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="Oracle与MySQL一般性对比"><a href="#Oracle与MySQL一般性对比" class="headerlink" title="Oracle与MySQL一般性对比"></a>Oracle与MySQL一般性对比</h1><blockquote><p>只做大概性的罗列性质的大致化整理，后续部分有代码对比实例，仅做参考，请以更全面具体的专业性文章和手册为准</p></blockquote><h2 id="一、基础架构差异"><a href="#一、基础架构差异" class="headerlink" title="一、基础架构差异"></a>一、基础架构差异</h2><h3 id="1-数据库架构"><a href="#1-数据库架构" class="headerlink" title="1. 数据库架构"></a>1. 数据库架构</h3><p><strong>Oracle</strong>：</p><ul><li>采用”实例-数据库”的多租户架构</li><li>一个实例可管理多个PDB（可插拔数据库）</li><li>共享内存区域（SGA）设计复杂精细</li></ul><p><strong>MySQL</strong>：</p><ul><li>简单直接的”实例-数据库”架构</li><li>默认存储引擎InnoDB采用表空间管理</li><li>缓冲池(Buffer Pool)是主要内存区域</li></ul><h3 id="2-存储引擎"><a href="#2-存储引擎" class="headerlink" title="2. 存储引擎"></a>2. 存储引擎</h3><p><strong>Oracle</strong>：</p><ul><li>单一存储引擎架构</li><li>自动管理所有数据存储细节</li></ul><p><strong>MySQL</strong>：</p><ul><li>插件式存储引擎（InnoDB&#x2F;MyISAM等）</li><li>不同引擎特性差异大（如事务支持、锁机制）</li></ul><h2 id="二、数据类型差异"><a href="#二、数据类型差异" class="headerlink" title="二、数据类型差异"></a>二、数据类型差异</h2><h3 id="1-数值类型"><a href="#1-数值类型" class="headerlink" title="1. 数值类型"></a>1. 数值类型</h3><table><thead><tr><th>类型</th><th>Oracle</th><th>MySQL</th></tr></thead><tbody><tr><td>整数</td><td>NUMBER(10)</td><td>INT&#x2F;BIGINT</td></tr><tr><td>小数</td><td>NUMBER(10,2)</td><td>DECIMAL(10,2)</td></tr><tr><td>浮点数</td><td>BINARY_FLOAT</td><td>FLOAT&#x2F;DOUBLE</td></tr></tbody></table><h3 id="2-字符串类型"><a href="#2-字符串类型" class="headerlink" title="2. 字符串类型"></a>2. 字符串类型</h3><table><thead><tr><th>类型</th><th>Oracle</th><th>MySQL</th></tr></thead><tbody><tr><td>定长字符串</td><td>CHAR(10)</td><td>CHAR(10)</td></tr><tr><td>变长字符串</td><td>VARCHAR2(4000)</td><td>VARCHAR(65535)</td></tr><tr><td>大文本</td><td>CLOB</td><td>LONGTEXT</td></tr></tbody></table><h2 id="三、SQL语法差异"><a href="#三、SQL语法差异" class="headerlink" title="三、SQL语法差异"></a>三、SQL语法差异</h2><h3 id="1-分页查询"><a href="#1-分页查询" class="headerlink" title="1. 分页查询"></a>1. 分页查询</h3><p><strong>Oracle</strong>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> (</span><br><span class="line">  <span class="keyword">SELECT</span> t.<span class="operator">*</span>, ROWNUM rn <span class="keyword">FROM</span> employees t </span><br><span class="line">  <span class="keyword">WHERE</span> ROWNUM <span class="operator">&lt;=</span> <span class="number">20</span></span><br><span class="line">) <span class="keyword">WHERE</span> rn <span class="operator">&gt;</span> <span class="number">10</span>;</span><br></pre></td></tr></table></figure><p><strong>MySQL</strong>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees LIMIT <span class="number">10</span>, <span class="number">10</span>;</span><br></pre></td></tr></table></figure><h3 id="2-日期处理"><a href="#2-日期处理" class="headerlink" title="2. 日期处理"></a>2. 日期处理</h3><p><strong>Oracle</strong>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> TO_CHAR(SYSDATE, <span class="string">&#x27;YYYY-MM-DD HH24:MI:SS&#x27;</span>) <span class="keyword">FROM</span> dual;</span><br></pre></td></tr></table></figure><p><strong>MySQL</strong>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> DATE_FORMAT(NOW(), <span class="string">&#x27;%Y-%m-%d %H:%i:%s&#x27;</span>);</span><br></pre></td></tr></table></figure><h2 id="四、事务与锁机制"><a href="#四、事务与锁机制" class="headerlink" title="四、事务与锁机制"></a>四、事务与锁机制</h2><h3 id="1-事务隔离级别"><a href="#1-事务隔离级别" class="headerlink" title="1. 事务隔离级别"></a>1. 事务隔离级别</h3><table><thead><tr><th>隔离级别</th><th>Oracle支持</th><th>MySQL支持</th></tr></thead><tbody><tr><td>READ UNCOMMITTED</td><td>❌</td><td>✅</td></tr><tr><td>READ COMMITTED</td><td>✅(默认)</td><td>✅</td></tr><tr><td>REPEATABLE READ</td><td>✅</td><td>✅(默认)</td></tr><tr><td>SERIALIZABLE</td><td>✅</td><td>✅</td></tr></tbody></table><h3 id="2-锁机制"><a href="#2-锁机制" class="headerlink" title="2. 锁机制"></a>2. 锁机制</h3><p><strong>Oracle</strong>：</p><ul><li>行级锁为主</li><li>自动升级锁粒度</li><li>支持多版本读一致性</li></ul><p>**MySQL(InnoDB)**：</p><ul><li>行级锁+间隙锁</li><li>不自动升级锁粒度</li><li>MVCC实现机制不同</li></ul><h2 id="五、高可用方案"><a href="#五、高可用方案" class="headerlink" title="五、高可用方案"></a>五、高可用方案</h2><h3 id="Oracle高可用"><a href="#Oracle高可用" class="headerlink" title="Oracle高可用"></a>Oracle高可用</h3><ul><li>RAC (Real Application Clusters)</li><li>Data Guard</li><li>GoldenGate</li></ul><h3 id="MySQL高可用"><a href="#MySQL高可用" class="headerlink" title="MySQL高可用"></a>MySQL高可用</h3><ul><li>主从复制</li><li>Group Replication</li><li>InnoDB Cluster</li><li>MHA (Master High Availability)</li></ul><h2 id="六、备份恢复机制"><a href="#六、备份恢复机制" class="headerlink" title="六、备份恢复机制"></a>六、备份恢复机制</h2><h3 id="Oracle备份"><a href="#Oracle备份" class="headerlink" title="Oracle备份"></a>Oracle备份</h3><ul><li>RMAN (Recovery Manager)</li><li>支持块级别增量备份</li><li>时间点恢复精确到秒</li></ul><h3 id="MySQL备份"><a href="#MySQL备份" class="headerlink" title="MySQL备份"></a>MySQL备份</h3><ul><li>mysqldump逻辑备份</li><li>Percona XtraBackup物理备份</li><li>二进制日志(binlog)恢复</li></ul><h2 id="七、性能优化差异"><a href="#七、性能优化差异" class="headerlink" title="七、性能优化差异"></a>七、性能优化差异</h2><h3 id="Oracle优化"><a href="#Oracle优化" class="headerlink" title="Oracle优化"></a>Oracle优化</h3><ul><li>复杂的执行计划管理</li><li>丰富的统计信息收集</li><li>SQL Tuning Advisor</li></ul><h3 id="MySQL优化"><a href="#MySQL优化" class="headerlink" title="MySQL优化"></a>MySQL优化</h3><ul><li>EXPLAIN分析执行计划</li><li>慢查询日志分析</li><li>索引优化简单直接</li></ul><h2 id="八、适用场景建议"><a href="#八、适用场景建议" class="headerlink" title="八、适用场景建议"></a>八、适用场景建议</h2><h3 id="选择Oracle当："><a href="#选择Oracle当：" class="headerlink" title="选择Oracle当："></a>选择Oracle当：</h3><ol><li>企业级关键业务系统</li><li>需要复杂分析处理</li><li>极高可用性要求</li><li>大数据量高并发场景</li></ol><h3 id="选择MySQL当："><a href="#选择MySQL当：" class="headerlink" title="选择MySQL当："></a>选择MySQL当：</h3><ol><li>Web应用&#x2F;互联网服务</li><li>快速迭代开发项目</li><li>中小规模数据量</li><li>成本敏感型项目</li></ol><h2 id="九、迁移注意事项"><a href="#九、迁移注意事项" class="headerlink" title="九、迁移注意事项"></a>九、迁移注意事项</h2><ol><li><strong>数据类型转换</strong>：特别注意NUMBER与DECIMAL的精度处理</li><li><strong>SQL重写</strong>：分页、序列、日期函数等语法差异</li><li><strong>事务处理</strong>：隔离级别和锁行为的差异</li><li><strong>性能调优</strong>：执行计划和索引策略需要重新评估</li></ol><h2 id="十、未来发展趋势"><a href="#十、未来发展趋势" class="headerlink" title="十、未来发展趋势"></a>十、未来发展趋势</h2><p><strong>Oracle</strong>：</p><ul><li>继续强化云服务(Oracle Cloud)</li><li>自动化运维方向</li><li>多模型数据库支持</li></ul><p><strong>MySQL</strong>：</p><ul><li>增强分析处理能力</li><li>改进Group Replication</li><li>更好的云原生支持</li></ul><h1 id="Oracle与MySQL常用语法对照手册"><a href="#Oracle与MySQL常用语法对照手册" class="headerlink" title="Oracle与MySQL常用语法对照手册"></a>Oracle与MySQL常用语法对照手册</h1><h2 id="一、分页查询语法对比"><a href="#一、分页查询语法对比" class="headerlink" title="一、分页查询语法对比"></a>一、分页查询语法对比</h2><h3 id="1-标准分页实现"><a href="#1-标准分页实现" class="headerlink" title="1. 标准分页实现"></a>1. 标准分页实现</h3><p><strong>Oracle</strong> (12c以下版本)：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 传统ROWNUM三层嵌套写法</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> t.<span class="operator">*</span>, ROWNUM <span class="keyword">AS</span> rn</span><br><span class="line">    <span class="keyword">FROM</span> (</span><br><span class="line">        <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees <span class="keyword">ORDER</span> <span class="keyword">BY</span> hire_date</span><br><span class="line">    ) t</span><br><span class="line">    <span class="keyword">WHERE</span> ROWNUM <span class="operator">&lt;=</span> <span class="number">20</span>  <span class="comment">-- 结束行</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">WHERE</span> rn <span class="operator">&gt;</span> <span class="number">10</span>;  <span class="comment">-- 起始行</span></span><br></pre></td></tr></table></figure><p><strong>MySQL</strong>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 简洁的LIMIT语法</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> hire_date</span><br><span class="line">LIMIT <span class="number">10</span>, <span class="number">10</span>;  <span class="comment">-- 起始行, 行数</span></span><br></pre></td></tr></table></figure><h3 id="2-12c-Oracle新分页语法"><a href="#2-12c-Oracle新分页语法" class="headerlink" title="2. 12c+ Oracle新分页语法"></a>2. 12c+ Oracle新分页语法</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 12c开始支持的FETCH语法</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> hire_date</span><br><span class="line"><span class="keyword">OFFSET</span> <span class="number">10</span> <span class="keyword">ROWS</span> <span class="keyword">FETCH</span> NEXT <span class="number">10</span> <span class="keyword">ROWS</span> <span class="keyword">ONLY</span>;</span><br></pre></td></tr></table></figure><h2 id="二、序列操作对比"><a href="#二、序列操作对比" class="headerlink" title="二、序列操作对比"></a>二、序列操作对比</h2><h3 id="1-创建序列"><a href="#1-创建序列" class="headerlink" title="1. 创建序列"></a>1. 创建序列</h3><p><strong>Oracle</strong>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> SEQUENCE emp_seq</span><br><span class="line"><span class="keyword">START</span> <span class="keyword">WITH</span> <span class="number">100</span></span><br><span class="line">INCREMENT <span class="keyword">BY</span> <span class="number">1</span></span><br><span class="line">MAXVALUE <span class="number">999999</span></span><br><span class="line">NOCYCLE</span><br><span class="line">CACHE <span class="number">20</span>;</span><br></pre></td></tr></table></figure><p><strong>MySQL</strong> (AUTO_INCREMENT)：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> employees (</span><br><span class="line">    id <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">    name <span class="type">VARCHAR</span>(<span class="number">100</span>),</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (id)</span><br><span class="line">) AUTO_INCREMENT <span class="operator">=</span> <span class="number">100</span>;</span><br></pre></td></tr></table></figure><h3 id="2-获取序列值"><a href="#2-获取序列值" class="headerlink" title="2. 获取序列值"></a>2. 获取序列值</h3><p><strong>Oracle</strong>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 获取下一个值</span></span><br><span class="line"><span class="keyword">SELECT</span> emp_seq.NEXTVAL <span class="keyword">FROM</span> dual;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 获取当前值</span></span><br><span class="line"><span class="keyword">SELECT</span> emp_seq.CURRVAL <span class="keyword">FROM</span> dual;</span><br></pre></td></tr></table></figure><p><strong>MySQL</strong>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 插入后获取最后ID</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> employees (name) <span class="keyword">VALUES</span> (<span class="string">&#x27;张三&#x27;</span>);</span><br><span class="line"><span class="keyword">SELECT</span> LAST_INSERT_ID();</span><br></pre></td></tr></table></figure><h2 id="三、日期处理对比"><a href="#三、日期处理对比" class="headerlink" title="三、日期处理对比"></a>三、日期处理对比</h2><h3 id="1-当前时间获取"><a href="#1-当前时间获取" class="headerlink" title="1. 当前时间获取"></a>1. 当前时间获取</h3><p><strong>Oracle</strong>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> SYSDATE <span class="keyword">FROM</span> dual;          <span class="comment">-- 系统日期</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">FROM</span> dual; <span class="comment">-- 时间戳</span></span><br></pre></td></tr></table></figure><p><strong>MySQL</strong>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> NOW();      <span class="comment">-- 当前日期时间</span></span><br><span class="line"><span class="keyword">SELECT</span> CURDATE();  <span class="comment">-- 当前日期</span></span><br><span class="line"><span class="keyword">SELECT</span> CURTIME();  <span class="comment">-- 当前时间</span></span><br></pre></td></tr></table></figure><h3 id="2-日期格式化"><a href="#2-日期格式化" class="headerlink" title="2. 日期格式化"></a>2. 日期格式化</h3><p><strong>Oracle</strong>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> TO_CHAR(SYSDATE, <span class="string">&#x27;YYYY-MM-DD HH24:MI:SS&#x27;</span>) <span class="keyword">FROM</span> dual;</span><br></pre></td></tr></table></figure><p><strong>MySQL</strong>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> DATE_FORMAT(NOW(), <span class="string">&#x27;%Y-%m-%d %H:%i:%s&#x27;</span>);</span><br></pre></td></tr></table></figure><h2 id="四、字符串处理对比"><a href="#四、字符串处理对比" class="headerlink" title="四、字符串处理对比"></a>四、字符串处理对比</h2><h3 id="1-字符串连接"><a href="#1-字符串连接" class="headerlink" title="1. 字符串连接"></a>1. 字符串连接</h3><p><strong>Oracle</strong>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> first_name <span class="operator">||</span> <span class="string">&#x27; &#x27;</span> <span class="operator">||</span> last_name <span class="keyword">AS</span> full_name <span class="keyword">FROM</span> employees;</span><br><span class="line"><span class="comment">-- 或者使用CONCAT函数(只支持两个参数)</span></span><br><span class="line"><span class="keyword">SELECT</span> CONCAT(first_name, CONCAT(<span class="string">&#x27; &#x27;</span>, last_name)) <span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure><p><strong>MySQL</strong>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> CONCAT(first_name, <span class="string">&#x27; &#x27;</span>, last_name) <span class="keyword">AS</span> full_name <span class="keyword">FROM</span> employees;</span><br><span class="line"><span class="comment">-- 或者使用更简洁的||(在ANSI模式下)</span></span><br></pre></td></tr></table></figure><h3 id="2-子字符串提取"><a href="#2-子字符串提取" class="headerlink" title="2. 子字符串提取"></a>2. 子字符串提取</h3><p><strong>Oracle</strong>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> SUBSTR(<span class="string">&#x27;Oracle&#x27;</span>, <span class="number">2</span>, <span class="number">3</span>) <span class="keyword">FROM</span> dual;  <span class="comment">-- 输出&#x27;rac&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>MySQL</strong>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUBSTRING</span>(<span class="string">&#x27;MySQL&#x27;</span>, <span class="number">2</span>, <span class="number">3</span>);  <span class="comment">-- 输出&#x27;ySQ&#x27;</span></span><br><span class="line"><span class="comment">-- 或者简写</span></span><br><span class="line"><span class="keyword">SELECT</span> SUBSTR(<span class="string">&#x27;MySQL&#x27;</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure><h2 id="五、条件表达式对比"><a href="#五、条件表达式对比" class="headerlink" title="五、条件表达式对比"></a>五、条件表达式对比</h2><h3 id="1-CASE表达式"><a href="#1-CASE表达式" class="headerlink" title="1. CASE表达式"></a>1. CASE表达式</h3><p><strong>Oracle</strong>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    employee_name,</span><br><span class="line">    <span class="keyword">CASE</span> </span><br><span class="line">        <span class="keyword">WHEN</span> salary <span class="operator">&gt;</span> <span class="number">10000</span> <span class="keyword">THEN</span> <span class="string">&#x27;高级&#x27;</span></span><br><span class="line">        <span class="keyword">WHEN</span> salary <span class="operator">&gt;</span> <span class="number">5000</span> <span class="keyword">THEN</span> <span class="string">&#x27;中级&#x27;</span></span><br><span class="line">        <span class="keyword">ELSE</span> <span class="string">&#x27;初级&#x27;</span></span><br><span class="line">    <span class="keyword">END</span> <span class="keyword">AS</span> level</span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure><p><strong>MySQL</strong> (语法相同)：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    employee_name,</span><br><span class="line">    <span class="keyword">CASE</span> </span><br><span class="line">        <span class="keyword">WHEN</span> salary <span class="operator">&gt;</span> <span class="number">10000</span> <span class="keyword">THEN</span> <span class="string">&#x27;高级&#x27;</span></span><br><span class="line">        <span class="keyword">WHEN</span> salary <span class="operator">&gt;</span> <span class="number">5000</span> <span class="keyword">THEN</span> <span class="string">&#x27;中级&#x27;</span></span><br><span class="line">        <span class="keyword">ELSE</span> <span class="string">&#x27;初级&#x27;</span></span><br><span class="line">    <span class="keyword">END</span> <span class="keyword">AS</span> level</span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure><h3 id="2-特有函数"><a href="#2-特有函数" class="headerlink" title="2. 特有函数"></a>2. 特有函数</h3><p><strong>Oracle特有</strong>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- NVL空值处理</span></span><br><span class="line"><span class="keyword">SELECT</span> NVL(commission_pct, <span class="number">0</span>) <span class="keyword">FROM</span> employees;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- DECODE函数</span></span><br><span class="line"><span class="keyword">SELECT</span> DECODE(gender, <span class="string">&#x27;M&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;F&#x27;</span>, <span class="string">&#x27;女&#x27;</span>, <span class="string">&#x27;其他&#x27;</span>) <span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure><p><strong>MySQL特有</strong>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- IFNULL空值处理</span></span><br><span class="line"><span class="keyword">SELECT</span> IFNULL(commission_pct, <span class="number">0</span>) <span class="keyword">FROM</span> employees;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- IF函数</span></span><br><span class="line"><span class="keyword">SELECT</span> IF(salary <span class="operator">&gt;</span> <span class="number">5000</span>, <span class="string">&#x27;高薪&#x27;</span>, <span class="string">&#x27;普通&#x27;</span>) <span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure><h2 id="六、分析函数对比"><a href="#六、分析函数对比" class="headerlink" title="六、分析函数对比"></a>六、分析函数对比</h2><h3 id="1-行号生成"><a href="#1-行号生成" class="headerlink" title="1. 行号生成"></a>1. 行号生成</h3><p><strong>Oracle</strong>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    employee_name,</span><br><span class="line">    salary,</span><br><span class="line">    <span class="built_in">ROW_NUMBER</span>() <span class="keyword">OVER</span> (<span class="keyword">ORDER</span> <span class="keyword">BY</span> salary <span class="keyword">DESC</span>) <span class="keyword">AS</span> rank</span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure><p><strong>MySQL</strong> (8.0+)：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    employee_name,</span><br><span class="line">    salary,</span><br><span class="line">    <span class="built_in">ROW_NUMBER</span>() <span class="keyword">OVER</span> (<span class="keyword">ORDER</span> <span class="keyword">BY</span> salary <span class="keyword">DESC</span>) <span class="keyword">AS</span> rank</span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure><h3 id="2-分组排名"><a href="#2-分组排名" class="headerlink" title="2. 分组排名"></a>2. 分组排名</h3><p><strong>Oracle</strong>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    department_id,</span><br><span class="line">    employee_name,</span><br><span class="line">    salary,</span><br><span class="line">    <span class="built_in">RANK</span>() <span class="keyword">OVER</span> (<span class="keyword">PARTITION</span> <span class="keyword">BY</span> department_id <span class="keyword">ORDER</span> <span class="keyword">BY</span> salary <span class="keyword">DESC</span>) <span class="keyword">AS</span> dept_rank</span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure><p><strong>MySQL</strong> (8.0+)：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    department_id,</span><br><span class="line">    employee_name,</span><br><span class="line">    salary,</span><br><span class="line">    <span class="built_in">RANK</span>() <span class="keyword">OVER</span> (<span class="keyword">PARTITION</span> <span class="keyword">BY</span> department_id <span class="keyword">ORDER</span> <span class="keyword">BY</span> salary <span class="keyword">DESC</span>) <span class="keyword">AS</span> dept_rank</span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure><h2 id="七、临时表对比"><a href="#七、临时表对比" class="headerlink" title="七、临时表对比"></a>七、临时表对比</h2><h3 id="1-创建临时表"><a href="#1-创建临时表" class="headerlink" title="1. 创建临时表"></a>1. 创建临时表</h3><p><strong>Oracle</strong>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 事务级临时表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">GLOBAL</span> TEMPORARY <span class="keyword">TABLE</span> temp_emp (</span><br><span class="line">    emp_id NUMBER,</span><br><span class="line">    emp_name VARCHAR2(<span class="number">100</span>)</span><br><span class="line">) <span class="keyword">ON</span> <span class="keyword">COMMIT</span> <span class="keyword">DELETE</span> <span class="keyword">ROWS</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 会话级临时表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">GLOBAL</span> TEMPORARY <span class="keyword">TABLE</span> temp_emp_session (</span><br><span class="line">    emp_id NUMBER,</span><br><span class="line">    emp_name VARCHAR2(<span class="number">100</span>)</span><br><span class="line">) <span class="keyword">ON</span> <span class="keyword">COMMIT</span> PRESERVE <span class="keyword">ROWS</span>;</span><br></pre></td></tr></table></figure><p><strong>MySQL</strong>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 会话级临时表</span></span><br><span class="line"><span class="keyword">CREATE</span> TEMPORARY <span class="keyword">TABLE</span> temp_emp (</span><br><span class="line">    emp_id <span class="type">INT</span>,</span><br><span class="line">    emp_name <span class="type">VARCHAR</span>(<span class="number">100</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="八、事务控制对比"><a href="#八、事务控制对比" class="headerlink" title="八、事务控制对比"></a>八、事务控制对比</h2><h3 id="1-事务语法"><a href="#1-事务语法" class="headerlink" title="1. 事务语法"></a>1. 事务语法</h3><p><strong>Oracle</strong>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 默认每个DML语句就是一个事务(自动提交)</span></span><br><span class="line"><span class="comment">-- 显式事务</span></span><br><span class="line"><span class="keyword">SET</span> TRANSACTION READ WRITE;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> accounts <span class="keyword">VALUES</span> (...);</span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br><span class="line"><span class="comment">-- 或者</span></span><br><span class="line"><span class="keyword">ROLLBACK</span>;</span><br></pre></td></tr></table></figure><p><strong>MySQL</strong>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 默认自动提交</span></span><br><span class="line"><span class="keyword">SET</span> autocommit <span class="operator">=</span> <span class="number">0</span>;  <span class="comment">-- 关闭自动提交</span></span><br><span class="line"><span class="keyword">START</span> TRANSACTION;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> accounts <span class="keyword">VALUES</span> (...);</span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br><span class="line"><span class="comment">-- 或者</span></span><br><span class="line"><span class="keyword">ROLLBACK</span>;</span><br></pre></td></tr></table></figure><h2 id="九、存储过程对比"><a href="#九、存储过程对比" class="headerlink" title="九、存储过程对比"></a>九、存储过程对比</h2><h3 id="1-基本结构"><a href="#1-基本结构" class="headerlink" title="1. 基本结构"></a>1. 基本结构</h3><p><strong>Oracle</strong>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> REPLACE <span class="keyword">PROCEDURE</span> raise_salary (</span><br><span class="line">    p_emp_id <span class="keyword">IN</span> NUMBER,</span><br><span class="line">    p_amount <span class="keyword">IN</span> NUMBER</span><br><span class="line">) <span class="keyword">AS</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">UPDATE</span> employees </span><br><span class="line">    <span class="keyword">SET</span> salary <span class="operator">=</span> salary <span class="operator">+</span> p_amount</span><br><span class="line">    <span class="keyword">WHERE</span> employee_id <span class="operator">=</span> p_emp_id;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">COMMIT</span>;</span><br><span class="line">EXCEPTION</span><br><span class="line">    <span class="keyword">WHEN</span> OTHERS <span class="keyword">THEN</span></span><br><span class="line">        <span class="keyword">ROLLBACK</span>;</span><br><span class="line">        RAISE;</span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure><p><strong>MySQL</strong>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> raise_salary (</span><br><span class="line">    <span class="keyword">IN</span> p_emp_id <span class="type">INT</span>,</span><br><span class="line">    <span class="keyword">IN</span> p_amount <span class="type">DECIMAL</span>(<span class="number">10</span>,<span class="number">2</span>)</span><br><span class="line">)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">DECLARE</span> EXIT HANDLER <span class="keyword">FOR</span> <span class="keyword">SQLEXCEPTION</span></span><br><span class="line">    <span class="keyword">BEGIN</span></span><br><span class="line">        <span class="keyword">ROLLBACK</span>;</span><br><span class="line">        RESIGNAL;</span><br><span class="line">    <span class="keyword">END</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">START</span> TRANSACTION;</span><br><span class="line">    <span class="keyword">UPDATE</span> employees </span><br><span class="line">    <span class="keyword">SET</span> salary <span class="operator">=</span> salary <span class="operator">+</span> p_amount</span><br><span class="line">    <span class="keyword">WHERE</span> employee_id <span class="operator">=</span> p_emp_id;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">COMMIT</span>;</span><br><span class="line"><span class="keyword">END</span> <span class="operator">/</span><span class="operator">/</span></span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure><hr><p>这篇技术手册详细对比了Oracle和MySQL在关键语法上的差异，特别是重点展示了分页查询的不同实现方式。实际开发中，这些语法差异是数据库迁移或跨数据库开发时需要特别注意的要点。。</p><h1 id="Oracle与MySQL面试问答示例"><a href="#Oracle与MySQL面试问答示例" class="headerlink" title="Oracle与MySQL面试问答示例"></a>Oracle与MySQL面试问答示例</h1><h2 id="问题1：请说明Oracle和MySQL在分页查询实现上的主要区别？"><a href="#问题1：请说明Oracle和MySQL在分页查询实现上的主要区别？" class="headerlink" title="问题1：请说明Oracle和MySQL在分页查询实现上的主要区别？"></a>问题1：请说明Oracle和MySQL在分页查询实现上的主要区别？</h2><p><strong>面试者回答</strong>：<br>“在分页查询方面，Oracle和MySQL有显著不同的实现方式：</p><ol><li><p><strong>MySQL</strong>使用非常简洁的LIMIT语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> products <span class="keyword">ORDER</span> <span class="keyword">BY</span> price <span class="keyword">DESC</span> LIMIT <span class="number">20</span>, <span class="number">10</span>;</span><br></pre></td></tr></table></figure><p>这表示跳过20条取10条，执行效率很高。</p></li><li><p><strong>Oracle 11g及以下版本</strong>需要使用三层嵌套ROWNUM：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> t.<span class="operator">*</span>, ROWNUM rn <span class="keyword">FROM</span> (</span><br><span class="line">        <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> products <span class="keyword">ORDER</span> <span class="keyword">BY</span> price <span class="keyword">DESC</span></span><br><span class="line">    ) t <span class="keyword">WHERE</span> ROWNUM <span class="operator">&lt;=</span> <span class="number">30</span></span><br><span class="line">) <span class="keyword">WHERE</span> rn <span class="operator">&gt;</span> <span class="number">20</span>;</span><br></pre></td></tr></table></figure><p>这种写法比较复杂，但12c版本开始支持了更简单的FETCH语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> products </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> price <span class="keyword">DESC</span></span><br><span class="line"><span class="keyword">OFFSET</span> <span class="number">20</span> <span class="keyword">ROWS</span> <span class="keyword">FETCH</span> NEXT <span class="number">10</span> <span class="keyword">ROWS</span> <span class="keyword">ONLY</span>;</span><br></pre></td></tr></table></figure></li></ol><p>实际项目中，MySQL的分页写法更受开发者欢迎，但在处理超大数据量分页时，两种数据库都需要特别注意性能优化。”</p><h2 id="问题2：Oracle的NUMBER类型和MySQL的数值类型如何对应？"><a href="#问题2：Oracle的NUMBER类型和MySQL的数值类型如何对应？" class="headerlink" title="问题2：Oracle的NUMBER类型和MySQL的数值类型如何对应？"></a>问题2：Oracle的NUMBER类型和MySQL的数值类型如何对应？</h2><p><strong>面试者回答</strong>：<br>“在数值类型存储方面，我有这样的理解：</p><p>Oracle的NUMBER类型是个”万能”类型，通过指定精度可以表示各种数值：</p><ul><li><code>NUMBER(10)</code>对应MySQL的<code>INT</code></li><li><code>NUMBER(10,2)</code>对应MySQL的<code>DECIMAL(10,2)</code></li></ul><p>但需要注意几个关键差异：</p><ol><li>Oracle NUMBER默认能存38位精度，而MySQL的DECIMAL最大支持65位</li><li>Oracle的NUMBER(5)和NUMBER(5,0)是不同的，前者可能存储小数</li><li>在迁移数据库时，特别要注意NUMBER不带精度的情况，需要评估实际数据范围</li></ol><p>在我的上一个项目中，我们就遇到过Oracle的NUMBER(10)迁移到MySQL时，因为实际数据超出INT范围而不得不改用BIGINT的情况。”</p><h2 id="问题3：解释下Oracle和MySQL事务隔离级别的实现差异？"><a href="#问题3：解释下Oracle和MySQL事务隔离级别的实现差异？" class="headerlink" title="问题3：解释下Oracle和MySQL事务隔离级别的实现差异？"></a>问题3：解释下Oracle和MySQL事务隔离级别的实现差异？</h2><p><strong>面试者回答</strong>：<br>“这个问题涉及到两个数据库的核心设计理念：</p><ol><li><strong>Oracle</strong>默认使用READ COMMITTED隔离级别，通过多版本并发控制(MVCC)实现：</li></ol><ul><li>查询只能看到已提交的数据</li><li>使用回滚段(Undo Segment)维护数据旧版本</li><li>读操作不会阻塞写操作</li></ul><ol start="2"><li>**MySQL(InnoDB)**默认使用REPEATABLE READ，但通过独特的MVCC实现：</li></ol><ul><li>每个事务有自己的一致性视图</li><li>通过ReadView和undo log实现</li><li>通过间隙锁(Gap Lock)防止幻读</li></ul><p>一个重要的实践差异是：在Oracle中，同一个事务内多次查询可能看到不同结果(不可重复读)，而MySQL可以保证重复读结果一致。这在我们电商系统的库存控制中非常重要，MySQL的默认隔离级别更适合需要强一致性的场景。”</p><h2 id="问题4：如果要从Oracle迁移到MySQL，你会重点关注哪些方面？"><a href="#问题4：如果要从Oracle迁移到MySQL，你会重点关注哪些方面？" class="headerlink" title="问题4：如果要从Oracle迁移到MySQL，你会重点关注哪些方面？"></a>问题4：如果要从Oracle迁移到MySQL，你会重点关注哪些方面？</h2><p><strong>面试者回答</strong>：<br>“根据我的迁移经验，会重点关注以下方面：</p><ol><li><strong>SQL语法改写</strong>：</li></ol><ul><li>分页查询的重写</li><li>序列(Sequence)改为AUTO_INCREMENT</li><li>日期函数转换(如SYSDATE→NOW())</li></ul><ol start="2"><li><strong>数据类型映射</strong>：</li></ol><ul><li>VARCHAR2→VARCHAR</li><li>NUMBER→合适的数值类型</li><li>CLOB→LONGTEXT</li></ul><ol start="3"><li><strong>事务处理</strong>：</li></ol><ul><li>隔离级别差异的影响评估</li><li>锁机制差异导致的并发问题</li></ul><ol start="4"><li><strong>性能优化</strong>：</li></ol><ul><li>执行计划差异分析</li><li>索引策略调整</li><li>参数配置优化</li></ul><p>在我们最近的人力资源系统迁移项目中，就遇到了Oracle的复杂分析函数在MySQL中性能较差的问题，最终通过业务逻辑拆分和查询重写解决了。我的经验是先做小规模POC验证，再制定详细的迁移检查清单。”</p><p>以上内容仅做参考示例，一切以实际项目为准。</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql数据库学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL数据库系统学习笔记（2）</title>
      <link href="/2025/05/25/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%882%EF%BC%89/"/>
      <url>/2025/05/25/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%882%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="mysql数据库系统学习笔记（2）"><a href="#mysql数据库系统学习笔记（2）" class="headerlink" title="mysql数据库系统学习笔记（2）"></a>mysql数据库系统学习笔记（2）</h1><h2 id="mysql事物"><a href="#mysql事物" class="headerlink" title="mysql事物"></a>mysql事物</h2><p><strong>事物</strong>是一组完整操作的集合，事物是一个不可分割的操作序列，也是数据库并发控制的基本单位，其执行的结果必须使数据库从一个一致性状态变到另一个一致性状态。事物是逻辑上的一组操作要么都执行要么都不执行。</p><blockquote><p>在一组操作中任何一个环节出现问题都无法完成一个事物操作，例如转账操作，A给B转账，A没发出或者B没收到都不能构成一个事物</p></blockquote><ul><li>在 MySQL 中只有使用了<code>Innodb</code>数据库引擎的数据库或表才支持事务。</li><li><strong>事务处理可以用来维护数据库的完整性，保证成批的 SQL 语句要么全部执行，要么全部不执行。</strong></li><li>事务用来管理<code>insert、update、delete</code>语句</li></ul><h2 id="提交事物"><a href="#提交事物" class="headerlink" title="提交事物"></a>提交事物</h2><p>在mysql中有两种方式进行事物的操作</p><ul><li><strong>自动提交事物</strong><br>  在 MySQL 命令行的<strong>默认设置</strong>下，事务都是<strong>自动提交</strong>的，即执行 SQL 语句后就会马上执行<code> COMMIT</code> 操作。因此要显式地开启一个事务务须使用命令<code>BEGIN</code>或<code> START TRANSACTION</code>，或者执行命令<code> SET AUTOCOMMIT=0</code>，用来禁止使用当前会话的自动提交。<blockquote><p>理解为自动挡模式，自动帮你踩离合，其中的条件出现问题时候会自动回滚到事物条件前</p></blockquote></li></ul><p>AS:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-- 就像开自动挡汽车，MySQL帮你踩离合</span><br><span class="line">UPDATE 钱包表 SET 余额=余额-648 WHERE 用户=&#x27;氪金大佬&#x27;;  -- 首充</span><br><span class="line">UPDATE 装备表 SET 屠龙刀=1 WHERE 用户=&#x27;氪金大佬&#x27;;      -- 送神器</span><br><span class="line">-- 如果第二条SQL报错？系统自动帮你回滚到充钱前！</span><br></pre></td></tr></table></figure><p>小心别在AUTOCOMMIT&#x3D;1时把每条SQL都变成独立事务</p><ul><li><strong>手动提交事务</strong><blockquote><p>理解为手动挡模式，每一个操作都是可以手动完成</p></blockquote></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">START TRANSACTION;  -- 游戏开始！</span><br><span class="line">INSERT INTO 抽奖记录 VALUES(&#x27;欧皇&#x27;, &#x27;SSR&#x27;);</span><br><span class="line">UPDATE 概率表 SET 剩余=剩余-1 WHERE 奖品=&#x27;SSR&#x27;;</span><br><span class="line">-- 突然发现概率表被锁了？</span><br><span class="line">ROLLBACK;  -- 大喊一声「时间回溯！」（抽奖记录消失）,回滚操作</span><br><span class="line">-- 或者成功时：</span><br><span class="line">COMMIT;    -- 全网广播我的欧气！</span><br></pre></td></tr></table></figure><h2 id="事物的四大特性"><a href="#事物的四大特性" class="headerlink" title="事物的四大特性"></a>事物的四大特性</h2><ul><li><p><strong>原子性</strong>：事务是最小的执行单位不允许风格事物，事物的原子性确保动作要么全部完成，要么完全不起作用</p></li><li><p><strong>一致性</strong>：执行事物前后，数据保持一致，对个实物对同一个数据的读取结果是相同的</p></li><li><p><strong>隔离性</strong>：并发访问数据库时，一个用户的事物不被其他事务所干扰，各并发事物之间的数据库是独立的</p></li><li><p><strong>持久性</strong>：一个事物被提交后，它对数据库中的数据改变是永久的，哪怕数据库发生故障也不应该对其造成影响</p></li></ul><h2 id="事物的隔离级别"><a href="#事物的隔离级别" class="headerlink" title="事物的隔离级别"></a>事物的隔离级别</h2><p>所有的事物之间保持隔离，互不影响，因为并发操作，多个用户同时访问同一个数据可能引发并发访问问题</p><h3 id="事务隔离级别的标准定义"><a href="#事务隔离级别的标准定义" class="headerlink" title="事务隔离级别的标准定义"></a><strong>事务隔离级别的标准定义</strong></h3><p>事务隔离级别用于控制多个并发事务之间的相互影响，主要解决以下问题：  </p><ol><li><strong>脏读（Dirty Read）</strong>：事务A读取了事务B未提交的数据，如果事务B回滚，事务A读到的就是无效数据。  </li><li><strong>不可重复读（Non-repeatable Read）</strong>：事务A多次读取同一数据，期间事务B修改并提交了该数据，导致事务A前后读取结果不一致。  </li><li><strong>幻读（Phantom Read）</strong>：事务A按条件查询数据，期间事务B插入或删除了符合条件的数据，导致事务A再次查询时结果集发生变化。</li></ol><p>数据库提供四种隔离级别，按严格程度排序：  </p><table><thead><tr><th>隔离级别</th><th>脏读</th><th>不可重复读</th><th>幻读</th></tr></thead><tbody><tr><td><strong>读未提交</strong> (Read Uncommitted)</td><td>❌可能</td><td>❌可能</td><td>❌可能</td></tr><tr><td><strong>读已提交</strong> (Read Committed)</td><td>✅避免</td><td>❌可能</td><td>❌可能</td></tr><tr><td><strong>可重复读</strong> (Repeatable Read)</td><td>✅避免</td><td>✅避免</td><td>❌可能</td></tr><tr><td><strong>串行化</strong> (Serializable)</td><td>✅避免</td><td>✅避免</td><td>✅避免</td></tr><tr><td>以下是我的抽象理解表示</td><td></td><td></td><td></td></tr><tr><td><strong>1. 读未提交（Read Uncommitted）</strong></td><td></td><td></td><td></td></tr></tbody></table><ul><li><strong>场景</strong>：你偷看同桌的考试答案，但他可能正在涂改，答案可能是错的。  </li><li><strong>数据库行为</strong>：事务能读到其他事务未提交的数据（脏数据）。</li></ul><p><strong>2. 读已提交（Read Committed）</strong>  </p><ul><li><strong>场景</strong>：你等同桌交卷后，才抄他的答案（确保答案已确认）。  </li><li><strong>数据库行为</strong>：事务只能读到已提交的数据，但同一事务内多次查询可能结果不同。</li></ul><p><strong>3. 可重复读（Repeatable Read）</strong>  </p><ul><li><strong>场景</strong>：考试时你抄下答案后，老师不允许任何人修改答案（但可能有人偷偷塞新答案进来）。  </li><li><strong>数据库行为</strong>：事务内多次读取同一数据结果一致，但可能有新数据插入（幻读）。</li></ul><p><strong>4. 串行化（Serializable）</strong>  </p><ul><li><strong>场景</strong>：考场一次只允许一个人答题，其他人排队等。  </li><li><strong>数据库行为</strong>：事务完全串行执行，杜绝所有并发问题，但性能最差。</li></ul><p><strong>关键注意点</strong>  </p><ol><li><strong>隔离级别越高，安全性越强，性能越低</strong>。  </li><li><strong>MySQL默认是可重复读（但通过间隙锁避免了幻读）</strong>。  </li><li><strong>实际开发中常用读已提交或可重复读</strong>，串行化仅在极端场景使用。</li></ol><h2 id="ER图数据库设计"><a href="#ER图数据库设计" class="headerlink" title="ER图数据库设计"></a>ER图数据库设计</h2><p><strong>主要组成元素</strong></p><ul><li>​实体​​：现实世界中可区分的对象（如：学生、课程）</li><li>​属性​​：实体的特征（如：学号、姓名）</li><li>​关系​​：实体间的联系（如：选课、授课）<br><strong>常用符号表示</strong></li><li>实体：矩形 □</li><li>属性：椭圆 ○</li><li>关系：菱形 ◇</li><li>主键：下划线 _</li><li>外键：虚线或特殊标记<br><del>建议对照一个er图来明确对应关系</del><br>这里只是给出每个形状所代指的关系部分，建议去找个图对照练习，不想录入图床了，懒</li></ul><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><p>MySQL 索引是一种<strong>数据结构</strong>，用于加快数据库查询的速度和性能。类似字典的目录，可以快速的定位到数据的位置，而不需要对整个表进行扫描</p><blockquote><p>MySQL 索引类似于书籍的索引，通过存储指向数据行的指针，可以快速定位和访问表中的特定数据。<br>打个比方，如果合理的设计且使用索引的 MySQL 是一辆兰博基尼的话，那么没有设计和使用索引的 MySQL 就是一个人力三轮车。</p></blockquote><p><strong>索引的数据结构</strong><br>数据结构的详情也可以在本站找到<br>hash索引，b_tree索引，full_text全文索引</p><h3 id="索引的分类"><a href="#索引的分类" class="headerlink" title="索引的分类"></a>索引的分类</h3><p>在mysql数据库中索引可以分为以下几类<br><em>主键索引，唯一索引，常规索引，全文索引</em></p><ul><li><strong>​主键索引​</strong>：唯一标识每行数据，不允许NULL值，每表只能有一个（如身份证号）<br>表中的列设定为主键后，数据库会自动建立主键索引，索引的列的值必须是唯一的，并且不允许为空值。</li><li><strong>​唯一索引​</strong>：确保列值唯一但允许NULL值，可多个（如用户邮箱）<br>表中的列创建了唯一约束时，数据库会自动建立唯一索引，索引的列的值必须是唯一的，但是允许为空值。</li><li><strong>​单列索引​</strong>：仅针对单个字段加速查询（如按姓名找人）<br>非主键的列创建的索引，一个索引只能包含单个列，一个表可以有多个单列索引。</li><li>** ​组合索引​**：多字段联合索引，遵循最左匹配原则（如按省+市+区定位）<br>一个索引包含多个列，我们在查询的时候要查询多个字段，就可以为查询的多个字段创建一个复合索引，这样就可以加快查询速度。</li></ul><h3 id="1-按功能特性分类"><a href="#1-按功能特性分类" class="headerlink" title="1.按功能特性分类"></a>1.按功能特性分类</h3><h3 id="1-主键索引（PRIMARY-KEY）"><a href="#1-主键索引（PRIMARY-KEY）" class="headerlink" title="1. 主键索引（PRIMARY KEY）"></a>1. 主键索引（PRIMARY KEY）</h3><ul><li><strong>特点</strong>：<ul><li>每张表只能有一个主键索引</li><li>列值必须唯一且不能为NULL</li><li>物理存储按照主键顺序组织（聚集索引）</li></ul></li><li><strong>创建方式</strong>：<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> users (</span><br><span class="line">  id <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  name <span class="type">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (id)  <span class="comment">-- 主键索引</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-唯一索引（UNIQUE-KEY）"><a href="#2-唯一索引（UNIQUE-KEY）" class="headerlink" title="2. 唯一索引（UNIQUE KEY）"></a>2. 唯一索引（UNIQUE KEY）</h3><ul><li><strong>特点</strong>：<ul><li>保证列值的唯一性</li><li>允许NULL值（但只能有一个NULL值）</li><li>一张表可以有多个唯一索引</li></ul></li><li><strong>创建方式</strong>：<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> users (</span><br><span class="line">  email <span class="type">VARCHAR</span>(<span class="number">100</span>),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY (email)  <span class="comment">-- 唯一索引</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-常规索引（普通索引-INDEX）"><a href="#3-常规索引（普通索引-INDEX）" class="headerlink" title="3. 常规索引（普通索引&#x2F;INDEX）"></a>3. 常规索引（普通索引&#x2F;INDEX）</h3><ul><li><strong>特点</strong>：<ul><li>最基本的索引类型</li><li>仅加速查询，无约束功能</li><li>允许重复值和NULL值</li></ul></li><li><strong>创建方式</strong>：<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> INDEX idx_name <span class="keyword">ON</span> users(name);  <span class="comment">-- 常规索引</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="4-全文索引（FULLTEXT）"><a href="#4-全文索引（FULLTEXT）" class="headerlink" title="4. 全文索引（FULLTEXT）"></a>4. 全文索引（FULLTEXT）</h3><ul><li><strong>特点</strong>：<ul><li>专门用于全文搜索</li><li>仅适用于MyISAM和InnoDB引擎</li><li>只能创建在CHAR、VARCHAR或TEXT类型列上</li></ul></li><li><strong>创建方式</strong>：<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> FULLTEXT INDEX idx_content <span class="keyword">ON</span> articles(content);</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-按索引列数量分类"><a href="#2-按索引列数量分类" class="headerlink" title="2.按索引列数量分类"></a>2.按索引列数量分类</h3><h3 id="1-单列索引"><a href="#1-单列索引" class="headerlink" title="1. 单列索引"></a>1. 单列索引</h3><ul><li><strong>特点</strong>：<ul><li>只包含一个列的索引</li><li>可以是上述任意类型（主键、唯一、普通等）</li></ul></li><li><strong>示例</strong>：<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> INDEX idx_age <span class="keyword">ON</span> users(age);  <span class="comment">-- 单列索引</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="2-组合索引（复合索引）"><a href="#2-组合索引（复合索引）" class="headerlink" title="2. 组合索引（复合索引）"></a>2. 组合索引（复合索引）</h3><ul><li><strong>特点</strong>：<ul><li>包含两个或更多列的索引</li><li>遵循”最左前缀原则”</li></ul></li><li><strong>示例</strong>：<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> INDEX idx_name_age <span class="keyword">ON</span> users(name, age);  <span class="comment">-- 组合索引</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="索引的使用场景"><a href="#索引的使用场景" class="headerlink" title="索引的使用场景"></a>索引的使用场景</h3><p><strong>那些情况需要创建索引</strong></p><p>1.主键自动创建唯一索引<br>2.频繁作为查询条件的字段应该创建索引<br>3.查询中与其他表关联的字段，外键关系建立索引</p><p><strong>那些情况不需要创建索引</strong></p><ol><li>表的数据太少</li><li>经常增删改的表</li><li>where条件里用不到的字段不建立索引</li></ol><h3 id="索引的优缺点"><a href="#索引的优缺点" class="headerlink" title="索引的优缺点"></a>索引的优缺点</h3><p><strong>优点：</strong></p><ul><li>加快数据查询速度，类似字典的目录索引，体改数据查询的效率，</li></ul><p><strong>缺点：</strong></p><ul><li>创建索引和维护索引需要耗费时间，且伴随表中的数据增加，所消耗的时间也随之增加</li><li>索引需要占用磁盘空间</li><li>索引提高了查询的效率，但是同时会降低表更新的速度</li></ul><h2 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h2><p>视图是一个<strong>虚拟的表</strong>，它的内容是由<code>查询</code>定义的，而<strong>不是实际存储在数据库中的数据</strong>。它是基于一个或多个表的查询结果，并且可以像表一样进行查询和操作。内容是从其他表中选择，过滤，或者计算出来的。</p><p><strong>视图的作用</strong><br>将复杂的查询结果进行封装，简化查询操作，提高数据安全性，支持数据共享，减少重复查询，提高查询效率。</p><ul><li>简化复杂查询：可以将复杂的查询封装成视图，方便其他用户使用</li><li>提高数据安全性：可以通过视图限制用户对数据的访问权限</li></ul><h2 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h2><p>在并发访问的情况下，多个用户同时对同一个数据进行操作，可能会导致数据不一致的情况，为了保证数据的一致性，数据库系统引入了锁机制。某些情况下，锁的应用必不可少。</p><p><strong>目的</strong><br>在mysql中，锁是数据库管理系统中用于控制并发访问的一种机制，用于确保在多个事务同时访问同一资源时，数据的一致性和完整性，mysql中的锁分为三类</p><ul><li><strong>全局锁</strong>（Global Lock）：</li><li><strong>表级锁</strong>（Table Lock）：</li><li><strong>行级锁</strong>（Row Lock）：</li></ul><h3 id="1-全局锁（Global-Lock）"><a href="#1-全局锁（Global-Lock）" class="headerlink" title="1. 全局锁（Global Lock）"></a>1. 全局锁（Global Lock）</h3><p>全局锁会让所有的表都加上一个读锁，阻止对这些表的写操作，包括增删改查，但是可以对表进行查询操作，这对于需要对整个数据库进行维护或者备份的场景非常有用。</p><blockquote><p>全局锁就像封城，什么都不可用，主要用于数据库备份和维护，但是备份完记得解封，要不然长期锁着，其他事务就无法进行操作了。（业务停滞）</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 加全局锁</span></span><br><span class="line">FLUSH TABLES <span class="keyword">WITH</span> READ LOCK;</span><br><span class="line"><span class="comment">-- 释放全局锁</span></span><br><span class="line">UNLOCK TABLES;</span><br></pre></td></tr></table></figure><h3 id="2-表级锁（Table-Lock）"><a href="#2-表级锁（Table-Lock）" class="headerlink" title="2. 表级锁（Table Lock）"></a>2. 表级锁（Table Lock）</h3><p>每次操作锁住整张表，其他事务不能对该表进行任何操作，包括增删改查，但是可以对表进行查询操作，这对于需要对整个表进行维护或者备份的场景非常有用。</p><blockquote><p>表锁就像上课锁门，别人不能干扰，但是可以旁听，但是不能上讲台，只能看。（业务停滞）</p></blockquote><p>分为两类：</p><ul><li><p>读锁(共享锁)：<br>  其他事务可以对表进行查询操作，但是不能对表进行增删改操作，常用于需要对表进行查询操作的场景</p><blockquote><p>公开课允许旁听，但不让改PPT</p></blockquote></li><li><p>写锁（排他锁）：<br>  其他事务不能对表进行任何操作，包括增删改查，但是可以对表进行查询操作，常用于需要对表进行维护或者备份的场景</p><blockquote><p>老师改卷子时锁门，谁都不让进</p></blockquote></li></ul><p><strong>读锁和写锁的区别在于，读锁可以同时被多个事务持有，而写锁只能被一个事务持有。</strong></p><p><strong>读锁</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 加表锁</span></span><br><span class="line">LOCK TABLES 表名 READ<span class="operator">/</span>WRITE;</span><br><span class="line"><span class="comment">-- 读锁</span></span><br><span class="line">LOCK TABLES 表名 READ;</span><br></pre></td></tr></table></figure><p><strong>写锁</strong> </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 加表锁</span></span><br><span class="line">LOCK TABLES 表名 READ<span class="operator">/</span>WRITE;</span><br><span class="line"><span class="comment">-- 写锁</span></span><br><span class="line">LOCK TABLES 表名 WRITE;</span><br><span class="line">```  </span><br><span class="line"><span class="operator">*</span><span class="operator">*</span>特点：<span class="operator">*</span><span class="operator">*</span></span><br><span class="line">排他性：写锁是排他的，意味着同一时刻只有一个事务可以持有写锁，其他事务或者会话都不能同时对该资源进行操作</span><br><span class="line"></span><br><span class="line">### <span class="number">3.</span> 行级锁（<span class="type">Row</span> Lock）</span><br><span class="line">每次操作锁住对应一行数据</span><br><span class="line"><span class="operator">&gt;</span>行锁就像图书馆抢座位，占座方式还有三大种</span><br><span class="line"></span><br><span class="line">行锁又分为：</span><br><span class="line"><span class="operator">*</span><span class="operator">*</span>行锁，间隙锁，临键锁<span class="operator">*</span><span class="operator">*</span></span><br><span class="line"></span><br><span class="line"><span class="operator">*</span><span class="operator">*</span>行锁：<span class="operator">*</span><span class="operator">*</span></span><br><span class="line">行锁是最基本的锁，锁定的是一行数据，其他事务不能对该行数据进行任何操作</span><br><span class="line"><span class="operator">&gt;</span>你占了<span class="number">3</span>号座（<span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">3</span>），别人不能坐但能坐<span class="number">4</span>号座</span><br><span class="line"></span><br><span class="line"><span class="operator">*</span><span class="operator">*</span>间隙锁：<span class="operator">*</span><span class="operator">*</span></span><br><span class="line">间隙锁是一种特殊的行锁，锁定的是一个区间，其他事务不能对该区间内的数据进行任何操作</span><br><span class="line"><span class="operator">&gt;</span>你占了<span class="number">3</span>号到<span class="number">5</span>号的座位，别人不能坐（这可以解决幻读问题）</span><br><span class="line"></span><br><span class="line"><span class="operator">*</span><span class="operator">*</span>临键锁：<span class="operator">*</span><span class="operator">*</span></span><br><span class="line">临键锁是行锁和间隙锁的结合，锁定的是一个区间，其他事务不能对该区间内的数据进行任何操作</span><br><span class="line"><span class="operator">&gt;</span>我把着<span class="number">3</span>号到<span class="number">5</span>号的座位，还顺便把插座给占了（锁定记录<span class="operator">+</span>间隙）</span><br><span class="line"></span><br><span class="line">显示隐式又分为两种类型：</span><br><span class="line"></span><br><span class="line"><span class="operator">*</span><span class="operator">*</span>显式锁（主动宣称）<span class="operator">*</span><span class="operator">*</span>使用<span class="keyword">SELECT</span> ... <span class="keyword">FOR</span> <span class="keyword">UPDATE</span> 或 <span class="keyword">SELECT</span> ... LOCK <span class="keyword">IN</span> SHARE MODE 这种通过在<span class="keyword">SQL</span>语句后添加关键字的的加锁形式，称为显式锁。</span><br><span class="line">```<span class="keyword">sql</span></span><br><span class="line"><span class="comment">-- 加行锁</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> 表名 <span class="keyword">WHERE</span> 条件 <span class="keyword">FOR</span> <span class="keyword">UPDATE</span>;</span><br><span class="line"><span class="comment">-- 霸道总裁式宣言：&quot;这排座位我包了！&quot;</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> orders <span class="keyword">WHERE</span> user_id<span class="operator">=</span><span class="number">1</span> <span class="keyword">FOR</span> <span class="keyword">UPDATE</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 温和派宣言：&quot;可以一起看，但不能改&quot;</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> products LOCK <span class="keyword">IN</span> SHARE MODE;</span><br></pre></td></tr></table></figure><p><strong>隐式锁（cos地雷，自动触发）</strong>使用UPDATE、DELETE、INSERT等操作时，Innodb会自动锁定涉及的记录常见的SQL语句，这种加锁方式称为隐式锁。</p><ul><li><strong>​UPDATE&#x2F;DELETE​：</strong>像自动感应门，碰到就锁</li><li><strong>​INSERT​：</strong>像新人报到自动领座位牌</li></ul><p>以下是各种行锁的区别对照表，按照（SQL,行锁类型，备注）进行；</p><table><thead><tr><th>SQL语句</th><th>行锁类型</th><th>备注</th></tr></thead><tbody><tr><td>SELECT … FOR UPDATE</td><td>排他锁</td><td>会锁定查询到的所有行，其他事务不能对这些行进行修改或删除</td></tr><tr><td>SELECT… LOCK IN SHARE MODE</td><td>共享锁</td><td>会锁定查询到的所有行，其他事务可以对这些行进行读取，但不能修改或删除</td></tr><tr><td>UPDATE</td><td>排他锁</td><td>会锁定查询到的所有行，其他事务不能对这些行进行修改或删除</td></tr></tbody></table><p><strong>想用好锁的注意事项：</strong><br>1.锁的粒度越小越好（能用行锁不用表锁）<br>2.持有时间越短越好（快锁快放）<br>3.避免死锁就像避免厕所占坑打架：</p><ul><li>按固定顺序访问表</li><li>事务不要太长</li></ul><p>基本就到这里，有什么需要额外补充的地方我会后续更新</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql数据库学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL数据库系统学习笔记（1）</title>
      <link href="/2025/05/21/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%881%EF%BC%89/"/>
      <url>/2025/05/21/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%881%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL数据库系统学习笔记"><a href="#MySQL数据库系统学习笔记" class="headerlink" title="MySQL数据库系统学习笔记"></a>MySQL数据库系统学习笔记</h1><h2 id="一、数据库基础概念"><a href="#一、数据库基础概念" class="headerlink" title="一、数据库基础概念"></a>一、数据库基础概念</h2><h3 id="1-核心组件"><a href="#1-核心组件" class="headerlink" title="1. 核心组件"></a>1. 核心组件</h3><p>**数据库(DB)**：存储数据的文件系统<br><strong>DBMS</strong>：数据库管理系统软件（如MySQL）<br><strong>SQL</strong>：结构化查询语言（操作数据库的标准）</p><h3 id="2-数据库分类"><a href="#2-数据库分类" class="headerlink" title="2. 数据库分类"></a>2. 数据库分类</h3><p><strong>关系型</strong>：MySQL&#x2F;Oracle&#x2F;SQL Server（二维表结构）<br><strong>非关系型</strong>：Redis&#x2F;HBase（键值对&#x2F;文档型）</p><h2 id="二、MySQL安装与登录"><a href="#二、MySQL安装与登录" class="headerlink" title="二、MySQL安装与登录"></a>二、MySQL安装与登录</h2><h3 id="1-命令行登录"><a href="#1-命令行登录" class="headerlink" title="1. 命令行登录"></a>1. 命令行登录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -proot</span><br><span class="line"><span class="comment"># -u 用户名</span></span><br><span class="line"><span class="comment"># -p 密码</span></span><br></pre></td></tr></table></figure><h2 id="三、SQL语言分类"><a href="#三、SQL语言分类" class="headerlink" title="三、SQL语言分类"></a>三、SQL语言分类</h2><blockquote><p>D：定义<br>M：操作<br>Q：查询<br>C：控制</p></blockquote><p><em><strong>这部分很重要，重点记忆</strong></em></p><p><strong>DDL</strong>：数据<strong>定义</strong>语言，用来操作数据库对象（数据库，表，字段）</p><p><strong>DML</strong>：数据<strong>操作</strong>语言，用来对数据库中表的数据进行增删改</p><p><strong>DQL</strong>：数据<strong>查询</strong>语言，用来对数据库中表的数据进行查询操作</p><p><strong>DCL</strong>：数据<strong>控制</strong>语言，用来创建数据库用户，控制访问权限</p><h2 id="字符库意义对照表"><a href="#字符库意义对照表" class="headerlink" title="字符库意义对照表"></a>字符库意义对照表</h2><ul><li>SHOW[显示]</li><li>SELECT[查询]</li><li>DATABASE[数据库]</li><li>IF[如果]</li><li>NOT[没有]</li><li>EXISTS[存在]</li><li>DEFAULT[默认]</li><li>CHARSET[字符集]</li><li>UTF8[支持中文（万国码）]</li><li>DROP[删除]</li><li>IF EXISTS[如果存在]</li><li>TABLES[表]</li><li>DESC[描述]</li><li>CREATE[创建]</li><li>ALTER[修改]</li><li>ADD[添加]</li><li>TRUNCATE[截断，清除]</li></ul><h2 id="DDL部分（数据对象操作，数据库操作，表操作，字段操作）"><a href="#DDL部分（数据对象操作，数据库操作，表操作，字段操作）" class="headerlink" title="DDL部分（数据对象操作，数据库操作，表操作，字段操作）"></a>DDL部分（数据对象操作，数据库操作，表操作，字段操作）</h2><p>数据定义语言，用来操作数据库对象（数据库，表，字段）</p><h3 id="1-DDL（数据定义）"><a href="#1-DDL（数据定义）" class="headerlink" title="1. DDL（数据定义）"></a>1. DDL（数据定义）</h3><p><strong>查看所有数据库</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-- 查看所有数据库</span><br><span class="line">-- show[显示]   databases[所有数据库]</span><br><span class="line">SHOW DATABASES;</span><br></pre></td></tr></table></figure><p><strong>查看当前数据库</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-- 查看当前数据库</span><br><span class="line">-- select[查询]  DATABASE[数据库]</span><br><span class="line">SELECT DATABASE();</span><br></pre></td></tr></table></figure><p><strong>创建数据库</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">-- 创建数据库</span><br><span class="line">-- 在同一个数据库服务器中，不能创建两个名字相同的数据库 </span><br><span class="line">-- create[创建] database[数据库]    db[数据库名] </span><br><span class="line">-- if[如果] not[没有] exists[存在]</span><br><span class="line">CREATE DATABASE IF NOT EXISTS shop</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- 创建数据库指定字符集</span><br><span class="line">-- default[默认]  charset[字符集]  utf8[支持中文]</span><br><span class="line">DEFAULT CHARSET utf8;</span><br><span class="line"></span><br><span class="line">create database if not exists db3 default charset utf8;</span><br></pre></td></tr></table></figure><p><strong>删除数据库</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-- 删除数据库</span><br><span class="line">drop[删除]  if exists[如果存在]</span><br><span class="line">DROP DATABASE IF EXISTS test;</span><br></pre></td></tr></table></figure><p><strong>切换数据库</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select database();</span><br><span class="line">use db;</span><br></pre></td></tr></table></figure><h3 id="2-表操作DDL"><a href="#2-表操作DDL" class="headerlink" title="2. 表操作DDL"></a>2. 表操作DDL</h3><p><strong>查看所有表</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-- 查看所有表</span><br><span class="line">-- SHOW[显示]  tables[所有表]</span><br><span class="line">SHOW TABLES;</span><br></pre></td></tr></table></figure><p><strong>查看指定表的结构</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-- 查看指定表的结构</span><br><span class="line">-- 查看表的字段，字段的类型，是否可以为null，是否有默认值</span><br><span class="line">-- desc[描述]  studentinfo[表名]</span><br><span class="line">desc studentinfo;</span><br></pre></td></tr></table></figure><p><strong>查看指定表的建表语句</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-- 查看指定表的建表语句</span><br><span class="line">-- show[显示]  create[创建]  tables[表]   studentinfo[表名]</span><br><span class="line">show create table studentinfo;</span><br></pre></td></tr></table></figure><h3 id="3-数据类型详解"><a href="#3-数据类型详解" class="headerlink" title="3. 数据类型详解"></a>3. 数据类型详解</h3><h4 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型"></a>数值类型</h4><ul><li>int整数</li><li>float 小数(单精度)</li><li>double 小数(双精度)</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">INT         -- 整数</span><br><span class="line">FLOAT(7,2)  -- 单精度浮点</span><br><span class="line">DECIMAL(10,2) -- 精确小数</span><br></pre></td></tr></table></figure><h4 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CHAR(11)    -- 固定长度（适合身份证号）</span><br><span class="line">VARCHAR(50) -- 可变长度（适合姓名）</span><br><span class="line">TEXT        -- 大文本</span><br></pre></td></tr></table></figure><ul><li>char(需要指定长度)固定字符串</li><li>varchar(需要指定长度)可变字符串</li></ul><p><strong>存在面试题，见下</strong></p><h4 id="时间类型"><a href="#时间类型" class="headerlink" title="时间类型"></a>时间类型</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">DATE        -- 日期（YYYY-MM-DD）</span><br><span class="line">TIME        -- 时间（HH:MM:SS）</span><br><span class="line">DATETIME    -- 日期时间</span><br><span class="line">TIMESTAMP   -- 时间戳</span><br></pre></td></tr></table></figure><h3 id="4-完整表示例和表操作"><a href="#4-完整表示例和表操作" class="headerlink" title="4. 完整表示例和表操作"></a>4. 完整表示例和表操作</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE employees (</span><br><span class="line">    id INT PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">    name VARCHAR(30) NOT NULL,</span><br><span class="line">    gender CHAR(1) CHECK(gender IN(&#x27;男&#x27;,&#x27;女&#x27;)),</span><br><span class="line">    age INT DEFAULT 18,</span><br><span class="line">    salary DECIMAL(10,2),</span><br><span class="line">    hire_date DATE,</span><br><span class="line">    department_id INT,</span><br><span class="line">    CONSTRAINT fk_dept FOREIGN KEY(department_id) </span><br><span class="line">    REFERENCES departments(id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><strong>修改表</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-- 修改表</span><br><span class="line">-- 添加一个新的字段 家庭住址 address </span><br><span class="line">-- alter[修改]  table[表]  emp[表名]  add[添加]  address[添加的字段名]</span><br><span class="line">alter table emp  add address varchar(50);</span><br></pre></td></tr></table></figure><p><strong>删除字段</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-- 删除字段</span><br><span class="line">-- alter[修改]  table[表]  emp[表名] drop[删除] address[删除的字段名]</span><br><span class="line">alter table emp drop address;</span><br></pre></td></tr></table></figure><p><strong>两种删除表</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-- 删除表</span><br><span class="line">drop table if exists emp;</span><br><span class="line"></span><br><span class="line">-- 删除表， 并重新创建表</span><br><span class="line">-- truncate[截断，清除]</span><br><span class="line">truncate table emp;</span><br></pre></td></tr></table></figure><p><strong>此处存在面试题，见下</strong></p><h2 id="四、DML数据操作"><a href="#四、DML数据操作" class="headerlink" title="四、DML数据操作"></a>四、DML数据操作</h2><p>DML数据操作语言，用于对数据库中的数据进行增删改操作。</p><ul><li>添加数据INSERT</li><li>修改数据UPDATE</li><li>删除数据DELETE</li></ul><h3 id="1-添加数据"><a href="#1-添加数据" class="headerlink" title="1. 添加数据"></a>1. 添加数据</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">-- 给指定字段添加数据</span><br><span class="line">insert into emp(eid,enumber,name,sex,age,sal,card,hiredate)</span><br><span class="line">values(1,&#x27;1001&#x27;,&#x27;jack&#x27;,&#x27;男&#x27;,21,3500,&#x27;4311&#x27;,&#x27;2025-5-1&#x27;);</span><br><span class="line"></span><br><span class="line">-- 给全部字段添加数据</span><br><span class="line">insert into emp values(2,&#x27;1002&#x27;,&#x27;tom&#x27;,&#x27;男&#x27;,21,2500,&#x27;4311&#x27;,&#x27;2025-5-1&#x27;);</span><br><span class="line"></span><br><span class="line">-- 批量添加数据</span><br><span class="line">insert into emp values(3,&#x27;1003&#x27;,&#x27;lucy&#x27;,&#x27;女&#x27;,20,2500,&#x27;4311&#x27;,&#x27;2025-5-11&#x27;),</span><br><span class="line">(4,&#x27;1004&#x27;,&#x27;rose&#x27;,&#x27;女&#x27;,19,1500,&#x27;4312&#x27;,&#x27;2025-5-13&#x27;),</span><br><span class="line">(5,&#x27;1005&#x27;,&#x27;piter&#x27;,&#x27;男&#x27;,22,2300,&#x27;4313&#x27;,&#x27;2025-5-15&#x27;);</span><br></pre></td></tr></table></figure><h3 id="2-修改数据"><a href="#2-修改数据" class="headerlink" title="2. 修改数据"></a>2. 修改数据</h3><p><strong>更新类别</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-- 条件更新</span><br><span class="line">UPDATE employees SET salary = salary*1.1 WHERE department_id = 2;</span><br><span class="line"></span><br><span class="line">-- 全表更新</span><br><span class="line">UPDATE employees SET age = age + 1;</span><br></pre></td></tr></table></figure><p><strong>修改数据</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-- 修改数据  </span><br><span class="line">-- 修改id为1的数据，将name修改为中文杰克</span><br><span class="line">-- where 用于指定条件 </span><br><span class="line">update emp set name=&#x27;JACK&#x27;,age=22  where eid=1;</span><br><span class="line">-- 修改语句的条件可以有，也可以没有，如果没有指定条件，则修改整张表的数据。</span><br></pre></td></tr></table></figure><h3 id="3-删除数据"><a href="#3-删除数据" class="headerlink" title="3. 删除数据"></a>3. 删除数据</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-- 条件删除</span><br><span class="line">DELETE FROM employees </span><br><span class="line">WHERE id = 5;</span><br><span class="line"></span><br><span class="line">-- 清空表</span><br><span class="line">TRUNCATE TABLE temp_employees;</span><br></pre></td></tr></table></figure><p>详细案例</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 删除数据</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> emp <span class="keyword">where</span> eid<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line"><span class="comment">-- 删除语句的条件可以有，也可以没有，如果没有指定条件，则删除整张表的数据。</span></span><br></pre></td></tr></table></figure><h2 id="五、DQL数据查询"><a href="#五、DQL数据查询" class="headerlink" title="五、DQL数据查询"></a>五、DQL数据查询</h2><p>DQL数据查询语言，用来查询数据库中表的数据</p><h2 id="语法结构顺序（强制性顺序，元素可以不存在，但是必须按照这个顺序）"><a href="#语法结构顺序（强制性顺序，元素可以不存在，但是必须按照这个顺序）" class="headerlink" title="语法结构顺序（强制性顺序，元素可以不存在，但是必须按照这个顺序）"></a>语法结构顺序（强制性顺序，元素可以不存在，但是必须按照这个顺序）</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">select  字段列表</span><br><span class="line">from   表名列表</span><br><span class="line">where  条件列表</span><br><span class="line">group by  分组字段列表</span><br><span class="line">having 分组后条件列表</span><br><span class="line">order by 排序字段列表</span><br><span class="line">limit 分页参数</span><br></pre></td></tr></table></figure><ul><li>基本查询（不带条件）</li><li>条件查询（where）</li><li>聚合函数（count、max、min、avg、sum）</li><li>分组查询（group by）</li><li>排序查询（order by）</li><li>分页查询（limit）</li></ul><h3 id="1-基础查询"><a href="#1-基础查询" class="headerlink" title="1. 基础查询"></a>1. 基础查询</h3><p>在基本查询的DQL语句中，不带任何的查询条件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">-- 查询指定列</span><br><span class="line">SELECT name, salary FROM employees;</span><br><span class="line"></span><br><span class="line">-- 别名查询</span><br><span class="line">SELECT name AS &#x27;姓名&#x27;, </span><br><span class="line">       salary*12 &#x27;年薪&#x27; </span><br><span class="line">FROM employees;</span><br><span class="line"></span><br><span class="line">-- 去重查询</span><br><span class="line">SELECT DISTINCT department_id </span><br><span class="line">FROM employees;</span><br></pre></td></tr></table></figure><p><strong>实战对照</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">-- 查询多个字段</span><br><span class="line">-- 职员姓名，职员性别，职员工资，入职时间</span><br><span class="line">-- select[查询]  字段列表  from[来自]  emp[查询的表名]</span><br><span class="line">select name,sex,sal,hiredate from emp;</span><br><span class="line"> -- 查询所有字段   * 代表查询所有字段</span><br><span class="line"> select * from emp;</span><br><span class="line"> -- 字段取别名  as 取别名 as可以省略</span><br><span class="line"> select sal  &#x27;工资&#x27;,hiredate   &#x27;入职时间&#x27; from emp;</span><br><span class="line"> -- 查询员工的年龄有哪几种</span><br><span class="line"> -- distinct[去重复]</span><br><span class="line"> select distinct age from emp;</span><br></pre></td></tr></table></figure><h3 id="2-条件查询"><a href="#2-条件查询" class="headerlink" title="2. 条件查询"></a>2. 条件查询</h3><ul><li>比较运算符   &gt; &lt;  &gt;&#x3D;  &lt;&#x3D;  &lt;&gt;或 !&#x3D;   between..and in </li><li>逻辑运算符   or 或者    and  并且   not   ! 非 不是</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">-- 比较查询</span><br><span class="line">SELECT * FROM products </span><br><span class="line">WHERE price &gt; 100 AND stock &lt; 50;</span><br><span class="line"></span><br><span class="line">-- 范围查询</span><br><span class="line">SELECT * FROM orders </span><br><span class="line">WHERE order_date BETWEEN &#x27;2023-01-01&#x27; AND &#x27;2023-03-31&#x27;;</span><br><span class="line"></span><br><span class="line">-- 模糊查询</span><br><span class="line">SELECT * FROM customers </span><br><span class="line">WHERE phone LIKE &#x27;138%&#x27;;</span><br></pre></td></tr></table></figure><p><strong>实战对照</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">-- 查询年龄大于18岁的  </span><br><span class="line">select * from emp where age&gt;19;</span><br><span class="line">--  查询年龄小于20岁的</span><br><span class="line">select * from emp where age&lt;20;</span><br><span class="line">-- 查询没有身份证号的员工信息</span><br><span class="line">select * from emp where card is null;</span><br><span class="line">-- 查询有身份证的员工信息</span><br><span class="line">select * from emp where card is not null;</span><br><span class="line">-- 查询年龄在19(包括)和20(包括)岁之间的职员信息</span><br><span class="line">select * from emp where age&gt;=19 &amp;&amp; age&lt;=20;</span><br><span class="line">-- BETWEEN...and.. 在某个范围之间(最小值 and 最大值)</span><br><span class="line">select * from emp where age between 19 and 20;</span><br><span class="line"></span><br><span class="line">-- 查询性别为女，年龄小于20岁的职员信息</span><br><span class="line">select * from emp where sex=&#x27;女&#x27; and age&lt;20;</span><br><span class="line"></span><br><span class="line">-- 查询eid等于 2或者3或者6的员工信息</span><br><span class="line">select * from emp where eid=2 or eid=3 or eid=6;</span><br><span class="line">-- in 在in之后列表中的值  多选</span><br><span class="line">select * from emp where eid in(2,3,6);</span><br></pre></td></tr></table></figure><p>**like模糊查询模糊查询通过通配符实现字符串匹配 **<br><code>%</code> 表示任意长度的字符  1个或1个以上<br><code>_</code> 表示单个字符</p><p><strong>实战对照</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">-- 查询姓名为4个字的员工信息</span><br><span class="line">select * from emp where name like &#x27;____&#x27;;</span><br><span class="line"></span><br><span class="line">-- 查询姓名为l开头的4个字的员工信息</span><br><span class="line">select * from emp where name like &#x27;l___&#x27;;</span><br><span class="line"></span><br><span class="line">-- 查询名字包含o的员工信息</span><br><span class="line">select * from emp where name like &#x27;%o%&#x27;;</span><br><span class="line"></span><br><span class="line">-- 查询名字为l开头的员工信息</span><br><span class="line">select * from emp where name like &#x27;l%&#x27;;</span><br></pre></td></tr></table></figure><h3 id="3-聚合函数"><a href="#3-聚合函数" class="headerlink" title="3. 聚合函数"></a>3. 聚合函数</h3><p>可以理解为数学函数逻辑</p><ul><li>COUNT 统计数量</li><li>AVG 求平均</li><li>MAX 最大值</li><li>MIN 最小值</li><li>SUM 求和</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">-- 统计员工总数量</span><br><span class="line">SELECT COUNT(*) FROM emp;</span><br><span class="line">-- 统计的是card不为null的数据</span><br><span class="line">SELECT COUNT(card) FROM emp;</span><br><span class="line">-- 求员工的平均年龄</span><br><span class="line">SELECT AVG(age) FROM emp;</span><br><span class="line">-- 求员工的最大年龄</span><br><span class="line">SELECT MAX(age) FROM emp;</span><br><span class="line">-- 求员工的最小年龄</span><br><span class="line">SELECT MIN(age) FROM emp;</span><br><span class="line">-- 求员工的年龄综合</span><br><span class="line">SELECT SUM(age) FROM emp;</span><br></pre></td></tr></table></figure><h3 id="4-分组查询"><a href="#4-分组查询" class="headerlink" title="4. 分组查询"></a>4. 分组查询</h3><p>按照分组阶段将结果相同的内容作为一组，分组的目的是为了统计，所以一般情况会跟聚合函数一起使用。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">-- 按照性别分组，统计男女职员各多少人</span><br><span class="line">select sex,count(*) from emp group by sex;</span><br><span class="line"></span><br><span class="line">-- 按照性别分组，统计男女员工的平均年龄</span><br><span class="line">select sex,avg(age) from emp group by sex;</span><br><span class="line"></span><br><span class="line">-- 按照性别分组，统计男女职员各多少人，小于2的不显示</span><br><span class="line">-- having 筛选  </span><br><span class="line">select sex,count(*) from emp group by sex having count(*)&gt;2;</span><br><span class="line"></span><br><span class="line">-- 查询年龄大于20岁，按性别分组，统计每组的人数，大于2显示</span><br><span class="line">select sex,count(*) from emp where age&gt;20 group by sex having count(*)&gt;2;</span><br></pre></td></tr></table></figure><h3 id="5-排序查询"><a href="#5-排序查询" class="headerlink" title="5. 排序查询"></a>5. 排序查询</h3><p>ORDER BY 语句对查询结果进行排序。</p><p>表达式后面可选<code> asc(升序)</code>或者<code> desc(降序)</code>来指定排序方向，如果没有指定方向，默认为<code>asc(升序)</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">--   按照年龄对员工进行升序</span><br><span class="line">SELECT * FROM emp ORDER BY age ASC;</span><br><span class="line"></span><br><span class="line">--  按照工资降序排序，按照名字排序(多字段排序)</span><br><span class="line">SELECT * FROM emp ORDER BY sal DESC,NAME;</span><br></pre></td></tr></table></figure><p>###6.分页查询limit<br>用来限制select查询返回的行会，常用于分页，或提取部分数据，提供查询效率。<br>基本上所有的分页设计都是为了降低服务器负担，提高效率</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">--  0 开始索引, 查询3条  </span><br><span class="line">select * from emp limit 0,3;</span><br></pre></td></tr></table></figure><p><strong>注意：索引是按照提交数量定的，哪怕没提交成功报错了，但是执行了一次查询，索引仍然会增加</strong><br>解释：若是0,3，意思是从索引0开始，每次查询三条，若是成功查询，索引会变为3，哪怕出现报错查询则变为1</p><p>###查询练习实例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">-- 查询年龄在20,21,23的员工信息</span><br><span class="line">SELECT * FROM emp WHERE age IN(20,21,23);</span><br><span class="line"></span><br><span class="line">-- 查询性别为男，年龄在20-22岁以内，名字为4个字的员工</span><br><span class="line">SELECT * FROM emp WHERE sex=&#x27;男&#x27; AND (age BETWEEN 20 AND 22) AND NAME LIKE &#x27;____&#x27;;</span><br><span class="line"></span><br><span class="line">-- 统计员工表中，年龄小于25岁的，男女员工各多少人</span><br><span class="line">SELECT sex,COUNT(*) FROM emp WHERE age&lt;25 GROUP BY sex;</span><br><span class="line"></span><br><span class="line">-- 查询所有年龄小于25岁的员工姓名和年龄，按照年龄升序，如果年龄相同，按照入职时间降序</span><br><span class="line">SELECT NAME,age FROM emp WHERE age&lt;25 ORDER BY age ASC,hiredate DESC;</span><br><span class="line"></span><br><span class="line">-- 查询性别为男，年龄在20-22岁以内的前2个员工信息，按照年龄升序</span><br><span class="line">SELECT * FROM emp WHERE sex=&#x27;男&#x27; AND (age BETWEEN 20 AND 22) ORDER BY age ASC LIMIT 2;</span><br></pre></td></tr></table></figure><h2 id="六、数据库设计"><a href="#六、数据库设计" class="headerlink" title="六、数据库设计"></a>六、数据库设计</h2><p><strong>何为范式</strong><br>好的数据库设计对数据库的存储性能和后期开发，都会产生重要的影响。建立规范的数据库需要满足一些规则来优化数据库的设计和存储，这些规则称为范式。</p><p>数据库三大范式就是设计表结构所遵循的规范，目的就是为了减少冗余，建立结构合理的数据库，而提高数据存储和使用的性能。</p><p><strong>三大范式之间是具有依赖关系的，比如第二范式需要在第一范式的基础上进行，第三范式需要在第二范式的基础上进行。</strong></p><h3 id="1-三大范式"><a href="#1-三大范式" class="headerlink" title="1. 三大范式"></a>1. 三大范式</h3><p><code>1NF：</code>字段原子性（不可再分）<br>遵循原子性。即表中字段的数据，不可以在拆分。</p><p><code>2NF：</code>消除部分依赖（有主键）<br>一个表只能描述一件事情。</p><p><code>3NF：</code>消除传递依赖（外键关联）<br>在满足第二范式的情况下，消除传递依赖。</p><h3 id="1-数据库约束"><a href="#1-数据库约束" class="headerlink" title="1.数据库约束"></a>1.数据库约束</h3><p>对表中的数据进行限制，保证数据的正确性、有效性和完整性。如果一个表添加了约束，不正确的数据将无法插入到表中。<br><del>有点像过滤器</del></p><h3 id="2-约束类型"><a href="#2-约束类型" class="headerlink" title="2. 约束类型"></a>2. 约束类型</h3><p>对表中的数据进行限制，保证数据的正确性、有效性和完整性。如果一个表添加了约束，不正确的数据将无法插入到表中。</p><ul><li>非空约束： 限制该字段的数据不能为NULL    <code> NOT NULL</code></li><li>唯一约束：限制该字段的数据都是唯一的，不重复    <code>UNIQUE</code></li><li>主键约束：主键是一行数据的唯一表示，非空且唯一  <code>PRIMARY KEY</code></li><li>检查约束(8.0之后的版本才有效)：保证字段满足某一个条件 <code> CHECK</code></li><li>默认约束：保存数据时，如果不指定该字段的值，则使用默认值  <code>DEFUALT</code></li><li>外键约束：用于让两张表的数据之间建立连接，保证数据的一致性   <code>FOREIGNKEY</code></li></ul><h3 id="3-外键操作"><a href="#3-外键操作" class="headerlink" title="3. 外键操作"></a>3. 外键操作</h3><p><strong>创建外键约束</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">-- 创建外键约束</span><br><span class="line">create table emp(</span><br><span class="line">id int primary key auto_increment,</span><br><span class="line">name varchar(20),</span><br><span class="line">dno int,  -- 外键（从表）</span><br><span class="line">-- constraint[约束] fk_dno[约束名] foreign key [外键约束](外键字段名)   references[引用] </span><br><span class="line">constraint fk_dno  foreign key(dno) references dept(dno)  on update cascade  on delete cascade</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">create table dept(</span><br><span class="line">dno int primary key auto_increment,-- 主键（主键）</span><br><span class="line">dname varchar(20)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">insert into emp values(null,&#x27;jack&#x27;,10);</span><br><span class="line">insert into emp values(null,&#x27;Tom&#x27;,10);</span><br><span class="line">insert into emp values(null,&#x27;Lucy&#x27;,20);</span><br></pre></td></tr></table></figure><p><strong>删除外键</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 删除外键</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> emp <span class="keyword">drop</span> <span class="keyword">foreign</span> key  fk_dno;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 在emp表存在的情况下添加外键</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> emp <span class="keyword">add</span> <span class="keyword">constraint</span> fk_dno <span class="keyword">foreign</span> key(dno) <span class="keyword">references</span> dept(dno);</span><br></pre></td></tr></table></figure><h3 id="级联操作"><a href="#级联操作" class="headerlink" title="级联操作"></a>级联操作</h3><p>级联操作指的是在数据库表之间建立起一种关联关系，使得对一个表的操作（如更新或删除）能够自动触发对相关联表中数据的相应操作。</p><ul><li>级联更新（ON UPDATE CASCADE）</li><li>级联删除（ON DELETE CASCADE）</li></ul><p>当设置了级联更新，如果主表（包含外键的表）中的数据发生变化，那么从表（被引用的表）中相应的数据也会自动更新。同样，当设置了级联删除，如果主表中的数据被删除，从表中相应的数据也会被自动删除。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建学生表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> stu(</span><br><span class="line">sid <span class="type">INT</span> UNSIGNED <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT,</span><br><span class="line">name <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line">) TYPE<span class="operator">=</span>InnoDB CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建成绩表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> sc(</span><br><span class="line">scid <span class="type">INT</span> UNSIGNED <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT,</span><br><span class="line">sid <span class="type">INT</span> UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">score <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span>,</span><br><span class="line">INDEX (sid), <span class="comment">-- 外键必须加索引</span></span><br><span class="line"><span class="keyword">FOREIGN</span> KEY (sid) <span class="keyword">REFERENCES</span> stu(sid) <span class="keyword">ON</span> <span class="keyword">DELETE</span> CASCADE <span class="keyword">ON</span> <span class="keyword">UPDATE</span> CASCADE</span><br><span class="line">) TYPE<span class="operator">=</span>InnoDB CHARSET<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure><p>通过FOREIGN KEY (sid) REFERENCES stu(sid)建立了外键关系，并通过ON DELETE CASCADE和ON UPDATE CASCADE指定了级联删除和级联更新的行为。</p><h3 id="SQL-多表连接分类详解"><a href="#SQL-多表连接分类详解" class="headerlink" title="SQL 多表连接分类详解"></a>SQL 多表连接分类详解</h3><h4 id="1-内连接-INNER-JOIN"><a href="#1-内连接-INNER-JOIN" class="headerlink" title="1. 内连接 (INNER JOIN)"></a>1. 内连接 (INNER JOIN)</h4><h5 id="显式内连接"><a href="#显式内连接" class="headerlink" title="显式内连接"></a>显式内连接</h5><p>使用 <code>INNER JOIN</code> 和 <code>ON</code> 关键字明确指定连接条件：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> s.StuName, c.ClassName</span><br><span class="line"><span class="keyword">FROM</span> StudentInfo s</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> ClassInfo c <span class="keyword">ON</span> s.SClassID <span class="operator">=</span> c.ClassID</span><br></pre></td></tr></table></figure><h5 id="隐式内连接"><a href="#隐式内连接" class="headerlink" title="隐式内连接"></a>隐式内连接</h5><p>使用 <code>WHERE</code> 子句指定连接条件（不推荐）：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> s.StuName, c.ClassName</span><br><span class="line"><span class="keyword">FROM</span> StudentInfo s, ClassInfo c</span><br><span class="line"><span class="keyword">WHERE</span> s.SClassID <span class="operator">=</span> c.ClassID</span><br></pre></td></tr></table></figure><p><strong>特点</strong>：</p><ul><li>只返回两表中匹配的行</li><li>显式写法更清晰，推荐使用</li></ul><h4 id="2-外连接-OUTER-JOIN"><a href="#2-外连接-OUTER-JOIN" class="headerlink" title="2. 外连接 (OUTER JOIN)"></a>2. 外连接 (OUTER JOIN)</h4><h5 id="左外连接-LEFT-JOIN"><a href="#左外连接-LEFT-JOIN" class="headerlink" title="左外连接 (LEFT JOIN)"></a>左外连接 (LEFT JOIN)</h5><p>返回左表所有行，右表无匹配则显示NULL：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> s.StuName, e.ExamName</span><br><span class="line"><span class="keyword">FROM</span> StudentInfo s</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> StudentExam e <span class="keyword">ON</span> s.StuID <span class="operator">=</span> e.EStuID</span><br></pre></td></tr></table></figure><h5 id="右外连接-RIGHT-JOIN"><a href="#右外连接-RIGHT-JOIN" class="headerlink" title="右外连接 (RIGHT JOIN)"></a>右外连接 (RIGHT JOIN)</h5><p>返回右表所有行，左表无匹配则显示NULL：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> s.StuName, e.ExamName</span><br><span class="line"><span class="keyword">FROM</span> StudentInfo s</span><br><span class="line"><span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> StudentExam e <span class="keyword">ON</span> s.StuID <span class="operator">=</span> e.EStuID</span><br></pre></td></tr></table></figure><h4 id="内外连接对比"><a href="#内外连接对比" class="headerlink" title="内外连接对比"></a>内外连接对比</h4><table><thead><tr><th>特性</th><th>内连接</th><th>外连接</th></tr></thead><tbody><tr><td>结果集</td><td>只返回匹配行</td><td>返回匹配行+未匹配行(补NULL)</td></tr><tr><td>性能</td><td>通常更快</td><td>稍慢</td></tr><tr><td>用途</td><td>需要精确匹配时</td><td>需要保留所有记录时</td></tr><tr><td>NULL处理</td><td>不包含NULL</td><td>包含NULL</td></tr></tbody></table><p><strong>特点</strong>：</p><ul><li>左连接保留左表全部数据</li><li>右连接保留右表全部数据</li><li>实际开发中左连接使用更频繁</li></ul><h4 id="3-自连接-SELF-JOIN"><a href="#3-自连接-SELF-JOIN" class="headerlink" title="3. 自连接 (SELF JOIN)"></a>3. 自连接 (SELF JOIN)</h4><p>表与自身连接，常用于层级数据查询：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询员工及其经理信息</span></span><br><span class="line"><span class="keyword">SELECT</span> e1.EmpName <span class="keyword">AS</span> 员工, e2.EmpName <span class="keyword">AS</span> 经理</span><br><span class="line"><span class="keyword">FROM</span> Employee e1</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> Employee e2 <span class="keyword">ON</span> e1.ManagerID <span class="operator">=</span> e2.EmpID</span><br></pre></td></tr></table></figure><p><strong>特点</strong>：</p><ul><li>必须使用表别名区分</li><li>常用于组织结构、分类层级等场景</li></ul><h4 id="4-交叉连接-CROSS-JOIN"><a href="#4-交叉连接-CROSS-JOIN" class="headerlink" title="4. 交叉连接 (CROSS JOIN)"></a>4. 交叉连接 (CROSS JOIN)</h4><p>返回两表的笛卡尔积（所有可能的组合）：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> s.StuName, c.ClassName</span><br><span class="line"><span class="keyword">FROM</span> StudentInfo s</span><br><span class="line"><span class="keyword">CROSS</span> <span class="keyword">JOIN</span> ClassInfo c</span><br></pre></td></tr></table></figure><p><strong>特点</strong>：</p><ul><li>结果行数 &#x3D; 表1行数 × 表2行数</li><li>谨慎使用，可能产生大量数据</li></ul><h3 id="5-子查询-SUBQUERY"><a href="#5-子查询-SUBQUERY" class="headerlink" title="5. 子查询 (SUBQUERY)"></a>5. 子查询 (SUBQUERY)</h3><h4 id="WHERE-子句中的子查询"><a href="#WHERE-子句中的子查询" class="headerlink" title="WHERE 子句中的子查询"></a>WHERE 子句中的子查询</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询高于平均分的学员</span></span><br><span class="line"><span class="keyword">SELECT</span> StuName, Score</span><br><span class="line"><span class="keyword">FROM</span> StudentExam</span><br><span class="line"><span class="keyword">WHERE</span> Score <span class="operator">&gt;</span> (<span class="keyword">SELECT</span> <span class="built_in">AVG</span>(Score) <span class="keyword">FROM</span> StudentExam)</span><br></pre></td></tr></table></figure><h4 id="FROM-子句中的子查询（派生表）"><a href="#FROM-子句中的子查询（派生表）" class="headerlink" title="FROM 子句中的子查询（派生表）"></a>FROM 子句中的子查询（派生表）</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询每个班级的平均分</span></span><br><span class="line"><span class="keyword">SELECT</span> c.ClassName, t.AvgScore</span><br><span class="line"><span class="keyword">FROM</span> ClassInfo c</span><br><span class="line"><span class="keyword">JOIN</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> SClassID, <span class="built_in">AVG</span>(Score) <span class="keyword">AS</span> AvgScore</span><br><span class="line">    <span class="keyword">FROM</span> StudentInfo s</span><br><span class="line">    <span class="keyword">JOIN</span> StudentExam e <span class="keyword">ON</span> s.StuID <span class="operator">=</span> e.EStuID</span><br><span class="line">    <span class="keyword">GROUP</span> <span class="keyword">BY</span> SClassID</span><br><span class="line">) t <span class="keyword">ON</span> c.ClassID <span class="operator">=</span> t.SClassID</span><br></pre></td></tr></table></figure><h4 id="SELECT-子句中的子查询"><a href="#SELECT-子句中的子查询" class="headerlink" title="SELECT 子句中的子查询"></a>SELECT 子句中的子查询</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询学生及其班级平均分</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    s.StuName,</span><br><span class="line">    (<span class="keyword">SELECT</span> <span class="built_in">AVG</span>(Score) </span><br><span class="line">     <span class="keyword">FROM</span> StudentExam e </span><br><span class="line">     <span class="keyword">WHERE</span> e.EStuID <span class="keyword">IN</span> (</span><br><span class="line">         <span class="keyword">SELECT</span> StuID <span class="keyword">FROM</span> StudentInfo </span><br><span class="line">         <span class="keyword">WHERE</span> SClassID <span class="operator">=</span> s.SClassID</span><br><span class="line">     )) <span class="keyword">AS</span> ClassAvgScore</span><br><span class="line"><span class="keyword">FROM</span> StudentInfo s</span><br></pre></td></tr></table></figure><p><strong>子查询类型</strong>：</p><table><thead><tr><th>类型</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td>标量子查询</td><td>返回单个值</td><td><code>SELECT ... WHERE col &gt; (SELECT AVG(col) FROM ...)</code></td></tr><tr><td>列子查询</td><td>返回单列多行</td><td><code>SELECT ... WHERE col IN (SELECT col FROM ...)</code></td></tr><tr><td>行子查询</td><td>返回单行多列</td><td><code>SELECT ... WHERE (col1,col2) = (SELECT col1,col2 FROM ...)</code></td></tr><tr><td>表子查询</td><td>返回多行多列</td><td><code>FROM (SELECT ...) AS t</code></td></tr></tbody></table><h2 id="七、高级特性"><a href="#七、高级特性" class="headerlink" title="七、高级特性"></a>七、高级特性</h2><h3 id="1-事务控制"><a href="#1-事务控制" class="headerlink" title="1. 事务控制"></a>1. 事务控制</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">START TRANSACTION;</span><br><span class="line">UPDATE accounts SET balance = balance - 1000 </span><br><span class="line">WHERE user_id = 1;</span><br><span class="line">UPDATE accounts SET balance = balance + 1000 </span><br><span class="line">WHERE user_id = 2;</span><br><span class="line">COMMIT;</span><br><span class="line">-- 或 ROLLBACK;</span><br></pre></td></tr></table></figure><h3 id="2-视图创建"><a href="#2-视图创建" class="headerlink" title="2. 视图创建"></a>2. 视图创建</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CREATE VIEW emp_dept_view AS</span><br><span class="line">SELECT e.name, e.salary, d.department_name</span><br><span class="line">FROM employees e JOIN departments d</span><br><span class="line">ON e.department_id = d.id;</span><br></pre></td></tr></table></figure><h3 id="3-索引优化"><a href="#3-索引优化" class="headerlink" title="3. 索引优化"></a>3. 索引优化</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-- 创建索引</span><br><span class="line">CREATE INDEX idx_product_name </span><br><span class="line">ON products(name);</span><br><span class="line"></span><br><span class="line">-- 联合索引</span><br><span class="line">CREATE INDEX idx_emp_name_dept </span><br><span class="line">ON employees(name, department_id);</span><br></pre></td></tr></table></figure><h2 id="八、经典面试题"><a href="#八、经典面试题" class="headerlink" title="八、经典面试题"></a>八、经典面试题</h2><h3 id="1-CHAR-vs-VARCHAR"><a href="#1-CHAR-vs-VARCHAR" class="headerlink" title="1. CHAR vs VARCHAR"></a>1. CHAR vs VARCHAR</h3><p>char和varchar都可以描述字符串，char是固定字符串，无论使用几个字符串都占满全部。varchar可变字符串，使用几个字符串就占用几个。</p><ul><li>CHAR：固定长度，适合存储定长数据（如身份证号）</li><li>VARCHAR：可变长度，适合存储变长数据（如用户名）</li></ul><p><strong>例子：</strong><br>CHAR(11)    – 固定长度<br>一定要初始化一个长度，键入内容不到该长度会用空格补齐，不可超出定义长度，内存占用小<br>VARCHAR(50) – 可变长度<br>一定要初始化一个长度，用多少就分配多少长度，可以超出定义长度</p><h3 id="2-DELETE-vs-TRUNCATE"><a href="#2-DELETE-vs-TRUNCATE" class="headerlink" title="2. DELETE vs TRUNCATE"></a>2. DELETE vs TRUNCATE</h3><ul><li>DELETE：逐行删除，可回滚，不影响自增</li><li>TRUNCATE：整表删除，不可回滚，重置自增</li></ul><p>1.删除的方式不同</p><ul><li><p>​delete命令执行的时候会产生数据的日志文件，而日志记录需要消耗时间，方便数据回滚恢复。</p></li><li><p>​truncate命令执行的时候不回产生数据日志，因此比delete更快。</p></li></ul><p>2.表结构的影响</p><ul><li><p>​delete不会影响表的结构。</p></li><li><p>​truncate会把表的自增进行重置和索引恢复初始大小。</p></li></ul><h3 id="3-WHERE-vs-HAVING"><a href="#3-WHERE-vs-HAVING" class="headerlink" title="3. WHERE vs HAVING"></a>3. WHERE vs HAVING</h3><ul><li>WHERE：分组前过滤，不能使用聚合函数</li><li>HAVING：分组后过滤，可以使用聚合函数</li></ul><p><strong>执行时机不同</strong>： where是在分组之前进行过滤，不满足where条件，不参与分组，而having是分组之后对结果进行筛选。<br><strong>判断条件不同</strong>：where 不能对聚合函数进行判断，having是可以的</p><h2 id="九、实用技巧"><a href="#九、实用技巧" class="headerlink" title="九、实用技巧"></a>九、实用技巧</h2><h3 id="1-数据导出导入"><a href="#1-数据导出导入" class="headerlink" title="1. 数据导出导入"></a>1. 数据导出导入</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导出整个数据库</span></span><br><span class="line">mysqldump -uroot -p database &gt; backup.sql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入数据</span></span><br><span class="line">mysql -uroot -p database &lt; backup.sql</span><br></pre></td></tr></table></figure><h3 id="2-性能分析"><a href="#2-性能分析" class="headerlink" title="2. 性能分析"></a>2. 性能分析</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-- 查看执行计划</span><br><span class="line">EXPLAIN SELECT * FROM products WHERE price &gt; 100;</span><br><span class="line"></span><br><span class="line">-- 开启慢查询日志</span><br><span class="line">SET GLOBAL slow_query_log = &#x27;ON&#x27;;</span><br><span class="line">SET GLOBAL long_query_time = 2;</span><br></pre></td></tr></table></figure><h3 id="3-安全设置"><a href="#3-安全设置" class="headerlink" title="3. 安全设置"></a>3. 安全设置</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-- 创建用户并授权</span><br><span class="line">CREATE USER &#x27;app_user&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;password123&#x27;;</span><br><span class="line">GRANT SELECT, INSERT ON shop.* TO &#x27;app_user&#x27;@&#x27;%&#x27;;</span><br><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure><h2 id="十、实战练习"><a href="#十、实战练习" class="headerlink" title="十、实战练习"></a>十、实战练习</h2><h3 id="1-多表联合查询"><a href="#1-多表联合查询" class="headerlink" title="1. 多表联合查询"></a>1. 多表联合查询</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SELECT o.order_id, c.customer_name, p.product_name</span><br><span class="line">FROM orders o</span><br><span class="line">JOIN customers c ON o.customer_id = c.customer_id</span><br><span class="line">JOIN order_items oi ON o.order_id = oi.order_id</span><br><span class="line">JOIN products p ON oi.product_id = p.product_id</span><br><span class="line">WHERE o.order_date &gt; &#x27;2023-01-01&#x27;</span><br><span class="line">ORDER BY o.order_date DESC;</span><br></pre></td></tr></table></figure><h3 id="2-复杂统计报表"><a href="#2-复杂统计报表" class="headerlink" title="2. 复杂统计报表"></a>2. 复杂统计报表</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">SELECT </span><br><span class="line">    YEAR(order_date) AS &#x27;年份&#x27;,</span><br><span class="line">    MONTH(order_date) AS &#x27;月份&#x27;,</span><br><span class="line">    COUNT(*) AS &#x27;订单数&#x27;,</span><br><span class="line">    SUM(amount) AS &#x27;总金额&#x27;,</span><br><span class="line">    AVG(amount) AS &#x27;平均金额&#x27;</span><br><span class="line">FROM orders</span><br><span class="line">GROUP BY YEAR(order_date), MONTH(order_date)</span><br><span class="line">HAVING COUNT(*) &gt; 10</span><br><span class="line">ORDER BY 年份 DESC, 月份 ASC;</span><br></pre></td></tr></table></figure><h3 id="3-数据清洗转换"><a href="#3-数据清洗转换" class="headerlink" title="3. 数据清洗转换"></a>3. 数据清洗转换</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-- 将旧数据迁移到新表</span><br><span class="line">INSERT INTO new_employees(id, full_name, contact)</span><br><span class="line">SELECT </span><br><span class="line">    emp_id, </span><br><span class="line">    CONCAT(first_name, &#x27; &#x27;, last_name),</span><br><span class="line">    COALESCE(mobile, email, &#x27;无联系方式&#x27;)</span><br><span class="line">FROM old_employee_data</span><br><span class="line">WHERE status = &#x27;active&#x27;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql数据库学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>karword项目开发日志（1）</title>
      <link href="/2025/04/15/karword%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E6%97%A5%E5%BF%97/"/>
      <url>/2025/04/15/karword%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E6%97%A5%E5%BF%97/</url>
      
        <content type="html"><![CDATA[<h1 id="karword项目开发日志"><a href="#karword项目开发日志" class="headerlink" title="karword项目开发日志"></a>karword项目开发日志</h1><blockquote><p>该程序是一个卡片式树的综合多人辅助开发平台，内置功能，可视为迷你飞书</p></blockquote><h2 id="项目概述"><a href="#项目概述" class="headerlink" title="项目概述"></a>项目概述</h2><p>开发一个面向团队的知识管理协作平台，核心功能包括：</p><ul><li>卡片式文档管理系统</li><li>可视化图表编辑（流程图&#x2F;结构图&#x2F;甘特图）</li><li>实时团队协作</li><li>集成通讯功能</li></ul><h2 id="技术架构"><a href="#技术架构" class="headerlink" title="技术架构"></a>技术架构</h2><h3 id="前端技术栈"><a href="#前端技术栈" class="headerlink" title="前端技术栈"></a>前端技术栈</h3><table><thead><tr><th>模块</th><th>技术选型</th><th>备注</th></tr></thead><tbody><tr><td>框架</td><td>React 18 + TypeScript</td><td>使用Vite构建工具</td></tr><tr><td>状态管理</td><td>Redux Toolkit</td><td>配合RTK Query处理API</td></tr><tr><td>UI组件库</td><td>Ant Design 5.x</td><td>企业级UI组件</td></tr><tr><td>富文本编辑器</td><td>Tiptap</td><td>基于ProseMirror的现代编辑器</td></tr><tr><td>图表渲染</td><td>Mermaid + ECharts</td><td>Mermaid用于流程图&#x2F;时序图</td></tr><tr><td>实时协作</td><td>Socket.IO Client</td><td>与后端WebSocket通信</td></tr><tr><td>拖拽交互</td><td>react-dnd</td><td>卡片和图表元素拖拽</td></tr></tbody></table><h3 id="后端技术栈"><a href="#后端技术栈" class="headerlink" title="后端技术栈"></a>后端技术栈</h3><table><thead><tr><th>模块</th><th>技术选型</th><th>备注</th></tr></thead><tbody><tr><td>主框架</td><td>Spring Boot 3.x</td><td>Java 17+</td></tr><tr><td>数据库</td><td>PostgreSQL 15</td><td>关系型数据库</td></tr><tr><td>ORM</td><td>Spring Data JPA</td><td>配合Hibernate</td></tr><tr><td>缓存</td><td>Redis 7</td><td>会话缓存和频繁访问数据</td></tr><tr><td>实时通讯</td><td>WebSocket (STOMP)</td><td>通过Spring Messaging实现</td></tr><tr><td>文件存储</td><td>MinIO</td><td>自托管对象存储</td></tr><tr><td>搜索</td><td>Elasticsearch 8.x</td><td>全文检索功能</td></tr><tr><td>安全</td><td>Spring Security + JWT</td><td>OAuth2.0备用方案</td></tr></tbody></table><p>以上为明确使用的技术栈，本篇日志为第一部分，暨搭建Karwork项目的基础框架，包括Spring Boot后端和React前端。</p><p>整体过程可以视为<br>Spring Boot后端搭建–&gt;React前端搭建–&gt;前后端连接（本项目不提前连接）</p><h2 id="Spring-Boot后端搭建"><a href="#Spring-Boot后端搭建" class="headerlink" title="Spring Boot后端搭建"></a>Spring Boot后端搭建</h2><h3 id="1-创建Spring-Boot项目"><a href="#1-创建Spring-Boot项目" class="headerlink" title="1. 创建Spring Boot项目"></a>1. 创建Spring Boot项目</h3><ol><li>打开IntelliJ IDEA，点击”New Project”</li><li>选择”Spring Initializr”</li><li>配置项目信息：<ul><li>Name: <code>karwork-backend</code></li><li>Location: 选择你的项目目录</li><li>Type: Maven</li><li>Language: Java</li><li>Group: <code>com.karwork</code></li><li>Artifact: <code>karwork-backend</code></li><li>Package name: <code>com.karwork</code></li><li>Java: 选择17或更高版本</li></ul></li></ol><blockquote><p>以上的是可选条目，告知详细操作过程</p></blockquote><h3 id="2-添加依赖"><a href="#2-添加依赖" class="headerlink" title="2. 添加依赖"></a>2. 添加依赖</h3><p>选择以下依赖：</p><ul><li>Spring Web</li><li>Spring Data JPA</li><li>PostgreSQL Driver</li><li>Lombok</li><li>Spring Security</li><li>Spring Boot DevTools</li></ul><p>点击”Create”完成项目创建。</p><h3 id="3-配置数据库"><a href="#3-配置数据库" class="headerlink" title="3. 配置数据库"></a>3. 配置数据库</h3><p>数据库需要提前配置，注意以下字段的’password&#x3D;yourpassword’和’username&#x3D;postgres’字段更改，检查5432端口是否被占用</p><blockquote><p>我会标记出所在项目的文件夹位置，帮助项目构建</p></blockquote><ol><li>在<code>src/main/resources/application.properties</code>中添加：<figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开发环境配置</span></span><br><span class="line"><span class="attr">spring.datasource.url</span>=<span class="string">jdbc:postgresql://localhost:5432/karwork</span></span><br><span class="line"><span class="attr">spring.datasource.username</span>=<span class="string">postgres</span></span><br><span class="line"><span class="attr">spring.datasource.password</span>=<span class="string">yourpassword</span></span><br><span class="line"><span class="attr">spring.datasource.driver-class-name</span>=<span class="string">org.postgresql.Driver</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># JPA配置</span></span><br><span class="line"><span class="attr">spring.jpa.hibernate.ddl-auto</span>=<span class="string">update</span></span><br><span class="line"><span class="attr">spring.jpa.show-sql</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">spring.jpa.properties.hibernate.format_sql</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 开发时关闭安全验证</span></span><br><span class="line"><span class="attr">spring.autoconfigure.exclude</span>=<span class="string">org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="4-创建基础包结构"><a href="#4-创建基础包结构" class="headerlink" title="4. 创建基础包结构"></a>4. 创建基础包结构</h3><blockquote></blockquote><p>在<code>src/main/java/com/karwork</code>下创建以下包：</p><ul><li><code>config</code></li><li><code>controller</code></li><li><code>service</code></li><li><code>repository</code></li><li><code>model</code></li><li><code>dto</code></li><li><code>exception</code></li><li><code>websocket</code></li></ul><p>以上均为文件名，自行创建，也可以使用指令创建</p><h3 id="5-创建基础实体类"><a href="#5-创建基础实体类" class="headerlink" title="5. 创建基础实体类"></a>5. 创建基础实体类</h3><p>在<code>model</code>包中创建<code>User.java</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.karwork.model;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.persistence.*;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.annotations.GenericGenerator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table(name = &quot;users&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue(generator = &quot;UUID&quot;)</span></span><br><span class="line">    <span class="meta">@GenericGenerator(name = &quot;UUID&quot;, strategy = &quot;org.hibernate.id.UUIDGenerator&quot;)</span></span><br><span class="line">    <span class="meta">@Column(updatable = false, nullable = false)</span></span><br><span class="line">    <span class="keyword">private</span> UUID userId;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(nullable = false, unique = true)</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(nullable = false, unique = true)</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(nullable = false)</span></span><br><span class="line">    <span class="keyword">private</span> String passwordHash;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(nullable = false, updatable = false)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">LocalDateTime</span> <span class="variable">createdAt</span> <span class="operator">=</span> LocalDateTime.now();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-创建Repository接口"><a href="#6-创建Repository接口" class="headerlink" title="6. 创建Repository接口"></a>6. 创建Repository接口</h3><p>在<code>repository</code>包中创建<code>UserRepository.java</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.karwork.repository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.karwork.model.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.jpa.repository.JpaRepository;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Optional;</span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserRepository</span> <span class="keyword">extends</span> <span class="title class_">JpaRepository</span>&lt;User, UUID&gt; &#123;</span><br><span class="line">    Optional&lt;User&gt; <span class="title function_">findByUsername</span><span class="params">(String username)</span>;</span><br><span class="line">    Optional&lt;User&gt; <span class="title function_">findByEmail</span><span class="params">(String email)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-创建基础Controller"><a href="#7-创建基础Controller" class="headerlink" title="7. 创建基础Controller"></a>7. 创建基础Controller</h3><p>在<code>controller</code>包中创建<code>AuthController.java</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.karwork.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/api/auth&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AuthController</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@GetMapping(&quot;/status&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">status</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Auth service is running&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-运行项目"><a href="#8-运行项目" class="headerlink" title="8. 运行项目"></a>8. 运行项目</h3><ol><li>确保PostgreSQL已安装并运行</li><li>创建名为<code>karwork</code>的数据库</li><li>右键点击<code>KarworkBackendApplication.java</code> -&gt; Run</li><li>访问<code>http://localhost:8080/api/auth/status</code>测试</li></ol><h2 id="React前端搭建"><a href="#React前端搭建" class="headerlink" title="React前端搭建"></a>React前端搭建</h2><h3 id="1-创建React项目"><a href="#1-创建React项目" class="headerlink" title="1. 创建React项目"></a>1. 创建React项目</h3><ol><li>打开终端，导航到你的项目目录</li><li>运行命令：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm create vite@latest karwork-frontend -- --template react-ts</span><br><span class="line"><span class="built_in">cd</span> karwork-frontend</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure></li></ol><h3 id="2-安装必要依赖"><a href="#2-安装必要依赖" class="headerlink" title="2. 安装必要依赖"></a>2. 安装必要依赖</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install @reduxjs/toolkit react-redux axios antd @ant-design/icons react-router-dom socket.io-client react-dnd react-dnd-html5-backend</span><br><span class="line">npm install --save-dev @types/react @types/react-dom @types/react-router-dom</span><br></pre></td></tr></table></figure><h3 id="3-配置项目结构"><a href="#3-配置项目结构" class="headerlink" title="3. 配置项目结构"></a>3. 配置项目结构</h3><p>按照以下结构组织你的前端项目：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">karwork-frontend/</span><br><span class="line">├── public/</span><br><span class="line">├── src/</span><br><span class="line">│   ├── api/</span><br><span class="line">│   ├── assets/</span><br><span class="line">│   ├── components/</span><br><span class="line">│   ├── features/</span><br><span class="line">│   │   ├── auth/</span><br><span class="line">│   │   ├── editor/</span><br><span class="line">│   │   ├── diagram/</span><br><span class="line">│   │   └── chat/</span><br><span class="line">│   ├── hooks/</span><br><span class="line">│   ├── stores/</span><br><span class="line">│   ├── types/</span><br><span class="line">│   ├── utils/</span><br><span class="line">│   ├── App.tsx</span><br><span class="line">│   ├── main.tsx</span><br><span class="line">│   └── vite-env.d.ts</span><br></pre></td></tr></table></figure><h3 id="4-创建基础Redux-Store"><a href="#4-创建基础Redux-Store" class="headerlink" title="4. 创建基础Redux Store"></a>4. 创建基础Redux Store</h3><p>在<code>stores</code>文件夹中创建<code>store.ts</code>：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; configureStore &#125; <span class="keyword">from</span> <span class="string">&#x27;@reduxjs/toolkit&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">TypedUseSelectorHook</span>, useDispatch, useSelector &#125; <span class="keyword">from</span> <span class="string">&#x27;react-redux&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> store = <span class="title function_">configureStore</span>(&#123;</span><br><span class="line">  <span class="attr">reducer</span>: &#123;</span><br><span class="line">    <span class="comment">// 这里添加你的reducer</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> <span class="title class_">RootState</span> = <span class="title class_">ReturnType</span>&lt;<span class="keyword">typeof</span> store.<span class="property">getState</span>&gt;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> <span class="title class_">AppDispatch</span> = <span class="keyword">typeof</span> store.<span class="property">dispatch</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">useAppDispatch</span> = (<span class="params"></span>) =&gt; useDispatch&lt;<span class="title class_">AppDispatch</span>&gt;();</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="attr">useAppSelector</span>: <span class="title class_">TypedUseSelectorHook</span>&lt;<span class="title class_">RootState</span>&gt; = useSelector;</span><br></pre></td></tr></table></figure><h3 id="5-创建基础布局"><a href="#5-创建基础布局" class="headerlink" title="5. 创建基础布局"></a>5. 创建基础布局</h3><p>在<code>components</code>文件夹中创建<code>Layout.tsx</code>：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Layout</span> <span class="keyword">as</span> <span class="title class_">AntdLayout</span>, <span class="title class_">Menu</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;antd&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Outlet</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">Header</span>, <span class="title class_">Content</span> &#125; = <span class="title class_">AntdLayout</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">Layout</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">AntdLayout</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">minHeight:</span> &#x27;<span class="attr">100vh</span>&#x27; &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Header</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">color:</span> &#x27;<span class="attr">white</span>&#x27; &#125;&#125;&gt;</span>Karwork<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Header</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Content</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">padding:</span> &#x27;<span class="attr">24px</span>&#x27; &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Outlet</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Content</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">AntdLayout</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="6-配置路由"><a href="#6-配置路由" class="headerlink" title="6. 配置路由"></a>6. 配置路由</h3><p>修改<code>App.tsx</code>：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">BrowserRouter</span>, <span class="title class_">Routes</span>, <span class="title class_">Route</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Layout</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./components/Layout&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">HomePage</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./features/auth/HomePage&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">BrowserRouter</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Routes</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/&quot;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Layout</span> /&gt;</span>&#125;&gt;</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Route</span> <span class="attr">index</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">HomePage</span> /&gt;</span>&#125; /&gt;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Routes</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">BrowserRouter</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure><h3 id="7-创建首页"><a href="#7-创建首页" class="headerlink" title="7. 创建首页"></a>7. 创建首页</h3><p>在<code>features/auth</code>中创建<code>HomePage.tsx</code>：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">HomePage</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Welcome to Karwork<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="8-配置API客户端"><a href="#8-配置API客户端" class="headerlink" title="8. 配置API客户端"></a>8. 配置API客户端</h3><p>在<code>api</code>文件夹中创建<code>client.ts</code>：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> apiClient = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">  <span class="attr">baseURL</span>: <span class="string">&#x27;http://localhost:8080/api&#x27;</span>,</span><br><span class="line">  <span class="attr">withCredentials</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="9-运行前端项目"><a href="#9-运行前端项目" class="headerlink" title="9. 运行前端项目"></a>9. 运行前端项目</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure><p>访问<code>http://localhost:5173</code>测试</p><p>到此为止基本已完成前后端的框架构建，以下是可能遇见的问题</p><h2 id="1-时刻校验准备项目结构清单"><a href="#1-时刻校验准备项目结构清单" class="headerlink" title="1.时刻校验准备项目结构清单"></a>1.时刻校验准备项目结构清单</h2><pre><code>这是项目标准化的重要工作，这个项目本身就是在简化这个过程，一定时刻确认项目结构清单</code></pre><h2 id="2-清理依赖，用到的时候再启动"><a href="#2-清理依赖，用到的时候再启动" class="headerlink" title="2.清理依赖，用到的时候再启动"></a>2.清理依赖，用到的时候再启动</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;!-- Web核心 --&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 数据访问（保留JPA或MyBatis任选其一） --&gt;</span><br><span class="line">    &lt;!-- 选项1：使用JPA --&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;!-- 选项2：使用MyBatis（注释掉JPA） --&gt;</span><br><span class="line">    &lt;!--</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;3.0.4&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 数据库驱动（只保留你实际使用的） --&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.postgresql&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;postgresql&lt;/artifactId&gt;</span><br><span class="line">        &lt;scope&gt;runtime&lt;/scope&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;!-- 如果使用MySQL，注释掉PostgreSQL --&gt;</span><br><span class="line">    &lt;!--</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;com.mysql&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;mysql-connector-j&lt;/artifactId&gt;</span><br><span class="line">        &lt;scope&gt;runtime&lt;/scope&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 开发工具 --&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;</span><br><span class="line">        &lt;scope&gt;runtime&lt;/scope&gt;</span><br><span class="line">        &lt;optional&gt;true&lt;/optional&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- Lombok --&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">        &lt;optional&gt;true&lt;/optional&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 测试 --&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">        &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><p>防止xml文件污染，适当截取</p><h2 id="3-确认包扫描路径找到，必要时请使用标签标注"><a href="#3-确认包扫描路径找到，必要时请使用标签标注" class="headerlink" title="3.确认包扫描路径找到，必要时请使用标签标注"></a>3.确认包扫描路径找到，必要时请使用标签标注</h2><p>所遇到的问题，我之后会单独拉一个页面来展示</p>]]></content>
      
      
      <categories>
          
          <category> 开发日志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目开发日志 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法与数据结构核心思想与解题蓝图</title>
      <link href="/2025/04/02/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%A0%B8%E5%BF%83%E6%80%9D%E6%83%B3%E4%B8%8E%E8%A7%A3%E9%A2%98%E8%93%9D%E5%9B%BE/"/>
      <url>/2025/04/02/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%A0%B8%E5%BF%83%E6%80%9D%E6%83%B3%E4%B8%8E%E8%A7%A3%E9%A2%98%E8%93%9D%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<h1 id="算法与数据结构核心思想与解题蓝图"><a href="#算法与数据结构核心思想与解题蓝图" class="headerlink" title="算法与数据结构核心思想与解题蓝图"></a>算法与数据结构核心思想与解题蓝图</h1><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ol><li><a href="#%E5%93%88%E5%B8%8Chash">哈希(Hash)</a></li><li><a href="#%E5%8F%8C%E6%8C%87%E9%92%88two-pointers">双指针(Two Pointers)</a></li><li><a href="#%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3sliding-window">滑动窗口(Sliding Window)</a></li><li><a href="#%E5%AD%90%E4%B8%B2substring">子串(Substring)</a></li><li><a href="#%E6%99%AE%E9%80%9A%E6%95%B0%E7%BB%84array">普通数组(Array)</a></li><li><a href="#%E7%9F%A9%E9%98%B5matrix">矩阵(Matrix)</a></li><li><a href="#%E9%93%BE%E8%A1%A8linked-list">链表(Linked List)</a></li><li><a href="#%E4%BA%8C%E5%8F%89%E6%A0%91binary-tree">二叉树(Binary Tree)</a></li><li><a href="#%E5%9B%BE%E8%AE%BAgraph-theory">图论(Graph Theory)</a></li><li><a href="#%E5%9B%9E%E6%BA%AFbacktracking">回溯(Backtracking)</a></li><li><a href="#%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BEbinary-search">二分查找(Binary Search)</a></li><li><a href="#%E6%A0%88stack">栈(Stack)</a></li><li><a href="#%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95greedy">贪心算法(Greedy)</a></li><li><a href="#%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92dp">动态规划(DP)</a></li><li><a href="#%E5%A4%9A%E7%BB%B4%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92multi-dimensional-dp">多维动态规划(Multi-dimensional DP)</a></li><li><a href="#%E6%8A%80%E5%B7%A7tricks">技巧(Tricks)</a></li></ol><p>接下来我将简单介绍以上16种算法思想及其使用场景</p><p>哈希：快速查找和存储数据<br>双指针：有序数组&#x2F;链表问题<br>滑动窗口：子数组&#x2F;子串问题<br>子串：字符串匹配问题<br>普通数组：数组遍历、查找<br>矩阵：二维数组遍历<br>链表：遍历、反转<br>二叉树：遍历、搜索<br>图论：图的遍历<br>回溯：组合、排列<br>二分查找：有序数组查找<br>栈：逆序遍历<br>贪心算法：局部最优解<br>动态规划：最优解<br>多维动态规划：多维数组问题<br>技巧：位运算、前缀和 </p><hr><h2 id="哈希-Hash"><a href="#哈希-Hash" class="headerlink" title="哈希(Hash)"></a>哈希(Hash)</h2><p><strong>核心思想</strong>：利用哈希表(O(1)时间复杂度)快速查找和存储数据<br><strong>适用场景</strong>：需要快速查找&#x2F;去重的场景，如两数之和、重复元素检测</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 哈希表基本操作</span></span><br><span class="line">Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">map.put(key, value);       <span class="comment">// 存储</span></span><br><span class="line"><span class="type">int</span> <span class="variable">val</span> <span class="operator">=</span> map.get(key);     <span class="comment">// 获取</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">exists</span> <span class="operator">=</span> map.containsKey(key); <span class="comment">// 检查存在</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 典型问题：两数之和</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] twoSum(<span class="type">int</span>[] nums, <span class="type">int</span> target) &#123;</span><br><span class="line">    Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">complement</span> <span class="operator">=</span> target - nums[i];</span><br><span class="line">        <span class="keyword">if</span> (map.containsKey(complement)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;map.get(complement), i&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        map.put(nums[i], i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 哈希集合去重</span></span><br><span class="line">Set&lt;Integer&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">    <span class="keyword">if</span> (set.contains(num)) &#123;</span><br><span class="line">        <span class="comment">// 发现重复</span></span><br><span class="line">    &#125;</span><br><span class="line">    set.add(num);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="双指针-Two-Pointers"><a href="#双指针-Two-Pointers" class="headerlink" title="双指针(Two Pointers)"></a>双指针(Two Pointers)</h2><p><strong>核心思想</strong>：使用两个指针协同遍历数据结构<br><strong>适用场景</strong>：有序数组&#x2F;链表问题，如归并数组、判断回文</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 左右指针模板（如反转数组）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reverse</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>, right = nums.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> nums[left];</span><br><span class="line">        nums[left++] = nums[right];</span><br><span class="line">        nums[right--] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 快慢指针模板（如链表环检测）</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasCycle</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">slow</span> <span class="operator">=</span> head, fast = head;</span><br><span class="line">    <span class="keyword">while</span> (fast != <span class="literal">null</span> &amp;&amp; fast.next != <span class="literal">null</span>) &#123;</span><br><span class="line">        slow = slow.next;</span><br><span class="line">        fast = fast.next.next;</span><br><span class="line">        <span class="keyword">if</span> (slow == fast) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 三数之和问题</span></span><br><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">threeSum</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    Arrays.sort(nums);</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length - <span class="number">2</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; nums[i] == nums[i-<span class="number">1</span>]) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> i+<span class="number">1</span>, right = nums.length-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> nums[i] + nums[left] + nums[right];</span><br><span class="line">            <span class="keyword">if</span> (sum == <span class="number">0</span>) &#123;</span><br><span class="line">                res.add(Arrays.asList(nums[i], nums[left], nums[right]));</span><br><span class="line">                <span class="keyword">while</span> (left &lt; right &amp;&amp; nums[left] == nums[left+<span class="number">1</span>]) left++;</span><br><span class="line">                <span class="keyword">while</span> (left &lt; right &amp;&amp; nums[right] == nums[right-<span class="number">1</span>]) right--;</span><br><span class="line">                left++; right--;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sum &lt; <span class="number">0</span>) left++;</span><br><span class="line">            <span class="keyword">else</span> right--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="滑动窗口-Sliding-Window"><a href="#滑动窗口-Sliding-Window" class="headerlink" title="滑动窗口(Sliding Window)"></a>滑动窗口(Sliding Window)</h2><p><strong>核心思想</strong>：维护一个可变大小的窗口在数据结构上滑动<br><strong>适用场景</strong>：子数组&#x2F;子串问题，如最小覆盖子串、最长无重复子串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 滑动窗口模板</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">slidingWindowTemplate</span><span class="params">(String s)</span> &#123;</span><br><span class="line">    Map&lt;Character, Integer&gt; window = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>, right = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">maxLen</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (right &lt; s.length()) &#123;</span><br><span class="line">        <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> s.charAt(right++);</span><br><span class="line">        window.put(c, window.getOrDefault(c, <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (<span class="comment">/* 窗口需要收缩的条件 */</span>) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">d</span> <span class="operator">=</span> s.charAt(left++);</span><br><span class="line">            window.put(d, window.get(d) - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (window.get(d) == <span class="number">0</span>) window.remove(d);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        maxLen = Math.max(maxLen, right - left);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxLen;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最长无重复字符子串</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">lengthOfLongestSubstring</span><span class="params">(String s)</span> &#123;</span><br><span class="line">    Map&lt;Character, Integer&gt; window = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>, right = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">maxLen</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (right &lt; s.length()) &#123;</span><br><span class="line">        <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> s.charAt(right++);</span><br><span class="line">        window.put(c, window.getOrDefault(c, <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (window.get(c) &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">d</span> <span class="operator">=</span> s.charAt(left++);</span><br><span class="line">            window.put(d, window.get(d) - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        maxLen = Math.max(maxLen, right - left);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxLen;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="子串-Substring"><a href="#子串-Substring" class="headerlink" title="子串(Substring)"></a>子串(Substring)</h2><p><strong>核心思想</strong>：处理字符串中的连续字符序列问题<br><strong>适用场景</strong>：字符串匹配、子串查找、回文子串等</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 最长回文子串（中心扩展法）</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">longestPalindrome</span><span class="params">(String s)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (s == <span class="literal">null</span> || s.length() &lt; <span class="number">1</span>) <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> <span class="number">0</span>, end = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len1</span> <span class="operator">=</span> expandAroundCenter(s, i, i);    <span class="comment">// 奇数长度</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">len2</span> <span class="operator">=</span> expandAroundCenter(s, i, i + <span class="number">1</span>); <span class="comment">// 偶数长度</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> Math.max(len1, len2);</span><br><span class="line">        <span class="keyword">if</span> (len &gt; end - start) &#123;</span><br><span class="line">            start = i - (len - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">            end = i + len / <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s.substring(start, end + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="title function_">expandAroundCenter</span><span class="params">(String s, <span class="type">int</span> left, <span class="type">int</span> right)</span> &#123;</span><br><span class="line">    <span class="keyword">while</span> (left &gt;= <span class="number">0</span> &amp;&amp; right &lt; s.length() &amp;&amp; s.charAt(left) == s.charAt(right)) &#123;</span><br><span class="line">        left--;</span><br><span class="line">        right++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> right - left - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// KMP算法（字符串匹配）</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">strStr</span><span class="params">(String haystack, String needle)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (needle.isEmpty()) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span>[] lps = computeLPSArray(needle);</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; haystack.length()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (haystack.charAt(i) == needle.charAt(j)) &#123;</span><br><span class="line">            i++; j++;</span><br><span class="line">            <span class="keyword">if</span> (j == needle.length()) <span class="keyword">return</span> i - j;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (j != <span class="number">0</span>) j = lps[j-<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">else</span> i++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span>[] computeLPSArray(String pattern) &#123;</span><br><span class="line">    <span class="type">int</span>[] lps = <span class="keyword">new</span> <span class="title class_">int</span>[pattern.length()];</span><br><span class="line">    <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> <span class="number">0</span>, i = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; pattern.length()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (pattern.charAt(i) == pattern.charAt(len)) &#123;</span><br><span class="line">            lps[i++] = ++len;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (len != <span class="number">0</span>) len = lps[len-<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">else</span> lps[i++] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> lps;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="普通数组-Array"><a href="#普通数组-Array" class="headerlink" title="普通数组(Array)"></a>普通数组(Array)</h2><p><strong>核心思想</strong>：利用数组索引和元素关系解决问题<br><strong>适用场景</strong>：元素操作、排序、搜索等基础问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数组反转</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reverseArray</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length / <span class="number">2</span>; i++) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> nums[i];</span><br><span class="line">        nums[i] = nums[nums.length - <span class="number">1</span> - i];</span><br><span class="line">        nums[nums.length - <span class="number">1</span> - i] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 荷兰国旗问题（三向切分）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sortColors</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">low</span> <span class="operator">=</span> <span class="number">0</span>, high = nums.length - <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= high) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums[i] == <span class="number">0</span>) &#123;</span><br><span class="line">            swap(nums, low++, i++);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[i] == <span class="number">2</span>) &#123;</span><br><span class="line">            swap(nums, i, high--);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> nums[i];</span><br><span class="line">    nums[i] = nums[j];</span><br><span class="line">    nums[j] = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 前缀和数组</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PrefixSum</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span>[] prefix;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">PrefixSum</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        prefix = <span class="keyword">new</span> <span class="title class_">int</span>[nums.length + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            prefix[i + <span class="number">1</span>] = prefix[i] + nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sumRange</span><span class="params">(<span class="type">int</span> left, <span class="type">int</span> right)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> prefix[right + <span class="number">1</span>] - prefix[left];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="矩阵-Matrix"><a href="#矩阵-Matrix" class="headerlink" title="矩阵(Matrix)"></a>矩阵(Matrix)</h2><p><strong>核心思想</strong>：二维数组的特殊遍历和操作技巧<br><strong>适用场景</strong>：图像处理、矩阵运算、二维搜索等</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 螺旋矩阵遍历</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">spiralOrder</span><span class="params">(<span class="type">int</span>[][] matrix)</span> &#123;</span><br><span class="line">    List&lt;Integer&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">if</span> (matrix == <span class="literal">null</span> || matrix.length == <span class="number">0</span>) <span class="keyword">return</span> res;</span><br><span class="line">    <span class="type">int</span> <span class="variable">top</span> <span class="operator">=</span> <span class="number">0</span>, bottom = matrix.length - <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>, right = matrix[<span class="number">0</span>].length - <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="comment">// 从左到右</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> left; i &lt;= right; i++) res.add(matrix[top][i]);</span><br><span class="line">        <span class="keyword">if</span> (++top &gt; bottom) <span class="keyword">break</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 从上到下</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> top; i &lt;= bottom; i++) res.add(matrix[i][right]);</span><br><span class="line">        <span class="keyword">if</span> (--right &lt; left) <span class="keyword">break</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 从右到左</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> right; i &gt;= left; i--) res.add(matrix[bottom][i]);</span><br><span class="line">        <span class="keyword">if</span> (--bottom &lt; top) <span class="keyword">break</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 从下到上</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> bottom; i &gt;= top; i--) res.add(matrix[i][left]);</span><br><span class="line">        <span class="keyword">if</span> (++left &gt; right) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 旋转图像（原地旋转90度）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rotate</span><span class="params">(<span class="type">int</span>[][] matrix)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> matrix.length;</span><br><span class="line">    <span class="comment">// 先转置矩阵</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i; j &lt; n; j++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> matrix[i][j];</span><br><span class="line">            matrix[i][j] = matrix[j][i];</span><br><span class="line">            matrix[j][i] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 再翻转每一行</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n / <span class="number">2</span>; j++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> matrix[i][j];</span><br><span class="line">            matrix[i][j] = matrix[i][n - <span class="number">1</span> - j];</span><br><span class="line">            matrix[i][n - <span class="number">1</span> - j] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 岛屿数量（DFS）</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">numIslands</span><span class="params">(<span class="type">char</span>[][] grid)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (grid == <span class="literal">null</span> || grid.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; grid.length; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; grid[<span class="number">0</span>].length; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (grid[i][j] == <span class="string">&#x27;1&#x27;</span>) &#123;</span><br><span class="line">                dfs(grid, i, j);</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">char</span>[][] grid, <span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (i &lt; <span class="number">0</span> || j &lt; <span class="number">0</span> || i &gt;= grid.length || j &gt;= grid[<span class="number">0</span>].length || grid[i][j] != <span class="string">&#x27;1&#x27;</span>) <span class="keyword">return</span>;</span><br><span class="line">    grid[i][j] = <span class="string">&#x27;0&#x27;</span>; <span class="comment">// 标记为已访问</span></span><br><span class="line">    dfs(grid, i + <span class="number">1</span>, j);</span><br><span class="line">    dfs(grid, i - <span class="number">1</span>, j);</span><br><span class="line">    dfs(grid, i, j + <span class="number">1</span>);</span><br><span class="line">    dfs(grid, i, j - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="链表-Linked-List"><a href="#链表-Linked-List" class="headerlink" title="链表(Linked List)"></a>链表(Linked List)</h2><p><strong>核心思想</strong>：指针操作和虚拟头节点技巧<br><strong>适用场景</strong>：链表反转、环检测、节点操作等</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 链表节点定义</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ListNode</span> &#123;</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    ListNode next;</span><br><span class="line">    ListNode(<span class="type">int</span> x) &#123; val = x; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 反转链表（迭代）</span></span><br><span class="line"><span class="keyword">public</span> ListNode <span class="title function_">reverseList</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">prev</span> <span class="operator">=</span> <span class="literal">null</span>, curr = head;</span><br><span class="line">    <span class="keyword">while</span> (curr != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">nextTemp</span> <span class="operator">=</span> curr.next;</span><br><span class="line">        curr.next = prev;</span><br><span class="line">        prev = curr;</span><br><span class="line">        curr = nextTemp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> prev;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 反转链表（递归）</span></span><br><span class="line"><span class="keyword">public</span> ListNode <span class="title function_">reverseListRecursive</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (head == <span class="literal">null</span> || head.next == <span class="literal">null</span>) <span class="keyword">return</span> head;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">p</span> <span class="operator">=</span> reverseListRecursive(head.next);</span><br><span class="line">    head.next.next = head;</span><br><span class="line">    head.next = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 合并两个有序链表</span></span><br><span class="line"><span class="keyword">public</span> ListNode <span class="title function_">mergeTwoLists</span><span class="params">(ListNode l1, ListNode l2)</span> &#123;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">dummy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">curr</span> <span class="operator">=</span> dummy;</span><br><span class="line">    <span class="keyword">while</span> (l1 != <span class="literal">null</span> &amp;&amp; l2 != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (l1.val &lt; l2.val) &#123;</span><br><span class="line">            curr.next = l1;</span><br><span class="line">            l1 = l1.next;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            curr.next = l2;</span><br><span class="line">            l2 = l2.next;</span><br><span class="line">        &#125;</span><br><span class="line">        curr = curr.next;</span><br><span class="line">    &#125;</span><br><span class="line">    curr.next = l1 != <span class="literal">null</span> ? l1 : l2;</span><br><span class="line">    <span class="keyword">return</span> dummy.next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检测链表环并找到入口</span></span><br><span class="line"><span class="keyword">public</span> ListNode <span class="title function_">detectCycle</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">slow</span> <span class="operator">=</span> head, fast = head;</span><br><span class="line">    <span class="keyword">while</span> (fast != <span class="literal">null</span> &amp;&amp; fast.next != <span class="literal">null</span>) &#123;</span><br><span class="line">        slow = slow.next;</span><br><span class="line">        fast = fast.next.next;</span><br><span class="line">        <span class="keyword">if</span> (slow == fast) &#123;</span><br><span class="line">            <span class="type">ListNode</span> <span class="variable">ptr</span> <span class="operator">=</span> head;</span><br><span class="line">            <span class="keyword">while</span> (ptr != slow) &#123;</span><br><span class="line">                ptr = ptr.next;</span><br><span class="line">                slow = slow.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> ptr;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="二叉树-Binary-Tree"><a href="#二叉树-Binary-Tree" class="headerlink" title="二叉树(Binary Tree)"></a>二叉树(Binary Tree)</h2><p><strong>核心思想</strong>：递归和迭代遍历，分治思想<br><strong>适用场景</strong>：树结构相关问题，如遍历、构造、属性判断等</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 二叉树节点定义</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TreeNode</span> &#123;</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    TreeNode left, right;</span><br><span class="line">    TreeNode(<span class="type">int</span> x) &#123; val = x; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 前序遍历（递归）</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">preorderTraversal</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    List&lt;Integer&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    preorder(root, res);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">preorder</span><span class="params">(TreeNode node, List&lt;Integer&gt; res)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (node == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">    res.add(node.val);</span><br><span class="line">    preorder(node.left, res);</span><br><span class="line">    preorder(node.right, res);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 中序遍历（迭代）</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">inorderTraversal</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    List&lt;Integer&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">    <span class="type">TreeNode</span> <span class="variable">curr</span> <span class="operator">=</span> root;</span><br><span class="line">    <span class="keyword">while</span> (curr != <span class="literal">null</span> || !stack.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">while</span> (curr != <span class="literal">null</span>) &#123;</span><br><span class="line">            stack.push(curr);</span><br><span class="line">            curr = curr.left;</span><br><span class="line">        &#125;</span><br><span class="line">        curr = stack.pop();</span><br><span class="line">        res.add(curr.val);</span><br><span class="line">        curr = curr.right;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 层次遍历（BFS）</span></span><br><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">levelOrder</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span> res;</span><br><span class="line">    Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    queue.offer(root);</span><br><span class="line">    <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">levelSize</span> <span class="operator">=</span> queue.size();</span><br><span class="line">        List&lt;Integer&gt; level = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; levelSize; i++) &#123;</span><br><span class="line">            <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> queue.poll();</span><br><span class="line">            level.add(node.val);</span><br><span class="line">            <span class="keyword">if</span> (node.left != <span class="literal">null</span>) queue.offer(node.left);</span><br><span class="line">            <span class="keyword">if</span> (node.right != <span class="literal">null</span>) queue.offer(node.right);</span><br><span class="line">        &#125;</span><br><span class="line">        res.add(level);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 二叉树的最大深度</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxDepth</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> + Math.max(maxDepth(root.left), maxDepth(root.right));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="图论-Graph-Theory"><a href="#图论-Graph-Theory" class="headerlink" title="图论(Graph Theory)"></a>图论(Graph Theory)</h2><p><strong>核心思想</strong>：DFS&#x2F;BFS遍历，并查集，最短路径算法<br><strong>适用场景</strong>：网络结构、路径查找、连通性问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 图的邻接表表示</span></span><br><span class="line">List&lt;List&lt;Integer&gt;&gt; graph = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">// DFS遍历</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> node, <span class="type">boolean</span>[] visited, List&lt;List&lt;Integer&gt;&gt; graph)</span> &#123;</span><br><span class="line">    visited[node] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> neighbor : graph.get(node)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!visited[neighbor]) &#123;</span><br><span class="line">            dfs(neighbor, visited, graph);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// BFS遍历</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">bfs</span><span class="params">(<span class="type">int</span> start, List&lt;List&lt;Integer&gt;&gt; graph)</span> &#123;</span><br><span class="line">    <span class="type">boolean</span>[] visited = <span class="keyword">new</span> <span class="title class_">boolean</span>[graph.size()];</span><br><span class="line">    Queue&lt;Integer&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    queue.offer(start);</span><br><span class="line">    visited[start] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">node</span> <span class="operator">=</span> queue.poll();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> neighbor : graph.get(node)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!visited[neighbor]) &#123;</span><br><span class="line">                visited[neighbor] = <span class="literal">true</span>;</span><br><span class="line">                queue.offer(neighbor);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Dijkstra算法（最短路径）</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] dijkstra(List&lt;List&lt;<span class="type">int</span>[]&gt;&gt; graph, <span class="type">int</span> start) &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> graph.size();</span><br><span class="line">    <span class="type">int</span>[] dist = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">    Arrays.fill(dist, Integer.MAX_VALUE);</span><br><span class="line">    dist[start] = <span class="number">0</span>;</span><br><span class="line">    PriorityQueue&lt;<span class="type">int</span>[]&gt; pq = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;((a, b) -&gt; a[<span class="number">1</span>] - b[<span class="number">1</span>]);</span><br><span class="line">    pq.offer(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;start, <span class="number">0</span>&#125;);</span><br><span class="line">    <span class="keyword">while</span> (!pq.isEmpty()) &#123;</span><br><span class="line">        <span class="type">int</span>[] curr = pq.poll();</span><br><span class="line">        <span class="type">int</span> <span class="variable">u</span> <span class="operator">=</span> curr[<span class="number">0</span>], d = curr[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span> (d &gt; dist[u]) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] edge : graph.get(u)) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">v</span> <span class="operator">=</span> edge[<span class="number">0</span>], w = edge[<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> (dist[v] &gt; dist[u] + w) &#123;</span><br><span class="line">                dist[v] = dist[u] + w;</span><br><span class="line">                pq.offer(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;v, dist[v]&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dist;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 并查集实现</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UnionFind</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span>[] parent;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UnionFind</span><span class="params">(<span class="type">int</span> size)</span> &#123;</span><br><span class="line">        parent = <span class="keyword">new</span> <span class="title class_">int</span>[size];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i++) parent[i] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">find</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (parent[x] != x) parent[x] = find(parent[x]);</span><br><span class="line">        <span class="keyword">return</span> parent[x];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">union</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line">        parent[find(x)] = find(y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="回溯-Backtracking"><a href="#回溯-Backtracking" class="headerlink" title="回溯(Backtracking)"></a>回溯(Backtracking)</h2><p><strong>核心思想</strong>：尝试-回溯-剪枝，系统性地搜索解空间<br><strong>适用场景</strong>：排列组合、子集、棋盘类问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 回溯模板</span></span><br><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">backtrack</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    backtrackHelper(res, <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(), nums, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">backtrackHelper</span><span class="params">(List&lt;List&lt;Integer&gt;&gt; res, List&lt;Integer&gt; temp, <span class="type">int</span>[] nums, <span class="type">int</span> start)</span> &#123;</span><br><span class="line">    <span class="comment">// 满足条件时加入结果</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="comment">/* 终止条件 */</span>) &#123;</span><br><span class="line">        res.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(temp));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> start; i &lt; nums.length; i++) &#123;</span><br><span class="line">        <span class="comment">// 剪枝条件</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="comment">/* 剪枝 */</span>) <span class="keyword">continue</span>;</span><br><span class="line">        temp.add(nums[i]); <span class="comment">// 做选择</span></span><br><span class="line">        backtrackHelper(res, temp, nums, i + <span class="number">1</span>); <span class="comment">// 递归</span></span><br><span class="line">        temp.remove(temp.size() - <span class="number">1</span>); <span class="comment">// 撤销选择</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 全排列</span></span><br><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">permute</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    backtrack(nums, <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(), res);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">backtrack</span><span class="params">(<span class="type">int</span>[] nums, List&lt;Integer&gt; temp, List&lt;List&lt;Integer&gt;&gt; res)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (temp.size() == nums.length) &#123;</span><br><span class="line">        res.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(temp));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (temp.contains(nums[i])) <span class="keyword">continue</span>; <span class="comment">// 剪枝</span></span><br><span class="line">        temp.add(nums[i]);</span><br><span class="line">        backtrack(nums, temp, res);</span><br><span class="line">        temp.remove(temp.size() - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// N皇后问题</span></span><br><span class="line"><span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; <span class="title function_">solveNQueens</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">    List&lt;List&lt;String&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="type">char</span>[][] board = <span class="keyword">new</span> <span class="title class_">char</span>[n][n];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">char</span>[] row : board) Arrays.fill(row, <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">    backtrack(res, board, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">backtrack</span><span class="params">(List&lt;List&lt;String&gt;&gt; res, <span class="type">char</span>[][] board, <span class="type">int</span> row)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (row == board.length) &#123;</span><br><span class="line">        res.add(construct(board));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">col</span> <span class="operator">=</span> <span class="number">0</span>; col &lt; board.length; col++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (isValid(board, row, col)) &#123;</span><br><span class="line">            board[row][col] = <span class="string">&#x27;Q&#x27;</span>;</span><br><span class="line">            backtrack(res, board, row + <span class="number">1</span>);</span><br><span class="line">            board[row][col] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(<span class="type">char</span>[][] board, <span class="type">int</span> row, <span class="type">int</span> col)</span> &#123;</span><br><span class="line">    <span class="comment">// 检查列</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; row; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (board[i][col] == <span class="string">&#x27;Q&#x27;</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 检查左上对角线</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> row-<span class="number">1</span>, j = col-<span class="number">1</span>; i &gt;=<span class="number">0</span> &amp;&amp; j &gt;=<span class="number">0</span>; i--, j--) &#123;</span><br><span class="line">        <span class="keyword">if</span> (board[i][j] == <span class="string">&#x27;Q&#x27;</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 检查右上对角线</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> row-<span class="number">1</span>, j = col+<span class="number">1</span>; i &gt;=<span class="number">0</span> &amp;&amp; j &lt; board.length; i--, j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (board[i][j] == <span class="string">&#x27;Q&#x27;</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> List&lt;String&gt; <span class="title function_">construct</span><span class="params">(<span class="type">char</span>[][] board)</span> &#123;</span><br><span class="line">    List&lt;String&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">char</span>[] row : board) &#123;</span><br><span class="line">        res.add(<span class="keyword">new</span> <span class="title class_">String</span>(row));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="二分查找-Binary-Search"><a href="#二分查找-Binary-Search" class="headerlink" title="二分查找(Binary Search)"></a>二分查找(Binary Search)</h2><p><strong>核心思想</strong>：每次将搜索范围减半，高效查找<br><strong>适用场景</strong>：有序数据查找，边界查找，旋转数组问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 标准二分查找</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">binarySearch</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>, right = nums.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> left + (right - left) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (nums[mid] == target) <span class="keyword">return</span> mid;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; target) left = mid + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> right = mid - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查找左边界</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">leftBound</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>, right = nums.length;</span><br><span class="line">    <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> left + (right - left) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (nums[mid] &gt;= target) right = mid;</span><br><span class="line">        <span class="keyword">else</span> left = mid + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> left &lt; nums.length &amp;&amp; nums[left] == target ? left : -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查找右边界</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">rightBound</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>, right = nums.length;</span><br><span class="line">    <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> left + (right - left) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (nums[mid] &lt;= target) left = mid + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> right = mid;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> left &gt; <span class="number">0</span> &amp;&amp; nums[left-<span class="number">1</span>] == target ? left-<span class="number">1</span> : -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 旋转数组查找</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">searchInRotatedArray</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>, right = nums.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> left + (right - left) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (nums[mid] == target) <span class="keyword">return</span> mid;</span><br><span class="line">        <span class="comment">// 左半部分有序</span></span><br><span class="line">        <span class="keyword">if</span> (nums[left] &lt;= nums[mid]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[left] &lt;= target &amp;&amp; target &lt; nums[mid]) right = mid - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="comment">// 右半部分有序</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] &lt; target &amp;&amp; target &lt;= nums[right]) left = mid + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> right = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="栈-Stack"><a href="#栈-Stack" class="headerlink" title="栈(Stack)"></a>栈(Stack)</h2><p><strong>核心思想</strong>：LIFO特性，用于处理对称、嵌套类问题<br><strong>适用场景</strong>：括号匹配、表达式求值、单调栈问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 括号匹配</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(String s)</span> &#123;</span><br><span class="line">    Stack&lt;Character&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">char</span> c : s.toCharArray()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">&#x27;(&#x27;</span>) stack.push(<span class="string">&#x27;)&#x27;</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">&#x27;[&#x27;</span>) stack.push(<span class="string">&#x27;]&#x27;</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">&#x27;&#123;&#x27;</span>) stack.push(<span class="string">&#x27;&#125;&#x27;</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (stack.isEmpty() || stack.pop() != c) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> stack.isEmpty();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 单调栈模板（下一个更大元素）</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] nextGreaterElement(<span class="type">int</span>[] nums) &#123;</span><br><span class="line">    <span class="type">int</span>[] res = <span class="keyword">new</span> <span class="title class_">int</span>[nums.length];</span><br><span class="line">    Stack&lt;Integer&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> nums.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">while</span> (!stack.isEmpty() &amp;&amp; stack.peek() &lt;= nums[i]) &#123;</span><br><span class="line">            stack.pop();</span><br><span class="line">        &#125;</span><br><span class="line">        res[i] = stack.isEmpty() ? -<span class="number">1</span> : stack.peek();</span><br><span class="line">        stack.push(nums[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算器（表达式求值）</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">calculate</span><span class="params">(String s)</span> &#123;</span><br><span class="line">    Stack&lt;Integer&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">    <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">0</span>, res = <span class="number">0</span>, sign = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">char</span> c : s.toCharArray()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (Character.isDigit(c)) &#123;</span><br><span class="line">            num = num * <span class="number">10</span> + (c - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">&#x27;+&#x27;</span>) &#123;</span><br><span class="line">            res += sign * num;</span><br><span class="line">            num = <span class="number">0</span>;</span><br><span class="line">            sign = <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">&#x27;-&#x27;</span>) &#123;</span><br><span class="line">            res += sign * num;</span><br><span class="line">            num = <span class="number">0</span>;</span><br><span class="line">            sign = -<span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">            stack.push(res);</span><br><span class="line">            stack.push(sign);</span><br><span class="line">            res = <span class="number">0</span>;</span><br><span class="line">            sign = <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">&#x27;)&#x27;</span>) &#123;</span><br><span class="line">            res += sign * num;</span><br><span class="line">            num = <span class="number">0</span>;</span><br><span class="line">            res *= stack.pop(); <span class="comment">// sign</span></span><br><span class="line">            res += stack.pop(); <span class="comment">// previous res</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (num != <span class="number">0</span>) res += sign * num;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="贪心算法-Greedy"><a href="#贪心算法-Greedy" class="headerlink" title="贪心算法(Greedy)"></a>贪心算法(Greedy)</h2><p><strong>核心思想</strong>：局部最优选择希望导致全局最优<br><strong>适用场景</strong>：区间调度、分配问题、跳跃游戏等</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 区间调度问题（最多不重叠区间）</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">intervalSchedule</span><span class="params">(<span class="type">int</span>[][] intervals)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (intervals.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 按结束时间排序</span></span><br><span class="line">    Arrays.sort(intervals, (a, b) -&gt; a[<span class="number">1</span>] - b[<span class="number">1</span>]);</span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">end</span> <span class="operator">=</span> intervals[<span class="number">0</span>][<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span>[] interval : intervals) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> interval[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">if</span> (start &gt;= end) &#123;</span><br><span class="line">            count++;</span><br><span class="line">            end = interval[<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 跳跃游戏</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">canJump</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">farthest</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &gt; farthest) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        farthest = Math.max(farthest, i + nums[i]);</span><br><span class="line">        <span class="keyword">if</span> (farthest &gt;= nums.length - <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 分发饼干</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findContentChildren</span><span class="params">(<span class="type">int</span>[] g, <span class="type">int</span>[] s)</span> &#123;</span><br><span class="line">    Arrays.sort(g);</span><br><span class="line">    Arrays.sort(s);</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; g.length &amp;&amp; j &lt; s.length) &#123;</span><br><span class="line">        <span class="keyword">if</span> (s[j] &gt;= g[i]) i++;</span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="动态规划-DP"><a href="#动态规划-DP" class="headerlink" title="动态规划(DP)"></a>动态规划(DP)</h2><p><strong>核心思想</strong>：将问题分解为子问题，存储中间结果避免重复计算<br><strong>适用场景</strong>：最优化问题，如最长子序列、背包问题、路径问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 斐波那契数列（记忆化递归）</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">fib</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] memo = <span class="keyword">new</span> <span class="title class_">int</span>[n + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">return</span> helper(n, memo);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="title function_">helper</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span>[] memo)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">1</span>) <span class="keyword">return</span> n;</span><br><span class="line">    <span class="keyword">if</span> (memo[n] != <span class="number">0</span>) <span class="keyword">return</span> memo[n];</span><br><span class="line">    memo[n] = helper(n - <span class="number">1</span>, memo) + helper(n - <span class="number">2</span>, memo);</span><br><span class="line">    <span class="keyword">return</span> memo[n];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 斐波那契数列（迭代）</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">fibIterative</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">1</span>) <span class="keyword">return</span> n;</span><br><span class="line">    <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">0</span>, b = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> a + b;</span><br><span class="line">        a = b;</span><br><span class="line">        b = c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最长递增子序列</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">lengthOfLIS</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[nums.length];</span><br><span class="line">    Arrays.fill(dp, <span class="number">1</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] &gt; nums[j]) &#123;</span><br><span class="line">                dp[i] = Math.max(dp[i], dp[j] + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        max = Math.max(max, dp[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 0-1背包问题</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">knapsack</span><span class="params">(<span class="type">int</span> W, <span class="type">int</span>[] wt, <span class="type">int</span>[] val)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> wt.length;</span><br><span class="line">    <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[n + <span class="number">1</span>][W + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">w</span> <span class="operator">=</span> <span class="number">1</span>; w &lt;= W; w++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (wt[i - <span class="number">1</span>] &lt;= w) &#123;</span><br><span class="line">                dp[i][w] = Math.max(val[i - <span class="number">1</span>] + dp[i - <span class="number">1</span>][w - wt[i - <span class="number">1</span>]], dp[i - <span class="number">1</span>][w]);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                dp[i][w] = dp[i - <span class="number">1</span>][w];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[n][W];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 编辑距离</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minDistance</span><span class="params">(String word1, String word2)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> word1.length(), n = word2.length();</span><br><span class="line">    <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[m + <span class="number">1</span>][n + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= m; i++) dp[i][<span class="number">0</span>] = i;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt;= n; j++) dp[<span class="number">0</span>][j] = j;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (word1.charAt(i - <span class="number">1</span>) == word2.charAt(j - <span class="number">1</span>)) &#123;</span><br><span class="line">                dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                dp[i][j] = <span class="number">1</span> + Math.min(dp[i - <span class="number">1</span>][j - <span class="number">1</span>], </span><br><span class="line">                    Math.min(dp[i][j - <span class="number">1</span>], dp[i - <span class="number">1</span>][j]));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[m][n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="多维动态规划-Multi-dimensional-DP"><a href="#多维动态规划-Multi-dimensional-DP" class="headerlink" title="多维动态规划(Multi-dimensional DP)"></a>多维动态规划(Multi-dimensional DP)</h2><p><strong>核心思想</strong>：扩展DP状态到多个维度<br><strong>适用场景</strong>：复杂约束条件的最优化问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 股票买卖问题（含冷冻期）</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxProfit</span><span class="params">(<span class="type">int</span>[] prices)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (prices == <span class="literal">null</span> || prices.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> prices.length;</span><br><span class="line">    <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[n][<span class="number">3</span>];</span><br><span class="line">    <span class="comment">// dp[i][0]: 持有股票</span></span><br><span class="line">    <span class="comment">// dp[i][1]: 不持有股票，处于冷冻期</span></span><br><span class="line">    <span class="comment">// dp[i][2]: 不持有股票，不处于冷冻期</span></span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">0</span>] = -prices[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">        dp[i][<span class="number">0</span>] = Math.max(dp[i - <span class="number">1</span>][<span class="number">0</span>], dp[i - <span class="number">1</span>][<span class="number">2</span>] - prices[i]);</span><br><span class="line">        dp[i][<span class="number">1</span>] = dp[i - <span class="number">1</span>][<span class="number">0</span>] + prices[i];</span><br><span class="line">        dp[i][<span class="number">2</span>] = Math.max(dp[i - <span class="number">1</span>][<span class="number">1</span>], dp[i - <span class="number">1</span>][<span class="number">2</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Math.max(dp[n - <span class="number">1</span>][<span class="number">1</span>], dp[n - <span class="number">1</span>][<span class="number">2</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正则表达式匹配</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isMatch</span><span class="params">(String s, String p)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> s.length(), n = p.length();</span><br><span class="line">    <span class="type">boolean</span>[][] dp = <span class="keyword">new</span> <span class="title class_">boolean</span>[m + <span class="number">1</span>][n + <span class="number">1</span>];</span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (p.charAt(j - <span class="number">1</span>) == <span class="string">&#x27;*&#x27;</span>) &#123;</span><br><span class="line">            dp[<span class="number">0</span>][j] = dp[<span class="number">0</span>][j - <span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s.charAt(i - <span class="number">1</span>) == p.charAt(j - <span class="number">1</span>) || p.charAt(j - <span class="number">1</span>) == <span class="string">&#x27;.&#x27;</span>) &#123;</span><br><span class="line">                dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (p.charAt(j - <span class="number">1</span>) == <span class="string">&#x27;*&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (s.charAt(i - <span class="number">1</span>) == p.charAt(j - <span class="number">2</span>) || p.charAt(j - <span class="number">2</span>) == <span class="string">&#x27;.&#x27;</span>) &#123;</span><br><span class="line">                    dp[i][j] = dp[i][j - <span class="number">2</span>] || dp[i - <span class="number">1</span>][j];</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    dp[i][j] = dp[i][j - <span class="number">2</span>];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[m][n];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最大正方形面积</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maximalSquare</span><span class="params">(<span class="type">char</span>[][] matrix)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (matrix == <span class="literal">null</span> || matrix.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> matrix.length, n = matrix[<span class="number">0</span>].length;</span><br><span class="line">    <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[m + <span class="number">1</span>][n + <span class="number">1</span>];</span><br><span class="line">    <span class="type">int</span> <span class="variable">maxLen</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (matrix[i - <span class="number">1</span>][j - <span class="number">1</span>] == <span class="string">&#x27;1&#x27;</span>) &#123;</span><br><span class="line">                dp[i][j] = Math.min(dp[i - <span class="number">1</span>][j - <span class="number">1</span>], Math.min(dp[i - <span class="number">1</span>][j], dp[i][j - <span class="number">1</span>])) + <span class="number">1</span>;</span><br><span class="line">                maxLen = Math.max(maxLen, dp[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxLen * maxLen;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="技巧-Tricks"><a href="#技巧-Tricks" class="headerlink" title="技巧(Tricks)"></a>技巧(Tricks)</h2><p><strong>核心思想</strong>：各种实用技巧和小算法<br><strong>适用场景</strong>：位操作、数学技巧、随机化等</p><pre><code class="java">// 位操作技巧public int hammingWeight(int n) &#123;    int count = 0;    while (n != 0) &#123;        n &amp;= (n - 1); // 清除最低位的1        count++;    &#125;    return count;&#125;// 洗牌算法（Fisher-Yates）public void shuffle(int[] nums) &#123;    Random rand = new Random();    for (int i = nums.length - 1; i &gt; 0; i--) &#123;        int j = rand.nextInt(i + 1);        swap(nums, i, j);    &#125;&#125;// 蓄水池抽样public int getRandom(ListNode head) &#123;    Random rand = new Random();    int res = 0, i = 1;    ListNode curr = head;    while (curr != null) &#123;        if (rand.nextInt(i) == 0) &#123;            res = curr.val;        &#125;        i++;        curr = curr.next;    &#125;    return res;&#125;// 摩尔投票法（多数元素）public int majorityElement(int[] nums) &#123;    int count = 0, candidate = 0;    for (int num : nums) &#123;        if (count == 0) candidate = num;        count += (num == candidate) ? 1 : -1;    &#125;    return candidate;&#125;// 快速幂public double myPow(double x, int n) &#123;    long N = n;    if (N &lt; 0) &#123;        x = 1 / x;        N = -N;    &#125;    double res = 1;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 结构速查 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构和算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java操作蓝图：常用数据结构与方法</title>
      <link href="/2025/04/01/java%E6%93%8D%E4%BD%9C%E8%93%9D%E5%9B%BE/"/>
      <url>/2025/04/01/java%E6%93%8D%E4%BD%9C%E8%93%9D%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<h1 id="Java操作蓝图：常用数据结构与方法"><a href="#Java操作蓝图：常用数据结构与方法" class="headerlink" title="Java操作蓝图：常用数据结构与方法"></a>Java操作蓝图：常用数据结构与方法</h1><blockquote><p>这是为了可以快速使用各种常用数据结构和方法的蓝图集合，通过给出一个空框架，提高效率。</p></blockquote><p>最近刷题陷入了迷茫，往往不知道该用什么数据结构，所以我决定写一个蓝图，方便以后使用。</p><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ol><li><a href="#%E6%95%B0%E7%BB%84array">数组(Array)</a></li><li><a href="#%E5%88%97%E8%A1%A8listarraylist">列表(List&#x2F;ArrayList)</a></li><li><a href="#%E9%93%BE%E8%A1%A8linkedlist">链表(LinkedList)</a></li><li><a href="#%E6%A0%88stack">栈(Stack)</a></li><li><a href="#%E9%98%9F%E5%88%97queue">队列(Queue)</a></li><li><a href="#%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97priorityqueue">优先队列(PriorityQueue)</a></li><li><a href="#%E9%9B%86%E5%90%88sethashset">集合(Set&#x2F;HashSet)</a></li><li><a href="#%E6%9C%89%E5%BA%8F%E9%9B%86%E5%90%88treeset">有序集合(TreeSet)</a></li><li><a href="#%E6%98%A0%E5%B0%84maphashmap">映射(Map&#x2F;HashMap)</a></li><li><a href="#%E6%9C%89%E5%BA%8F%E6%98%A0%E5%B0%84treemap">有序映射(TreeMap)</a></li><li><a href="#%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%93%8D%E4%BD%9Cstring">字符串操作(String)</a></li><li><a href="#%E5%B7%A5%E5%85%B7%E7%B1%BBcollectionsarrays">工具类(Collections&#x2F;Arrays)</a></li></ol><p>接下来我对以上12个常用数据结构的用途做下简单的描述<br>数组：</p><ul><li>用途：固定大小的连续内存空间，存储相同类型元素</li><li>解决问题：快速随机访问，内存紧凑<br>列表：</li><li>用途：动态数组，自动扩容</li><li>解决问题：需要动态调整大小的数组<br>链表：</li><li>用途：双向链表实现，高效插入删除</li><li>解决问题：频繁在列表中间进行插入&#x2F;删除操作<br>栈：</li><li>用途：后进先出(LIFO)结构</li><li>解决问题：需要后进先出逻辑的场景，如撤销操作、括号匹配<br>队列：</li><li>用途：先进先出(FIFO)结构</li><li>解决问题：任务调度、广度优先搜索等<br>优先队列：</li><li>用途：元素按照优先级排序的队列</li><li>解决问题：需要按照优先级处理元素的场景<br>集合：</li><li>用途：存储唯一元素的集合</li><li>解决问题：去重、查找<br>有序集合：</li><li>用途：元素按照自然顺序或自定义顺序排序的集合</li><li>解决问题：需要元素有序的场景<br>映射：</li><li>用途：键值对存储</li><li>解决问题：根据键快速查找值<br>有序映射：</li><li>用途：键值对按照键的自然顺序或自定义顺序排序</li><li>解决问题：需要键值对有序的场景<br>字符串操作：</li><li>用途：处理文本数据</li><li>解决问题：字符串拼接、查找、替换<br>工具类：</li><li>用途：提供各种常用操作的静态方法</li><li>解决问题：简化常见操作，如排序、查找、比较等</li></ul><hr><h2 id="数组-Array"><a href="#数组-Array" class="headerlink" title="数组(Array)"></a>数组(Array)</h2><p><strong>用途</strong>：固定大小的连续内存空间，存储相同类型元素<br><strong>解决问题</strong>：快速随机访问，内存紧凑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明与初始化</span></span><br><span class="line"><span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>];  <span class="comment">// 声明长度为10的整型数组</span></span><br><span class="line"><span class="type">int</span>[] arr2 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;   <span class="comment">// 声明并初始化</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 常用操作</span></span><br><span class="line">arr[<span class="number">0</span>] = <span class="number">5</span>;               <span class="comment">// 赋值</span></span><br><span class="line"><span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> arr.length;  <span class="comment">// 获取长度(不是方法，是属性)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历数组</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    System.out.println(arr[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 增强for循环</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> num : arr) &#123;</span><br><span class="line">    System.out.println(num);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 多维数组</span></span><br><span class="line"><span class="type">int</span>[][] matrix = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>][<span class="number">3</span>];</span><br><span class="line">matrix[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><hr><h2 id="列表-List-ArrayList"><a href="#列表-List-ArrayList" class="headerlink" title="列表(List&#x2F;ArrayList)"></a>列表(List&#x2F;ArrayList)</h2><p><strong>用途</strong>：动态数组，自动扩容<br><strong>解决问题</strong>：需要动态调整大小的数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建ArrayList</span></span><br><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();  <span class="comment">// 推荐使用接口类型声明</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加元素</span></span><br><span class="line">list.add(<span class="string">&quot;Apple&quot;</span>);</span><br><span class="line">list.add(<span class="number">0</span>, <span class="string">&quot;Banana&quot;</span>);  <span class="comment">// 在指定位置插入</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取元素</span></span><br><span class="line"><span class="type">String</span> <span class="variable">fruit</span> <span class="operator">=</span> list.get(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改元素</span></span><br><span class="line">list.set(<span class="number">0</span>, <span class="string">&quot;Orange&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除元素</span></span><br><span class="line">list.remove(<span class="number">0</span>);         <span class="comment">// 按索引删除</span></span><br><span class="line">list.remove(<span class="string">&quot;Orange&quot;</span>);  <span class="comment">// 按元素删除</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 大小检查</span></span><br><span class="line"><span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> list.size();</span><br><span class="line"><span class="type">boolean</span> <span class="variable">isEmpty</span> <span class="operator">=</span> list.isEmpty();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 包含检查</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">contains</span> <span class="operator">=</span> list.contains(<span class="string">&quot;Apple&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历</span></span><br><span class="line"><span class="keyword">for</span> (String item : list) &#123;</span><br><span class="line">    System.out.println(item);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用迭代器</span></span><br><span class="line">Iterator&lt;String&gt; it = list.iterator();</span><br><span class="line"><span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">    System.out.println(it.next());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 转换为数组</span></span><br><span class="line">String[] array = list.toArray(<span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">0</span>]);</span><br></pre></td></tr></table></figure><hr><h2 id="链表-LinkedList"><a href="#链表-LinkedList" class="headerlink" title="链表(LinkedList)"></a>链表(LinkedList)</h2><p><strong>用途</strong>：双向链表实现，高效插入删除<br><strong>解决问题</strong>：频繁在列表中间进行插入&#x2F;删除操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建LinkedList</span></span><br><span class="line">List&lt;String&gt; linkedList = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加元素 (与ArrayList类似)</span></span><br><span class="line">linkedList.add(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">linkedList.addFirst(<span class="string">&quot;B&quot;</span>);  <span class="comment">// 特有方法</span></span><br><span class="line">linkedList.addLast(<span class="string">&quot;C&quot;</span>);   <span class="comment">// 特有方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取元素</span></span><br><span class="line"><span class="type">String</span> <span class="variable">first</span> <span class="operator">=</span> linkedList.getFirst();</span><br><span class="line"><span class="type">String</span> <span class="variable">last</span> <span class="operator">=</span> linkedList.getLast();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除元素</span></span><br><span class="line">linkedList.removeFirst();</span><br><span class="line">linkedList.removeLast();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 作为队列使用</span></span><br><span class="line">Queue&lt;String&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">queue.offer(<span class="string">&quot;A&quot;</span>);  <span class="comment">// 入队</span></span><br><span class="line">queue.poll();      <span class="comment">// 出队</span></span><br></pre></td></tr></table></figure><hr><h2 id="栈-Stack"><a href="#栈-Stack" class="headerlink" title="栈(Stack)"></a>栈(Stack)</h2><p><strong>用途</strong>：后进先出(LIFO)结构<br><strong>解决问题</strong>：需要后进先出逻辑的场景，如撤销操作、括号匹配</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建栈 (推荐使用Deque实现)</span></span><br><span class="line">Deque&lt;Integer&gt; stack = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压栈</span></span><br><span class="line">stack.push(<span class="number">1</span>);</span><br><span class="line">stack.push(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 弹栈</span></span><br><span class="line"><span class="type">int</span> <span class="variable">top</span> <span class="operator">=</span> stack.pop();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查看栈顶元素</span></span><br><span class="line"><span class="type">int</span> <span class="variable">peek</span> <span class="operator">=</span> stack.peek();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查是否为空</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">empty</span> <span class="operator">=</span> stack.isEmpty();</span><br></pre></td></tr></table></figure><hr><h2 id="队列-Queue"><a href="#队列-Queue" class="headerlink" title="队列(Queue)"></a>队列(Queue)</h2><p><strong>用途</strong>：先进先出(FIFO)结构<br><strong>解决问题</strong>：任务调度、广度优先搜索等</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建队列 (LinkedList实现)</span></span><br><span class="line">Queue&lt;String&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 入队</span></span><br><span class="line">queue.offer(<span class="string">&quot;A&quot;</span>);  <span class="comment">// 推荐使用offer而不是add(不抛异常)</span></span><br><span class="line">queue.add(<span class="string">&quot;B&quot;</span>);    <span class="comment">// 可能抛出异常</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 出队</span></span><br><span class="line"><span class="type">String</span> <span class="variable">item</span> <span class="operator">=</span> queue.poll();  <span class="comment">// 返回并移除队首，队列为空返回null</span></span><br><span class="line"><span class="type">String</span> <span class="variable">item2</span> <span class="operator">=</span> queue.remove(); <span class="comment">// 队列为空抛出异常</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 查看队首</span></span><br><span class="line"><span class="type">String</span> <span class="variable">head</span> <span class="operator">=</span> queue.peek();  <span class="comment">// 队列为空返回null</span></span><br><span class="line"><span class="type">String</span> <span class="variable">head2</span> <span class="operator">=</span> queue.element(); <span class="comment">// 队列为空抛出异常</span></span><br></pre></td></tr></table></figure><hr><h2 id="优先队列-PriorityQueue"><a href="#优先队列-PriorityQueue" class="headerlink" title="优先队列(PriorityQueue)"></a>优先队列(PriorityQueue)</h2><p><strong>用途</strong>：按优先级出队的队列<br><strong>解决问题</strong>：需要按特定顺序处理元素的场景，如任务调度</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建优先队列 (默认最小堆)</span></span><br><span class="line">PriorityQueue&lt;Integer&gt; pq = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义比较器 (最大堆)</span></span><br><span class="line">PriorityQueue&lt;Integer&gt; maxHeap = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;((a, b) -&gt; b - a);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加元素</span></span><br><span class="line">pq.offer(<span class="number">5</span>);</span><br><span class="line">pq.add(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取并移除队首(最小元素)</span></span><br><span class="line"><span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> pq.poll();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查看队首</span></span><br><span class="line"><span class="type">int</span> <span class="variable">peek</span> <span class="operator">=</span> pq.peek();</span><br></pre></td></tr></table></figure><hr><h2 id="集合-Set-HashSet"><a href="#集合-Set-HashSet" class="headerlink" title="集合(Set&#x2F;HashSet)"></a>集合(Set&#x2F;HashSet)</h2><p><strong>用途</strong>：不包含重复元素的集合<br><strong>解决问题</strong>：去重、快速成员检查</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建HashSet</span></span><br><span class="line">Set&lt;String&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加元素</span></span><br><span class="line">set.add(<span class="string">&quot;Apple&quot;</span>);</span><br><span class="line">set.add(<span class="string">&quot;Banana&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查存在</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">hasApple</span> <span class="operator">=</span> set.contains(<span class="string">&quot;Apple&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除元素</span></span><br><span class="line">set.remove(<span class="string">&quot;Apple&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 大小</span></span><br><span class="line"><span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> set.size();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历</span></span><br><span class="line"><span class="keyword">for</span> (String item : set) &#123;</span><br><span class="line">    System.out.println(item);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 集合运算</span></span><br><span class="line">Set&lt;String&gt; otherSet = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;(Arrays.asList(<span class="string">&quot;Banana&quot;</span>, <span class="string">&quot;Orange&quot;</span>));</span><br><span class="line"></span><br><span class="line">set.retainAll(otherSet);  <span class="comment">// 交集</span></span><br><span class="line">set.addAll(otherSet);      <span class="comment">// 并集</span></span><br><span class="line">set.removeAll(otherSet);   <span class="comment">// 差集</span></span><br></pre></td></tr></table></figure><hr><h2 id="有序集合-TreeSet"><a href="#有序集合-TreeSet" class="headerlink" title="有序集合(TreeSet)"></a>有序集合(TreeSet)</h2><p><strong>用途</strong>：保持元素有序的集合<br><strong>解决问题</strong>：需要有序遍历或范围查询的场景</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建TreeSet</span></span><br><span class="line">Set&lt;Integer&gt; treeSet = <span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义排序</span></span><br><span class="line">Set&lt;Integer&gt; descSet = <span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;&gt;((a, b) -&gt; b - a);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加元素 (自动排序)</span></span><br><span class="line">treeSet.add(<span class="number">3</span>);</span><br><span class="line">treeSet.add(<span class="number">1</span>);</span><br><span class="line">treeSet.add(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取第一个和最后一个</span></span><br><span class="line"><span class="type">int</span> <span class="variable">first</span> <span class="operator">=</span> ((TreeSet&lt;Integer&gt;) treeSet).first();</span><br><span class="line"><span class="type">int</span> <span class="variable">last</span> <span class="operator">=</span> ((TreeSet&lt;Integer&gt;) treeSet).last();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 范围查询</span></span><br><span class="line">Set&lt;Integer&gt; subset = ((TreeSet&lt;Integer&gt;) treeSet).subSet(<span class="number">1</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure><hr><h2 id="映射-Map-HashMap"><a href="#映射-Map-HashMap" class="headerlink" title="映射(Map&#x2F;HashMap)"></a>映射(Map&#x2F;HashMap)</h2><p><strong>用途</strong>：键值对存储结构<br><strong>解决问题</strong>：快速键值查找、关联数据存储</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建HashMap</span></span><br><span class="line">Map&lt;String, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加键值对</span></span><br><span class="line">map.put(<span class="string">&quot;Apple&quot;</span>, <span class="number">10</span>);</span><br><span class="line">map.put(<span class="string">&quot;Banana&quot;</span>, <span class="number">20</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取值</span></span><br><span class="line"><span class="type">int</span> <span class="variable">appleCount</span> <span class="operator">=</span> map.get(<span class="string">&quot;Apple&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查键存在</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">hasApple</span> <span class="operator">=</span> map.containsKey(<span class="string">&quot;Apple&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查值存在</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">has10</span> <span class="operator">=</span> map.containsValue(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除键值对</span></span><br><span class="line">map.remove(<span class="string">&quot;Apple&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历键</span></span><br><span class="line"><span class="keyword">for</span> (String key : map.keySet()) &#123;</span><br><span class="line">    System.out.println(key);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历值</span></span><br><span class="line"><span class="keyword">for</span> (Integer value : map.values()) &#123;</span><br><span class="line">    System.out.println(value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历键值对</span></span><br><span class="line"><span class="keyword">for</span> (Map.Entry&lt;String, Integer&gt; entry : map.entrySet()) &#123;</span><br><span class="line">    System.out.println(entry.getKey() + <span class="string">&quot;: &quot;</span> + entry.getValue());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取或默认值</span></span><br><span class="line"><span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> map.getOrDefault(<span class="string">&quot;Orange&quot;</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 合并操作</span></span><br><span class="line">map.merge(<span class="string">&quot;Apple&quot;</span>, <span class="number">1</span>, Integer::sum);  <span class="comment">// 如果存在则相加，否则put 1</span></span><br></pre></td></tr></table></figure><hr><h2 id="有序映射-TreeMap"><a href="#有序映射-TreeMap" class="headerlink" title="有序映射(TreeMap)"></a>有序映射(TreeMap)</h2><p><strong>用途</strong>：保持键有序的映射<br><strong>解决问题</strong>：需要按键顺序遍历或范围查询的场景</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建TreeMap</span></span><br><span class="line">Map&lt;String, Integer&gt; treeMap = <span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义排序</span></span><br><span class="line">Map&lt;String, Integer&gt; descMap = <span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;&gt;(Comparator.reverseOrder());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加元素 (按键排序)</span></span><br><span class="line">treeMap.put(<span class="string">&quot;Banana&quot;</span>, <span class="number">20</span>);</span><br><span class="line">treeMap.put(<span class="string">&quot;Apple&quot;</span>, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取第一个和最后一个键</span></span><br><span class="line"><span class="type">String</span> <span class="variable">firstKey</span> <span class="operator">=</span> ((TreeMap&lt;String, Integer&gt;) treeMap).firstKey();</span><br><span class="line"><span class="type">String</span> <span class="variable">lastKey</span> <span class="operator">=</span> ((TreeMap&lt;String, Integer&gt;) treeMap).lastKey();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 范围视图</span></span><br><span class="line">Map&lt;String, Integer&gt; subMap = ((TreeMap&lt;String, Integer&gt;) treeMap).subMap(<span class="string">&quot;A&quot;</span>, <span class="string">&quot;C&quot;</span>);</span><br></pre></td></tr></table></figure><hr><h2 id="字符串操作-String"><a href="#字符串操作-String" class="headerlink" title="字符串操作(String)"></a>字符串操作(String)</h2><p><strong>用途</strong>：文本处理和操作<br><strong>解决问题</strong>：各种字符串处理需求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建字符串</span></span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;Hello, World!&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 基本操作</span></span><br><span class="line"><span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> str.length();</span><br><span class="line"><span class="type">char</span> <span class="variable">ch</span> <span class="operator">=</span> str.charAt(<span class="number">0</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">sub</span> <span class="operator">=</span> str.substring(<span class="number">0</span>, <span class="number">5</span>);  <span class="comment">// &quot;Hello&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 查找</span></span><br><span class="line"><span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> str.indexOf(<span class="string">&quot;World&quot;</span>);  <span class="comment">// 7</span></span><br><span class="line"><span class="type">int</span> <span class="variable">lastIndex</span> <span class="operator">=</span> str.lastIndexOf(<span class="string">&quot;o&quot;</span>); <span class="comment">// 8</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 替换</span></span><br><span class="line"><span class="type">String</span> <span class="variable">newStr</span> <span class="operator">=</span> str.replace(<span class="string">&quot;World&quot;</span>, <span class="string">&quot;Java&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 分割</span></span><br><span class="line">String[] parts = str.split(<span class="string">&quot;,&quot;</span>);  <span class="comment">// [&quot;Hello&quot;, &quot; World!&quot;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 连接</span></span><br><span class="line"><span class="type">String</span> <span class="variable">joined</span> <span class="operator">=</span> String.join(<span class="string">&quot;-&quot;</span>, <span class="string">&quot;A&quot;</span>, <span class="string">&quot;B&quot;</span>, <span class="string">&quot;C&quot;</span>);  <span class="comment">// &quot;A-B-C&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 格式化</span></span><br><span class="line"><span class="type">String</span> <span class="variable">formatted</span> <span class="operator">=</span> String.format(<span class="string">&quot;Name: %s, Age: %d&quot;</span>, <span class="string">&quot;Alice&quot;</span>, <span class="number">25</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 大小写转换</span></span><br><span class="line"><span class="type">String</span> <span class="variable">upper</span> <span class="operator">=</span> str.toUpperCase();</span><br><span class="line"><span class="type">String</span> <span class="variable">lower</span> <span class="operator">=</span> str.toLowerCase();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 去除空格</span></span><br><span class="line"><span class="type">String</span> <span class="variable">trimmed</span> <span class="operator">=</span> <span class="string">&quot;  hello  &quot;</span>.trim();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构建字符串 (高效)</span></span><br><span class="line"><span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">sb.append(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">sb.append(<span class="string">&quot;, &quot;</span>);</span><br><span class="line">sb.append(<span class="string">&quot;World!&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> sb.toString();</span><br></pre></td></tr></table></figure><hr><h2 id="工具类-Collections-Arrays"><a href="#工具类-Collections-Arrays" class="headerlink" title="工具类(Collections&#x2F;Arrays)"></a>工具类(Collections&#x2F;Arrays)</h2><p><strong>用途</strong>：提供集合和数组的常用工具方法<br><strong>解决问题</strong>：简化集合和数组操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Arrays工具类</span></span><br><span class="line"><span class="type">int</span>[] nums = &#123;<span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>&#125;;</span><br><span class="line"></span><br><span class="line">Arrays.sort(nums);  <span class="comment">// 排序</span></span><br><span class="line"><span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> Arrays.binarySearch(nums, <span class="number">2</span>);  <span class="comment">// 二分查找</span></span><br><span class="line"><span class="type">int</span>[] copy = Arrays.copyOf(nums, nums.length);</span><br><span class="line"><span class="type">boolean</span> <span class="variable">equal</span> <span class="operator">=</span> Arrays.equals(nums, <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;);</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> Arrays.toString(nums);  <span class="comment">// &quot;[1, 2, 3]&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Collections工具类</span></span><br><span class="line">List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(Arrays.asList(<span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">Collections.sort(list);  <span class="comment">// 排序</span></span><br><span class="line">Collections.reverse(list);  <span class="comment">// 反转</span></span><br><span class="line">Collections.shuffle(list);  <span class="comment">// 随机打乱</span></span><br><span class="line"><span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> Collections.max(list);</span><br><span class="line"><span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> Collections.min(list);</span><br><span class="line">Collections.fill(list, <span class="number">0</span>);  <span class="comment">// 填充</span></span><br><span class="line">Collections.swap(list, <span class="number">0</span>, <span class="number">1</span>);  <span class="comment">// 交换</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 不可变集合</span></span><br><span class="line">List&lt;Integer&gt; unmodifiable = Collections.unmodifiableList(list);</span><br><span class="line">Set&lt;Integer&gt; singleton = Collections.singleton(<span class="number">1</span>);  <span class="comment">// 单元素集合</span></span><br></pre></td></tr></table></figure><p>这个蓝图集合涵盖了Java中最常用的数据结构和工具方法，可以作为快速参考指南。每个部分都包含了基本操作和典型用法，帮助你快速实现各种数据操作需求。</p>]]></content>
      
      
      <categories>
          
          <category> 蓝图模板 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java快速学习速查（5）</title>
      <link href="/2025/04/01/java%E5%BF%AB%E9%80%9F%E5%AD%A6%E4%B9%A0%E9%80%9F%E6%9F%A5%EF%BC%885%EF%BC%89/"/>
      <url>/2025/04/01/java%E5%BF%AB%E9%80%9F%E5%AD%A6%E4%B9%A0%E9%80%9F%E6%9F%A5%EF%BC%885%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="java快速学习速查（5）"><a href="#java快速学习速查（5）" class="headerlink" title="java快速学习速查（5）"></a>java快速学习速查（5）</h1><blockquote><p>这个部分包含了Java面向对象部分的全部数据类型，继承，重载，多态，抽象类，封装，接口，枚举，包，反射</p></blockquote><p>接下来是详解部分：</p><h1 id="Java-继承全面解析"><a href="#Java-继承全面解析" class="headerlink" title="Java 继承全面解析"></a>Java 继承全面解析</h1><p>继承是面向对象编程的三大特性之一（封装、继承、多态），下面我将系统地讲解 Java 继承的各种功能和使用场景。</p><h2 id="一、继承基础"><a href="#一、继承基础" class="headerlink" title="一、继承基础"></a>一、继承基础</h2><h3 id="1-基本语法"><a href="#1-基本语法" class="headerlink" title="1. 基本语法"></a>1. 基本语法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Animal</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;正在吃东西&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String breed;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Dog</span><span class="params">(String name, String breed)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name);  <span class="comment">// 调用父类构造方法</span></span><br><span class="line">        <span class="built_in">this</span>.breed = breed;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">bark</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;汪汪叫&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 方法重写</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(getName() + <span class="string">&quot;(&quot;</span> + breed + <span class="string">&quot;)正在啃骨头&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getBreed</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> breed;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-继承的特点"><a href="#2-继承的特点" class="headerlink" title="2. 继承的特点"></a>2. 继承的特点</h3><ol><li>子类拥有父类非 private 的属性和方法</li><li>子类可以添加自己的属性和方法</li><li>子类可以重写父类的方法</li><li>Java 是单继承，一个类只能直接继承一个父类</li><li>构造方法不能被继承，但可以通过 super 调用</li></ol><h2 id="二、方法重写-Override"><a href="#二、方法重写-Override" class="headerlink" title="二、方法重写(Override)"></a>二、方法重写(Override)</h2><h3 id="1-重写规则"><a href="#1-重写规则" class="headerlink" title="1. 重写规则"></a>1. 重写规则</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;绘制形状&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getArea</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0.0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span> <span class="keyword">extends</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> radius;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Circle</span><span class="params">(<span class="type">double</span> radius)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.radius = radius;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;绘制圆形，半径: &quot;</span> + radius);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getArea</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Math.PI * radius * radius;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>重写规则</strong>：</p><ol><li>方法名和参数列表必须相同</li><li>返回类型可以相同或是父类返回类型的子类</li><li>访问修饰符不能比父类更严格</li><li>不能抛出比父类更宽泛的异常</li></ol><h3 id="2-Override-注解"><a href="#2-Override-注解" class="headerlink" title="2. @Override 注解"></a>2. @Override 注解</h3><ul><li>不是必须的，但建议使用</li><li>帮助编译器检查是否满足重写条件</li><li>提高代码可读性</li></ul><h2 id="三、super-关键字"><a href="#三、super-关键字" class="headerlink" title="三、super 关键字"></a>三、super 关键字</h2><h3 id="1-使用场景"><a href="#1-使用场景" class="headerlink" title="1. 使用场景"></a>1. 使用场景</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Vehicle</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> String brand;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Vehicle</span><span class="params">(String brand)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.brand = brand;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;车辆启动&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span> <span class="keyword">extends</span> <span class="title class_">Vehicle</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> year;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Car</span><span class="params">(String brand, <span class="type">int</span> year)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(brand);  <span class="comment">// 调用父类构造方法</span></span><br><span class="line">        <span class="built_in">this</span>.year = year;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.start();  <span class="comment">// 调用父类方法</span></span><br><span class="line">        System.out.println(year + <span class="string">&quot;年款&quot;</span> + brand + <span class="string">&quot;汽车启动&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;品牌: &quot;</span> + <span class="built_in">super</span>.brand + <span class="string">&quot;, 年份: &quot;</span> + year);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四、继承中的构造方法"><a href="#四、继承中的构造方法" class="headerlink" title="四、继承中的构造方法"></a>四、继承中的构造方法</h2><h3 id="1-构造方法调用顺序"><a href="#1-构造方法调用顺序" class="headerlink" title="1. 构造方法调用顺序"></a>1. 构造方法调用顺序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">GrandParent</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">GrandParent</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;GrandParent构造方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Parent</span> <span class="keyword">extends</span> <span class="title class_">GrandParent</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Parent</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Parent构造方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Child</span> <span class="keyword">extends</span> <span class="title class_">Parent</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Child</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Child构造方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConstructorTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Child</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">输出:</span></span><br><span class="line"><span class="comment">GrandParent构造方法</span></span><br><span class="line"><span class="comment">Parent构造方法</span></span><br><span class="line"><span class="comment">Child构造方法</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="2-super-使用规则"><a href="#2-super-使用规则" class="headerlink" title="2. super() 使用规则"></a>2. super() 使用规则</h3><ol><li>必须出现在子类构造方法的第一行</li><li>如果没有显式调用 super()，编译器会自动添加无参 super()</li><li>如果父类没有无参构造方法，子类必须显式调用 super(参数)</li></ol><h2 id="五、final-关键字"><a href="#五、final-关键字" class="headerlink" title="五、final 关键字"></a>五、final 关键字</h2><h3 id="1-final-用法"><a href="#1-final-用法" class="headerlink" title="1. final 用法"></a>1. final 用法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">CannotInherit</span> &#123;  <span class="comment">// 不能被继承</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MAX_VALUE</span> <span class="operator">=</span> <span class="number">100</span>;  <span class="comment">// 常量</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">cannotOverride</span><span class="params">()</span> &#123;  <span class="comment">// 不能被子类重写</span></span><br><span class="line">        System.out.println(<span class="string">&quot;这是最终方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// class TryExtend extends CannotInherit &#123;&#125;  // 编译错误</span></span><br></pre></td></tr></table></figure><h2 id="六、Object-类"><a href="#六、Object-类" class="headerlink" title="六、Object 类"></a>六、Object 类</h2><h3 id="1-常用方法"><a href="#1-常用方法" class="headerlink" title="1. 常用方法"></a>1. 常用方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span> == obj) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (obj == <span class="literal">null</span> || getClass() != obj.getClass()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> (Person) obj;</span><br><span class="line">        <span class="keyword">return</span> age == person.age &amp;&amp; name.equals(person.name);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.hash(name, age);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;name=&#x27;&quot;</span> + name + <span class="string">&quot;&#x27;, age=&quot;</span> + age + <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="七、抽象类与继承"><a href="#七、抽象类与继承" class="headerlink" title="七、抽象类与继承"></a>七、抽象类与继承</h2><h3 id="1-抽象类示例"><a href="#1-抽象类示例" class="headerlink" title="1. 抽象类示例"></a>1. 抽象类示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> String name;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Animal</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">makeSound</span><span class="params">()</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;正在睡觉&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Cat</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">makeSound</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;说: 喵喵~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="八、继承与多态"><a href="#八、继承与多态" class="headerlink" title="八、继承与多态"></a>八、继承与多态</h2><h3 id="1-多态示例"><a href="#1-多态示例" class="headerlink" title="1. 多态示例"></a>1. 多态示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Employee</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> String name;</span><br><span class="line">    <span class="keyword">protected</span> <span class="type">double</span> salary;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Employee</span><span class="params">(String name, <span class="type">double</span> salary)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.salary = salary;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">calculateBonus</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> salary * <span class="number">0.1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Manager</span> <span class="keyword">extends</span> <span class="title class_">Employee</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> bonus;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Manager</span><span class="params">(String name, <span class="type">double</span> salary, <span class="type">double</span> bonus)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name, salary);</span><br><span class="line">        <span class="built_in">this</span>.bonus = bonus;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">calculateBonus</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> salary * <span class="number">0.15</span> + bonus;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">manageTeam</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;正在管理团队&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PolymorphismDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Employee</span> <span class="variable">emp1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&quot;张三&quot;</span>, <span class="number">5000</span>);</span><br><span class="line">        <span class="type">Employee</span> <span class="variable">emp2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Manager</span>(<span class="string">&quot;李四&quot;</span>, <span class="number">8000</span>, <span class="number">2000</span>);</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;张三的奖金: &quot;</span> + emp1.calculateBonus());</span><br><span class="line">        System.out.println(<span class="string">&quot;李四的奖金: &quot;</span> + emp2.calculateBonus());</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// emp2.manageTeam();  // 编译错误，Employee类型没有manageTeam方法</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (emp2 <span class="keyword">instanceof</span> Manager) &#123;</span><br><span class="line">            <span class="type">Manager</span> <span class="variable">manager</span> <span class="operator">=</span> (Manager) emp2;</span><br><span class="line">            manager.manageTeam();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="九、继承最佳实践"><a href="#九、继承最佳实践" class="headerlink" title="九、继承最佳实践"></a>九、继承最佳实践</h2><h3 id="1-设计原则"><a href="#1-设计原则" class="headerlink" title="1. 设计原则"></a>1. 设计原则</h3><ol><li><strong>里氏替换原则</strong>：子类应该能够替换父类而不影响程序正确性</li><li><strong>优先使用组合而非继承</strong>：除非确实是”is-a”关系，否则考虑使用组合</li><li><strong>避免过深的继承层次</strong>：通常不超过3层</li><li><strong>将通用方法放在高层类</strong>：提高代码复用性</li><li><strong>使用抽象类定义接口</strong>：为子类提供通用实现</li></ol><h3 id="2-示例：图形类继承体系"><a href="#2-示例：图形类继承体系" class="headerlink" title="2. 示例：图形类继承体系"></a>2. 示例：图形类继承体系</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> String color;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Shape</span><span class="params">(String color)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="type">double</span> <span class="title function_">getArea</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="type">double</span> <span class="title function_">getPerimeter</span><span class="params">()</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Shape[color=&quot;</span> + color + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span> <span class="keyword">extends</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> radius;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Circle</span><span class="params">(String color, <span class="type">double</span> radius)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(color);</span><br><span class="line">        <span class="built_in">this</span>.radius = radius;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getArea</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Math.PI * radius * radius;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getPerimeter</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span> * Math.PI * radius;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Circle[&quot;</span> + <span class="built_in">super</span>.toString() + <span class="string">&quot;,radius=&quot;</span> + radius + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Rectangle</span> <span class="keyword">extends</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> length;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> width;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Rectangle</span><span class="params">(String color, <span class="type">double</span> length, <span class="type">double</span> width)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(color);</span><br><span class="line">        <span class="built_in">this</span>.length = length;</span><br><span class="line">        <span class="built_in">this</span>.width = width;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getArea</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> length * width;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getPerimeter</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span> * (length + width);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Rectangle[&quot;</span> + <span class="built_in">super</span>.toString() + </span><br><span class="line">               <span class="string">&quot;,length=&quot;</span> + length + <span class="string">&quot;,width=&quot;</span> + width + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShapeDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Shape[] shapes = &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Circle</span>(<span class="string">&quot;Red&quot;</span>, <span class="number">5.0</span>),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Rectangle</span>(<span class="string">&quot;Blue&quot;</span>, <span class="number">4.0</span>, <span class="number">6.0</span>)</span><br><span class="line">        &#125;;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (Shape shape : shapes) &#123;</span><br><span class="line">            System.out.println(shape);</span><br><span class="line">            System.out.println(<span class="string">&quot;Area: &quot;</span> + shape.getArea());</span><br><span class="line">            System.out.println(<span class="string">&quot;Perimeter: &quot;</span> + shape.getPerimeter());</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="十、常见面试问题"><a href="#十、常见面试问题" class="headerlink" title="十、常见面试问题"></a>十、常见面试问题</h2><ol><li><p><strong>继承和接口的区别</strong>？</p><ul><li>继承：is-a关系，单继承，可以包含实现</li><li>接口：can-do关系，多实现，只有抽象方法(Java 8前)</li></ul></li><li><p><strong>什么时候用继承</strong>？</p><ul><li>当两个类之间有明显的is-a关系时</li><li>需要复用父类代码时</li><li>需要实现多态时</li></ul></li><li><p><strong>为什么Java不支持多继承</strong>？</p><ul><li>避免”钻石问题”（菱形继承问题）</li><li>简化语言设计，减少复杂性</li></ul></li><li><p><strong>构造方法能否被重写</strong>？</p><ul><li>不能，构造方法不是成员方法</li><li>子类构造方法必须调用父类构造方法</li></ul></li><li><p><strong>如何防止类被继承</strong>？</p><ul><li>使用final修饰类</li><li>将构造方法设为private，并提供静态工厂方法</li></ul></li></ol><h1 id="Java-重写-Override-与重载-Overload-全面解析"><a href="#Java-重写-Override-与重载-Overload-全面解析" class="headerlink" title="Java 重写(Override)与重载(Overload)全面解析"></a>Java 重写(Override)与重载(Overload)全面解析</h1><p>下面我将系统地讲解 Java 中方法重写和方法重载的核心概念、使用场景和实际应用。</p><h2 id="一、方法重写-Override-深度解析"><a href="#一、方法重写-Override-深度解析" class="headerlink" title="一、方法重写(Override)深度解析"></a>一、方法重写(Override)深度解析</h2><h3 id="1-重写基础示例"><a href="#1-重写基础示例" class="headerlink" title="1. 重写基础示例"></a>1. 重写基础示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">makeSound</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;动物发出声音&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">protected</span> String <span class="title function_">getInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;动物基本信息&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="comment">// 正确重写 - 相同方法签名</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">makeSound</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;喵喵叫&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 正确重写 - 返回类型是父类返回类型的子类</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;猫的信息: &quot;</span> + <span class="built_in">super</span>.getInfo();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 编译错误 - 不能缩小访问权限</span></span><br><span class="line">    <span class="comment">// @Override</span></span><br><span class="line">    <span class="comment">// void makeSound() &#123; ... &#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OverrideDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Animal</span> <span class="variable">myCat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line">        myCat.makeSound();  <span class="comment">// 输出&quot;喵喵叫&quot;</span></span><br><span class="line">        System.out.println(myCat.getInfo());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-重写规则详解"><a href="#2-重写规则详解" class="headerlink" title="2. 重写规则详解"></a>2. 重写规则详解</h3><ol><li><strong>方法签名必须相同</strong>：方法名、参数列表完全一致</li><li><strong>返回类型协变</strong>：Java 5+ 允许子类方法返回父类方法返回类型的子类</li><li><strong>访问修饰符不能更严格</strong>：可以更宽松但不能更严格</li><li><strong>异常限制</strong>：<ul><li>不能抛出新的检查异常</li><li>不能抛出比父类更宽泛的检查异常</li><li>可以抛出更具体的检查异常或不抛出异常</li><li>可以抛出任何非检查异常</li></ul></li><li><strong>不能重写 final&#x2F;static&#x2F;private 方法</strong></li></ol><h3 id="3-Override-注解的重要性"><a href="#3-Override-注解的重要性" class="headerlink" title="3. @Override 注解的重要性"></a>3. @Override 注解的重要性</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Parent</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Parent: &quot;</span> + msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Child</span> <span class="keyword">extends</span> <span class="title class_">Parent</span> &#123;</span><br><span class="line">    <span class="comment">// 本意是重写，但拼写错误导致成为新方法</span></span><br><span class="line">    <span class="meta">@Override</span>  <span class="comment">// 加上这个注解会立即发现错误</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sho</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Child: &quot;</span> + msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二、方法重载-Overload-深度解析"><a href="#二、方法重载-Overload-深度解析" class="headerlink" title="二、方法重载(Overload)深度解析"></a>二、方法重载(Overload)深度解析</h2><h3 id="1-重载基础示例"><a href="#1-重载基础示例" class="headerlink" title="1. 重载基础示例"></a>1. 重载基础示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Calculator</span> &#123;</span><br><span class="line">    <span class="comment">// 方法1</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 重载方法2 - 参数个数不同</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a + b + c;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 重载方法3 - 参数类型不同</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">add</span><span class="params">(<span class="type">double</span> a, <span class="type">double</span> b)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 重载方法4 - 参数顺序不同</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">add</span><span class="params">(String s, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> s + n;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">add</span><span class="params">(<span class="type">int</span> n, String s)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> n + s;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 不是重载 - 仅返回类型不同会导致编译错误</span></span><br><span class="line">    <span class="comment">// public double add(int a, int b) &#123; return a + b; &#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OverloadDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Calculator</span> <span class="variable">calc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Calculator</span>();</span><br><span class="line">        System.out.println(calc.add(<span class="number">5</span>, <span class="number">3</span>));        <span class="comment">// 调用方法1</span></span><br><span class="line">        System.out.println(calc.add(<span class="number">5</span>, <span class="number">3</span>, <span class="number">2</span>));     <span class="comment">// 调用方法2</span></span><br><span class="line">        System.out.println(calc.add(<span class="number">2.5</span>, <span class="number">3.7</span>));    <span class="comment">// 调用方法3</span></span><br><span class="line">        System.out.println(calc.add(<span class="string">&quot;ID&quot;</span>, <span class="number">100</span>));   <span class="comment">// 调用方法4</span></span><br><span class="line">        System.out.println(calc.add(<span class="number">100</span>, <span class="string">&quot;ID&quot;</span>));   <span class="comment">// 调用方法5</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-重载规则详解"><a href="#2-重载规则详解" class="headerlink" title="2. 重载规则详解"></a>2. 重载规则详解</h3><ol><li><strong>必须改变参数列表</strong>：<ul><li>参数数量不同</li><li>参数类型不同</li><li>参数顺序不同</li></ul></li><li><strong>可以改变的内容</strong>：<ul><li>返回类型</li><li>访问修饰符</li><li>抛出异常</li></ul></li><li><strong>不能仅靠返回类型区分重载</strong></li><li><strong>自动类型转换影响重载解析</strong></li></ol><h3 id="3-重载解析过程"><a href="#3-重载解析过程" class="headerlink" title="3. 重载解析过程"></a>3. 重载解析过程</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">OverloadResolution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">process</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;处理整数: &quot;</span> + i);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">process</span><span class="params">(<span class="type">double</span> d)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;处理浮点数: &quot;</span> + d);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">process</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;处理字符串: &quot;</span> + s);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">OverloadResolution</span> <span class="variable">resolver</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OverloadResolution</span>();</span><br><span class="line">        resolver.process(<span class="number">10</span>);     <span class="comment">// 调用process(int)</span></span><br><span class="line">        resolver.process(<span class="number">10.0</span>);   <span class="comment">// 调用process(double)</span></span><br><span class="line">        resolver.process(<span class="string">&quot;10&quot;</span>);   <span class="comment">// 调用process(String)</span></span><br><span class="line">        resolver.process(<span class="string">&#x27;A&#x27;</span>);    <span class="comment">// 调用process(int) - char自动转为int</span></span><br><span class="line">        resolver.process(<span class="number">10L</span>);    <span class="comment">// 调用process(double) - long转为double</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、重写与重载对比"><a href="#三、重写与重载对比" class="headerlink" title="三、重写与重载对比"></a>三、重写与重载对比</h2><h3 id="1-核心区别对照表"><a href="#1-核心区别对照表" class="headerlink" title="1. 核心区别对照表"></a>1. 核心区别对照表</h3><table><thead><tr><th>特性</th><th>方法重写(Override)</th><th>方法重载(Overload)</th></tr></thead><tbody><tr><td>发生位置</td><td>子类与父类之间</td><td>同一个类或父子类之间</td></tr><tr><td>方法签名</td><td>必须相同</td><td>必须不同</td></tr><tr><td>返回类型</td><td>相同或子类(协变返回)</td><td>可以不同</td></tr><tr><td>访问修饰符</td><td>不能比父类更严格</td><td>可以不同</td></tr><tr><td>异常抛出</td><td>不能更宽泛</td><td>可以不同</td></tr><tr><td>调用机制</td><td>运行时根据对象类型决定</td><td>编译时根据参数类型决定</td></tr><tr><td>多态性体现</td><td>子类替换父类行为</td><td>同一方法名处理不同类型参数</td></tr></tbody></table><h3 id="2-典型场景示例"><a href="#2-典型场景示例" class="headerlink" title="2. 典型场景示例"></a>2. 典型场景示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">OverrideVsOverload</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Base</span> &#123;</span><br><span class="line">        <span class="comment">// 可重载方法</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">(<span class="type">int</span> num)</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Base execute with int: &quot;</span> + num);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 可重写方法</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Base show&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Derived</span> <span class="keyword">extends</span> <span class="title class_">Base</span> &#123;</span><br><span class="line">        <span class="comment">// 重载父类方法</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">(String str)</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Derived execute with String: &quot;</span> + str);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 重写父类方法</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Derived show&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Base</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Derived</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 重载方法调用 - 编译时决定</span></span><br><span class="line">        <span class="comment">// obj.execute(&quot;test&quot;); // 编译错误，Base没有execute(String)</span></span><br><span class="line">        ((Derived)obj).execute(<span class="string">&quot;test&quot;</span>); <span class="comment">// 需要向下转型</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 重写方法调用 - 运行时决定</span></span><br><span class="line">        obj.show(); <span class="comment">// 输出&quot;Derived show&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四、高级话题与应用场景"><a href="#四、高级话题与应用场景" class="headerlink" title="四、高级话题与应用场景"></a>四、高级话题与应用场景</h2><h3 id="1-构造方法的重载"><a href="#1-构造方法的重载" class="headerlink" title="1. 构造方法的重载"></a>1. 构造方法的重载</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 构造方法重载</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(<span class="string">&quot;无名氏&quot;</span>, <span class="number">18</span>); <span class="comment">// 调用另一个构造方法</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(name, <span class="number">18</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 方法重载</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">introduce</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是&quot;</span> + name + <span class="string">&quot;，今年&quot;</span> + age + <span class="string">&quot;岁&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">introduce</span><span class="params">(String greeting)</span> &#123;</span><br><span class="line">        System.out.println(greeting + <span class="string">&quot;，我是&quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConstructorOverload</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;李四&quot;</span>, <span class="number">25</span>);</span><br><span class="line">        </span><br><span class="line">        p1.introduce();</span><br><span class="line">        p2.introduce(<span class="string">&quot;你好&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-重写-equals-和-hashCode"><a href="#2-重写-equals-和-hashCode" class="headerlink" title="2. 重写 equals 和 hashCode"></a>2. 重写 equals 和 hashCode</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String id, String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="comment">// 1. 检查是否同一对象</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span> == o) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">// 2. 检查是否为null或类不同</span></span><br><span class="line">        <span class="keyword">if</span> (o == <span class="literal">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">// 3. 类型转换</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> (Student) o;</span><br><span class="line">        <span class="comment">// 4. 比较关键字段</span></span><br><span class="line">        <span class="keyword">return</span> id.equals(student.id) &amp;&amp; name.equals(student.name);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.hash(id, name);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;id=&#x27;&quot;</span> + id + <span class="string">&quot;&#x27;, name=&#x27;&quot;</span> + name + <span class="string">&quot;&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ObjectMethodOverride</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;1001&quot;</span>, <span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        <span class="type">Student</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;1001&quot;</span>, <span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        <span class="type">Student</span> <span class="variable">s3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;1002&quot;</span>, <span class="string">&quot;李四&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;s1.equals(s2): &quot;</span> + s1.equals(s2)); <span class="comment">// true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;s1.equals(s3): &quot;</span> + s1.equals(s3)); <span class="comment">// false</span></span><br><span class="line">        System.out.println(<span class="string">&quot;s1 hashCode: &quot;</span> + s1.hashCode());</span><br><span class="line">        System.out.println(<span class="string">&quot;s2 hashCode: &quot;</span> + s2.hashCode());</span><br><span class="line">        System.out.println(<span class="string">&quot;s1 toString: &quot;</span> + s1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-桥接方法与重写"><a href="#3-桥接方法与重写" class="headerlink" title="3. 桥接方法与重写"></a>3. 桥接方法与重写</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Processor</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">process</span><span class="params">(T t)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">StringProcessor</span> <span class="keyword">implements</span> <span class="title class_">Processor</span>&lt;String&gt; &#123;</span><br><span class="line">    <span class="comment">// 编译器会生成桥接方法 void process(Object)</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">process</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;处理字符串: &quot;</span> + s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BridgeMethod</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Processor&lt;String&gt; processor = <span class="keyword">new</span> <span class="title class_">StringProcessor</span>();</span><br><span class="line">        processor.process(<span class="string">&quot;测试&quot;</span>); <span class="comment">// 实际调用process(String)</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 通过反射查看方法</span></span><br><span class="line">        <span class="keyword">for</span> (Method method : StringProcessor.class.getMethods()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (method.getName().equals(<span class="string">&quot;process&quot;</span>)) &#123;</span><br><span class="line">                System.out.println(method + <span class="string">&quot; is bridge: &quot;</span> + method.isBridge());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="五、常见问题与最佳实践"><a href="#五、常见问题与最佳实践" class="headerlink" title="五、常见问题与最佳实践"></a>五、常见问题与最佳实践</h2><h3 id="1-常见陷阱"><a href="#1-常见陷阱" class="headerlink" title="1. 常见陷阱"></a>1. 常见陷阱</h3><ol><li><p><strong>意外重载而非重写</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Parent</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">doSomething</span><span class="params">(List&lt;String&gt; list)</span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Child</span> <span class="keyword">extends</span> <span class="title class_">Parent</span> &#123;</span><br><span class="line">    <span class="comment">// 实际是重载而不是重写</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">doSomething</span><span class="params">(ArrayList&lt;String&gt; list)</span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>**静态方法”重写”**：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Parent</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">staticMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Parent static&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Child</span> <span class="keyword">extends</span> <span class="title class_">Parent</span> &#123;</span><br><span class="line">    <span class="comment">// 这是隐藏(hiding)而不是重写</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">staticMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Child static&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="2-最佳实践"><a href="#2-最佳实践" class="headerlink" title="2. 最佳实践"></a>2. 最佳实践</h3><ol><li><strong>总是使用 @Override 注解</strong>：避免意外重载而非重写</li><li><strong>保持重写方法行为一致</strong>：遵守里氏替换原则</li><li><strong>谨慎重载可变参数方法</strong>：容易导致混淆</li><li><strong>避免过度重载</strong>：考虑使用不同方法名提高可读性</li><li><strong>文档化重写方法</strong>：说明与父类方法的差异</li></ol><h1 id="面向对象编程"><a href="#面向对象编程" class="headerlink" title="面向对象编程"></a>面向对象编程</h1><p><strong>面向对象思想</strong><br>java是一种面向对象的程序设计语言，我们在面向对象的思想的指引下编写程序。</p><p><strong>面向过程（pop）</strong></p><ul><li>这是一种以过程为中心的编程思想。把事情拆成几个步骤然后按照一定的顺序执行。（强调过程）</li></ul><p><strong>面向对象（oop）</strong></p><ul><li>面向对象就是把现实世界的事物抽象成对象，这些对象都是唯一的并且都拥有自己的属性和行为。我们就可以通过调用这些对象的方法，属性去调用对象（强调对象）</li></ul><p><strong>区别：</strong></p><ul><li>面向过程：强调的是功能行为</li><li>面向对象：强调具备功能的对象</li></ul><p><strong>面向对象的三大特征：</strong></p><ul><li>封装</li><li>继承</li><li>多态</li></ul><p>类和对象是面向对象的核心概念。具体使用方式见：[类和对象详解]（<a href="http://xhayane.top/2025/03/31/java%E5%BF%AB%E9%80%9F%E5%AD%A6%E4%B9%A0%E9%80%9F%E6%9F%A5%EF%BC%881%EF%BC%89/%EF%BC%89">http://xhayane.top/2025/03/31/java%E5%BF%AB%E9%80%9F%E5%AD%A6%E4%B9%A0%E9%80%9F%E6%9F%A5%EF%BC%881%EF%BC%89/）</a></p><p>什么是类<br>类是对一类事物的描述，是抽象的、概念上的定义。例如：猫，狗，人，手机，电脑，电视，书，学生，老师，等等。</p><p>什么是对象<br>对象是实际存在的该类事物的每个个体，因而也称为实例(instance)。例如：张三，李四，王五，小明，小红，小绿，等等。</p><p>类和对象的关系<br>类是对象的模板，对象是类的实例。<br>-类是对一类事物的描述，是<code>抽象</code>的、概念上的定义<br>-对象是一类实例化的存在，是<code>具体</code>的、可以操作的。</p><p>其余内容请跳转[类和对象详解]（<a href="http://xhayane.top/2025/03/31/java%E5%BF%AB%E9%80%9F%E5%AD%A6%E4%B9%A0%E9%80%9F%E6%9F%A5%EF%BC%881%EF%BC%89/%EF%BC%89**java%E5%AF%B9%E8%B1%A1%E5%92%8C%E7%B1%BB%E7%9A%84%E5%85%A8%E9%9D%A2%E8%A7%A3%E6%9E%90">http://xhayane.top/2025/03/31/java%E5%BF%AB%E9%80%9F%E5%AD%A6%E4%B9%A0%E9%80%9F%E6%9F%A5%EF%BC%881%EF%BC%89/）**java对象和类的全面解析</a>**</p><h1 id="Java-面向对象核心特性全面解析（多态、抽象类、封装和接口这四大面向对象特性）"><a href="#Java-面向对象核心特性全面解析（多态、抽象类、封装和接口这四大面向对象特性）" class="headerlink" title="Java 面向对象核心特性全面解析（多态、抽象类、封装和接口这四大面向对象特性）"></a>Java 面向对象核心特性全面解析（多态、抽象类、封装和接口这四大面向对象特性）</h1><p>下面我将依次详细讲解Java面向对象编程的四大核心特性：多态、抽象类、封装和接口。</p><h2 id="一、多态-Polymorphism"><a href="#一、多态-Polymorphism" class="headerlink" title="一、多态(Polymorphism)"></a>一、多态(Polymorphism)</h2><h3 id="1-多态基础"><a href="#1-多态基础" class="headerlink" title="1. 多态基础"></a>1. 多态基础</h3><p>多态是指同一操作作用于不同对象时，可以有不同的解释和执行结果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">makeSound</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;动物发出声音&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">makeSound</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;汪汪叫&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fetch</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;叼回飞盘&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">makeSound</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;喵喵叫&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">scratch</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;挠沙发&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PolymorphismDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 编译时类型为Animal，运行时类型为具体子类</span></span><br><span class="line">        <span class="type">Animal</span> <span class="variable">myPet1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">        <span class="type">Animal</span> <span class="variable">myPet2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line">        </span><br><span class="line">        myPet1.makeSound();  <span class="comment">// 输出&quot;汪汪叫&quot;</span></span><br><span class="line">        myPet2.makeSound();  <span class="comment">// 输出&quot;喵喵叫&quot;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// myPet1.fetch();  // 编译错误，Animal类没有fetch方法</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (myPet1 <span class="keyword">instanceof</span> Dog) &#123;</span><br><span class="line">            ((Dog)myPet1).fetch();  <span class="comment">// 向下转型后调用子类特有方法</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 多态方法参数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">animalSound</span><span class="params">(Animal animal)</span> &#123;</span><br><span class="line">        animal.makeSound();  <span class="comment">// 根据实际对象类型调用相应方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-多态实现形式"><a href="#2-多态实现形式" class="headerlink" title="2. 多态实现形式"></a>2. 多态实现形式</h3><ol><li>**方法重写(Override)**：子类重写父类方法</li><li>**方法重载(Overload)**：同名不同参</li><li><strong>接口实现</strong>：不同类实现同一接口</li><li><strong>抽象类和抽象方法</strong>：提供统一接口，具体实现由子类完成</li></ol><h3 id="3-多态的优势"><a href="#3-多态的优势" class="headerlink" title="3. 多态的优势"></a>3. 多态的优势</h3><ol><li><strong>可替换性</strong>：子类对象可以替换父类对象</li><li><strong>可扩展性</strong>：新增子类不影响已有代码</li><li><strong>灵活性</strong>：同一方法不同表现</li><li><strong>简化性</strong>：统一接口处理不同对象</li></ol><h2 id="二、抽象类-Abstract-Class"><a href="#二、抽象类-Abstract-Class" class="headerlink" title="二、抽象类(Abstract Class)"></a>二、抽象类(Abstract Class)</h2><h3 id="1-抽象类基础"><a href="#1-抽象类基础" class="headerlink" title="1. 抽象类基础"></a>1. 抽象类基础</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 抽象类</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> String color;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Shape</span><span class="params">(String color)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 抽象方法 - 无实现体</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="type">double</span> <span class="title function_">getArea</span><span class="params">()</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 具体方法</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getColor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> color;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 可以包含静态方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printShapeInfo</span><span class="params">(Shape shape)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;颜色: &quot;</span> + shape.color);</span><br><span class="line">        System.out.println(<span class="string">&quot;面积: &quot;</span> + shape.getArea());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span> <span class="keyword">extends</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> radius;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Circle</span><span class="params">(String color, <span class="type">double</span> radius)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(color);</span><br><span class="line">        <span class="built_in">this</span>.radius = radius;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getArea</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Math.PI * radius * radius;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Rectangle</span> <span class="keyword">extends</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> length;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> width;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Rectangle</span><span class="params">(String color, <span class="type">double</span> length, <span class="type">double</span> width)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(color);</span><br><span class="line">        <span class="built_in">this</span>.length = length;</span><br><span class="line">        <span class="built_in">this</span>.width = width;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getArea</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> length * width;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AbstractClassDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Shape</span> <span class="variable">circle</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Circle</span>(<span class="string">&quot;红色&quot;</span>, <span class="number">5.0</span>);</span><br><span class="line">        <span class="type">Shape</span> <span class="variable">rectangle</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Rectangle</span>(<span class="string">&quot;蓝色&quot;</span>, <span class="number">4.0</span>, <span class="number">6.0</span>);</span><br><span class="line">        </span><br><span class="line">        Shape.printShapeInfo(circle);</span><br><span class="line">        Shape.printShapeInfo(rectangle);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Shape shape = new Shape(&quot;绿色&quot;);  // 编译错误，抽象类不能实例化</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-抽象类特点"><a href="#2-抽象类特点" class="headerlink" title="2. 抽象类特点"></a>2. 抽象类特点</h3><ol><li><strong>不能被实例化</strong>：只能被继承</li><li><strong>可以包含抽象方法</strong>：没有实现的方法，必须被子类实现</li><li><strong>可以包含具体方法</strong>：有实现的方法，子类可以直接使用或重写</li><li><strong>可以包含成员变量</strong>：可以是各种访问修饰符</li><li><strong>构造方法</strong>：虽然不能实例化，但可以有构造方法供子类调用</li></ol><h3 id="3-抽象类应用场景"><a href="#3-抽象类应用场景" class="headerlink" title="3. 抽象类应用场景"></a>3. 抽象类应用场景</h3><ol><li><strong>定义通用接口</strong>：为相关类提供统一的操作规范</li><li><strong>部分实现</strong>：提供部分通用实现，子类完成剩余部分</li><li><strong>模板方法模式</strong>：定义算法骨架，具体步骤由子类实现</li></ol><h2 id="三、封装-Encapsulation"><a href="#三、封装-Encapsulation" class="headerlink" title="三、封装(Encapsulation)"></a>三、封装(Encapsulation)</h2><h3 id="1-封装基础实现"><a href="#1-封装基础实现" class="headerlink" title="1. 封装基础实现"></a>1. 封装基础实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">BankAccount</span> &#123;</span><br><span class="line">    <span class="comment">// 私有字段 - 数据隐藏</span></span><br><span class="line">    <span class="keyword">private</span> String accountNumber;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> balance;</span><br><span class="line">    <span class="keyword">private</span> String owner;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 构造方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BankAccount</span><span class="params">(String accountNumber, String owner, <span class="type">double</span> initialBalance)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.accountNumber = accountNumber;</span><br><span class="line">        <span class="built_in">this</span>.owner = owner;</span><br><span class="line">        <span class="built_in">this</span>.balance = initialBalance;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 公共方法 - 控制访问</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deposit</span><span class="params">(<span class="type">double</span> amount)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (amount &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            balance += amount;</span><br><span class="line">            System.out.println(<span class="string">&quot;存款成功，当前余额: &quot;</span> + balance);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;存款金额必须大于0&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">withdraw</span><span class="params">(<span class="type">double</span> amount)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (amount &gt; <span class="number">0</span> &amp;&amp; amount &lt;= balance) &#123;</span><br><span class="line">            balance -= amount;</span><br><span class="line">            System.out.println(<span class="string">&quot;取款成功，当前余额: &quot;</span> + balance);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;取款失败，金额无效或余额不足&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Getter方法 - 受控访问私有字段</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getBalance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> balance;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getAccountNumber</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> accountNumber;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getOwner</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> owner;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Setter方法 - 受控修改私有字段</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setOwner</span><span class="params">(String owner)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (owner != <span class="literal">null</span> &amp;&amp; !owner.trim().isEmpty()) &#123;</span><br><span class="line">            <span class="built_in">this</span>.owner = owner;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 不提供setBalance方法，防止随意修改余额</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EncapsulationDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">BankAccount</span> <span class="variable">account</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BankAccount</span>(<span class="string">&quot;123456789&quot;</span>, <span class="string">&quot;张三&quot;</span>, <span class="number">1000</span>);</span><br><span class="line">        </span><br><span class="line">        account.deposit(<span class="number">500</span>);  <span class="comment">// 存款成功，当前余额: 1500.0</span></span><br><span class="line">        account.withdraw(<span class="number">200</span>); <span class="comment">// 取款成功，当前余额: 1300.0</span></span><br><span class="line">        account.withdraw(<span class="number">2000</span>); <span class="comment">// 取款失败，金额无效或余额不足</span></span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;账户余额: &quot;</span> + account.getBalance());</span><br><span class="line">        <span class="comment">// account.balance = 10000;  // 编译错误，balance是私有的</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-封装原则"><a href="#2-封装原则" class="headerlink" title="2. 封装原则"></a>2. 封装原则</h3><ol><li><strong>最小访问原则</strong>：使用最严格的访问修饰符</li><li><strong>数据隐藏</strong>：字段通常设为private</li><li><strong>受控访问</strong>：通过public方法暴露必要操作</li><li><strong>不变性保护</strong>：对不应修改的字段不提供setter</li></ol><h3 id="3-封装优势"><a href="#3-封装优势" class="headerlink" title="3. 封装优势"></a>3. 封装优势</h3><ol><li><strong>安全性</strong>：防止外部直接访问内部数据</li><li><strong>灵活性</strong>：可以修改内部实现而不影响外部代码</li><li><strong>可维护性</strong>：易于修改和扩展</li><li><strong>数据验证</strong>：可以在方法中添加业务规则验证</li></ol><h2 id="四、接口-Interface"><a href="#四、接口-Interface" class="headerlink" title="四、接口(Interface)"></a>四、接口(Interface)</h2><h3 id="1-接口基础"><a href="#1-接口基础" class="headerlink" title="1. 接口基础"></a>1. 接口基础</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 基本接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Switchable</span> &#123;</span><br><span class="line">    <span class="comment">// 常量 (默认 public static final)</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">MAX_BRIGHTNESS</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 抽象方法 (默认 public abstract)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">turnOn</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">turnOff</span><span class="params">()</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Java 8+ 默认方法</span></span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">adjustBrightness</span><span class="params">(<span class="type">int</span> level)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;调整亮度至: &quot;</span> + Math.min(level, MAX_BRIGHTNESS));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Java 8+ 静态方法</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printMaxBrightness</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;最大亮度: &quot;</span> + MAX_BRIGHTNESS);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接口继承</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">SmartDevice</span> <span class="keyword">extends</span> <span class="title class_">Switchable</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">connectToWifi</span><span class="params">(String ssid)</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">runApp</span><span class="params">(String appName)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 类实现接口</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LightBulb</span> <span class="keyword">implements</span> <span class="title class_">Switchable</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">turnOn</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;灯泡亮起&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">turnOff</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;灯泡熄灭&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SmartTV</span> <span class="keyword">implements</span> <span class="title class_">SmartDevice</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">turnOn</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;智能电视开机&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">turnOff</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;智能电视关机&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">connectToWifi</span><span class="params">(String ssid)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;连接到WiFi: &quot;</span> + ssid);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">runApp</span><span class="params">(String appName)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;运行应用: &quot;</span> + appName);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 覆盖默认方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">adjustBrightness</span><span class="params">(<span class="type">int</span> level)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;智能电视亮度调节至: &quot;</span> + level);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InterfaceDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Switchable</span> <span class="variable">bulb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LightBulb</span>();</span><br><span class="line">        bulb.turnOn();</span><br><span class="line">        bulb.adjustBrightness(<span class="number">80</span>);  <span class="comment">// 使用默认方法</span></span><br><span class="line">        bulb.turnOff();</span><br><span class="line">        </span><br><span class="line">        <span class="type">SmartTV</span> <span class="variable">tv</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SmartTV</span>();</span><br><span class="line">        tv.turnOn();</span><br><span class="line">        tv.connectToWifi(<span class="string">&quot;HomeWiFi&quot;</span>);</span><br><span class="line">        tv.runApp(<span class="string">&quot;Netflix&quot;</span>);</span><br><span class="line">        tv.adjustBrightness(<span class="number">60</span>);    <span class="comment">// 使用重写的默认方法</span></span><br><span class="line">        tv.turnOff();</span><br><span class="line">        </span><br><span class="line">        Switchable.printMaxBrightness();  <span class="comment">// 调用接口静态方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-接口特性"><a href="#2-接口特性" class="headerlink" title="2. 接口特性"></a>2. 接口特性</h3><ol><li><strong>多继承</strong>：一个类可以实现多个接口</li><li><strong>默认方法</strong>：Java 8+ 允许接口包含具体实现的方法</li><li><strong>静态方法</strong>：Java 8+ 允许接口包含静态方法</li><li><strong>私有方法</strong>：Java 9+ 允许接口包含私有方法</li><li><strong>常量定义</strong>：接口中定义的变量默认是public static final</li></ol><h3 id="3-接口与抽象类对比"><a href="#3-接口与抽象类对比" class="headerlink" title="3. 接口与抽象类对比"></a>3. 接口与抽象类对比</h3><table><thead><tr><th>特性</th><th>接口(Interface)</th><th>抽象类(Abstract Class)</th></tr></thead><tbody><tr><td>实例化</td><td>不能</td><td>不能</td></tr><tr><td>方法实现</td><td>Java 8+ 可以有默认方法</td><td>可以有具体方法</td></tr><tr><td>字段</td><td>只能是常量(public static final)</td><td>可以是普通成员变量</td></tr><tr><td>构造方法</td><td>没有</td><td>有</td></tr><tr><td>多继承</td><td>一个类可实现多个接口</td><td>一个类只能继承一个抽象类</td></tr><tr><td>访问修饰符</td><td>方法默认public</td><td>方法可以有各种访问修饰符</td></tr><tr><td>设计目的</td><td>定义行为规范</td><td>提供通用实现和规范</td></tr></tbody></table><h2 id="五、四大特性综合应用"><a href="#五、四大特性综合应用" class="headerlink" title="五、四大特性综合应用"></a>五、四大特性综合应用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 封装 - 隐藏实现细节</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Vehicle</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String model;  <span class="comment">// 私有字段</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">protected</span> <span class="title function_">Vehicle</span><span class="params">(String model)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.model = model;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Getter方法控制访问</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getModel</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> model;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 抽象方法 - 多态基础</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">stop</span><span class="params">()</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 具体方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">displayInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;车型: &quot;</span> + model);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接口定义额外能力</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Electric</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">charge</span><span class="params">()</span>;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">getBatteryLevel</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体类实现多态</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ElectricCar</span> <span class="keyword">extends</span> <span class="title class_">Vehicle</span> <span class="keyword">implements</span> <span class="title class_">Electric</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> batteryLevel;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ElectricCar</span><span class="params">(String model)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(model);</span><br><span class="line">        <span class="built_in">this</span>.batteryLevel = <span class="number">100</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(getModel() + <span class="string">&quot;电动车静音启动&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">stop</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(getModel() + <span class="string">&quot;电动车再生制动停止&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">charge</span><span class="params">()</span> &#123;</span><br><span class="line">        batteryLevel = <span class="number">100</span>;</span><br><span class="line">        System.out.println(getModel() + <span class="string">&quot;已充满电&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getBatteryLevel</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> batteryLevel;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 特有方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">autoPilot</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(getModel() + <span class="string">&quot;自动驾驶模式激活&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OOPIntegration</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Vehicle[] vehicles = &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">ElectricCar</span>(<span class="string">&quot;Tesla Model S&quot;</span>),</span><br><span class="line">            <span class="comment">// 可以添加其他Vehicle子类</span></span><br><span class="line">        &#125;;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (Vehicle vehicle : vehicles) &#123;</span><br><span class="line">            vehicle.displayInfo();</span><br><span class="line">            vehicle.start();</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (vehicle <span class="keyword">instanceof</span> Electric) &#123;</span><br><span class="line">                <span class="type">Electric</span> <span class="variable">electric</span> <span class="operator">=</span> (Electric) vehicle;</span><br><span class="line">                System.out.println(<span class="string">&quot;电量: &quot;</span> + electric.getBatteryLevel() + <span class="string">&quot;%&quot;</span>);</span><br><span class="line">                electric.charge();</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (vehicle <span class="keyword">instanceof</span> ElectricCar) &#123;</span><br><span class="line">                ((ElectricCar)vehicle).autoPilot();</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            vehicle.stop();</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="六、设计原则与最佳实践"><a href="#六、设计原则与最佳实践" class="headerlink" title="六、设计原则与最佳实践"></a>六、设计原则与最佳实践</h2><h3 id="1-SOLID原则"><a href="#1-SOLID原则" class="headerlink" title="1. SOLID原则"></a>1. SOLID原则</h3><ol><li>**单一职责原则(SRP)**：一个类只负责一个功能领域</li><li>**开闭原则(OCP)**：对扩展开放，对修改关闭</li><li>**里氏替换原则(LSP)**：子类必须能替换父类</li><li>**接口隔离原则(ISP)**：客户端不应依赖它不需要的接口</li><li>**依赖倒置原则(DIP)**：依赖抽象而非具体实现</li></ol><h3 id="2-面向对象设计技巧"><a href="#2-面向对象设计技巧" class="headerlink" title="2. 面向对象设计技巧"></a>2. 面向对象设计技巧</h3><ol><li><strong>优先使用组合而非继承</strong>：除非明确is-a关系</li><li><strong>面向接口编程</strong>：提高灵活性和可扩展性</li><li><strong>合理使用访问控制</strong>：遵循最小权限原则</li><li><strong>避免过度设计</strong>：根据实际需求设计类结构</li><li><strong>保持类和方法小巧</strong>：单一职责，高内聚低耦合</li></ol><h1 id="Java-枚举、包与反射全面解析"><a href="#Java-枚举、包与反射全面解析" class="headerlink" title="Java 枚举、包与反射全面解析"></a>Java 枚举、包与反射全面解析</h1><p>下面我将系统地讲解 Java 中枚举、包和反射的核心概念与使用场景。</p><h2 id="一、枚举-Enum"><a href="#一、枚举-Enum" class="headerlink" title="一、枚举(Enum)"></a>一、枚举(Enum)</h2><h3 id="1-枚举基础"><a href="#1-枚举基础" class="headerlink" title="1. 枚举基础"></a>1. 枚举基础</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 基本枚举定义</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">Day</span> &#123;</span><br><span class="line">    MONDAY, </span><br><span class="line">    TUESDAY, </span><br><span class="line">    WEDNESDAY, </span><br><span class="line">    THURSDAY, </span><br><span class="line">    FRIDAY, </span><br><span class="line">    SATURDAY, </span><br><span class="line">    SUNDAY</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 带属性的枚举</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">Planet</span> &#123;</span><br><span class="line">    MERCURY(<span class="number">3.303e+23</span>, <span class="number">2.4397e6</span>),</span><br><span class="line">    VENUS(<span class="number">4.869e+24</span>, <span class="number">6.0518e6</span>),</span><br><span class="line">    EARTH(<span class="number">5.976e+24</span>, <span class="number">6.37814e6</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">double</span> mass;   <span class="comment">// in kilograms</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">double</span> radius; <span class="comment">// in meters</span></span><br><span class="line">    </span><br><span class="line">    Planet(<span class="type">double</span> mass, <span class="type">double</span> radius) &#123;</span><br><span class="line">        <span class="built_in">this</span>.mass = mass;</span><br><span class="line">        <span class="built_in">this</span>.radius = radius;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">surfaceGravity</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">6.67300E-11</span> * mass / (radius * radius);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">surfaceWeight</span><span class="params">(<span class="type">double</span> otherMass)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> otherMass * surfaceGravity();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EnumDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 基本使用</span></span><br><span class="line">        <span class="type">Day</span> <span class="variable">today</span> <span class="operator">=</span> Day.WEDNESDAY;</span><br><span class="line">        System.out.println(<span class="string">&quot;Today is: &quot;</span> + today);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 遍历枚举</span></span><br><span class="line">        System.out.println(<span class="string">&quot;All days:&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Day day : Day.values()) &#123;</span><br><span class="line">            System.out.println(day);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 带属性的枚举使用</span></span><br><span class="line">        <span class="type">double</span> <span class="variable">earthWeight</span> <span class="operator">=</span> <span class="number">70</span>; <span class="comment">// kg</span></span><br><span class="line">        <span class="type">double</span> <span class="variable">mass</span> <span class="operator">=</span> earthWeight / Planet.EARTH.surfaceGravity();</span><br><span class="line">        <span class="keyword">for</span> (Planet p : Planet.values()) &#123;</span><br><span class="line">            System.out.printf(<span class="string">&quot;Your weight on %s is %f%n&quot;</span>,</span><br><span class="line">                p, p.surfaceWeight(mass));</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// switch语句中使用枚举</span></span><br><span class="line">        <span class="keyword">switch</span> (today) &#123;</span><br><span class="line">            <span class="keyword">case</span> MONDAY:</span><br><span class="line">                System.out.println(<span class="string">&quot;星期一综合症&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> FRIDAY:</span><br><span class="line">                System.out.println(<span class="string">&quot;感谢上帝，今天是星期五&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;普通工作日&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-枚举高级特性"><a href="#2-枚举高级特性" class="headerlink" title="2. 枚举高级特性"></a>2. 枚举高级特性</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">Operation</span> &#123;</span><br><span class="line">    PLUS(<span class="string">&quot;+&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">apply</span><span class="params">(<span class="type">double</span> x, <span class="type">double</span> y)</span> &#123; <span class="keyword">return</span> x + y; &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    MINUS(<span class="string">&quot;-&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">apply</span><span class="params">(<span class="type">double</span> x, <span class="type">double</span> y)</span> &#123; <span class="keyword">return</span> x - y; &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    TIMES(<span class="string">&quot;*&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">apply</span><span class="params">(<span class="type">double</span> x, <span class="type">double</span> y)</span> &#123; <span class="keyword">return</span> x * y; &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    DIVIDE(<span class="string">&quot;/&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">apply</span><span class="params">(<span class="type">double</span> x, <span class="type">double</span> y)</span> &#123; <span class="keyword">return</span> x / y; &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String symbol;</span><br><span class="line">    </span><br><span class="line">    Operation(String symbol) &#123;</span><br><span class="line">        <span class="built_in">this</span>.symbol = symbol;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> symbol;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="type">double</span> <span class="title function_">apply</span><span class="params">(<span class="type">double</span> x, <span class="type">double</span> y)</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 根据符号查找枚举</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Operation <span class="title function_">fromSymbol</span><span class="params">(String symbol)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (Operation op : Operation.values()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (op.symbol.equals(symbol)) &#123;</span><br><span class="line">                <span class="keyword">return</span> op;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;未知运算符: &quot;</span> + symbol);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AdvancedEnum</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">double</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">10.5</span>;</span><br><span class="line">        <span class="type">double</span> <span class="variable">y</span> <span class="operator">=</span> <span class="number">2.5</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (Operation op : Operation.values()) &#123;</span><br><span class="line">            System.out.printf(<span class="string">&quot;%f %s %f = %f%n&quot;</span>, </span><br><span class="line">                x, op, y, op.apply(x, y));</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="type">Operation</span> <span class="variable">op</span> <span class="operator">=</span> Operation.fromSymbol(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;10 * 5 = &quot;</span> + op.apply(<span class="number">10</span>, <span class="number">5</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-枚举最佳实践"><a href="#3-枚举最佳实践" class="headerlink" title="3. 枚举最佳实践"></a>3. 枚举最佳实践</h3><ol><li><strong>单例模式实现</strong>：枚举是实现单例的最佳方式</li><li><strong>策略模式</strong>：利用枚举的抽象方法实现策略模式</li><li><strong>状态机</strong>：适合用枚举实现有限状态机</li><li><strong>替代常量</strong>：比常量类更类型安全</li></ol><h2 id="二、包-Package"><a href="#二、包-Package" class="headerlink" title="二、包(Package)"></a>二、包(Package)</h2><h3 id="1-包基础使用"><a href="#1-包基础使用" class="headerlink" title="1. 包基础使用"></a>1. 包基础使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 文件: com/example/utils/MathUtils.java</span></span><br><span class="line"><span class="keyword">package</span> com.example.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MathUtils</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">factorial</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (n &lt;= <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> n * factorial(n - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 文件: com/example/Main.java</span></span><br><span class="line"><span class="keyword">package</span> com.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.utils.MathUtils;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.example.utils.MathUtils.add; <span class="comment">// 静态导入</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 使用完全限定名</span></span><br><span class="line">        System.out.println(com.example.utils.MathUtils.factorial(<span class="number">5</span>));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 使用import后的类名</span></span><br><span class="line">        System.out.println(MathUtils.add(<span class="number">3</span>, <span class="number">4</span>));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 使用静态导入的方法</span></span><br><span class="line">        System.out.println(add(<span class="number">5</span>, <span class="number">6</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-包的组织原则"><a href="#2-包的组织原则" class="headerlink" title="2. 包的组织原则"></a>2. 包的组织原则</h3><ol><li><strong>功能相关性</strong>：相同功能的类放在同一包中</li><li><strong>层次结构</strong>：按功能模块分层，如com.公司名.项目名.模块名</li><li><strong>访问控制</strong>：利用包级私有(package-private)保护实现细节</li><li><strong>避免循环依赖</strong>：包之间不应有循环依赖关系</li></ol><h3 id="3-JDK常用包"><a href="#3-JDK常用包" class="headerlink" title="3. JDK常用包"></a>3. JDK常用包</h3><table><thead><tr><th>包名</th><th>描述</th></tr></thead><tbody><tr><td>java.lang</td><td>核心类(自动导入)</td></tr><tr><td>java.util</td><td>工具类和集合框架</td></tr><tr><td>java.io</td><td>输入输出相关</td></tr><tr><td>java.net</td><td>网络编程</td></tr><tr><td>java.sql</td><td>数据库操作</td></tr><tr><td>java.time</td><td>日期时间API</td></tr></tbody></table><h2 id="三、反射-Reflection"><a href="#三、反射-Reflection" class="headerlink" title="三、反射(Reflection)"></a>三、反射(Reflection)</h2><h3 id="1-反射基础"><a href="#1-反射基础" class="headerlink" title="1. 反射基础"></a>1. 反射基础</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReflectionBasics</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 获取Class对象的三种方式</span></span><br><span class="line">        Class&lt;?&gt; stringClass1 = String.class;</span><br><span class="line">        Class&lt;?&gt; stringClass2 = <span class="string">&quot;Hello&quot;</span>.getClass();</span><br><span class="line">        Class&lt;?&gt; stringClass3 = Class.forName(<span class="string">&quot;java.lang.String&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        System.out.println(stringClass1 == stringClass2); <span class="comment">// true</span></span><br><span class="line">        System.out.println(stringClass2 == stringClass3); <span class="comment">// true</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 获取类信息</span></span><br><span class="line">        System.out.println(<span class="string">&quot;类名: &quot;</span> + stringClass1.getName());</span><br><span class="line">        System.out.println(<span class="string">&quot;简单类名: &quot;</span> + stringClass1.getSimpleName());</span><br><span class="line">        System.out.println(<span class="string">&quot;是否是接口: &quot;</span> + stringClass1.isInterface());</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 获取修饰符</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">modifiers</span> <span class="operator">=</span> stringClass1.getModifiers();</span><br><span class="line">        System.out.println(<span class="string">&quot;修饰符: &quot;</span> + Modifier.toString(modifiers));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 获取父类</span></span><br><span class="line">        Class&lt;?&gt; superClass = stringClass1.getSuperclass();</span><br><span class="line">        System.out.println(<span class="string">&quot;父类: &quot;</span> + superClass.getName());</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 获取实现的接口</span></span><br><span class="line">        Class&lt;?&gt;[] interfaces = stringClass1.getInterfaces();</span><br><span class="line">        System.out.println(<span class="string">&quot;实现的接口:&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Class&lt;?&gt; iface : interfaces) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;  &quot;</span> + iface.getName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-反射操作类成员"><a href="#2-反射操作类成员" class="headerlink" title="2. 反射操作类成员"></a>2. 反射操作类成员</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">privateMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;私有方法被调用&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReflectionMembers</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Class&lt;?&gt; personClass = Person.class;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 获取构造方法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;构造方法:&quot;</span>);</span><br><span class="line">        Constructor&lt;?&gt;[] constructors = personClass.getConstructors();</span><br><span class="line">        <span class="keyword">for</span> (Constructor&lt;?&gt; c : constructors) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;  &quot;</span> + c);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 创建实例</span></span><br><span class="line">        Constructor&lt;?&gt; constructor = personClass.getConstructor(String.class, <span class="type">int</span>.class);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">person</span> <span class="operator">=</span> constructor.newInstance(<span class="string">&quot;张三&quot;</span>, <span class="number">25</span>);</span><br><span class="line">        System.out.println(((Person)person).getName());</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 获取字段</span></span><br><span class="line">        System.out.println(<span class="string">&quot;\n字段:&quot;</span>);</span><br><span class="line">        Field[] fields = personClass.getDeclaredFields();</span><br><span class="line">        <span class="keyword">for</span> (Field field : fields) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;  &quot;</span> + field);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 访问私有字段</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">nameField</span> <span class="operator">=</span> personClass.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        nameField.setAccessible(<span class="literal">true</span>); <span class="comment">// 设置可访问</span></span><br><span class="line">        nameField.set(person, <span class="string">&quot;李四&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;修改后name: &quot;</span> + nameField.get(person));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 获取方法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;\n方法:&quot;</span>);</span><br><span class="line">        Method[] methods = personClass.getDeclaredMethods();</span><br><span class="line">        <span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;  &quot;</span> + method);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 调用方法</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">getNameMethod</span> <span class="operator">=</span> personClass.getMethod(<span class="string">&quot;getName&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;调用getName: &quot;</span> + getNameMethod.invoke(person));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 调用私有方法</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">privateMethod</span> <span class="operator">=</span> personClass.getDeclaredMethod(<span class="string">&quot;privateMethod&quot;</span>);</span><br><span class="line">        privateMethod.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        privateMethod.invoke(person);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-反射应用场景"><a href="#3-反射应用场景" class="headerlink" title="3. 反射应用场景"></a>3. 反射应用场景</h3><ol><li><strong>动态代理</strong>：AOP实现的基础</li><li><strong>注解处理</strong>：框架中处理自定义注解</li><li><strong>类浏览器&#x2F;IDE</strong>：获取类结构信息</li><li><strong>序列化&#x2F;反序列化</strong>：JSON&#x2F;XML库的实现</li><li><strong>插件架构</strong>：动态加载类</li><li><strong>测试工具</strong>：Mock框架的实现</li></ol><h3 id="4-反射性能与安全"><a href="#4-反射性能与安全" class="headerlink" title="4. 反射性能与安全"></a>4. 反射性能与安全</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReflectionPerformance</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">ITERATIONS</span> <span class="operator">=</span> <span class="number">1000000</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 直接调用</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.nanoTime();</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; ITERATIONS; i++) &#123;</span><br><span class="line">            person.getName();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> <span class="variable">directTime</span> <span class="operator">=</span> System.nanoTime() - start;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 反射调用</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">getNameMethod</span> <span class="operator">=</span> Person.class.getMethod(<span class="string">&quot;getName&quot;</span>);</span><br><span class="line">        start = System.nanoTime();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; ITERATIONS; i++) &#123;</span><br><span class="line">            getNameMethod.invoke(person);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> <span class="variable">reflectionTime</span> <span class="operator">=</span> System.nanoTime() - start;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 反射调用(设置accessible)</span></span><br><span class="line">        getNameMethod.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        start = System.nanoTime();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; ITERATIONS; i++) &#123;</span><br><span class="line">            getNameMethod.invoke(person);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> <span class="variable">reflectionAccessibleTime</span> <span class="operator">=</span> System.nanoTime() - start;</span><br><span class="line">        </span><br><span class="line">        System.out.printf(<span class="string">&quot;直接调用耗时: %,d ns%n&quot;</span>, directTime);</span><br><span class="line">        System.out.printf(<span class="string">&quot;反射调用耗时: %,d ns%n&quot;</span>, reflectionTime);</span><br><span class="line">        System.out.printf(<span class="string">&quot;反射(setAccessible)调用耗时: %,d ns%n&quot;</span>, reflectionAccessibleTime);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 安全考虑</span></span><br><span class="line">        <span class="type">SecurityManager</span> <span class="variable">sm</span> <span class="operator">=</span> System.getSecurityManager();</span><br><span class="line">        <span class="keyword">if</span> (sm != <span class="literal">null</span>) &#123;</span><br><span class="line">            sm.checkPermission(<span class="keyword">new</span> <span class="title class_">ReflectPermission</span>(<span class="string">&quot;suppressAccessChecks&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>性能提示</strong>：</p><ol><li>反射操作比直接调用慢</li><li>通过setAccessible(true)可以提升性能</li><li>缓存Method&#x2F;Field&#x2F;Constructor对象避免重复查找</li></ol><p><strong>安全考虑</strong>：</p><ol><li>反射可以绕过访问控制检查</li><li>安全管理器可以限制反射操作</li><li>生产环境应谨慎使用反射</li></ol><h2 id="四、综合应用示例"><a href="#四、综合应用示例" class="headerlink" title="四、综合应用示例"></a>四、综合应用示例</h2><h3 id="1-注解处理器"><a href="#1-注解处理器" class="headerlink" title="1. 注解处理器"></a>1. 注解处理器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.annotation.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"><span class="meta">@interface</span> Test &#123;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">priority</span><span class="params">()</span> <span class="keyword">default</span> <span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestRunner</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">runTests</span><span class="params">(Class&lt;?&gt; testClass)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">testInstance</span> <span class="operator">=</span> testClass.getDeclaredConstructor().newInstance();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 获取所有方法并按优先级排序</span></span><br><span class="line">        Method[] methods = testClass.getDeclaredMethods();</span><br><span class="line">        Arrays.sort(methods, (m1, m2) -&gt; &#123;</span><br><span class="line">            <span class="type">Test</span> <span class="variable">t1</span> <span class="operator">=</span> m1.getAnnotation(Test.class);</span><br><span class="line">            <span class="type">Test</span> <span class="variable">t2</span> <span class="operator">=</span> m2.getAnnotation(Test.class);</span><br><span class="line">            <span class="type">int</span> <span class="variable">p1</span> <span class="operator">=</span> t1 != <span class="literal">null</span> ? t1.priority() : <span class="number">0</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">p2</span> <span class="operator">=</span> t2 != <span class="literal">null</span> ? t2.priority() : <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">return</span> Integer.compare(p2, p1); <span class="comment">// 降序</span></span><br><span class="line">        &#125;);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 执行测试方法</span></span><br><span class="line">        <span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">            <span class="keyword">if</span> (method.getAnnotation(Test.class) != <span class="literal">null</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Running test: &quot;</span> + method.getName());</span><br><span class="line">                method.invoke(testInstance);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyTests</span> &#123;</span><br><span class="line">    <span class="meta">@Test(priority = 1)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFeatureA</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Testing important feature A&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test(priority = 3)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFeatureB</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Testing feature B&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span> <span class="comment">// 默认优先级5</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFeatureC</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Testing feature C&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">helperMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 不会被测试运行器执行</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AnnotationProcessor</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        TestRunner.runTests(MyTests.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-简单DI容器"><a href="#2-简单DI容器" class="headerlink" title="2. 简单DI容器"></a>2. 简单DI容器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.annotation.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@interface</span> Inject &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SimpleDIContainer</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;Class&lt;?&gt;, Object&gt; instances = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">register</span><span class="params">(Class&lt;?&gt; clazz)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Constructor&lt;?&gt;[] constructors = clazz.getConstructors();</span><br><span class="line">        <span class="keyword">if</span> (constructors.length != <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;类必须有且只有一个公共构造方法&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        Constructor&lt;?&gt; constructor = constructors[<span class="number">0</span>];</span><br><span class="line">        Object[] params = Arrays.stream(constructor.getParameterTypes())</span><br><span class="line">            .map(paramType -&gt; &#123;</span><br><span class="line">                <span class="keyword">if</span> (!instances.containsKey(paramType)) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;未注册的依赖类型: &quot;</span> + paramType);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> instances.get(paramType);</span><br><span class="line">            &#125;)</span><br><span class="line">            .toArray();</span><br><span class="line">        </span><br><span class="line">        <span class="type">Object</span> <span class="variable">instance</span> <span class="operator">=</span> constructor.newInstance(params);</span><br><span class="line">        instances.put(clazz, instance);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; T <span class="title function_">getInstance</span><span class="params">(Class&lt;T&gt; clazz)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> clazz.cast(instances.get(clazz));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">injectFields</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">for</span> (Field field : obj.getClass().getDeclaredFields()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (field.isAnnotationPresent(Inject.class)) &#123;</span><br><span class="line">                field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                Class&lt;?&gt; fieldType = field.getType();</span><br><span class="line">                <span class="keyword">if</span> (!instances.containsKey(fieldType)) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;未注册的依赖类型: &quot;</span> + fieldType);</span><br><span class="line">                &#125;</span><br><span class="line">                field.set(obj, instances.get(fieldType));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ServiceA</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;ServiceA executed&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ServiceB</span> &#123;</span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    <span class="keyword">private</span> ServiceA serviceA;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doWork</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;ServiceB starting work&quot;</span>);</span><br><span class="line">        serviceA.execute();</span><br><span class="line">        System.out.println(<span class="string">&quot;ServiceB finished work&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DIContainerDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">SimpleDIContainer</span> <span class="variable">container</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDIContainer</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 注册组件</span></span><br><span class="line">        container.register(ServiceA.class);</span><br><span class="line">        container.register(ServiceB.class);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 获取实例并使用</span></span><br><span class="line">        <span class="type">ServiceB</span> <span class="variable">serviceB</span> <span class="operator">=</span> container.getInstance(ServiceB.class);</span><br><span class="line">        serviceB.doWork();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="五、关键知识点总结"><a href="#五、关键知识点总结" class="headerlink" title="五、关键知识点总结"></a>五、关键知识点总结</h2><ol><li><p><strong>枚举</strong>：</p><ul><li>类型安全的常量集合</li><li>可以包含字段、方法和构造方法</li><li>适合实现单例、策略模式等</li></ul></li><li><p><strong>包</strong>：</p><ul><li>组织类和接口的命名空间</li><li>控制访问权限（包级私有）</li><li>避免命名冲突</li></ul></li><li><p><strong>反射</strong>：</p><ul><li>运行时检查和操作类、方法、字段</li><li>强大的但应谨慎使用</li><li>性能开销较大，适合框架开发</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 结构速查 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java快速学习速查（4）</title>
      <link href="/2025/04/01/java%E5%BF%AB%E9%80%9F%E5%AD%A6%E4%B9%A0%E9%80%9F%E6%9F%A5%EF%BC%884%EF%BC%89/"/>
      <url>/2025/04/01/java%E5%BF%AB%E9%80%9F%E5%AD%A6%E4%B9%A0%E9%80%9F%E6%9F%A5%EF%BC%884%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="java快速学习速查（4）"><a href="#java快速学习速查（4）" class="headerlink" title="java快速学习速查（4）"></a>java快速学习速查（4）</h1><blockquote><p>尽快吧，这个毕竟得快点做完，本章是初级部分最后一篇了<br>主要内容为数组，日期时间，正则表达式，方法，构造方法，Stream和File和IO，scanner类，异常处理</p></blockquote><p>这页面很多理论知识和即系并没有，我打算进行一些补充操作，你猜为什么我不拉快速跳转链接，我才不会告诉你我的文章链接长过头了</p><h1 id="Java-数组全面解析"><a href="#Java-数组全面解析" class="headerlink" title="Java 数组全面解析"></a>Java 数组全面解析</h1><p>数组是 Java 中存储固定大小同类型元素的数据结构。下面我将系统地讲解 Java 数组的各种功能和使用场景。</p><h2 id="一、数组基础"><a href="#一、数组基础" class="headerlink" title="一、数组基础"></a>一、数组基础</h2><h3 id="1-声明和初始化数组"><a href="#1-声明和初始化数组" class="headerlink" title="1. 声明和初始化数组"></a>1. 声明和初始化数组</h3><p><strong>数组</strong>：是一种容器，可以同时存放多个数据值。</p><p><strong>数组的特点</strong>：</p><ul><li>数组是存储多个变量 (元素) 的容器。</li><li>数组里面的变量 (元素) 数据类型要一致。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明数组的两种方式</span></span><br><span class="line"><span class="type">int</span>[] numbers1;   <span class="comment">// 推荐方式</span></span><br><span class="line"><span class="type">int</span> numbers2[];   <span class="comment">// C风格，不推荐</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建数组的三种方式</span></span><br><span class="line"><span class="type">int</span>[] arr1 = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">5</span>];          <span class="comment">// 长度为5的数组，元素初始为0</span></span><br><span class="line"><span class="type">int</span>[] arr2 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;     <span class="comment">// 直接初始化</span></span><br><span class="line"><span class="type">int</span>[] arr3 = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;  <span class="comment">// 匿名数组初始化</span></span><br></pre></td></tr></table></figure><h3 id="2-访问数组元素"><a href="#2-访问数组元素" class="headerlink" title="2. 访问数组元素"></a>2. 访问数组元素</h3><p><strong>索引</strong>；每一个存储到数组的元素，都会自动的拥有一个编号，从0开始，这个自动编号称为数组索引 (index)，可以通过数组的索引访问到数组中的元素。</p><p><strong>数组的长度属性</strong>：每个数组都具有长度，而且是固定的，Java中赋予了数组一个属性，可以获取到数组的长度，语句为：<code>数组名.length</code> ，属性length的执行结果是数组的长度，int类型结果。由次可以推断出，数组的最大索引值为<code>数组名.length-1</code> 。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] numbers = &#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取数组长度</span></span><br><span class="line"><span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> numbers.length;  <span class="comment">// 5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 访问元素</span></span><br><span class="line"><span class="type">int</span> <span class="variable">first</span> <span class="operator">=</span> numbers[<span class="number">0</span>];  <span class="comment">// 10</span></span><br><span class="line"><span class="type">int</span> <span class="variable">last</span> <span class="operator">=</span> numbers[numbers.length - <span class="number">1</span>];  <span class="comment">// 50</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改元素</span></span><br><span class="line">numbers[<span class="number">1</span>] = <span class="number">25</span>;  <span class="comment">// 数组变为 &#123;10, 25, 30, 40, 50&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>若是要通过Scanner类来获取数组的元素，需要使用循环来获取，因为Scanner类只能获取一个元素，而数组是多个元素的集合，所以需要使用循环来获取。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"><span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;请输入第&quot;</span> + (i + <span class="number">1</span>) + <span class="string">&quot;个元素：&quot;</span>);</span><br><span class="line">    arr[i] = sc.nextInt();<span class="comment">// 输入元素sc是Scanner类的对象，arr是数组名，i是数组的索引，arr[i]是数组的元素，sc.nextInt()是Scanner类的方法，用于获取输入的整数。</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二、数组操作"><a href="#二、数组操作" class="headerlink" title="二、数组操作"></a>二、数组操作</h2><p>重复操作请交给循环完成，数组的操作主要包括遍历数组、复制数组、排序数组、搜索数组等。基本上都是通过循环来完成的。</p><blockquote><p>但是很多东西都是有现成的轮子的，所以我们在使用的时候，尽量使用现成的方法，而不是自己去写，这样可以提高效率，减少错误。</p></blockquote><p>我这里先展示一些常用的函数：</p><ul><li><code>Arrays.toString()</code>：将数组转换为字符串。</li><li><code>Arrays.sort()</code>：对数组进行排序。</li><li><code>Arrays.binarySearch()</code>：在已排序的数组中进行二分查找。</li><li><code>Arrays.fill()</code>：填充数组。</li><li><code>Arrays.copyOf()</code>：复制数组。</li><li><code>System.arraycopy()</code>：复制数组的一部分。</li><li><code>Arrays.equals()</code>：比较两个数组是否相等。</li><li><code>Arrays.asList()</code>：将数组转换为列表。</li></ul><h3 id="1-遍历数组"><a href="#1-遍历数组" class="headerlink" title="1. 遍历数组"></a>1. 遍历数组</h3><p>可以使用for循环，也可以使用增强for循环，也可以使用Arrays.toString()方法，但是要注意，增强for循环只能遍历数组，不能修改数组元素。你若是要修改数组元素，还是使用for循环。</p><blockquote><p>注意：增强for循环只能遍历数组，不能修改数组元素。<br>解决方法：使用普通for循环或使用Arrays.asList()方法将数组转换为列表。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] numbers = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 基本for循环</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; numbers.length; i++) &#123;</span><br><span class="line">    System.out.println(numbers[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 增强for循环 (for-each)</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> num : numbers) &#123;</span><br><span class="line">    System.out.println(num);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 使用Arrays.toString()</span></span><br><span class="line">System.out.println(Arrays.toString(numbers));</span><br></pre></td></tr></table></figure><h3 id="2-数组复制"><a href="#2-数组复制" class="headerlink" title="2. 数组复制"></a>2. 数组复制</h3><p>他的意义是为了避免直接使用<code>=</code>进行赋值，因为这样会导致两个变量指向同一个数组，修改其中一个会影响另一个。数组复制的结果是一个新的数组，包含了原数组的所有元素，但它们是独立的，可以安全地修改而不会影响原数组。</p><blockquote><p>注意：数组是引用类型，直接赋值会导致两个变量指向同一个数组。<br>解决方法：使用<code>Arrays.copyOf()</code>或<code>System.arraycopy()</code>等方法创建新的数组。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] source = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 使用System.arraycopy()</span></span><br><span class="line"><span class="type">int</span>[] dest1 = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">5</span>];</span><br><span class="line">System.arraycopy(source, <span class="number">0</span>, dest1, <span class="number">0</span>, source.length);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 使用Arrays.copyOf()</span></span><br><span class="line"><span class="type">int</span>[] dest2 = Arrays.copyOf(source, source.length);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 使用clone()</span></span><br><span class="line"><span class="type">int</span>[] dest3 = source.clone();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 手动复制</span></span><br><span class="line"><span class="type">int</span>[] dest4 = <span class="keyword">new</span> <span class="title class_">int</span>[source.length];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; source.length; i++) &#123;</span><br><span class="line">    dest4[i] = source[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-数组排序和搜索"><a href="#3-数组排序和搜索" class="headerlink" title="3. 数组排序和搜索"></a>3. 数组排序和搜索</h3><p>算法基操，掉头发的开端，现在回来看还是万恶之源，其实可以直接使用Arrays.sort()和Arrays.binarySearch()方法，但是要注意，这两个方法只能用于已排序的数组。</p><blockquote><p>注意：Arrays.sort()和Arrays.binarySearch()只能用于已排序的数组。<br>解决方法：使用Arrays.sort()方法对数组进行排序，然后使用Arrays.binarySearch()方法进行搜索。</p></blockquote><p>我们先来几个<strong>土方法</strong>来排序和搜索：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 冒泡排序</span></span><br><span class="line"><span class="comment">//冒泡排序原理是：</span></span><br><span class="line"><span class="comment">//1. 比较相邻的元素。如果第一个比第二个大，就交换他们两个。</span></span><br><span class="line"><span class="comment">//2. 对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。这步做完后，最后的元素会是最大的数。</span></span><br><span class="line"><span class="comment">//3. 针对所有的元素重复以上的步骤，除了最后一个。</span></span><br><span class="line"><span class="comment">//4. 持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。</span></span><br><span class="line"><span class="comment">//冒泡排序的时间复杂度是O(n^2)，空间复杂度是O(1)。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">bubbleSort</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; arr.length - <span class="number">1</span> - i; j++) &#123;<span class="comment">// 这里的-1是因为j+1会越界，-i是因为每次循环都会有一个元素排好序，所以不需要再比较</span></span><br><span class="line">            <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[j];</span><br><span class="line">                arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">                arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 选择排序</span></span><br><span class="line"><span class="comment">//选择排序原理是：</span></span><br><span class="line"><span class="comment">//1. 在未排序序列中找到最小（大）元素，存放到排序序列的起始位置。</span></span><br><span class="line"><span class="comment">//2. 再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。</span></span><br><span class="line"><span class="comment">//3. 重复第二步，直到所有元素均排序完毕。</span></span><br><span class="line"><span class="comment">//选择排序的时间复杂度是O(n^2)，空间复杂度是O(1)。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">selectionSort</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">minIndex</span> <span class="operator">=</span> i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i + <span class="number">1</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[j] &lt; arr[minIndex]) &#123;</span><br><span class="line">                minIndex = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (minIndex != i) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[i];</span><br><span class="line">            arr[i] = arr[minIndex];</span><br><span class="line">            arr[minIndex] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 反转排序</span></span><br><span class="line"><span class="comment">//反转排序原理是：</span></span><br><span class="line"><span class="comment">//1. 从数组的两端开始，分别定义两个指针（i 和 j）。</span></span><br><span class="line"><span class="comment">//2. 交换指针所指向的元素。</span></span><br><span class="line"><span class="comment">//3. 指针向中间移动，直到相遇。</span></span><br><span class="line"><span class="comment">//反转排序的时间复杂度是O(n)，空间复杂度是O(1)。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">reverseSort</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, j = arr.length - <span class="number">1</span>; i &lt; j; i++, j--) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[i];</span><br><span class="line">        arr[i] = arr[j];</span><br><span class="line">        arr[j] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 直接插入排序</span></span><br><span class="line"><span class="comment">//直接插入排序原理是：</span></span><br><span class="line"><span class="comment">//1. 从第一个元素开始，该元素可以认为已经被排序。</span></span><br><span class="line"><span class="comment">//2. 取出下一个元素，在已经排序的元素序列中从后向前扫描。</span></span><br><span class="line"><span class="comment">//3. 如果该元素（已排序）大于新元素，将该元素移到下一位置。</span></span><br><span class="line"><span class="comment">//4. 重复步骤3，直到找到已排序的元素小于或者等于新元素的位置。</span></span><br><span class="line"><span class="comment">//5. 将新元素插入到该位置后。</span></span><br><span class="line"><span class="comment">//6. 重复步骤2~5。</span></span><br><span class="line"><span class="comment">//直接插入排序的时间复杂度是O(n^2)，空间复杂度是O(1)。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">insertionSort</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">key</span> <span class="operator">=</span> arr[i];</span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (j &gt;= <span class="number">0</span> &amp;&amp; arr[j] &gt; key) &#123;</span><br><span class="line">            arr[j + <span class="number">1</span>] = arr[j];</span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">        arr[j + <span class="number">1</span>] = key;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] arr = &#123;<span class="number">5</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">7</span>&#125;;</span><br><span class="line">    </span><br><span class="line">    System.out.println(<span class="string">&quot;原始数组: &quot;</span> + Arrays.toString(arr));</span><br><span class="line">    </span><br><span class="line">    bubbleSort(arr);</span><br><span class="line">    System.out.println(<span class="string">&quot;冒泡排序后: &quot;</span> + Arrays.toString(arr));</span><br><span class="line">    </span><br><span class="line">    arr = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">5</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">7</span>&#125;;</span><br><span class="line">    selectionSort(arr);</span><br><span class="line">    System.out.println(<span class="string">&quot;选择排序后: &quot;</span> + Arrays.toString(arr));</span><br><span class="line">    </span><br><span class="line">    arr = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">5</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">7</span>&#125;;</span><br><span class="line">    reverseSort(arr);</span><br><span class="line">    System.out.println(<span class="string">&quot;反转排序后: &quot;</span> + Arrays.toString(arr));</span><br><span class="line">    </span><br><span class="line">    arr = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">5</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">7</span>&#125;;</span><br><span class="line">    insertionSort(arr);</span><br><span class="line">    System.out.println(<span class="string">&quot;插入排序后: &quot;</span> + Arrays.toString(arr));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">然后我们用现成的轮子：</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line"><span class="type">int</span>[] numbers = &#123;<span class="number">5</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">7</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 排序数组</span></span><br><span class="line">Arrays.sort(numbers);  <span class="comment">// &#123;1, 3, 5, 7, 9&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 二分查找 (数组必须已排序)</span></span><br><span class="line"><span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> Arrays.binarySearch(numbers, <span class="number">5</span>);  <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 填充数组</span></span><br><span class="line">Arrays.fill(numbers, <span class="number">0</span>);  <span class="comment">// 所有元素变为0</span></span><br></pre></td></tr></table></figure><p>Arrays.sort()方法和Arrays.binarySearch()方法的作用和用法</p><ul><li><code>Arrays.sort()</code>：对数组进行排序。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] numbers = &#123;<span class="number">5</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">7</span>&#125;;</span><br><span class="line">Arrays.sort(numbers);  <span class="comment">// &#123;1, 3, 5, 7, 9&#125;</span></span><br></pre></td></tr></table></figure></li><li><code>Arrays.binarySearch()</code>：在已排序的数组中进行二分查找。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] numbers = &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>&#125;;</span><br><span class="line"><span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> Arrays.binarySearch(numbers, <span class="number">5</span>);  <span class="comment">// 2</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="数组原理和内存分配"><a href="#数组原理和内存分配" class="headerlink" title="数组原理和内存分配"></a>数组原理和内存分配</h2><h3 id="1-数组原理"><a href="#1-数组原理" class="headerlink" title="1. 数组原理"></a>1. 数组原理</h3><p>数组是一种数据结构，用于存储相同类型的多个元素。在内存中，数组是一块连续的内存空间，每个元素占用相同的内存空间。数组内存空间占用大小和数组类型和数组长度有关</p><h3 id="2-内存分配"><a href="#2-内存分配" class="headerlink" title="2. 内存分配"></a>2. 内存分配</h3><ol><li><strong>静态分配</strong>：在编译时就确定数组的大小，数组的大小在程序运行期间不会改变。</li><li><strong>动态分配</strong>：在程序运行期间确定数组的大小，可以使用<code>new</code>关键字来动态分配数组。</li></ol><p>*<strong>分配图和在内存中的运行方式</strong>(我很少用图，不是自己做的就随便搞)</p><p><img src="https://i-blog.csdnimg.cn/direct/646745a6aac84c359770d1d8b05cb00d.png" alt="image.png"></p><p>两个数组指向不同的空间:<br><img src="https://i-blog.csdnimg.cn/direct/bafc0e80474d4c10968c4a1d09109dee.png" alt="image.png"></p><p>两个数组执行同一个空间:<br><img src="https://i-blog.csdnimg.cn/direct/0e963a3260934156a996e5620af2f5b8.png" alt="image.png"></p><h3 id="3-数组的内存布局"><a href="#3-数组的内存布局" class="headerlink" title="3. 数组的内存布局"></a>3. 数组的内存布局</h3><p>数组的内存布局如下：</p><ul><li><strong>数组名</strong>：指向数组的首地址。</li><li><strong>元素</strong>：数组中的每个元素占用相同的内存空间。</li><li><strong>索引</strong>：数组中的每个元素都有一个索引，索引从0开始，最大索引为数组长度减1。</li></ul><h2 id="三、多维数组"><a href="#三、多维数组" class="headerlink" title="三、多维数组"></a>三、多维数组</h2><h3 id="1-二维数组"><a href="#1-二维数组" class="headerlink" title="1. 二维数组"></a>1. 二维数组</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明和初始化二维数组</span></span><br><span class="line"><span class="type">int</span>[][] matrix1 = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>][<span class="number">4</span>];  <span class="comment">// 3行4列</span></span><br><span class="line"><span class="type">int</span>[][] matrix2 = &#123;&#123;<span class="number">1</span>, <span class="number">2</span>&#125;, &#123;<span class="number">3</span>, <span class="number">4</span>&#125;, &#123;<span class="number">5</span>, <span class="number">6</span>&#125;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不规则数组</span></span><br><span class="line"><span class="type">int</span>[][] irregular = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>][];</span><br><span class="line">irregular[<span class="number">0</span>] = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>];</span><br><span class="line">irregular[<span class="number">1</span>] = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>];</span><br><span class="line">irregular[<span class="number">2</span>] = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 访问二维数组元素</span></span><br><span class="line"><span class="type">int</span> <span class="variable">value</span> <span class="operator">=</span> matrix2[<span class="number">1</span>][<span class="number">1</span>];  <span class="comment">// 4</span></span><br></pre></td></tr></table></figure><h3 id="2-多维数组遍历"><a href="#2-多维数组遍历" class="headerlink" title="2. 多维数组遍历"></a>2. 多维数组遍历</h3><p>有些时候对自己好点，不是矩阵就尽量不要用嵌套循环，因为嵌套循环会导致代码可读性下降，而且效率也不高。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[][] matrix = &#123;&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;, &#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;, &#123;<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>&#125;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 嵌套for循环遍历</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; matrix.length; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; matrix[i].length; j++) &#123;</span><br><span class="line">        System.out.print(matrix[i][j] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 增强for循环遍历</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span>[] row : matrix) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> num : row) &#123;</span><br><span class="line">        System.out.print(num + <span class="string">&quot; &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四、Arrays-工具类"><a href="#四、Arrays-工具类" class="headerlink" title="四、Arrays 工具类"></a>四、Arrays 工具类</h2><h3 id="1-常用方法"><a href="#1-常用方法" class="headerlink" title="1. 常用方法"></a>1. 常用方法</h3><table><thead><tr><th>方法</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td><code>sort()</code></td><td>数组排序</td><td><code>Arrays.sort(arr)</code></td></tr><tr><td><code>binarySearch()</code></td><td>二分查找</td><td><code>Arrays.binarySearch(arr, key)</code></td></tr><tr><td><code>equals()</code></td><td>比较数组</td><td><code>Arrays.equals(arr1, arr2)</code></td></tr><tr><td><code>fill()</code></td><td>填充数组</td><td><code>Arrays.fill(arr, value)</code></td></tr><tr><td><code>copyOf()</code></td><td>复制数组</td><td><code>Arrays.copyOf(arr, newLength)</code></td></tr><tr><td><code>toString()</code></td><td>数组转字符串</td><td><code>Arrays.toString(arr)</code></td></tr><tr><td><code>asList()</code></td><td>数组转List</td><td><code>Arrays.asList(arr)</code></td></tr></tbody></table><p>这是不是重复了，但是没问题，反正是速查</p><h3 id="2-使用示例"><a href="#2-使用示例" class="headerlink" title="2. 使用示例"></a>2. 使用示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] numbers = &#123;<span class="number">5</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">7</span>&#125;;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 排序</span></span><br><span class="line">        Arrays.sort(numbers);  <span class="comment">// [1, 3, 5, 7, 9]</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 搜索</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> Arrays.binarySearch(numbers, <span class="number">5</span>);  <span class="comment">// 2</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 比较</span></span><br><span class="line">        <span class="type">int</span>[] copy = Arrays.copyOf(numbers, numbers.length);</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isEqual</span> <span class="operator">=</span> Arrays.equals(numbers, copy);  <span class="comment">// true</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 填充</span></span><br><span class="line">        Arrays.fill(copy, <span class="number">0</span>);  <span class="comment">// [0, 0, 0, 0, 0]</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 转字符串</span></span><br><span class="line">        System.out.println(Arrays.toString(numbers));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="五、实际应用示例"><a href="#五、实际应用示例" class="headerlink" title="五、实际应用示例"></a>五、实际应用示例</h2><h3 id="1-查找数组中的最大值"><a href="#1-查找数组中的最大值" class="headerlink" title="1. 查找数组中的最大值"></a>1. 查找数组中的最大值</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayMax</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">findMax</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr == <span class="literal">null</span> || arr.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;数组不能为空&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> arr[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[i] &gt; max) &#123;</span><br><span class="line">                max = arr[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] numbers = &#123;<span class="number">12</span>, <span class="number">45</span>, <span class="number">67</span>, <span class="number">89</span>, <span class="number">34</span>, <span class="number">23</span>&#125;;</span><br><span class="line">        System.out.println(<span class="string">&quot;最大值: &quot;</span> + findMax(numbers));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>举一反三：</strong></p><ol><li>查找数组中的最小值</li><li>计算数组元素的平均值</li><li>查找数组中的某个元素</li><li>检查数组是否包含某个元素</li><li>统计数组中某个元素的出现次数</li><li>查找数组中的重复元素</li><li>查找数组中的缺失元素</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 查找数组中的最小值</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">findMin</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr == <span class="literal">null</span> || arr.length == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;数组不能为空&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> arr[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] &lt; min) &#123;</span><br><span class="line">            min = arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> min;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 计算数组元素的平均值</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">average</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr == <span class="literal">null</span> || arr.length == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;数组不能为空&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">double</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> num : arr) &#123;</span><br><span class="line">        sum += num;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum / arr.length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 查找数组中的某个元素</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">indexOf</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] == target) &#123;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>; <span class="comment">// 未找到</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 检查数组是否包含某个元素</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">contains</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> indexOf(arr, target) != -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5. 统计数组中某个元素的出现次数</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">countOccurrences</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> num : arr) &#123;</span><br><span class="line">        <span class="keyword">if</span> (num == target) &#123;</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 6. 查找数组中的重复元素</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Set&lt;Integer&gt; <span class="title function_">findDuplicates</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">    Set&lt;Integer&gt; seen = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">    Set&lt;Integer&gt; duplicates = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> num : arr) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!seen.add(num)) &#123;</span><br><span class="line">            duplicates.add(num);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> duplicates;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 7. 查找数组中的缺失元素（假设数组应包含1到n的所有数字）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;Integer&gt; <span class="title function_">findMissingNumbers</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="type">boolean</span>[] present = <span class="keyword">new</span> <span class="title class_">boolean</span>[n + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> num : arr) &#123;</span><br><span class="line">        present[num] = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    List&lt;Integer&gt; missing = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!present[i]) &#123;</span><br><span class="line">            missing.add(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> missing;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了方便使用，主函数调用以上函数也在这里提供：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] numbers = &#123;<span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">5</span>&#125;;</span><br><span class="line">System.out.println(<span class="string">&quot;最小值: &quot;</span> + findMin(numbers));</span><br><span class="line">System.out.println(<span class="string">&quot;平均值: &quot;</span> + average(numbers));</span><br><span class="line">System.out.println(<span class="string">&quot;5的位置: &quot;</span> + indexOf(numbers, <span class="number">5</span>));</span><br><span class="line">System.out.println(<span class="string">&quot;包含4吗? &quot;</span> + contains(numbers, <span class="number">4</span>));</span><br><span class="line">System.out.println(<span class="string">&quot;1出现的次数: &quot;</span> + countOccurrences(numbers, <span class="number">1</span>));</span><br><span class="line">System.out.println(<span class="string">&quot;重复元素: &quot;</span> + findDuplicates(numbers));</span><br><span class="line">System.out.println(<span class="string">&quot;缺失数字(1-9): &quot;</span> + findMissingNumbers(numbers, <span class="number">9</span>));</span><br></pre></td></tr></table></figure><p>典型案例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test24</span> &#123;</span><br><span class="line">    <span class="comment">//循环录入五个人的成绩，保存到数组中</span></span><br><span class="line">    <span class="comment">//求总分，最高分，平均分，最低分</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//最大值</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">finMax</span><span class="params">(<span class="type">int</span> arr[])</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr == <span class="literal">null</span> || arr.length == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;数组为空提示&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> arr[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; arr.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[i] &gt; max)&#123;</span><br><span class="line">                max = arr[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//最小值</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">findMin</span><span class="params">(<span class="type">int</span> arr[])</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr == <span class="literal">null</span> || arr.length == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;数组为空提示&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> arr[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;i &lt; arr.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[i] &lt; min)&#123;</span><br><span class="line">                min = arr[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> min;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//总分</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">sumMAX</span><span class="params">(<span class="type">int</span> arr[])</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr == <span class="literal">null</span> || arr.length == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;数组为空提示&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; arr.length;i++)&#123;</span><br><span class="line">            sum += arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//平均分</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">average</span><span class="params">(<span class="type">int</span> arr[])</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="type">double</span>)sumMAX(arr) / arr.length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> arr[] = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">5</span>];</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 循环录入成绩</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            System.out.print(<span class="string">&quot;请输入第&quot;</span> + (i+<span class="number">1</span>) + <span class="string">&quot;个成绩: &quot;</span>);</span><br><span class="line">            arr[i] = scanner.nextInt();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输出结果</span></span><br><span class="line">        System.out.println(<span class="string">&quot;最高分: &quot;</span> + finMax(arr));</span><br><span class="line">        System.out.println(<span class="string">&quot;最低分: &quot;</span> + findMin(arr));</span><br><span class="line">        System.out.println(<span class="string">&quot;总分: &quot;</span> + sumMAX(arr));</span><br><span class="line">        System.out.println(<span class="string">&quot;平均分: &quot;</span> + average(arr));</span><br><span class="line"></span><br><span class="line">        scanner.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-数组反转"><a href="#2-数组反转" class="headerlink" title="2. 数组反转"></a>2. 数组反转</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayReverse</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">reverse</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, j = arr.length - <span class="number">1</span>; i &lt; j; i++, j--) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[i];</span><br><span class="line">            arr[i] = arr[j];</span><br><span class="line">            arr[j] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] numbers = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line">        System.out.println(<span class="string">&quot;原始数组: &quot;</span> + Arrays.toString(numbers));</span><br><span class="line">        reverse(numbers);</span><br><span class="line">        System.out.println(<span class="string">&quot;反转后: &quot;</span> + Arrays.toString(numbers));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-矩阵转置"><a href="#3-矩阵转置" class="headerlink" title="3. 矩阵转置"></a>3. 矩阵转置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MatrixTranspose</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[][] transpose(<span class="type">int</span>[][] matrix) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">rows</span> <span class="operator">=</span> matrix.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">cols</span> <span class="operator">=</span> matrix[<span class="number">0</span>].length;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span>[][] result = <span class="keyword">new</span> <span class="title class_">int</span>[cols][rows];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; rows; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; cols; j++) &#123;</span><br><span class="line">                result[j][i] = matrix[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[][] matrix = &#123;&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;, &#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;&#125;;</span><br><span class="line">        System.out.println(<span class="string">&quot;原始矩阵:&quot;</span>);</span><br><span class="line">        printMatrix(matrix);</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span>[][] transposed = transpose(matrix);</span><br><span class="line">        System.out.println(<span class="string">&quot;转置矩阵:&quot;</span>);</span><br><span class="line">        printMatrix(transposed);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printMatrix</span><span class="params">(<span class="type">int</span>[][] matrix)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] row : matrix) &#123;</span><br><span class="line">            System.out.println(Arrays.toString(row));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="六、注意事项与最佳实践"><a href="#六、注意事项与最佳实践" class="headerlink" title="六、注意事项与最佳实践"></a>六、注意事项与最佳实践</h2><p>这里的操作都是些好习惯，建议提前判断</p><ol><li><p><strong>数组边界检查</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">5</span>];</span><br><span class="line"><span class="comment">// arr[5] = 10;  // 会抛出ArrayIndexOutOfBoundsException</span></span><br></pre></td></tr></table></figure></li><li><p><strong>数组长度固定</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数组创建后长度不可变</span></span><br><span class="line"><span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">5</span>];</span><br><span class="line"><span class="comment">// arr.length = 10;  // 编译错误</span></span><br></pre></td></tr></table></figure></li><li><p><strong>默认初始化值</strong>：</p><ul><li>数值类型：0</li><li>boolean：false</li><li>对象引用：null</li></ul></li><li><p><strong>数组与集合的选择</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 固定大小、性能要求高 → 使用数组</span></span><br><span class="line"><span class="comment">// 需要动态大小、丰富操作 → 使用ArrayList等集合</span></span><br></pre></td></tr></table></figure></li><li><p><strong>多维数组内存布局</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Java中的多维数组实际上是数组的数组</span></span><br><span class="line"><span class="type">int</span>[][] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>][];</span><br><span class="line">arr[<span class="number">0</span>] = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>];</span><br><span class="line">arr[<span class="number">1</span>] = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>];</span><br><span class="line">arr[<span class="number">2</span>] = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">4</span>];</span><br></pre></td></tr></table></figure></li><li><p><strong>数组性能考虑</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 访问数组元素是O(1)时间复杂度</span></span><br><span class="line"><span class="comment">// 连续内存分配，缓存友好</span></span><br><span class="line"><span class="comment">// 适合数值计算等高性能场景</span></span><br></pre></td></tr></table></figure></li></ol><p>通过合理使用数组和Arrays工具类，可以高效地处理各种数据集合操作。对于<strong>固定大小的同类型数据集合</strong>，数组是最佳选择；对于需要动态调整大小的场景，应考虑使用Java集合框架中的类。</p><h1 id="Java-日期时间全面解析"><a href="#Java-日期时间全面解析" class="headerlink" title="Java 日期时间全面解析"></a>Java 日期时间全面解析</h1><p>Java 提供了多种处理日期和时间的类，包括传统的 <code>Date</code>、<code>Calendar</code> 和现代的 <code>java.time</code> 包（Java 8+）。下面我将系统地讲解 Java 日期时间处理的各种功能和使用场景。</p><h2 id="一、传统日期时间类"><a href="#一、传统日期时间类" class="headerlink" title="一、传统日期时间类"></a>一、传统日期时间类</h2><h3 id="1-Date-类"><a href="#1-Date-类" class="headerlink" title="1. Date 类"></a>1. Date 类</h3><p><code>Date</code> 类表示特定的瞬间，精确到毫秒。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DateExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建当前日期时间的Date对象</span></span><br><span class="line">        <span class="type">Date</span> <span class="variable">now</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        System.out.println(<span class="string">&quot;当前时间: &quot;</span> + now);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 创建指定时间戳的Date对象</span></span><br><span class="line">        <span class="type">Date</span> <span class="variable">specificDate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">1620000000000L</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;特定时间: &quot;</span> + specificDate);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 比较日期</span></span><br><span class="line">        System.out.println(<span class="string">&quot;now after specificDate? &quot;</span> + now.after(specificDate));</span><br><span class="line">        System.out.println(<span class="string">&quot;now before specificDate? &quot;</span> + now.before(specificDate));</span><br><span class="line">        System.out.println(<span class="string">&quot;now equals specificDate? &quot;</span> + now.equals(specificDate));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 获取时间戳</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">timestamp</span> <span class="operator">=</span> now.getTime();</span><br><span class="line">        System.out.println(<span class="string">&quot;时间戳: &quot;</span> + timestamp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-SimpleDateFormat-类"><a href="#2-SimpleDateFormat-类" class="headerlink" title="2. SimpleDateFormat 类"></a>2. SimpleDateFormat 类</h3><p>SimpleDateFormat 用于格式化和解析日期。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DateFormatExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Date</span> <span class="variable">now</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 创建格式化对象</span></span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">sdf1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">sdf2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy年MM月dd日 EEE a hh:mm:ss&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 格式化日期</span></span><br><span class="line">        System.out.println(<span class="string">&quot;格式1: &quot;</span> + sdf1.format(now));</span><br><span class="line">        System.out.println(<span class="string">&quot;格式2: &quot;</span> + sdf2.format(now));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 解析字符串为日期</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">dateStr</span> <span class="operator">=</span> <span class="string">&quot;2023-05-15 14:30:00&quot;</span>;</span><br><span class="line">            <span class="type">Date</span> <span class="variable">parsedDate</span> <span class="operator">=</span> sdf1.parse(dateStr);</span><br><span class="line">            System.out.println(<span class="string">&quot;解析后的日期: &quot;</span> + parsedDate);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-Calendar-类"><a href="#3-Calendar-类" class="headerlink" title="3. Calendar 类"></a>3. Calendar 类</h3><p>calendar 类用于处理日期和时间的字段，如年、月、日、时、分、秒等。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Calendar;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CalendarExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 获取Calendar实例</span></span><br><span class="line">        <span class="type">Calendar</span> <span class="variable">calendar</span> <span class="operator">=</span> Calendar.getInstance();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 设置特定日期</span></span><br><span class="line">        calendar.set(<span class="number">2023</span>, Calendar.MAY, <span class="number">15</span>, <span class="number">14</span>, <span class="number">30</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> calendar.getTime();</span><br><span class="line">        System.out.println(<span class="string">&quot;设置的日期: &quot;</span> + date);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 获取日期各部分</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">year</span> <span class="operator">=</span> calendar.get(Calendar.YEAR);</span><br><span class="line">        <span class="type">int</span> <span class="variable">month</span> <span class="operator">=</span> calendar.get(Calendar.MONTH) + <span class="number">1</span>; <span class="comment">// 月份从0开始</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">day</span> <span class="operator">=</span> calendar.get(Calendar.DAY_OF_MONTH);</span><br><span class="line">        <span class="type">int</span> <span class="variable">hour</span> <span class="operator">=</span> calendar.get(Calendar.HOUR_OF_DAY);</span><br><span class="line">        <span class="type">int</span> <span class="variable">minute</span> <span class="operator">=</span> calendar.get(Calendar.MINUTE);</span><br><span class="line">        System.out.printf(<span class="string">&quot;%d年%d月%d日 %d:%d\n&quot;</span>, year, month, day, hour, minute);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 日期计算</span></span><br><span class="line">        calendar.add(Calendar.DAY_OF_MONTH, <span class="number">7</span>); <span class="comment">// 加7天</span></span><br><span class="line">        calendar.add(Calendar.MONTH, -<span class="number">1</span>);       <span class="comment">// 减1个月</span></span><br><span class="line">        System.out.println(<span class="string">&quot;计算后的日期: &quot;</span> + calendar.getTime());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二、Java-8-日期时间-API"><a href="#二、Java-8-日期时间-API" class="headerlink" title="二、Java 8 日期时间 API"></a>二、Java 8 日期时间 API</h2><p>Java 8 引入了全新的日期时间 API (<code>java.time</code> 包)，解决了传统类的各种问题。</p><h3 id="1-主要类介绍"><a href="#1-主要类介绍" class="headerlink" title="1. 主要类介绍"></a>1. 主要类介绍</h3><table><thead><tr><th>类名</th><th>描述</th></tr></thead><tbody><tr><td><code>LocalDate</code></td><td>只包含日期，不包含时间</td></tr><tr><td><code>LocalTime</code></td><td>只包含时间，不包含日期</td></tr><tr><td><code>LocalDateTime</code></td><td>包含日期和时间</td></tr><tr><td><code>ZonedDateTime</code></td><td>包含时区的日期和时间</td></tr><tr><td><code>Instant</code></td><td>时间戳（精确到纳秒）</td></tr><tr><td><code>Duration</code></td><td>时间段，以秒和纳秒为单位</td></tr><tr><td><code>Period</code></td><td>时间段，以年、月、日为单位</td></tr><tr><td><code>DateTimeFormatter</code></td><td>日期时间格式化类</td></tr></tbody></table><h3 id="2-基本使用示例"><a href="#2-基本使用示例" class="headerlink" title="2. 基本使用示例"></a>2. 基本使用示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.time.*;</span><br><span class="line"><span class="keyword">import</span> java.time.format.DateTimeFormatter;</span><br><span class="line"><span class="keyword">import</span> java.time.temporal.ChronoUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Java8DateTime</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 获取当前日期时间</span></span><br><span class="line">        <span class="type">LocalDate</span> <span class="variable">currentDate</span> <span class="operator">=</span> LocalDate.now();</span><br><span class="line">        <span class="type">LocalTime</span> <span class="variable">currentTime</span> <span class="operator">=</span> LocalTime.now();</span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">currentDateTime</span> <span class="operator">=</span> LocalDateTime.now();</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;当前日期: &quot;</span> + currentDate);</span><br><span class="line">        System.out.println(<span class="string">&quot;当前时间: &quot;</span> + currentTime);</span><br><span class="line">        System.out.println(<span class="string">&quot;当前日期时间: &quot;</span> + currentDateTime);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 创建特定日期时间</span></span><br><span class="line">        <span class="type">LocalDate</span> <span class="variable">birthDate</span> <span class="operator">=</span> LocalDate.of(<span class="number">1990</span>, Month.MAY, <span class="number">15</span>);</span><br><span class="line">        <span class="type">LocalTime</span> <span class="variable">meetingTime</span> <span class="operator">=</span> LocalTime.of(<span class="number">14</span>, <span class="number">30</span>);</span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">projectDeadline</span> <span class="operator">=</span> LocalDateTime.of(<span class="number">2023</span>, <span class="number">12</span>, <span class="number">31</span>, <span class="number">23</span>, <span class="number">59</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 日期时间计算</span></span><br><span class="line">        <span class="type">LocalDate</span> <span class="variable">nextWeek</span> <span class="operator">=</span> currentDate.plus(<span class="number">1</span>, ChronoUnit.WEEKS);</span><br><span class="line">        <span class="type">LocalTime</span> <span class="variable">twoHoursLater</span> <span class="operator">=</span> currentTime.plusHours(<span class="number">2</span>);</span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">yesterdaySameTime</span> <span class="operator">=</span> currentDateTime.minusDays(<span class="number">1</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 日期时间比较</span></span><br><span class="line">        System.out.println(<span class="string">&quot;今天在生日之后? &quot;</span> + currentDate.isAfter(birthDate));</span><br><span class="line">        System.out.println(<span class="string">&quot;现在在会议时间之前? &quot;</span> + currentTime.isBefore(meetingTime));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 格式化输出</span></span><br><span class="line">        <span class="type">DateTimeFormatter</span> <span class="variable">formatter</span> <span class="operator">=</span> DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy/MM/dd HH:mm:ss&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">formattedDateTime</span> <span class="operator">=</span> currentDateTime.format(formatter);</span><br><span class="line">        System.out.println(<span class="string">&quot;格式化日期时间: &quot;</span> + formattedDateTime);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 解析字符串</span></span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">parsedDateTime</span> <span class="operator">=</span> LocalDateTime.parse(<span class="string">&quot;2023/05/15 14:30:00&quot;</span>, formatter);</span><br><span class="line">        System.out.println(<span class="string">&quot;解析后的日期时间: &quot;</span> + parsedDateTime);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 计算时间差</span></span><br><span class="line">        <span class="type">Period</span> <span class="variable">age</span> <span class="operator">=</span> Period.between(birthDate, currentDate);</span><br><span class="line">        System.out.printf(<span class="string">&quot;年龄: %d岁%d个月%d天\n&quot;</span>, age.getYears(), age.getMonths(), age.getDays());</span><br><span class="line">        </span><br><span class="line">        <span class="type">Duration</span> <span class="variable">duration</span> <span class="operator">=</span> Duration.between(meetingTime, currentTime);</span><br><span class="line">        System.out.println(<span class="string">&quot;距离会议时间还有(秒): &quot;</span> + duration.getSeconds());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、实际应用示例"><a href="#三、实际应用示例" class="headerlink" title="三、实际应用示例"></a>三、实际应用示例</h2><h3 id="1-计算两个日期之间的天数"><a href="#1-计算两个日期之间的天数" class="headerlink" title="1. 计算两个日期之间的天数"></a>1. 计算两个日期之间的天数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.time.LocalDate;</span><br><span class="line"><span class="keyword">import</span> java.time.temporal.ChronoUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DaysBetweenDates</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">LocalDate</span> <span class="variable">startDate</span> <span class="operator">=</span> LocalDate.of(<span class="number">2023</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="type">LocalDate</span> <span class="variable">endDate</span> <span class="operator">=</span> LocalDate.of(<span class="number">2023</span>, <span class="number">12</span>, <span class="number">31</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="type">long</span> <span class="variable">daysBetween</span> <span class="operator">=</span> ChronoUnit.DAYS.between(startDate, endDate);</span><br><span class="line">        System.out.println(<span class="string">&quot;2023年有 &quot;</span> + daysBetween + <span class="string">&quot; 天&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-判断闰年"><a href="#2-判断闰年" class="headerlink" title="2. 判断闰年"></a>2. 判断闰年</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.time.LocalDate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeapYearCheck</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] years = &#123;<span class="number">2000</span>, <span class="number">2020</span>, <span class="number">2023</span>, <span class="number">2100</span>&#125;;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> year : years) &#123;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">isLeap</span> <span class="operator">=</span> LocalDate.of(year, <span class="number">1</span>, <span class="number">1</span>).isLeapYear();</span><br><span class="line">            System.out.println(year + <span class="string">&quot; 年是闰年吗? &quot;</span> + isLeap);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-工作时间计算器"><a href="#3-工作时间计算器" class="headerlink" title="3. 工作时间计算器"></a>3. 工作时间计算器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.time.Duration;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalTime;</span><br><span class="line"><span class="keyword">import</span> java.time.format.DateTimeFormatter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WorkingHoursCalculator</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">DateTimeFormatter</span> <span class="variable">timeFormatter</span> <span class="operator">=</span> DateTimeFormatter.ofPattern(<span class="string">&quot;HH:mm&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="type">LocalTime</span> <span class="variable">startTime</span> <span class="operator">=</span> LocalTime.of(<span class="number">9</span>, <span class="number">0</span>);  <span class="comment">// 上班时间 09:00</span></span><br><span class="line">        <span class="type">LocalTime</span> <span class="variable">endTime</span> <span class="operator">=</span> LocalTime.of(<span class="number">18</span>, <span class="number">30</span>);  <span class="comment">// 下班时间 18:30</span></span><br><span class="line">        <span class="type">LocalTime</span> <span class="variable">lunchStart</span> <span class="operator">=</span> LocalTime.of(<span class="number">12</span>, <span class="number">0</span>);  <span class="comment">// 午餐开始 12:00</span></span><br><span class="line">        <span class="type">LocalTime</span> <span class="variable">lunchEnd</span> <span class="operator">=</span> LocalTime.of(<span class="number">13</span>, <span class="number">30</span>);  <span class="comment">// 午餐结束 13:30</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 计算工作时间</span></span><br><span class="line">        <span class="type">Duration</span> <span class="variable">morningWork</span> <span class="operator">=</span> Duration.between(startTime, lunchStart);</span><br><span class="line">        <span class="type">Duration</span> <span class="variable">afternoonWork</span> <span class="operator">=</span> Duration.between(lunchEnd, endTime);</span><br><span class="line">        <span class="type">Duration</span> <span class="variable">totalWork</span> <span class="operator">=</span> morningWork.plus(afternoonWork);</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;上午工作时间: &quot;</span> + morningWork.toHours() + <span class="string">&quot;小时&quot;</span> + </span><br><span class="line">                          morningWork.toMinutesPart() + <span class="string">&quot;分钟&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;下午工作时间: &quot;</span> + afternoonWork.toHours() + <span class="string">&quot;小时&quot;</span> + </span><br><span class="line">                          afternoonWork.toMinutesPart() + <span class="string">&quot;分钟&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;总工作时间: &quot;</span> + totalWork.toHours() + <span class="string">&quot;小时&quot;</span> + </span><br><span class="line">                          totalWork.toMinutesPart() + <span class="string">&quot;分钟&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四、注意事项与最佳实践"><a href="#四、注意事项与最佳实践" class="headerlink" title="四、注意事项与最佳实践"></a>四、注意事项与最佳实践</h2><ol><li><p><strong>时区处理</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用时区敏感的类处理跨时区应用</span></span><br><span class="line"><span class="type">ZonedDateTime</span> <span class="variable">beijingTime</span> <span class="operator">=</span> ZonedDateTime.now(ZoneId.of(<span class="string">&quot;Asia/Shanghai&quot;</span>));</span><br><span class="line"><span class="type">ZonedDateTime</span> <span class="variable">newYorkTime</span> <span class="operator">=</span> beijingTime.withZoneSameInstant(ZoneId.of(<span class="string">&quot;America/New_York&quot;</span>));</span><br><span class="line">System.out.println(<span class="string">&quot;北京时间: &quot;</span> + beijingTime);</span><br><span class="line">System.out.println(<span class="string">&quot;纽约时间: &quot;</span> + newYorkTime);</span><br></pre></td></tr></table></figure></li><li><p><strong>新旧API转换</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Date 转 Instant</span></span><br><span class="line"><span class="type">Date</span> <span class="variable">legacyDate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="type">Instant</span> <span class="variable">instant</span> <span class="operator">=</span> legacyDate.toInstant();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Instant 转 Date</span></span><br><span class="line"><span class="type">Date</span> <span class="variable">newDate</span> <span class="operator">=</span> Date.from(instant);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Calendar 转 LocalDateTime</span></span><br><span class="line"><span class="type">Calendar</span> <span class="variable">calendar</span> <span class="operator">=</span> Calendar.getInstance();</span><br><span class="line"><span class="type">LocalDateTime</span> <span class="variable">ldt</span> <span class="operator">=</span> LocalDateTime.ofInstant(calendar.toInstant(), ZoneId.systemDefault());</span><br></pre></td></tr></table></figure></li><li><p><strong>日期格式化线程安全</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// DateTimeFormatter 是线程安全的，可以定义为常量</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">DateTimeFormatter</span> <span class="variable">DATE_FORMATTER</span> <span class="operator">=</span> </span><br><span class="line">    DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy-MM-dd&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// SimpleDateFormat 不是线程安全的，需要每次创建新实例或同步使用</span></span><br></pre></td></tr></table></figure></li><li><p><strong>性能考虑</strong>：</p><ul><li>对于高频率的日期操作，使用 <code>java.time</code> 包性能更好</li><li>避免在循环中重复创建格式化对象</li></ul></li><li><p><strong>日期验证</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    LocalDate.parse(<span class="string">&quot;2023-02-30&quot;</span>);  <span class="comment">// 无效日期会抛出DateTimeParseException</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;无效日期&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>时间精度</strong>：</p><ul><li><code>Instant</code> 精确到纳秒</li><li>传统 <code>Date</code> 精确到毫秒</li><li>根据需求选择合适的时间精度</li></ul></li></ol><p>通过合理使用 Java 的日期时间 API，可以准确、高效地处理各种日期时间相关的业务需求。对于新项目，建议直接使用 Java 8 的 <code>java.time</code> 包；对于维护旧系统，可能需要与传统 API 交互。</p><h1 id="Java-正则表达式全面解析"><a href="#Java-正则表达式全面解析" class="headerlink" title="Java 正则表达式全面解析"></a>Java 正则表达式全面解析</h1><p>正则表达式是处理字符串的强大工具，Java 通过 <code>java.util.regex</code> 包提供了完整的正则表达式支持。下面我将系统地讲解 Java 中正则表达式的各种功能和使用场景。</p><h2 id="一、正则表达式基础"><a href="#一、正则表达式基础" class="headerlink" title="一、正则表达式基础"></a>一、正则表达式基础</h2><p><strong>正则表达式：</strong>正则表达式是一种用于描述字符串模式的工具，它由字符和特殊字符组成。</p><h3 id="1-Pattern-和-Matcher-类"><a href="#1-Pattern-和-Matcher-类" class="headerlink" title="1. Pattern 和 Matcher 类"></a>1. Pattern 和 Matcher 类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.regex.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RegexBasic</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">text</span> <span class="operator">=</span> <span class="string">&quot;Hello, my email is example@email.com and my phone is 123-456-7890&quot;</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 1. 使用Pattern.matches()简单匹配</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isMatch</span> <span class="operator">=</span> Pattern.matches(<span class="string">&quot;.*email.*&quot;</span>, text);</span><br><span class="line">        System.out.println(<span class="string">&quot;Contains &#x27;email&#x27;? &quot;</span> + isMatch);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 2. 使用Pattern和Matcher</span></span><br><span class="line">        <span class="type">Pattern</span> <span class="variable">emailPattern</span> <span class="operator">=</span> Pattern.compile(<span class="string">&quot;\\w+@\\w+\\.\\w+&quot;</span>);</span><br><span class="line">        <span class="type">Matcher</span> <span class="variable">emailMatcher</span> <span class="operator">=</span> emailPattern.matcher(text);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 查找所有匹配</span></span><br><span class="line">        <span class="keyword">while</span> (emailMatcher.find()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Found email: &quot;</span> + emailMatcher.group());</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 3. 电话号码匹配</span></span><br><span class="line">        <span class="type">Pattern</span> <span class="variable">phonePattern</span> <span class="operator">=</span> Pattern.compile(<span class="string">&quot;\\d&#123;3&#125;-\\d&#123;3&#125;-\\d&#123;4&#125;&quot;</span>);</span><br><span class="line">        <span class="type">Matcher</span> <span class="variable">phoneMatcher</span> <span class="operator">=</span> phonePattern.matcher(text);</span><br><span class="line">        <span class="keyword">if</span> (phoneMatcher.find()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Phone number: &quot;</span> + phoneMatcher.group());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-常用正则表达式元字符"><a href="#2-常用正则表达式元字符" class="headerlink" title="2. 常用正则表达式元字符"></a>2. 常用正则表达式元字符</h3><p>整合整合，说实话很少用到查的QAQ</p><table><thead><tr><th>元字符</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td><code>.</code></td><td>匹配任意字符</td><td><code>a.c</code> 匹配 “abc”, “a1c” 等</td></tr><tr><td><code>\d</code></td><td>数字 [0-9]</td><td><code>\d\d</code> 匹配 “12”, “34” 等</td></tr><tr><td><code>\D</code></td><td>非数字 [^0-9]</td><td><code>\D\D</code> 匹配 “ab”, “#$” 等</td></tr><tr><td><code>\w</code></td><td>单词字符 [a-zA-Z0-9_]</td><td><code>\w+</code> 匹配单词</td></tr><tr><td><code>\W</code></td><td>非单词字符</td><td><code>\W</code> 匹配 “@”, “!” 等</td></tr><tr><td><code>\s</code></td><td>空白字符 [ \t\n\x0B\f\r]</td><td><code>\s+</code> 匹配空白</td></tr><tr><td><code>\S</code></td><td>非空白字符</td><td><code>\S+</code> 匹配非空白序列</td></tr><tr><td><code>^</code></td><td>行开头</td><td><code>^Java</code> 匹配行开头的 “Java”</td></tr><tr><td><code>$</code></td><td>行结尾</td><td><code>end$</code> 匹配行结尾的 “end”</td></tr><tr><td><code>*</code></td><td>0次或多次</td><td><code>a*b</code> 匹配 “b”, “ab”, “aab” 等</td></tr><tr><td><code>+</code></td><td>1次或多次</td><td><code>a+b</code> 匹配 “ab”, “aab” 但不匹配 “b”</td></tr><tr><td><code>?</code></td><td>0次或1次</td><td><code>a?b</code> 匹配 “b”, “ab”</td></tr><tr><td><code>&#123;n&#125;</code></td><td>恰好n次</td><td><code>a&#123;3&#125;</code> 匹配 “aaa”</td></tr><tr><td><code>&#123;n,&#125;</code></td><td>至少n次</td><td><code>a&#123;2,&#125;</code> 匹配 “aa”, “aaa” 等</td></tr><tr><td><code>&#123;n,m&#125;</code></td><td>n到m次</td><td><code>a&#123;2,4&#125;</code> 匹配 “aa”, “aaa”, “aaaa”</td></tr></tbody></table><h2 id="二、分组与捕获"><a href="#二、分组与捕获" class="headerlink" title="二、分组与捕获"></a>二、分组与捕获</h2><p>分组和捕获作用分别是：</p><ol><li><p><strong>分组 (Grouping)：</strong></p><ul><li>分组用于将正则表达式中的子表达式组合起来，形成一个逻辑单元。</li><li>分组可以嵌套，形成复杂的匹配模式。</li><li>分组可以通过 <code>()</code> 来定义。</li></ul></li><li><p><strong>捕获 (Capturing)：</strong></p><ul><li>捕获用于从匹配的字符串中提取特定的子串。</li></ul></li></ol><p>每到这个时候我都会感叹自己不会说人话</p><h3 id="1-捕获组"><a href="#1-捕获组" class="headerlink" title="1. 捕获组"></a>1. 捕获组</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.regex.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RegexGroups</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">dateStr</span> <span class="operator">=</span> <span class="string">&quot;2023-05-15, 1999-12-31&quot;</span>;</span><br><span class="line">        <span class="type">Pattern</span> <span class="variable">datePattern</span> <span class="operator">=</span> Pattern.compile(<span class="string">&quot;(\\d&#123;4&#125;)-(\\d&#123;2&#125;)-(\\d&#123;2&#125;)&quot;</span>);</span><br><span class="line">        <span class="type">Matcher</span> <span class="variable">dateMatcher</span> <span class="operator">=</span> datePattern.matcher(dateStr);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (dateMatcher.find()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Full match: &quot;</span> + dateMatcher.group(<span class="number">0</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;Year: &quot;</span> + dateMatcher.group(<span class="number">1</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;Month: &quot;</span> + dateMatcher.group(<span class="number">2</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;Day: &quot;</span> + dateMatcher.group(<span class="number">3</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 命名捕获组 (Java 7+)</span></span><br><span class="line">        <span class="type">Pattern</span> <span class="variable">namedPattern</span> <span class="operator">=</span> Pattern.compile(<span class="string">&quot;(?&lt;year&gt;\\d&#123;4&#125;)-(?&lt;month&gt;\\d&#123;2&#125;)-(?&lt;day&gt;\\d&#123;2&#125;)&quot;</span>);</span><br><span class="line">        <span class="type">Matcher</span> <span class="variable">namedMatcher</span> <span class="operator">=</span> namedPattern.matcher(dateStr);</span><br><span class="line">        <span class="keyword">while</span> (namedMatcher.find()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;\nNamed groups:&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;Year: &quot;</span> + namedMatcher.group(<span class="string">&quot;year&quot;</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;Month: &quot;</span> + namedMatcher.group(<span class="string">&quot;month&quot;</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;Day: &quot;</span> + namedMatcher.group(<span class="string">&quot;day&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上代码实现的作用是；</p><ol><li>匹配日期字符串中的年、月、日，并输出每个部分。</li><li>使用命名捕获组，通过名称访问捕获的子串。</li></ol><h3 id="2-非捕获组"><a href="#2-非捕获组" class="headerlink" title="2. 非捕获组"></a>2. 非捕获组</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// (?:pattern) - 非捕获组</span></span><br><span class="line"><span class="type">Pattern</span> <span class="variable">pattern</span> <span class="operator">=</span> Pattern.compile(<span class="string">&quot;(?:Mr|Ms|Mrs)\\.\\s(\\w+)&quot;</span>);</span><br><span class="line"><span class="type">Matcher</span> <span class="variable">matcher</span> <span class="operator">=</span> pattern.matcher(<span class="string">&quot;Mr. Smith and Ms. Doe&quot;</span>);</span><br><span class="line"><span class="keyword">while</span> (matcher.find()) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Name: &quot;</span> + matcher.group(<span class="number">1</span>));  <span class="comment">// group(0)是整个匹配，group(1)是名字</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、边界匹配与零宽断言"><a href="#三、边界匹配与零宽断言" class="headerlink" title="三、边界匹配与零宽断言"></a>三、边界匹配与零宽断言</h2><h3 id="1-边界匹配"><a href="#1-边界匹配" class="headerlink" title="1. 边界匹配"></a>1. 边界匹配</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// \b - 单词边界</span></span><br><span class="line"><span class="type">Pattern</span> <span class="variable">wordBoundary</span> <span class="operator">=</span> Pattern.compile(<span class="string">&quot;\\bcat\\b&quot;</span>);</span><br><span class="line"><span class="type">Matcher</span> <span class="variable">wbMatcher</span> <span class="operator">=</span> wordBoundary.matcher(<span class="string">&quot;cat concatenate cat&quot;</span>);</span><br><span class="line"><span class="keyword">while</span> (wbMatcher.find()) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Found at: &quot;</span> + wbMatcher.start());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ^ $ - 行开始和结束</span></span><br><span class="line"><span class="type">Pattern</span> <span class="variable">linePattern</span> <span class="operator">=</span> Pattern.compile(<span class="string">&quot;^\\d+$&quot;</span>);  <span class="comment">// 整行都是数字</span></span><br><span class="line">System.out.println(<span class="string">&quot;123 matches: &quot;</span> + linePattern.matcher(<span class="string">&quot;123&quot;</span>).matches());</span><br><span class="line">System.out.println(<span class="string">&quot;123a matches: &quot;</span> + linePattern.matcher(<span class="string">&quot;123a&quot;</span>).matches());</span><br></pre></td></tr></table></figure><h3 id="2-零宽断言"><a href="#2-零宽断言" class="headerlink" title="2. 零宽断言"></a>2. 零宽断言</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 正向先行断言 (?=pattern)</span></span><br><span class="line"><span class="type">Pattern</span> <span class="variable">positiveLookahead</span> <span class="operator">=</span> Pattern.compile(<span class="string">&quot;\\w+(?=\\=)&quot;</span>);</span><br><span class="line"><span class="type">Matcher</span> <span class="variable">plaMatcher</span> <span class="operator">=</span> positiveLookahead.matcher(<span class="string">&quot;key=value&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (plaMatcher.find()) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Key before &#x27;=&#x27;: &quot;</span> + plaMatcher.group());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 负向先行断言 (?!pattern)</span></span><br><span class="line"><span class="type">Pattern</span> <span class="variable">negativeLookahead</span> <span class="operator">=</span> Pattern.compile(<span class="string">&quot;\\d&#123;3&#125;(?!-)&quot;</span>);</span><br><span class="line"><span class="type">Matcher</span> <span class="variable">nlaMatcher</span> <span class="operator">=</span> negativeLookahead.matcher(<span class="string">&quot;123-456 789&quot;</span>);</span><br><span class="line"><span class="keyword">while</span> (nlaMatcher.find()) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;3 digits not followed by &#x27;-&#x27;: &quot;</span> + nlaMatcher.group());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正向后行断言 (?&lt;=pattern)</span></span><br><span class="line"><span class="type">Pattern</span> <span class="variable">positiveLookbehind</span> <span class="operator">=</span> Pattern.compile(<span class="string">&quot;(?&lt;=\\$)\\d+&quot;</span>);</span><br><span class="line"><span class="type">Matcher</span> <span class="variable">plbMatcher</span> <span class="operator">=</span> positiveLookbehind.matcher(<span class="string">&quot;Price: $100&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (plbMatcher.find()) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Number after &#x27;$&#x27;: &quot;</span> + plbMatcher.group());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 负向后行断言 (?&lt;!pattern)</span></span><br><span class="line"><span class="type">Pattern</span> <span class="variable">negativeLookbehind</span> <span class="operator">=</span> Pattern.compile(<span class="string">&quot;(?&lt;!\\$)\\d+&quot;</span>);</span><br><span class="line"><span class="type">Matcher</span> <span class="variable">nlbMatcher</span> <span class="operator">=</span> negativeLookbehind.matcher(<span class="string">&quot;Price: $100 200&quot;</span>);</span><br><span class="line"><span class="keyword">while</span> (nlbMatcher.find()) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Number not after &#x27;$&#x27;: &quot;</span> + nlbMatcher.group());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四、常用正则表达式示例"><a href="#四、常用正则表达式示例" class="headerlink" title="四、常用正则表达式示例"></a>四、常用正则表达式示例</h2><h3 id="1-验证电子邮件"><a href="#1-验证电子邮件" class="headerlink" title="1. 验证电子邮件"></a>1. 验证电子邮件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmailValidator</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">EMAIL_REGEX</span> <span class="operator">=</span> </span><br><span class="line">        <span class="string">&quot;^[a-zA-Z0-9_+&amp;*-]+(?:\\.[a-zA-Z0-9_+&amp;*-]+)*@&quot;</span> +</span><br><span class="line">        <span class="string">&quot;(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z]&#123;2,7&#125;$&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(String email)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Pattern.compile(EMAIL_REGEX).matcher(email).matches();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        String[] emails = &#123;</span><br><span class="line">            <span class="string">&quot;test@example.com&quot;</span>,</span><br><span class="line">            <span class="string">&quot;user.name@domain.co&quot;</span>,</span><br><span class="line">            <span class="string">&quot;invalid@.com&quot;</span>,</span><br><span class="line">            <span class="string">&quot;another@test&quot;</span></span><br><span class="line">        &#125;;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (String email : emails) &#123;</span><br><span class="line">            System.out.println(email + <span class="string">&quot;: &quot;</span> + isValid(email));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-提取URL"><a href="#2-提取URL" class="headerlink" title="2. 提取URL"></a>2. 提取URL</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UrlExtractor</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">text</span> <span class="operator">=</span> <span class="string">&quot;Visit https://www.example.com or http://test.org for more info&quot;</span>;</span><br><span class="line">        <span class="type">Pattern</span> <span class="variable">urlPattern</span> <span class="operator">=</span> Pattern.compile(<span class="string">&quot;https?://(?:[\\w-]+\\.)+[\\w-]+(/[\\w- ./?%&amp;=]*)?&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="type">Matcher</span> <span class="variable">matcher</span> <span class="operator">=</span> urlPattern.matcher(text);</span><br><span class="line">        <span class="keyword">while</span> (matcher.find()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Found URL: &quot;</span> + matcher.group());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-密码强度验证"><a href="#3-密码强度验证" class="headerlink" title="3. 密码强度验证"></a>3. 密码强度验证</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PasswordValidator</span> &#123;</span><br><span class="line">    <span class="comment">// 至少8字符，包含大小写字母、数字和特殊字符</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PASSWORD_REGEX</span> <span class="operator">=</span> </span><br><span class="line">        <span class="string">&quot;^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[@#$%^&amp;+=])(?=\\S+$).&#123;8,&#125;$&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(String password)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Pattern.compile(PASSWORD_REGEX).matcher(password).matches();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        String[] passwords = &#123;</span><br><span class="line">            <span class="string">&quot;Weakpass1&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Strong@Pass123&quot;</span>,</span><br><span class="line">            <span class="string">&quot;noSpecialChar1&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Short1@&quot;</span></span><br><span class="line">        &#125;;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (String pwd : passwords) &#123;</span><br><span class="line">            System.out.println(pwd + <span class="string">&quot;: &quot;</span> + isValid(pwd));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="五、高级用法"><a href="#五、高级用法" class="headerlink" title="五、高级用法"></a>五、高级用法</h2><h3 id="1-替换操作"><a href="#1-替换操作" class="headerlink" title="1. 替换操作"></a>1. 替换操作</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RegexReplacement</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">text</span> <span class="operator">=</span> <span class="string">&quot;User: john, Age: 30; User: jane, Age: 25&quot;</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 简单替换</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">replaced</span> <span class="operator">=</span> text.replaceAll(<span class="string">&quot;\\d+&quot;</span>, <span class="string">&quot;XX&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;After age masking: &quot;</span> + replaced);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 使用捕获组替换</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">nameReplaced</span> <span class="operator">=</span> text.replaceAll(<span class="string">&quot;User: (\\w+)&quot;</span>, <span class="string">&quot;Name: $1&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;After name format: &quot;</span> + nameReplaced);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 使用Matcher进行复杂替换</span></span><br><span class="line">        <span class="type">Pattern</span> <span class="variable">pattern</span> <span class="operator">=</span> Pattern.compile(<span class="string">&quot;(\\w+): (\\w+)&quot;</span>);</span><br><span class="line">        <span class="type">Matcher</span> <span class="variable">matcher</span> <span class="operator">=</span> pattern.matcher(text);</span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (matcher.find()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">field</span> <span class="operator">=</span> matcher.group(<span class="number">1</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> matcher.group(<span class="number">2</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">replacement</span> <span class="operator">=</span> field.equals(<span class="string">&quot;Age&quot;</span>) ? <span class="string">&quot;**masked**&quot;</span> : value;</span><br><span class="line">            matcher.appendReplacement(sb, field + <span class="string">&quot;: &quot;</span> + replacement);</span><br><span class="line">        &#125;</span><br><span class="line">        matcher.appendTail(sb);</span><br><span class="line">        System.out.println(<span class="string">&quot;Selective masking: &quot;</span> + sb.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-分割字符串"><a href="#2-分割字符串" class="headerlink" title="2. 分割字符串"></a>2. 分割字符串</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RegexSplit</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">text</span> <span class="operator">=</span> <span class="string">&quot;apple,orange,,banana;grape&quot;</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 简单分割</span></span><br><span class="line">        String[] fruits1 = text.split(<span class="string">&quot;[,;]&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Simple split: &quot;</span> + Arrays.toString(fruits1));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 去除空字符串</span></span><br><span class="line">        String[] fruits2 = text.split(<span class="string">&quot;[,;]+&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;No empty strings: &quot;</span> + Arrays.toString(fruits2));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 使用Pattern.split</span></span><br><span class="line">        <span class="type">Pattern</span> <span class="variable">pattern</span> <span class="operator">=</span> Pattern.compile(<span class="string">&quot;[,;]&quot;</span>);</span><br><span class="line">        String[] fruits3 = pattern.split(text);</span><br><span class="line">        System.out.println(<span class="string">&quot;Using Pattern.split: &quot;</span> + Arrays.toString(fruits3));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 限制分割次数</span></span><br><span class="line">        String[] fruits4 = text.split(<span class="string">&quot;[,;]&quot;</span>, <span class="number">3</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Limited split: &quot;</span> + Arrays.toString(fruits4));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="六、性能优化与最佳实践"><a href="#六、性能优化与最佳实践" class="headerlink" title="六、性能优化与最佳实践"></a>六、性能优化与最佳实践</h2><ol><li><p><strong>预编译正则表达式</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对于频繁使用的正则表达式，预编译Pattern</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Pattern</span> <span class="variable">EMAIL_PATTERN</span> <span class="operator">=</span> Pattern.compile(<span class="string">&quot;your_email_regex&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p><strong>避免贪婪匹配</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 贪婪匹配</span></span><br><span class="line"><span class="type">Pattern</span> <span class="variable">greedy</span> <span class="operator">=</span> Pattern.compile(<span class="string">&quot;&lt;.*&gt;&quot;</span>);  <span class="comment">// 匹配整个 &lt;a&gt;&lt;b&gt;&lt;/b&gt;&lt;/a&gt;</span></span><br><span class="line"><span class="comment">// 非贪婪匹配</span></span><br><span class="line"><span class="type">Pattern</span> <span class="variable">reluctant</span> <span class="operator">=</span> Pattern.compile(<span class="string">&quot;&lt;.*?&gt;&quot;</span>);  <span class="comment">// 匹配单个标签 &lt;a&gt;, &lt;b&gt;, &lt;/b&gt;, &lt;/a&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>使用非捕获组提高性能</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 当你不需要捕获组内容时使用非捕获组</span></span><br><span class="line"><span class="type">Pattern</span> <span class="variable">pattern</span> <span class="operator">=</span> Pattern.compile(<span class="string">&quot;(?:Mr|Ms|Mrs)\\.\\s\\w+&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p><strong>边界匹配优化</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用^和$确保整行匹配，避免部分匹配</span></span><br><span class="line"><span class="type">Pattern</span> <span class="variable">exactMatch</span> <span class="operator">=</span> Pattern.compile(<span class="string">&quot;^\\d&#123;5&#125;$&quot;</span>);  <span class="comment">// 只匹配5位数字</span></span><br></pre></td></tr></table></figure></li><li><p><strong>处理多行文本</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用Pattern.MULTILINE模式处理多行文本</span></span><br><span class="line"><span class="type">Pattern</span> <span class="variable">multiLine</span> <span class="operator">=</span> Pattern.compile(<span class="string">&quot;^\\w+&quot;</span>, Pattern.MULTILINE);</span><br><span class="line"><span class="type">String</span> <span class="variable">text</span> <span class="operator">=</span> <span class="string">&quot;first line\nsecond line\nthird line&quot;</span>;</span><br><span class="line"><span class="type">Matcher</span> <span class="variable">m</span> <span class="operator">=</span> multiLine.matcher(text);</span><br><span class="line"><span class="keyword">while</span> (m.find()) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Line starts with: &quot;</span> + m.group());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>异常处理</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    Pattern.compile(<span class="string">&quot;invalid[regex&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (PatternSyntaxException e) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Invalid regex: &quot;</span> + e.getMessage());</span><br><span class="line">    System.out.println(<span class="string">&quot;Description: &quot;</span> + e.getDescription());</span><br><span class="line">    System.out.println(<span class="string">&quot;Index: &quot;</span> + e.getIndex());</span><br><span class="line">    System.out.println(<span class="string">&quot;Pattern: &quot;</span> + e.getPattern());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>通过合理使用 Java 的正则表达式功能，可以高效地处理各种复杂的字符串匹配、查找、替换和分割操作。</p><h1 id="Java-方法全面解析"><a href="#Java-方法全面解析" class="headerlink" title="Java 方法全面解析"></a>Java 方法全面解析</h1><p>方法是 Java 编程中的基本构建块，用于封装可重用的代码逻辑。下面我将系统地讲解 Java 方法的各种功能和使用场景。</p><h2 id="一、方法基础"><a href="#一、方法基础" class="headerlink" title="一、方法基础"></a>一、方法基础</h2><h3 id="1-方法定义与调用"><a href="#1-方法定义与调用" class="headerlink" title="1. 方法定义与调用"></a>1. 方法定义与调用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MethodBasics</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 1. 无参数无返回值方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">greet</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello, World!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 2. 带参数无返回值方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">greetUser</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello, &quot;</span> + name + <span class="string">&quot;!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 3. 带参数有返回值方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 4. 可变参数方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">average</span><span class="params">(<span class="type">double</span>... numbers)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (numbers.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">double</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">double</span> num : numbers) &#123;</span><br><span class="line">            sum += num;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum / numbers.length;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 方法调用示例</span></span><br><span class="line">        greet();</span><br><span class="line">        greetUser(<span class="string">&quot;Alice&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> add(<span class="number">5</span>, <span class="number">3</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;5 + 3 = &quot;</span> + sum);</span><br><span class="line">        </span><br><span class="line">        <span class="type">double</span> <span class="variable">avg</span> <span class="operator">=</span> average(<span class="number">1.5</span>, <span class="number">2.5</span>, <span class="number">3.5</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Average: &quot;</span> + avg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-方法参数传递"><a href="#2-方法参数传递" class="headerlink" title="2. 方法参数传递"></a>2. 方法参数传递</h3><p>Java 中只有值传递（传递的是值的副本）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ParameterPassing</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">modifyPrimitive</span><span class="params">(<span class="type">int</span> num)</span> &#123;</span><br><span class="line">        num = <span class="number">100</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;Inside method - primitive: &quot;</span> + num);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">modifyReference</span><span class="params">(StringBuilder sb)</span> &#123;</span><br><span class="line">        sb.append(<span class="string">&quot; World&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Inside method - reference: &quot;</span> + sb);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 基本类型参数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        modifyPrimitive(x);</span><br><span class="line">        System.out.println(<span class="string">&quot;After method - primitive: &quot;</span> + x);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 引用类型参数</span></span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">        modifyReference(builder);</span><br><span class="line">        System.out.println(<span class="string">&quot;After method - reference: &quot;</span> + builder);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二、方法重载"><a href="#二、方法重载" class="headerlink" title="二、方法重载"></a>二、方法重载</h2><p>方法重载允许一个类中有多个同名方法，只要参数列表不同：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MethodOverloading</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 方法重载示例</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">max</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a &gt; b ? a : b;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">max</span><span class="params">(<span class="type">double</span> a, <span class="type">double</span> b)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a &gt; b ? a : b;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">max</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> max(max(a, b), c);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Max of 5 and 3: &quot;</span> + max(<span class="number">5</span>, <span class="number">3</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;Max of 5.5 and 3.3: &quot;</span> + max(<span class="number">5.5</span>, <span class="number">3.3</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;Max of 5, 3 and 7: &quot;</span> + max(<span class="number">5</span>, <span class="number">3</span>, <span class="number">7</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、递归方法"><a href="#三、递归方法" class="headerlink" title="三、递归方法"></a>三、递归方法</h2><p>方法调用自身称为递归：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Recursion</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 计算阶乘</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">factorial</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (n &lt;= <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> n * factorial(n - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 斐波那契数列</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">fibonacci</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (n &lt;= <span class="number">1</span>) <span class="keyword">return</span> n;</span><br><span class="line">        <span class="keyword">return</span> fibonacci(n - <span class="number">1</span>) + fibonacci(n - <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;5! = &quot;</span> + factorial(<span class="number">5</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;Fibonacci(7) = &quot;</span> + fibonacci(<span class="number">7</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四、构造方法"><a href="#四、构造方法" class="headerlink" title="四、构造方法"></a>四、构造方法</h2><p>构造方法用于初始化对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 默认构造方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(<span class="string">&quot;Unknown&quot;</span>, <span class="number">18</span>); <span class="comment">// 调用另一个构造方法</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 带参数构造方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 复制构造方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(Student other)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(other.name, other.age);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Getter 和 Setter 方法</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;name=&#x27;&quot;</span> + name + <span class="string">&quot;&#x27;, age=&quot;</span> + age + <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        <span class="type">Student</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;Alice&quot;</span>, <span class="number">20</span>);</span><br><span class="line">        <span class="type">Student</span> <span class="variable">s3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(s2);</span><br><span class="line">        </span><br><span class="line">        System.out.println(s1);</span><br><span class="line">        System.out.println(s2);</span><br><span class="line">        System.out.println(s3);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="五、静态方法-vs-实例方法"><a href="#五、静态方法-vs-实例方法" class="headerlink" title="五、静态方法 vs 实例方法"></a>五、静态方法 vs 实例方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MethodTypes</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">instanceVar</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">staticVar</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 实例方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">instanceMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;实例方法可以访问实例变量: &quot;</span> + instanceVar);</span><br><span class="line">        System.out.println(<span class="string">&quot;实例方法可以访问静态变量: &quot;</span> + staticVar);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 静态方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">staticMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// System.out.println(instanceVar); // 错误：不能直接访问实例变量</span></span><br><span class="line">        System.out.println(<span class="string">&quot;静态方法可以访问静态变量: &quot;</span> + staticVar);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MethodTypes</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MethodTypes</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 调用实例方法</span></span><br><span class="line">        obj.instanceMethod();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 调用静态方法</span></span><br><span class="line">        MethodTypes.staticMethod();</span><br><span class="line">        staticMethod(); <span class="comment">// 在同一个类中可以省略类名</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="六、方法最佳实践"><a href="#六、方法最佳实践" class="headerlink" title="六、方法最佳实践"></a>六、方法最佳实践</h2><h3 id="1-方法设计原则"><a href="#1-方法设计原则" class="headerlink" title="1. 方法设计原则"></a>1. 方法设计原则</h3><ol><li><strong>单一职责原则</strong>：一个方法只做一件事</li><li><strong>合理命名</strong>：方法名应准确描述其功能</li><li><strong>适当长度</strong>：通常不超过20-30行代码</li><li><strong>参数数量控制</strong>：最好不超过5个参数</li><li><strong>避免副作用</strong>：除非必要，方法不应修改传入参数</li></ol><h3 id="2-方法文档注释"><a href="#2-方法文档注释" class="headerlink" title="2. 方法文档注释"></a>2. 方法文档注释</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 计算两个数的最大公约数</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> a 第一个正整数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> b 第二个正整数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 两个数的最大公约数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IllegalArgumentException 如果参数小于等于0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">gcd</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> <span class="keyword">throws</span> IllegalArgumentException &#123;</span><br><span class="line">    <span class="keyword">if</span> (a &lt;= <span class="number">0</span> || b &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;参数必须为正整数&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (b != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> b;</span><br><span class="line">        b = a % b;</span><br><span class="line">        a = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-实用方法示例"><a href="#3-实用方法示例" class="headerlink" title="3. 实用方法示例"></a>3. 实用方法示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UtilityMethods</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 判断是否为素数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isPrime</span><span class="params">(<span class="type">int</span> num)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (num &lt;= <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (num == <span class="number">2</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (num % <span class="number">2</span> == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">3</span>; i * i &lt;= num; i += <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (num % i == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 反转数组</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">reverseArray</span><span class="params">(T[] array)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; array.length / <span class="number">2</span>; i++) &#123;</span><br><span class="line">            <span class="type">T</span> <span class="variable">temp</span> <span class="operator">=</span> array[i];</span><br><span class="line">            array[i] = array[array.length - <span class="number">1</span> - i];</span><br><span class="line">            array[array.length - <span class="number">1</span> - i] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 二分查找</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">binarySearch</span><span class="params">(<span class="type">int</span>[] array, <span class="type">int</span> key)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">low</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">high</span> <span class="operator">=</span> array.length - <span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (low &lt;= high) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (low + high) &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">midVal</span> <span class="operator">=</span> array[mid];</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (midVal &lt; key) &#123;</span><br><span class="line">                low = mid + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (midVal &gt; key) &#123;</span><br><span class="line">                high = mid - <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> mid; <span class="comment">// 找到key</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -(low + <span class="number">1</span>); <span class="comment">// 未找到，返回插入点</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Is 17 prime? &quot;</span> + isPrime(<span class="number">17</span>));</span><br><span class="line">        </span><br><span class="line">        Integer[] nums = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line">        reverseArray(nums);</span><br><span class="line">        System.out.println(<span class="string">&quot;Reversed array: &quot;</span> + Arrays.toString(nums));</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span>[] sorted = &#123;<span class="number">2</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">12</span>, <span class="number">16</span>, <span class="number">23</span>, <span class="number">38</span>, <span class="number">56</span>, <span class="number">72</span>, <span class="number">91</span>&#125;;</span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> binarySearch(sorted, <span class="number">23</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Found 23 at index: &quot;</span> + index);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="七、高级方法特性"><a href="#七、高级方法特性" class="headerlink" title="七、高级方法特性"></a>七、高级方法特性</h2><h3 id="1-方法引用-Java-8"><a href="#1-方法引用-Java-8" class="headerlink" title="1. 方法引用 (Java 8+)"></a>1. 方法引用 (Java 8+)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MethodReferences</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;String&gt; names = Arrays.asList(<span class="string">&quot;Alice&quot;</span>, <span class="string">&quot;Bob&quot;</span>, <span class="string">&quot;Charlie&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 静态方法引用</span></span><br><span class="line">        names.forEach(MethodReferences::print);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 实例方法引用</span></span><br><span class="line">        names.forEach(System.out::println);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 构造方法引用</span></span><br><span class="line">        names.stream()</span><br><span class="line">             .map(String::<span class="keyword">new</span>)</span><br><span class="line">             .forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-默认方法-Java-8"><a href="#2-默认方法-Java-8" class="headerlink" title="2. 默认方法 (Java 8+)"></a>2. 默认方法 (Java 8+)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Vehicle</span> &#123;</span><br><span class="line">    <span class="comment">// 常规抽象方法</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 默认方法</span></span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">stop</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Vehicle stopped&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 静态方法</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">honk</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Honk honk!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Car</span> <span class="keyword">implements</span> <span class="title class_">Vehicle</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Car started&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Car</span> <span class="variable">car</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Car</span>();</span><br><span class="line">        car.start();</span><br><span class="line">        car.stop();  <span class="comment">// 调用默认方法</span></span><br><span class="line">        Vehicle.honk(); <span class="comment">// 调用接口静态方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Java-I-O、Stream与异常处理全面解析"><a href="#Java-I-O、Stream与异常处理全面解析" class="headerlink" title="Java I&#x2F;O、Stream与异常处理全面解析"></a>Java I&#x2F;O、Stream与异常处理全面解析</h1><p>下面我将整合Java I&#x2F;O流、文件操作和异常处理的核心知识，并提供实用的代码示例。</p><h2 id="一、Java-I-O-流体系"><a href="#一、Java-I-O-流体系" class="headerlink" title="一、Java I&#x2F;O 流体系"></a>一、Java I&#x2F;O 流体系</h2><h3 id="1-流的基本分类"><a href="#1-流的基本分类" class="headerlink" title="1. 流的基本分类"></a>1. 流的基本分类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IOOverview</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 1. 按方向分</span></span><br><span class="line">        <span class="comment">//   - 输入流: InputStream, Reader</span></span><br><span class="line">        <span class="comment">//   - 输出流: OutputStream, Writer</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 2. 按数据类型分</span></span><br><span class="line">        <span class="comment">//   - 字节流: InputStream, OutputStream</span></span><br><span class="line">        <span class="comment">//   - 字符流: Reader, Writer</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 3. 按功能分</span></span><br><span class="line">        <span class="comment">//   - 节点流: 直接操作数据源/目标的流</span></span><br><span class="line">        <span class="comment">//   - 处理流: 对现有流进行包装增强</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-常用流类关系图"><a href="#2-常用流类关系图" class="headerlink" title="2. 常用流类关系图"></a>2. 常用流类关系图</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">字节流：</span><br><span class="line">InputStream</span><br><span class="line">|-- FileInputStream</span><br><span class="line">|-- FilterInputStream</span><br><span class="line">    |-- BufferedInputStream</span><br><span class="line">    |-- DataInputStream</span><br><span class="line">|-- ObjectInputStream</span><br><span class="line"></span><br><span class="line">OutputStream</span><br><span class="line">|-- FileOutputStream</span><br><span class="line">|-- FilterOutputStream</span><br><span class="line">    |-- BufferedOutputStream</span><br><span class="line">    |-- DataOutputStream</span><br><span class="line">|-- ObjectOutputStream</span><br><span class="line">|-- PrintStream</span><br><span class="line"></span><br><span class="line">字符流：</span><br><span class="line">Reader</span><br><span class="line">|-- InputStreamReader</span><br><span class="line">    |-- FileReader</span><br><span class="line">|-- BufferedReader</span><br><span class="line"></span><br><span class="line">Writer</span><br><span class="line">|-- OutputStreamWriter</span><br><span class="line">    |-- FileWriter</span><br><span class="line">|-- BufferedWriter</span><br><span class="line">|-- PrintWriter</span><br></pre></td></tr></table></figure><h2 id="二、文件操作与Scanner"><a href="#二、文件操作与Scanner" class="headerlink" title="二、文件操作与Scanner"></a>二、文件操作与Scanner</h2><h3 id="1-文件基本操作"><a href="#1-文件基本操作" class="headerlink" title="1. 文件基本操作"></a>1. 文件基本操作</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Path;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileOperations</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 1. 使用File类</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;test.txt&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (file.createNewFile()) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;文件创建成功&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;文件已存在&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            System.out.println(<span class="string">&quot;文件路径: &quot;</span> + file.getAbsolutePath());</span><br><span class="line">            System.out.println(<span class="string">&quot;文件大小: &quot;</span> + file.length() + <span class="string">&quot; bytes&quot;</span>);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 删除文件</span></span><br><span class="line">            <span class="comment">// file.delete();</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 2. 使用NIO的Files和Path (Java 7+)</span></span><br><span class="line">        <span class="type">Path</span> <span class="variable">path</span> <span class="operator">=</span> Paths.get(<span class="string">&quot;test.txt&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (!Files.exists(path)) &#123;</span><br><span class="line">                Files.createFile(path);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;文件属性: &quot;</span> + Files.getAttribute(path, <span class="string">&quot;basic:size&quot;</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 3. 使用Scanner读取文件</span></span><br><span class="line">        <span class="keyword">try</span> (<span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(path)) &#123;</span><br><span class="line">            <span class="keyword">while</span> (scanner.hasNextLine()) &#123;</span><br><span class="line">                System.out.println(scanner.nextLine());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-Scanner类详解"><a href="#2-Scanner类详解" class="headerlink" title="2. Scanner类详解"></a>2. Scanner类详解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ScannerDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        </span><br><span class="line">        System.out.print(<span class="string">&quot;请输入整数: &quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (scanner.hasNextInt()) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line">            System.out.println(<span class="string">&quot;读取的整数: &quot;</span> + num);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;输入的不是整数&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        scanner.nextLine(); <span class="comment">// 消耗换行符</span></span><br><span class="line">        </span><br><span class="line">        System.out.print(<span class="string">&quot;请输入一行文本: &quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line">        System.out.println(<span class="string">&quot;读取的行: &quot;</span> + line);</span><br><span class="line">        </span><br><span class="line">        System.out.print(<span class="string">&quot;请输入用逗号分隔的数据: &quot;</span>);</span><br><span class="line">        scanner.useDelimiter(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span> (scanner.hasNext()) &#123;</span><br><span class="line">            System.out.println(scanner.next().trim());</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        scanner.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、字节流与字符流操作"><a href="#三、字节流与字符流操作" class="headerlink" title="三、字节流与字符流操作"></a>三、字节流与字符流操作</h2><h3 id="1-字节流文件复制"><a href="#1-字节流文件复制" class="headerlink" title="1. 字节流文件复制"></a>1. 字节流文件复制</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ByteStreamCopy</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">copyFile</span><span class="params">(String src, String dest)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(src));</span><br><span class="line">             <span class="type">OutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(dest))) &#123;</span><br><span class="line">            </span><br><span class="line">            <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">8192</span>];</span><br><span class="line">            <span class="type">int</span> bytesRead;</span><br><span class="line">            <span class="keyword">while</span> ((bytesRead = in.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                out.write(buffer, <span class="number">0</span>, bytesRead);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;文件复制完成&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        copyFile(<span class="string">&quot;source.jpg&quot;</span>, <span class="string">&quot;destination.jpg&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-字符流读写文本"><a href="#2-字符流读写文本" class="headerlink" title="2. 字符流读写文本"></a>2. 字符流读写文本</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CharacterStreamDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">writeToFile</span><span class="params">(String filename, String content)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">Writer</span> <span class="variable">writer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">FileWriter</span>(filename))) &#123;</span><br><span class="line">            writer.write(content);</span><br><span class="line">            System.out.println(<span class="string">&quot;内容写入成功&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">readFromFile</span><span class="params">(String filename)</span> &#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">content</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">Reader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(filename))) &#123;</span><br><span class="line">            <span class="type">char</span>[] buffer = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="type">int</span> charsRead;</span><br><span class="line">            <span class="keyword">while</span> ((charsRead = reader.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                content.append(buffer, <span class="number">0</span>, charsRead);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> content.toString();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        writeToFile(<span class="string">&quot;demo.txt&quot;</span>, <span class="string">&quot;这是使用字符流写入的文本内容\n第二行内容&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;读取内容:\n&quot;</span> + readFromFile(<span class="string">&quot;demo.txt&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四、异常处理机制"><a href="#四、异常处理机制" class="headerlink" title="四、异常处理机制"></a>四、异常处理机制</h2><h3 id="1-异常处理基础"><a href="#1-异常处理基础" class="headerlink" title="1. 异常处理基础"></a>1. 异常处理基础</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExceptionHandling</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">checkedExceptionDemo</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 受检异常必须处理或声明抛出</span></span><br><span class="line">        <span class="type">FileReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;nonexistent.txt&quot;</span>);</span><br><span class="line">        reader.close();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">uncheckedExceptionDemo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 非受检异常可以不处理</span></span><br><span class="line">        <span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>];</span><br><span class="line">        System.out.println(arr[<span class="number">5</span>]); <span class="comment">// ArrayIndexOutOfBoundsException</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 1. try-catch-finally</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            checkedExceptionDemo();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            System.err.println(<span class="string">&quot;文件未找到: &quot;</span> + e.getMessage());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            System.err.println(<span class="string">&quot;IO错误: &quot;</span> + e.getMessage());</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;finally块总是执行&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 2. try-with-resources (Java 7+)</span></span><br><span class="line">        <span class="keyword">try</span> (<span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;test.txt&quot;</span>)) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;文件打开成功&quot;</span>);</span><br><span class="line">            <span class="comment">// 自动关闭资源</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            System.err.println(<span class="string">&quot;处理文件时出错: &quot;</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 3. 自定义异常</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            validateAge(<span class="number">15</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvalidAgeException e) &#123;</span><br><span class="line">            System.err.println(<span class="string">&quot;年龄验证失败: &quot;</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 自定义异常示例</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">InvalidAgeException</span> <span class="keyword">extends</span> <span class="title class_">Exception</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">InvalidAgeException</span><span class="params">(String message)</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>(message);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">validateAge</span><span class="params">(<span class="type">int</span> age)</span> <span class="keyword">throws</span> InvalidAgeException &#123;</span><br><span class="line">        <span class="keyword">if</span> (age &lt; <span class="number">18</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InvalidAgeException</span>(<span class="string">&quot;年龄必须大于18岁&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-异常处理最佳实践"><a href="#2-异常处理最佳实践" class="headerlink" title="2. 异常处理最佳实践"></a>2. 异常处理最佳实践</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExceptionBestPractices</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">readFile</span><span class="params">(String filename)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 业务逻辑</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> Files.readString(Path.of(filename));</span><br><span class="line">            System.out.println(content);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchFileException e) &#123;</span><br><span class="line">            System.err.println(<span class="string">&quot;文件不存在: &quot;</span> + e.getFile());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (AccessDeniedException e) &#123;</span><br><span class="line">            System.err.println(<span class="string">&quot;没有访问权限: &quot;</span> + e.getFile());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            System.err.println(<span class="string">&quot;读取文件时发生错误: &quot;</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">processUserInput</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.print(<span class="string">&quot;请输入数字: &quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> Integer.parseInt(scanner.nextLine());</span><br><span class="line">            System.out.println(<span class="string">&quot;输入的数字是: &quot;</span> + num);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NumberFormatException e) &#123;</span><br><span class="line">            System.err.println(<span class="string">&quot;输入的不是有效数字&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            scanner.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        readFile(<span class="string">&quot;test.txt&quot;</span>);</span><br><span class="line">        processUserInput();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="五、综合应用示例"><a href="#五、综合应用示例" class="headerlink" title="五、综合应用示例"></a>五、综合应用示例</h2><h3 id="1-文件加密解密工具"><a href="#1-文件加密解密工具" class="headerlink" title="1. 文件加密解密工具"></a>1. 文件加密解密工具</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileEncryptor</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">KEY</span> <span class="operator">=</span> <span class="number">0x55</span>; <span class="comment">// 简单异或加密密钥</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">encryptFile</span><span class="params">(String inputFile, String outputFile)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(inputFile));</span><br><span class="line">             <span class="type">OutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(outputFile))) &#123;</span><br><span class="line">            </span><br><span class="line">            <span class="type">int</span> data;</span><br><span class="line">            <span class="keyword">while</span> ((data = in.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">                out.write(data ^ KEY);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">decryptFile</span><span class="params">(String inputFile, String outputFile)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        encryptFile(inputFile, outputFile); <span class="comment">// 异或加密解密是相同的操作</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;1. 加密文件&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;2. 解密文件&quot;</span>);</span><br><span class="line">        System.out.print(<span class="string">&quot;请选择操作: &quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">choice</span> <span class="operator">=</span> Integer.parseInt(scanner.nextLine());</span><br><span class="line">            System.out.print(<span class="string">&quot;输入文件路径: &quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">input</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line">            System.out.print(<span class="string">&quot;输出文件路径: &quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">output</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (choice == <span class="number">1</span>) &#123;</span><br><span class="line">                encryptFile(input, output);</span><br><span class="line">                System.out.println(<span class="string">&quot;文件加密完成&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (choice == <span class="number">2</span>) &#123;</span><br><span class="line">                decryptFile(input, output);</span><br><span class="line">                System.out.println(<span class="string">&quot;文件解密完成&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;无效选择&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NumberFormatException e) &#123;</span><br><span class="line">            System.err.println(<span class="string">&quot;请输入有效数字&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            System.err.println(<span class="string">&quot;文件未找到: &quot;</span> + e.getMessage());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            System.err.println(<span class="string">&quot;处理文件时出错: &quot;</span> + e.getMessage());</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            scanner.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-日志记录系统"><a href="#2-日志记录系统" class="headerlink" title="2. 日志记录系统"></a>2. 日志记录系统</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.time.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoggerSystem</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">LOG_FILE</span> <span class="operator">=</span> <span class="string">&quot;app.log&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">LogLevel</span> &#123;</span><br><span class="line">        INFO, WARNING, ERROR</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">log</span><span class="params">(LogLevel level, String message)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">logEntry</span> <span class="operator">=</span> String.format(<span class="string">&quot;[%s][%s] %s%n&quot;</span>, </span><br><span class="line">            LocalDateTime.now(), level, message);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">try</span> (<span class="type">FileWriter</span> <span class="variable">fw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(LOG_FILE, <span class="literal">true</span>);</span><br><span class="line">             <span class="type">BufferedWriter</span> <span class="variable">bw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(fw);</span><br><span class="line">             <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintWriter</span>(bw)) &#123;</span><br><span class="line">            </span><br><span class="line">            out.print(logEntry);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            System.err.println(<span class="string">&quot;记录日志失败: &quot;</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title function_">readLogs</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;String&gt; logs = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(<span class="keyword">new</span> <span class="title class_">File</span>(LOG_FILE))) &#123;</span><br><span class="line">            <span class="keyword">while</span> (scanner.hasNextLine()) &#123;</span><br><span class="line">                logs.add(scanner.nextLine());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            System.err.println(<span class="string">&quot;日志文件不存在&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> logs;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        log(LogLevel.INFO, <span class="string">&quot;应用程序启动&quot;</span>);</span><br><span class="line">        log(LogLevel.WARNING, <span class="string">&quot;内存使用量过高&quot;</span>);</span><br><span class="line">        log(LogLevel.ERROR, <span class="string">&quot;数据库连接失败&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;日志内容:&quot;</span>);</span><br><span class="line">        readLogs().forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="六、关键知识点总结"><a href="#六、关键知识点总结" class="headerlink" title="六、关键知识点总结"></a>六、关键知识点总结</h2><ol><li><p><strong>I&#x2F;O流选择原则</strong>：</p><ul><li>文本数据：优先使用字符流(Reader&#x2F;Writer)</li><li>二进制数据：使用字节流(InputStream&#x2F;OutputStream)</li><li>需要缓冲：包装Buffered系列流</li><li>Java 7+：优先使用NIO的Files和Paths工具类</li></ul></li><li><p><strong>异常处理要点</strong>：</p><ul><li>受检异常必须处理或声明抛出</li><li>非受检异常通常表示编程错误</li><li>使用try-with-resources自动管理资源</li><li>捕获异常时应从具体到抽象</li><li>不要忽略捕获的异常</li></ul></li><li><p><strong>Scanner使用技巧</strong>：</p><ul><li>读取不同类型数据使用hasNextXxx()&#x2F;nextXxx()</li><li>注意处理换行符问题(nextLine与其他方法混用时)</li><li>使用useDelimiter()设置自定义分隔符</li><li>读取完毕后调用close()释放资源</li></ul></li><li><p><strong>性能优化建议</strong>：</p><ul><li>使用缓冲区减少I&#x2F;O操作次数</li><li>合理设置缓冲区大小(通常8KB)</li><li>大文件处理使用流式而非全部加载到内存</li><li>及时关闭资源防止内存泄漏</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 结构速查 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java快速学习速查（3）</title>
      <link href="/2025/03/31/java%E5%BF%AB%E9%80%9F%E5%AD%A6%E4%B9%A0%E9%80%9F%E6%9F%A5%EF%BC%883%EF%BC%89/"/>
      <url>/2025/03/31/java%E5%BF%AB%E9%80%9F%E5%AD%A6%E4%B9%A0%E9%80%9F%E6%9F%A5%EF%BC%883%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="java快速学习速查（3）"><a href="#java快速学习速查（3）" class="headerlink" title="java快速学习速查（3）"></a>java快速学习速查（3）</h1><blockquote><p>这个部分涉及的方面是循环结构，条件语句，switch case,Number&amp;Math,Character,String,StringBuffer几个方面，对照查询学习</p></blockquote><h1 id="Java循环结构全面解析"><a href="#Java循环结构全面解析" class="headerlink" title="Java循环结构全面解析"></a>Java循环结构全面解析</h1><p>循环是编程中控制流程的重要结构，Java提供了多种循环方式以满足不同场景的需求。下面我将系统地讲解Java中的循环结构及其应用。</p><h2 id="一、循环结构类型"><a href="#一、循环结构类型" class="headerlink" title="一、循环结构类型"></a>一、循环结构类型</h2><h3 id="1-while循环"><a href="#1-while循环" class="headerlink" title="1. while循环"></a>1. while循环</h3><p><strong>语法结构：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (条件表达式) &#123;</span><br><span class="line">    <span class="comment">// 循环体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>特点：</strong></p><ul><li>先判断条件，后执行循环体</li><li>可能一次都不执行</li><li>适合不确定循环次数的场景</li></ul><p><strong>示例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 计算1-100的和</span></span><br><span class="line"><span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (i &lt;= <span class="number">100</span>) &#123;</span><br><span class="line">    sum += i;</span><br><span class="line">    i++;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;Sum: &quot;</span> + sum);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取用户输入直到输入quit</span></span><br><span class="line"><span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"><span class="type">String</span> <span class="variable">input</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">while</span> (!input.equals(<span class="string">&quot;quit&quot;</span>)) &#123;</span><br><span class="line">    System.out.print(<span class="string">&quot;请输入命令：&quot;</span>);</span><br><span class="line">    input = scanner.nextLine();</span><br><span class="line">    System.out.println(<span class="string">&quot;你输入了：&quot;</span> + input);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-do-while循环"><a href="#2-do-while循环" class="headerlink" title="2. do-while循环"></a>2. do-while循环</h3><p><strong>语法结构：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="comment">// 循环体</span></span><br><span class="line">&#125; <span class="keyword">while</span> (条件表达式);</span><br></pre></td></tr></table></figure><p><strong>特点：</strong></p><ul><li>先执行循环体，后判断条件</li><li>至少执行一次循环体</li><li>适合需要至少执行一次的场景</li></ul><p><strong>示例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 密码验证（至少验证一次）</span></span><br><span class="line">String password;</span><br><span class="line"><span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    System.out.print(<span class="string">&quot;请输入密码：&quot;</span>);</span><br><span class="line">    password = scanner.nextLine();</span><br><span class="line">&#125; <span class="keyword">while</span> (!password.equals(<span class="string">&quot;123456&quot;</span>));</span><br><span class="line">System.out.println(<span class="string">&quot;密码正确！&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成随机数直到大于0.9</span></span><br><span class="line"><span class="type">double</span> randomValue;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    randomValue = Math.random();</span><br><span class="line">    System.out.println(<span class="string">&quot;生成值：&quot;</span> + randomValue);</span><br><span class="line">&#125; <span class="keyword">while</span> (randomValue &lt;= <span class="number">0.9</span>);</span><br></pre></td></tr></table></figure><h3 id="3-for循环"><a href="#3-for循环" class="headerlink" title="3. for循环"></a>3. for循环</h3><p><strong>语法结构：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (初始化; 条件表达式; 更新表达式) &#123;</span><br><span class="line">    <span class="comment">// 循环体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>特点：</strong></p><ul><li>循环次数通常已知</li><li>初始化、条件和更新都在一行</li><li>适合确定循环次数的场景</li></ul><p><strong>示例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 打印乘法表</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">9</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= i; j++) &#123;</span><br><span class="line">        System.out.print(j + <span class="string">&quot;×&quot;</span> + i + <span class="string">&quot;=&quot;</span> + (i*j) + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历数组</span></span><br><span class="line"><span class="type">int</span>[] numbers = &#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; numbers.length; i++) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;第&quot;</span> + (i+<span class="number">1</span>) + <span class="string">&quot;个元素：&quot;</span> + numbers[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-增强for循环（for-each）"><a href="#4-增强for循环（for-each）" class="headerlink" title="4. 增强for循环（for-each）"></a>4. 增强for循环（for-each）</h3><p><strong>语法结构：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (元素类型 变量名 : 集合或数组) &#123;</span><br><span class="line">    <span class="comment">// 循环体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>特点：</strong></p><ul><li>简化数组和集合的遍历</li><li>无需索引变量</li><li>不能修改原数组&#x2F;集合元素</li></ul><p><strong>示例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 遍历数组</span></span><br><span class="line">String[] fruits = &#123;<span class="string">&quot;Apple&quot;</span>, <span class="string">&quot;Banana&quot;</span>, <span class="string">&quot;Orange&quot;</span>&#125;;</span><br><span class="line"><span class="keyword">for</span> (String fruit : fruits) &#123;</span><br><span class="line">    System.out.println(fruit);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历集合</span></span><br><span class="line">List&lt;Integer&gt; numbers = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> num : numbers) &#123;</span><br><span class="line">    System.out.println(num * num);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二、循环控制语句"><a href="#二、循环控制语句" class="headerlink" title="二、循环控制语句"></a>二、循环控制语句</h2><h3 id="1-break语句"><a href="#1-break语句" class="headerlink" title="1. break语句"></a>1. break语句</h3><p><strong>作用：</strong> 立即终止当前循环</p><p><strong>示例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查找第一个能被7整除的数</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i % <span class="number">7</span> == <span class="number">0</span>) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;找到第一个能被7整除的数：&quot;</span> + i);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 多层循环中的break（只跳出最内层循环）</span></span><br><span class="line">outer: <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">5</span>; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i * j &gt; <span class="number">6</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;i=&quot;</span> + i + <span class="string">&quot;, j=&quot;</span> + j);</span><br><span class="line">            <span class="keyword">break</span> outer;  <span class="comment">// 使用标签跳出外层循环</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-continue语句"><a href="#2-continue语句" class="headerlink" title="2. continue语句"></a>2. continue语句</h3><p><strong>作用：</strong> 跳过本次循环，进入下一次循环</p><p><strong>示例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 打印1-10的奇数</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 跳过空字符串处理</span></span><br><span class="line">String[] words = &#123;<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;world&quot;</span>, <span class="literal">null</span>, <span class="string">&quot;java&quot;</span>&#125;;</span><br><span class="line"><span class="keyword">for</span> (String word : words) &#123;</span><br><span class="line">    <span class="keyword">if</span> (word == <span class="literal">null</span> || word.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(word.toUpperCase());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、循环结构对比"><a href="#三、循环结构对比" class="headerlink" title="三、循环结构对比"></a>三、循环结构对比</h2><table><thead><tr><th>特性</th><th>while</th><th>do-while</th><th>for</th><th>for-each</th></tr></thead><tbody><tr><td>执行顺序</td><td>先判断后执行</td><td>先执行后判断</td><td>先判断后执行</td><td>自动遍历</td></tr><tr><td>最少执行次数</td><td>0次</td><td>1次</td><td>0次</td><td>集合大小次</td></tr><tr><td>适用场景</td><td>条件控制循环</td><td>至少执行一次</td><td>固定次数循环</td><td>集合&#x2F;数组遍历</td></tr><tr><td>循环变量作用域</td><td>外部声明</td><td>外部声明</td><td>内部声明</td><td>内部声明</td></tr><tr><td>是否可提前终止</td><td>是（break）</td><td>是</td><td>是</td><td>是</td></tr></tbody></table><h2 id="四、循环最佳实践"><a href="#四、循环最佳实践" class="headerlink" title="四、循环最佳实践"></a>四、循环最佳实践</h2><h3 id="1-避免无限循环"><a href="#1-避免无限循环" class="headerlink" title="1. 避免无限循环"></a>1. 避免无限循环</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 错误示例</span></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;  <span class="comment">// 缺少终止条件</span></span><br><span class="line">    System.out.println(<span class="string">&quot;无限循环&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确做法</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">running</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">while</span> (running) &#123;</span><br><span class="line">    <span class="comment">// 处理逻辑</span></span><br><span class="line">    <span class="keyword">if</span> (shouldStop()) &#123;</span><br><span class="line">        running = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-循环性能优化"><a href="#2-循环性能优化" class="headerlink" title="2. 循环性能优化"></a>2. 循环性能优化</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 优化前（每次循环都计算length）</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; list.size(); i++) &#123;...&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 优化后（缓存length）</span></span><br><span class="line"><span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> list.size();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i++) &#123;...&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 倒序循环有时更快</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> array.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;...&#125;</span><br></pre></td></tr></table></figure><h3 id="3-嵌套循环优化"><a href="#3-嵌套循环优化" class="headerlink" title="3. 嵌套循环优化"></a>3. 嵌套循环优化</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 低效的嵌套循环</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">100</span>; j++) &#123;</span><br><span class="line">        <span class="comment">// 内层循环次数多</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 优化后（减少外层循环次数）</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">100</span>; j++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">        <span class="comment">// 现在内层循环次数少</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="五、典型应用场景"><a href="#五、典型应用场景" class="headerlink" title="五、典型应用场景"></a>五、典型应用场景</h2><h3 id="1-数据处理"><a href="#1-数据处理" class="headerlink" title="1. 数据处理"></a>1. 数据处理</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 计算平均值</span></span><br><span class="line"><span class="type">double</span>[] data = &#123;<span class="number">12.5</span>, <span class="number">18.7</span>, <span class="number">11.2</span>, <span class="number">19.8</span>, <span class="number">15.3</span>&#125;;</span><br><span class="line"><span class="type">double</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">double</span> d : data) &#123;</span><br><span class="line">    sum += d;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">double</span> <span class="variable">average</span> <span class="operator">=</span> sum / data.length;</span><br></pre></td></tr></table></figure><h3 id="2-文件读取"><a href="#2-文件读取" class="headerlink" title="2. 文件读取"></a>2. 文件读取</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 读取文件所有行</span></span><br><span class="line"><span class="keyword">try</span> (<span class="type">BufferedReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;data.txt&quot;</span>))) &#123;</span><br><span class="line">    String line;</span><br><span class="line">    <span class="keyword">while</span> ((line = reader.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">        System.out.println(line);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-游戏循环"><a href="#3-游戏循环" class="headerlink" title="3. 游戏循环"></a>3. 游戏循环</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="variable">gameRunning</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">while</span> (gameRunning) &#123;</span><br><span class="line">    <span class="comment">// 处理输入</span></span><br><span class="line">    processInput();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 更新游戏状态</span></span><br><span class="line">    updateGame();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 渲染画面</span></span><br><span class="line">    render();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 检查游戏结束条件</span></span><br><span class="line">    <span class="keyword">if</span> (isGameOver()) &#123;</span><br><span class="line">        gameRunning = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="六、常见问题与陷阱"><a href="#六、常见问题与陷阱" class="headerlink" title="六、常见问题与陷阱"></a>六、常见问题与陷阱</h2><ol><li><p><strong>循环条件错误</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 死循环（i永远不会等于10）</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i != <span class="number">10</span>; i += <span class="number">2</span>) &#123;...&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>浮点数循环</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不可靠的浮点数循环</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">double</span> <span class="variable">d</span> <span class="operator">=</span> <span class="number">0.1</span>; d != <span class="number">1.0</span>; d += <span class="number">0.1</span>) &#123;...&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确做法</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="type">double</span> <span class="variable">d</span> <span class="operator">=</span> i * <span class="number">0.1</span>;</span><br><span class="line">    <span class="comment">// 使用d</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>修改循环变量</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">5</span>) &#123;</span><br><span class="line">        i = <span class="number">8</span>;  <span class="comment">// 直接修改循环变量，容易出错</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>集合遍历时修改</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(Arrays.asList(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>));</span><br><span class="line"><span class="keyword">for</span> (String s : list) &#123;</span><br><span class="line">    <span class="keyword">if</span> (s.equals(<span class="string">&quot;b&quot;</span>)) &#123;</span><br><span class="line">        list.remove(s);  <span class="comment">// 抛出ConcurrentModificationException</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确做法：使用迭代器</span></span><br><span class="line">Iterator&lt;String&gt; it = list.iterator();</span><br><span class="line"><span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> it.next();</span><br><span class="line">    <span class="keyword">if</span> (s.equals(<span class="string">&quot;b&quot;</span>)) &#123;</span><br><span class="line">        it.remove();  <span class="comment">// 安全删除</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="Java条件语句全面解析"><a href="#Java条件语句全面解析" class="headerlink" title="Java条件语句全面解析"></a>Java条件语句全面解析</h1><p>条件语句是编程中实现分支逻辑的基础结构，Java提供了多种条件语句来实现不同复杂度的判断逻辑。下面我将系统地讲解Java中的条件语句及其应用。</p><h2 id="一、基础条件语句"><a href="#一、基础条件语句" class="headerlink" title="一、基础条件语句"></a>一、基础条件语句</h2><h3 id="1-简单if语句"><a href="#1-简单if语句" class="headerlink" title="1. 简单if语句"></a>1. 简单if语句</h3><p><strong>语法结构：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (条件表达式) &#123;</span><br><span class="line">    <span class="comment">// 条件为true时执行的代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>示例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">score</span> <span class="operator">=</span> <span class="number">85</span>;</span><br><span class="line"><span class="keyword">if</span> (score &gt;= <span class="number">60</span>) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;及格&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 单行语句可省略大括号（但不推荐）</span></span><br><span class="line"><span class="keyword">if</span> (score &gt;= <span class="number">90</span>) System.out.println(<span class="string">&quot;优秀&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="2-if-else语句"><a href="#2-if-else语句" class="headerlink" title="2. if-else语句"></a>2. if-else语句</h3><p><strong>语法结构：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (条件表达式) &#123;</span><br><span class="line">    <span class="comment">// 条件为true时执行</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 条件为false时执行</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>示例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">17</span>;</span><br><span class="line"><span class="keyword">if</span> (age &gt;= <span class="number">18</span>) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;已成年&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;未成年&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-多重if-else语句"><a href="#3-多重if-else语句" class="headerlink" title="3. 多重if-else语句"></a>3. 多重if-else语句</h3><p><strong>语法结构：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (条件<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="comment">// 条件1为true时执行</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (条件<span class="number">2</span>) &#123;</span><br><span class="line">    <span class="comment">// 条件2为true时执行</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (条件<span class="number">3</span>) &#123;</span><br><span class="line">    <span class="comment">// 条件3为true时执行</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 以上条件都不满足时执行</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>示例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">score</span> <span class="operator">=</span> <span class="number">78</span>;</span><br><span class="line"><span class="keyword">if</span> (score &gt;= <span class="number">90</span>) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;优秀&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (score &gt;= <span class="number">80</span>) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;良好&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (score &gt;= <span class="number">70</span>) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;中等&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (score &gt;= <span class="number">60</span>) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;及格&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;不及格&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二、嵌套条件语句"><a href="#二、嵌套条件语句" class="headerlink" title="二、嵌套条件语句"></a>二、嵌套条件语句</h2><h3 id="1-基本嵌套结构"><a href="#1-基本嵌套结构" class="headerlink" title="1. 基本嵌套结构"></a>1. 基本嵌套结构</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (条件<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (条件<span class="number">2</span>) &#123;</span><br><span class="line">        <span class="comment">// 条件1和条件2都为true时执行</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 条件1为true但条件2为false时执行</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 条件1为false时执行</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-实际应用示例"><a href="#2-实际应用示例" class="headerlink" title="2. 实际应用示例"></a>2. 实际应用示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">hasLicense</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (age &gt;= <span class="number">18</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (hasLicense) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;可以合法驾驶&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;需要先考取驾照&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;未达到法定驾驶年龄&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、特殊条件表达式"><a href="#三、特殊条件表达式" class="headerlink" title="三、特殊条件表达式"></a>三、特殊条件表达式</h2><h3 id="1-三元运算符"><a href="#1-三元运算符" class="headerlink" title="1. 三元运算符"></a>1. 三元运算符</h3><p><strong>语法结构：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">变量 = (条件) ? 表达式<span class="number">1</span> : 表达式<span class="number">2</span>;</span><br></pre></td></tr></table></figure><p><strong>示例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>, b = <span class="number">20</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> (a &gt; b) ? a : b;</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> (score &gt;= <span class="number">60</span>) ? <span class="string">&quot;及格&quot;</span> : <span class="string">&quot;不及格&quot;</span>;</span><br></pre></td></tr></table></figure><h3 id="2-switch-case语句"><a href="#2-switch-case语句" class="headerlink" title="2. switch-case语句"></a>2. switch-case语句</h3><p><strong>语法结构：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (表达式) &#123;</span><br><span class="line">    <span class="keyword">case</span> 值<span class="number">1</span>:</span><br><span class="line">        <span class="comment">// 代码</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> 值<span class="number">2</span>:</span><br><span class="line">        <span class="comment">// 代码</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="comment">// 默认代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>示例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">day</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line">String dayName;</span><br><span class="line"><span class="keyword">switch</span> (day) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>: dayName = <span class="string">&quot;星期一&quot;</span>; <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>: dayName = <span class="string">&quot;星期二&quot;</span>; <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>: dayName = <span class="string">&quot;星期三&quot;</span>; <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">4</span>: dayName = <span class="string">&quot;星期四&quot;</span>; <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">5</span>: dayName = <span class="string">&quot;星期五&quot;</span>; <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">6</span>: dayName = <span class="string">&quot;星期六&quot;</span>; <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">7</span>: dayName = <span class="string">&quot;星期日&quot;</span>; <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>: dayName = <span class="string">&quot;无效日期&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(dayName);</span><br></pre></td></tr></table></figure><p><strong>Java 12+增强switch：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">dayName</span> <span class="operator">=</span> <span class="keyword">switch</span> (day) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span> -&gt; <span class="string">&quot;星期一&quot;</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span> -&gt; <span class="string">&quot;星期二&quot;</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span> -&gt; <span class="string">&quot;星期三&quot;</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">4</span> -&gt; <span class="string">&quot;星期四&quot;</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">5</span> -&gt; <span class="string">&quot;星期五&quot;</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">6</span> -&gt; <span class="string">&quot;星期六&quot;</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">7</span> -&gt; <span class="string">&quot;星期日&quot;</span>;</span><br><span class="line">    <span class="keyword">default</span> -&gt; <span class="string">&quot;无效日期&quot;</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="四、条件语句最佳实践"><a href="#四、条件语句最佳实践" class="headerlink" title="四、条件语句最佳实践"></a>四、条件语句最佳实践</h2><h3 id="1-代码风格建议"><a href="#1-代码风格建议" class="headerlink" title="1. 代码风格建议"></a>1. 代码风格建议</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 推荐：清晰的缩进和括号</span></span><br><span class="line"><span class="keyword">if</span> (condition) &#123;</span><br><span class="line">    <span class="comment">// 代码</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 代码</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不推荐：省略括号可能导致错误</span></span><br><span class="line"><span class="keyword">if</span> (condition) </span><br><span class="line">    doSomething();</span><br><span class="line">    doSomethingElse(); <span class="comment">// 这行不在if块内！</span></span><br></pre></td></tr></table></figure><h3 id="2-条件表达式优化"><a href="#2-条件表达式优化" class="headerlink" title="2. 条件表达式优化"></a>2. 条件表达式优化</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不推荐：嵌套过深</span></span><br><span class="line"><span class="keyword">if</span> (a &gt; b) &#123;</span><br><span class="line">    <span class="keyword">if</span> (c &gt; d) &#123;</span><br><span class="line">        <span class="keyword">if</span> (e &gt; f) &#123;</span><br><span class="line">            <span class="comment">// 代码</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 推荐：使用逻辑运算符简化</span></span><br><span class="line"><span class="keyword">if</span> (a &gt; b &amp;&amp; c &gt; d &amp;&amp; e &gt; f) &#123;</span><br><span class="line">    <span class="comment">// 代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-提前返回模式"><a href="#3-提前返回模式" class="headerlink" title="3. 提前返回模式"></a>3. 提前返回模式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不推荐：多层嵌套</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(User user)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (user != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (user.getName() != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (user.getAge() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 推荐：提前返回</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(User user)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (user == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (user.getName() == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (user.getAge() &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="五、常见问题与陷阱"><a href="#五、常见问题与陷阱" class="headerlink" title="五、常见问题与陷阱"></a>五、常见问题与陷阱</h2><h3 id="1-浮点数比较"><a href="#1-浮点数比较" class="headerlink" title="1. 浮点数比较"></a>1. 浮点数比较</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 错误方式</span></span><br><span class="line"><span class="type">double</span> <span class="variable">d</span> <span class="operator">=</span> <span class="number">0.1</span> + <span class="number">0.2</span>;</span><br><span class="line"><span class="keyword">if</span> (d == <span class="number">0.3</span>) &#123;  <span class="comment">// false!</span></span><br><span class="line">    System.out.println(<span class="string">&quot;相等&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确方式</span></span><br><span class="line"><span class="type">double</span> <span class="variable">epsilon</span> <span class="operator">=</span> <span class="number">1e-10</span>;</span><br><span class="line"><span class="keyword">if</span> (Math.abs(d - <span class="number">0.3</span>) &lt; epsilon) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;视为相等&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-空指针异常"><a href="#2-空指针异常" class="headerlink" title="2. 空指针异常"></a>2. 空指针异常</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="comment">// 错误方式</span></span><br><span class="line"><span class="keyword">if</span> (str.equals(<span class="string">&quot;test&quot;</span>)) &#123;...&#125;  <span class="comment">// NullPointerException</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确方式</span></span><br><span class="line"><span class="keyword">if</span> (<span class="string">&quot;test&quot;</span>.equals(str)) &#123;...&#125;  <span class="comment">// 安全</span></span><br><span class="line"><span class="comment">// 或</span></span><br><span class="line"><span class="keyword">if</span> (str != <span class="literal">null</span> &amp;&amp; str.equals(<span class="string">&quot;test&quot;</span>)) &#123;...&#125;</span><br></pre></td></tr></table></figure><h3 id="3-switch语句注意点"><a href="#3-switch语句注意点" class="headerlink" title="3. switch语句注意点"></a>3. switch语句注意点</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"><span class="keyword">switch</span> (num) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        System.out.println(<span class="string">&quot;一&quot;</span>);</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:  <span class="comment">// 匹配到这里</span></span><br><span class="line">        System.out.println(<span class="string">&quot;二&quot;</span>);  <span class="comment">// 会执行</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:  <span class="comment">// 没有break，继续执行</span></span><br><span class="line">        System.out.println(<span class="string">&quot;三&quot;</span>);  <span class="comment">// 也会执行</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        System.out.println(<span class="string">&quot;其他&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出：二 三</span></span><br></pre></td></tr></table></figure><h2 id="六、实际应用案例"><a href="#六、实际应用案例" class="headerlink" title="六、实际应用案例"></a>六、实际应用案例</h2><h3 id="1-登录验证"><a href="#1-登录验证" class="headerlink" title="1. 登录验证"></a>1. 登录验证</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">login</span><span class="params">(String username, String password)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (username == <span class="literal">null</span> || username.trim().isEmpty()) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;用户名不能为空&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (password == <span class="literal">null</span> || password.length() &lt; <span class="number">6</span>) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;密码长度至少6位&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!isValidUser(username, password)) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;用户名或密码错误&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;登录成功&quot;</span>);</span><br><span class="line">        <span class="comment">// 跳转到主页面</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-成绩等级判断"><a href="#2-成绩等级判断" class="headerlink" title="2. 成绩等级判断"></a>2. 成绩等级判断</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> <span class="title function_">determineGrade</span><span class="params">(<span class="type">int</span> score)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (score &lt; <span class="number">0</span> || score &gt; <span class="number">100</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;无效分数&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (score &gt;= <span class="number">90</span>) <span class="keyword">return</span> <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span> (score &gt;= <span class="number">80</span>) <span class="keyword">return</span> <span class="string">&#x27;B&#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span> (score &gt;= <span class="number">70</span>) <span class="keyword">return</span> <span class="string">&#x27;C&#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span> (score &gt;= <span class="number">60</span>) <span class="keyword">return</span> <span class="string">&#x27;D&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;F&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-月份天数判断"><a href="#3-月份天数判断" class="headerlink" title="3. 月份天数判断"></a>3. 月份天数判断</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">getDaysInMonth</span><span class="params">(<span class="type">int</span> year, <span class="type">int</span> month)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (month &lt; <span class="number">1</span> || month &gt; <span class="number">12</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;无效月份&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">switch</span> (month) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>: <span class="keyword">case</span> <span class="number">6</span>: <span class="keyword">case</span> <span class="number">9</span>: <span class="keyword">case</span> <span class="number">11</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">30</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">return</span> (year % <span class="number">400</span> == <span class="number">0</span>) || (year % <span class="number">100</span> != <span class="number">0</span> &amp;&amp; year % <span class="number">4</span> == <span class="number">0</span>) ? <span class="number">29</span> : <span class="number">28</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">31</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Java-switch-case-语句全面解析"><a href="#Java-switch-case-语句全面解析" class="headerlink" title="Java switch-case 语句全面解析"></a>Java switch-case 语句全面解析</h1><p>switch-case 是Java中用于多分支选择的结构，比多重if-else语句更加清晰易读。下面我将详细讲解switch-case的各种用法和特性。</p><h2 id="一、基本语法结构"><a href="#一、基本语法结构" class="headerlink" title="一、基本语法结构"></a>一、基本语法结构</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (表达式) &#123;</span><br><span class="line">    <span class="keyword">case</span> 值<span class="number">1</span>:</span><br><span class="line">        <span class="comment">// 代码块1</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> 值<span class="number">2</span>:</span><br><span class="line">        <span class="comment">// 代码块2</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="comment">// 默认代码块</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二、switch语句特性"><a href="#二、switch语句特性" class="headerlink" title="二、switch语句特性"></a>二、switch语句特性</h2><h3 id="1-支持的数据类型"><a href="#1-支持的数据类型" class="headerlink" title="1. 支持的数据类型"></a>1. 支持的数据类型</h3><ul><li><strong>Java 7之前</strong>：byte, short, int, char</li><li>**Java 7+**：新增String类型</li><li>**Java 14+**：支持表达式形式（预览特性）</li></ul><h3 id="2-执行流程"><a href="#2-执行流程" class="headerlink" title="2. 执行流程"></a>2. 执行流程</h3><ol><li>计算表达式的值</li><li>与case标签的值比较</li><li>匹配成功后执行对应的代码块</li><li>遇到break或执行到switch末尾时退出</li></ol><h3 id="3-break的重要性"><a href="#3-break的重要性" class="headerlink" title="3. break的重要性"></a>3. break的重要性</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">day</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"><span class="keyword">switch</span> (day) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>: System.out.println(<span class="string">&quot;周一&quot;</span>);</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>: System.out.println(<span class="string">&quot;周二&quot;</span>);  <span class="comment">// 从这里开始执行</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>: System.out.println(<span class="string">&quot;周三&quot;</span>);  <span class="comment">// 继续执行（没有break）</span></span><br><span class="line">    <span class="keyword">default</span>: System.out.println(<span class="string">&quot;其他&quot;</span>); <span class="comment">// 继续执行</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出：</span></span><br><span class="line"><span class="comment">// 周二</span></span><br><span class="line"><span class="comment">// 周三</span></span><br><span class="line"><span class="comment">// 其他</span></span><br></pre></td></tr></table></figure><h2 id="三、完整使用示例"><a href="#三、完整使用示例" class="headerlink" title="三、完整使用示例"></a>三、完整使用示例</h2><h3 id="1-传统写法"><a href="#1-传统写法" class="headerlink" title="1. 传统写法"></a>1. 传统写法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DayOfWeek</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">day</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line">        String dayName;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">switch</span> (day) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>: dayName = <span class="string">&quot;Monday&quot;</span>; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>: dayName = <span class="string">&quot;Tuesday&quot;</span>; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>: dayName = <span class="string">&quot;Wednesday&quot;</span>; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>: dayName = <span class="string">&quot;Thursday&quot;</span>; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">5</span>: dayName = <span class="string">&quot;Friday&quot;</span>; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">6</span>: dayName = <span class="string">&quot;Saturday&quot;</span>; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">7</span>: dayName = <span class="string">&quot;Sunday&quot;</span>; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>: dayName = <span class="string">&quot;Invalid day&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        System.out.println(dayName);  <span class="comment">// 输出：Wednesday</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-多个case合并"><a href="#2-多个case合并" class="headerlink" title="2. 多个case合并"></a>2. 多个case合并</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">month</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">year</span> <span class="operator">=</span> <span class="number">2020</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">days</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (month) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>: <span class="keyword">case</span> <span class="number">3</span>: <span class="keyword">case</span> <span class="number">5</span>: <span class="keyword">case</span> <span class="number">7</span>: <span class="keyword">case</span> <span class="number">8</span>: <span class="keyword">case</span> <span class="number">10</span>: <span class="keyword">case</span> <span class="number">12</span>:</span><br><span class="line">        days = <span class="number">31</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">4</span>: <span class="keyword">case</span> <span class="number">6</span>: <span class="keyword">case</span> <span class="number">9</span>: <span class="keyword">case</span> <span class="number">11</span>:</span><br><span class="line">        days = <span class="number">30</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">if</span> ((year % <span class="number">400</span> == <span class="number">0</span>) || (year % <span class="number">100</span> != <span class="number">0</span> &amp;&amp; year % <span class="number">4</span> == <span class="number">0</span>))</span><br><span class="line">            days = <span class="number">29</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            days = <span class="number">28</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        days = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;Days: &quot;</span> + days);  <span class="comment">// 输出：Days: 29</span></span><br></pre></td></tr></table></figure><h3 id="3-字符串匹配（Java-7-）"><a href="#3-字符串匹配（Java-7-）" class="headerlink" title="3. 字符串匹配（Java 7+）"></a>3. 字符串匹配（Java 7+）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">fruit</span> <span class="operator">=</span> <span class="string">&quot;Apple&quot;</span>;</span><br><span class="line"><span class="keyword">switch</span> (fruit) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;Orange&quot;</span>:</span><br><span class="line">        System.out.println(<span class="string">&quot;Selected Orange&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;Apple&quot;</span>:</span><br><span class="line">        System.out.println(<span class="string">&quot;Selected Apple&quot;</span>);  <span class="comment">// 输出这行</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;Banana&quot;</span>:</span><br><span class="line">        System.out.println(<span class="string">&quot;Selected Banana&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        System.out.println(<span class="string">&quot;Unknown fruit&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四、Java-12-新特性"><a href="#四、Java-12-新特性" class="headerlink" title="四、Java 12+ 新特性"></a>四、Java 12+ 新特性</h2><h3 id="1-箭头语法（-）"><a href="#1-箭头语法（-）" class="headerlink" title="1. 箭头语法（-&gt;）"></a>1. 箭头语法（-&gt;）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">day</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">dayType</span> <span class="operator">=</span> <span class="keyword">switch</span> (day) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> -&gt; <span class="string">&quot;Weekday&quot;</span>;  <span class="comment">// 多case匹配</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">6</span>, <span class="number">7</span> -&gt; <span class="string">&quot;Weekend&quot;</span>;</span><br><span class="line">    <span class="keyword">default</span> -&gt; <span class="string">&quot;Invalid&quot;</span>;</span><br><span class="line">&#125;;</span><br><span class="line">System.out.println(dayType);  <span class="comment">// 输出：Weekday</span></span><br></pre></td></tr></table></figure><h3 id="2-yield返回值（Java-13-）"><a href="#2-yield返回值（Java-13-）" class="headerlink" title="2. yield返回值（Java 13+）"></a>2. yield返回值（Java 13+）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">season</span> <span class="operator">=</span> <span class="keyword">switch</span> (month) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">12</span>, <span class="number">1</span>, <span class="number">2</span> -&gt; <span class="string">&quot;Winter&quot;</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> -&gt; <span class="string">&quot;Spring&quot;</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span> -&gt; &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Summer months&quot;</span>);</span><br><span class="line">        <span class="keyword">yield</span> <span class="string">&quot;Summer&quot;</span>;  <span class="comment">// 使用yield返回值</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span> -&gt; <span class="string">&quot;Autumn&quot;</span>;</span><br><span class="line">    <span class="keyword">default</span> -&gt; <span class="string">&quot;Unknown&quot;</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="五、最佳实践"><a href="#五、最佳实践" class="headerlink" title="五、最佳实践"></a>五、最佳实践</h2><ol><li><strong>总是包含default分支</strong>：处理未预期的值</li><li><strong>不要省略break</strong>：除非有意使用fall-through特性</li><li><strong>保持case分支简洁</strong>：复杂逻辑应提取为方法</li><li><strong>利用多case合并</strong>：简化相同处理的case</li><li><strong>考虑使用枚举</strong>：提高类型安全性</li></ol><h2 id="六、与if-else对比"><a href="#六、与if-else对比" class="headerlink" title="六、与if-else对比"></a>六、与if-else对比</h2><table><thead><tr><th>特性</th><th>switch-case</th><th>if-else</th></tr></thead><tbody><tr><td>可读性</td><td>多分支时更清晰</td><td>分支多时难以阅读</td></tr><tr><td>性能</td><td>通常使用跳转表更高效</td><td>需要顺序比较</td></tr><tr><td>表达式类型</td><td>有限支持</td><td>支持任何布尔表达式</td></tr><tr><td>适用场景</td><td>离散值精确匹配</td><td>范围判断或复杂条件</td></tr></tbody></table><h2 id="七、常见问题"><a href="#七、常见问题" class="headerlink" title="七、常见问题"></a>七、常见问题</h2><ol><li><p><strong>忘记break导致意外fall-through</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 错误示例</span></span><br><span class="line"><span class="keyword">switch</span> (x) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>: System.out.println(<span class="string">&quot;1&quot;</span>);  <span class="comment">// 忘记break</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>: System.out.println(<span class="string">&quot;2&quot;</span>); <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>case值重复</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (x) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>: ... <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>: ... <span class="keyword">break</span>;  <span class="comment">// 编译错误：重复的case</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>使用null导致NPE</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">switch</span> (s) &#123; ... &#125;  <span class="comment">// 抛出NullPointerException</span></span><br></pre></td></tr></table></figure></li><li><p><strong>类型不匹配</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">long</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="keyword">switch</span> (x) &#123; ... &#125;  <span class="comment">// 编译错误：不支持long类型</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="Java-Number-Math-类全面解析"><a href="#Java-Number-Math-类全面解析" class="headerlink" title="Java Number &amp; Math 类全面解析"></a>Java Number &amp; Math 类全面解析</h1><p>Java 提供了强大的数字处理能力，包括基本数据类型的包装类和丰富的数学运算工具。下面我将系统地讲解这些功能的使用方法和最佳实践。</p><h2 id="一、Number-包装类体系"><a href="#一、Number-包装类体系" class="headerlink" title="一、Number 包装类体系"></a>一、Number 包装类体系</h2><h3 id="1-包装类与基本类型对应关系"><a href="#1-包装类与基本类型对应关系" class="headerlink" title="1. 包装类与基本类型对应关系"></a>1. 包装类与基本类型对应关系</h3><table><thead><tr><th>基本类型</th><th>包装类</th><th>继承关系</th></tr></thead><tbody><tr><td>byte</td><td>Byte</td><td>→ Number → Object</td></tr><tr><td>short</td><td>Short</td><td>→ Number → Object</td></tr><tr><td>int</td><td>Integer</td><td>→ Number → Object</td></tr><tr><td>long</td><td>Long</td><td>→ Number → Object</td></tr><tr><td>float</td><td>Float</td><td>→ Number → Object</td></tr><tr><td>double</td><td>Double</td><td>→ Number → Object</td></tr><tr><td>char</td><td>Character</td><td>→ Object</td></tr><tr><td>boolean</td><td>Boolean</td><td>→ Object</td></tr></tbody></table><h3 id="2-自动装箱与拆箱"><a href="#2-自动装箱与拆箱" class="headerlink" title="2. 自动装箱与拆箱"></a>2. 自动装箱与拆箱</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自动装箱</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;      <span class="comment">// 编译器转换为 Integer.valueOf(10)</span></span><br><span class="line"><span class="type">Double</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">3.14</span>;     <span class="comment">// Double.valueOf(3.14)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 自动拆箱</span></span><br><span class="line"><span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> a;           <span class="comment">// a.intValue()</span></span><br><span class="line"><span class="type">double</span> <span class="variable">d</span> <span class="operator">=</span> b;        <span class="comment">// b.doubleValue()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 混合运算时的自动拆箱</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">x = x + <span class="number">10</span>;          <span class="comment">// x拆箱→相加→结果装箱</span></span><br></pre></td></tr></table></figure><h3 id="3-常用方法示例"><a href="#3-常用方法示例" class="headerlink" title="3. 常用方法示例"></a>3. 常用方法示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 字符串转换</span></span><br><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> Integer.parseInt(<span class="string">&quot;123&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> Integer.toString(<span class="number">456</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 比较大小</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">10</span>, y = <span class="number">20</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">compareResult</span> <span class="operator">=</span> x.compareTo(y);  <span class="comment">// -1 (x &lt; y)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 类型转换</span></span><br><span class="line"><span class="type">double</span> <span class="variable">d</span> <span class="operator">=</span> x.doubleValue();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 进制转换</span></span><br><span class="line"><span class="type">String</span> <span class="variable">binary</span> <span class="operator">=</span> Integer.toBinaryString(<span class="number">10</span>);  <span class="comment">// &quot;1010&quot;</span></span><br><span class="line"><span class="type">String</span> <span class="variable">hex</span> <span class="operator">=</span> Integer.toHexString(<span class="number">255</span>);      <span class="comment">// &quot;ff&quot;</span></span><br></pre></td></tr></table></figure><h2 id="二、Math-数学工具类"><a href="#二、Math-数学工具类" class="headerlink" title="二、Math 数学工具类"></a>二、Math 数学工具类</h2><h3 id="1-基本数学运算"><a href="#1-基本数学运算" class="headerlink" title="1. 基本数学运算"></a>1. 基本数学运算</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 绝对值</span></span><br><span class="line">Math.abs(-<span class="number">5.6</span>);      <span class="comment">// 5.6</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 取整运算</span></span><br><span class="line">Math.ceil(<span class="number">3.2</span>);      <span class="comment">// 4.0 (向上取整)</span></span><br><span class="line">Math.floor(<span class="number">3.8</span>);     <span class="comment">// 3.0 (向下取整)</span></span><br><span class="line">Math.round(<span class="number">3.5</span>);     <span class="comment">// 4 (四舍五入)</span></span><br><span class="line">Math.rint(<span class="number">3.5</span>);      <span class="comment">// 4.0 (最接近的整数)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 极值</span></span><br><span class="line">Math.max(<span class="number">10</span>, <span class="number">20</span>);    <span class="comment">// 20</span></span><br><span class="line">Math.min(<span class="number">1.2</span>, <span class="number">3.4</span>);  <span class="comment">// 1.2</span></span><br></pre></td></tr></table></figure><h3 id="2-指数与对数"><a href="#2-指数与对数" class="headerlink" title="2. 指数与对数"></a>2. 指数与对数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 幂运算</span></span><br><span class="line">Math.pow(<span class="number">2</span>, <span class="number">3</span>);      <span class="comment">// 8.0 (2的3次方)</span></span><br><span class="line">Math.exp(<span class="number">1</span>);         <span class="comment">// 2.718... (e的1次方)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 对数</span></span><br><span class="line">Math.log(Math.E);    <span class="comment">// 1.0 (自然对数)</span></span><br><span class="line">Math.log10(<span class="number">100</span>);     <span class="comment">// 2.0 (以10为底)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 平方根</span></span><br><span class="line">Math.sqrt(<span class="number">16</span>);       <span class="comment">// 4.0</span></span><br><span class="line">Math.cbrt(<span class="number">27</span>);       <span class="comment">// 3.0 (立方根)</span></span><br></pre></td></tr></table></figure><h3 id="3-三角函数"><a href="#3-三角函数" class="headerlink" title="3. 三角函数"></a>3. 三角函数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 角度转弧度</span></span><br><span class="line"><span class="type">double</span> <span class="variable">radians</span> <span class="operator">=</span> Math.toRadians(<span class="number">30</span>);  <span class="comment">// 0.5236</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 三角函数</span></span><br><span class="line">Math.sin(Math.PI/<span class="number">6</span>);     <span class="comment">// 0.5 (30度正弦)</span></span><br><span class="line">Math.cos(Math.PI/<span class="number">3</span>);     <span class="comment">// 0.5 (60度余弦)</span></span><br><span class="line">Math.tan(Math.PI/<span class="number">4</span>);     <span class="comment">// 1.0 (45度正切)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 反三角函数</span></span><br><span class="line">Math.asin(<span class="number">0.5</span>);          <span class="comment">// 0.5236 (≈π/6)</span></span><br><span class="line">Math.acos(<span class="number">0.5</span>);          <span class="comment">// 1.0472 (≈π/3)</span></span><br><span class="line">Math.atan(<span class="number">1</span>);            <span class="comment">// 0.7854 (≈π/4)</span></span><br></pre></td></tr></table></figure><h3 id="4-随机数生成"><a href="#4-随机数生成" class="headerlink" title="4. 随机数生成"></a>4. 随机数生成</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 生成[0,1)之间的随机double</span></span><br><span class="line"><span class="type">double</span> <span class="variable">rand1</span> <span class="operator">=</span> Math.random();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成[1,100]的随机整数</span></span><br><span class="line"><span class="type">int</span> <span class="variable">rand2</span> <span class="operator">=</span> (<span class="type">int</span>)(Math.random() * <span class="number">100</span>) + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Java 8+更好的方式</span></span><br><span class="line"><span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line"><span class="type">int</span> <span class="variable">rand3</span> <span class="operator">=</span> random.nextInt(<span class="number">100</span>) + <span class="number">1</span>;  <span class="comment">// [1,100]</span></span><br></pre></td></tr></table></figure><h2 id="三、数值处理高级技巧"><a href="#三、数值处理高级技巧" class="headerlink" title="三、数值处理高级技巧"></a>三、数值处理高级技巧</h2><h3 id="1-精确计算问题"><a href="#1-精确计算问题" class="headerlink" title="1. 精确计算问题"></a>1. 精确计算问题</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 浮点数精度问题</span></span><br><span class="line">System.out.println(<span class="number">0.1</span> + <span class="number">0.2</span>);  <span class="comment">// 0.30000000000000004</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用BigDecimal解决</span></span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">bd1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;0.1&quot;</span>);</span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">bd2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;0.2&quot;</span>);</span><br><span class="line">System.out.println(bd1.add(bd2));  <span class="comment">// 0.3</span></span><br></pre></td></tr></table></figure><h3 id="2-数值溢出处理"><a href="#2-数值溢出处理" class="headerlink" title="2. 数值溢出处理"></a>2. 数值溢出处理</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 整数溢出</span></span><br><span class="line"><span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> Integer.MAX_VALUE;</span><br><span class="line"><span class="type">int</span> <span class="variable">overflow</span> <span class="operator">=</span> max + <span class="number">1</span>;  <span class="comment">// -2147483648 (溢出)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 安全运算方法</span></span><br><span class="line">Math.addExact(max, <span class="number">1</span>);   <span class="comment">// 抛出ArithmeticException</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用更大范围的类型</span></span><br><span class="line"><span class="type">long</span> <span class="variable">safeResult</span> <span class="operator">=</span> (<span class="type">long</span>)max + <span class="number">1</span>;</span><br></pre></td></tr></table></figure><h3 id="3-位运算操作"><a href="#3-位运算操作" class="headerlink" title="3. 位运算操作"></a>3. 位运算操作</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 基本位运算</span></span><br><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">0b1100</span>;  <span class="comment">// 12</span></span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">0b1010</span>;  <span class="comment">// 10</span></span><br><span class="line">a &amp; b;           <span class="comment">// 8 (0b1000)</span></span><br><span class="line">a | b;           <span class="comment">// 14 (0b1110)</span></span><br><span class="line">a ^ b;           <span class="comment">// 6 (0b0110)</span></span><br><span class="line">~a;              <span class="comment">// -13 (0b...11110011)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 位移运算</span></span><br><span class="line"><span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">0b1100</span>;</span><br><span class="line">c &lt;&lt; <span class="number">2</span>;          <span class="comment">// 48 (0b110000)</span></span><br><span class="line">c &gt;&gt; <span class="number">1</span>;          <span class="comment">// 6 (0b0110)</span></span><br><span class="line">c &gt;&gt;&gt; <span class="number">1</span>;         <span class="comment">// 6 (无符号右移)</span></span><br></pre></td></tr></table></figure><h2 id="四、Java-8-新增数值API"><a href="#四、Java-8-新增数值API" class="headerlink" title="四、Java 8+ 新增数值API"></a>四、Java 8+ 新增数值API</h2><h3 id="1-无符号数支持"><a href="#1-无符号数支持" class="headerlink" title="1. 无符号数支持"></a>1. 无符号数支持</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 无符号比较</span></span><br><span class="line">Integer.compareUnsigned(-<span class="number">1</span>, <span class="number">1</span>);  <span class="comment">// 1 (视为无符号数比较)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 无符号转换</span></span><br><span class="line">Long.toUnsignedString(-<span class="number">1</span>);       <span class="comment">// &quot;18446744073709551615&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 无符号除法</span></span><br><span class="line">Integer.divideUnsigned(-<span class="number">2</span>, <span class="number">2</span>);   <span class="comment">// 2147483647</span></span><br></pre></td></tr></table></figure><h3 id="2-数值溢出检查"><a href="#2-数值溢出检查" class="headerlink" title="2. 数值溢出检查"></a>2. 数值溢出检查</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 安全运算方法</span></span><br><span class="line">Math.addExact(<span class="number">100000</span>, <span class="number">200000</span>);    <span class="comment">// 正常</span></span><br><span class="line">Math.addExact(Integer.MAX_VALUE, <span class="number">1</span>); <span class="comment">// 抛出异常</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 乘法检查</span></span><br><span class="line">Math.multiplyExact(<span class="number">100000</span>, <span class="number">1000</span>); <span class="comment">// 正常</span></span><br><span class="line">Math.multiplyExact(Integer.MAX_VALUE, <span class="number">2</span>); <span class="comment">// 抛出异常</span></span><br></pre></td></tr></table></figure><h3 id="3-数学增强方法"><a href="#3-数学增强方法" class="headerlink" title="3. 数学增强方法"></a>3. 数学增强方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 精确数学运算</span></span><br><span class="line">Math.floorDiv(<span class="number">5</span>, <span class="number">2</span>);       <span class="comment">// 2</span></span><br><span class="line">Math.floorMod(<span class="number">5</span>, <span class="number">2</span>);       <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 双曲函数</span></span><br><span class="line">Math.sinh(<span class="number">1.0</span>);           <span class="comment">// 双曲正弦</span></span><br><span class="line">Math.cosh(<span class="number">1.0</span>);           <span class="comment">// 双曲余弦</span></span><br><span class="line">Math.tanh(<span class="number">1.0</span>);           <span class="comment">// 双曲正切</span></span><br></pre></td></tr></table></figure><h2 id="五、最佳实践与性能考虑"><a href="#五、最佳实践与性能考虑" class="headerlink" title="五、最佳实践与性能考虑"></a>五、最佳实践与性能考虑</h2><ol><li><p><strong>优先使用基本类型</strong>：包装类有额外开销</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不好</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">    sum += i;  <span class="comment">// 反复装箱拆箱</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 好</span></span><br><span class="line"><span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">    sum += i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>缓存机制利用</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Integer</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">127</span>;</span><br><span class="line"><span class="type">Integer</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">127</span>;</span><br><span class="line">System.out.println(a == b);  <span class="comment">// true (使用缓存)</span></span><br><span class="line"></span><br><span class="line"><span class="type">Integer</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">128</span>;</span><br><span class="line"><span class="type">Integer</span> <span class="variable">d</span> <span class="operator">=</span> <span class="number">128</span>;</span><br><span class="line">System.out.println(c == d);  <span class="comment">// false (超出缓存范围)</span></span><br></pre></td></tr></table></figure></li><li><p><strong>精确计算选择</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 金融计算使用BigDecimal</span></span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">price</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;19.99&quot;</span>);</span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">quantity</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;2.5&quot;</span>);</span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">total</span> <span class="operator">=</span> price.multiply(quantity).setScale(<span class="number">2</span>, RoundingMode.HALF_UP);</span><br></pre></td></tr></table></figure></li><li><p><strong>数学函数优化</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 重复计算先缓存</span></span><br><span class="line"><span class="type">double</span> <span class="variable">sinValue</span> <span class="operator">=</span> Math.sin(angle);</span><br><span class="line"><span class="type">double</span> <span class="variable">cosValue</span> <span class="operator">=</span> Math.cos(angle);</span><br></pre></td></tr></table></figure><p>记住在关键性能路径上避免不必要的对象创建，并注意数值精度和溢出问题。</p></li></ol><h1 id="Java-Character-类全面解析"><a href="#Java-Character-类全面解析" class="headerlink" title="Java Character 类全面解析"></a>Java Character 类全面解析</h1><p>Character 类是 Java 中用于操作单个字符的包装类，提供了丰富的字符操作方法。下面我将系统地讲解 Character 类的各种功能和使用场景。</p><h2 id="一、Character-类基础"><a href="#一、Character-类基础" class="headerlink" title="一、Character 类基础"></a>一、Character 类基础</h2><h3 id="1-创建-Character-对象"><a href="#1-创建-Character-对象" class="headerlink" title="1. 创建 Character 对象"></a>1. 创建 Character 对象</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 构造函数方式（Java 9后已废弃）</span></span><br><span class="line"><span class="type">Character</span> <span class="variable">ch1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Character</span>(<span class="string">&#x27;A&#x27;</span>);  <span class="comment">// 不推荐</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 自动装箱方式（推荐）</span></span><br><span class="line"><span class="type">Character</span> <span class="variable">ch2</span> <span class="operator">=</span> <span class="string">&#x27;B&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// valueOf 方法（推荐）</span></span><br><span class="line"><span class="type">Character</span> <span class="variable">ch3</span> <span class="operator">=</span> Character.valueOf(<span class="string">&#x27;C&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="2-基本方法"><a href="#2-基本方法" class="headerlink" title="2. 基本方法"></a>2. 基本方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取字符的Unicode值</span></span><br><span class="line"><span class="type">int</span> <span class="variable">code</span> <span class="operator">=</span> Character.getNumericValue(c);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断字符类型</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">isLetter</span> <span class="operator">=</span> Character.isLetter(c);      <span class="comment">// true</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">isDigit</span> <span class="operator">=</span> Character.isDigit(<span class="string">&#x27;7&#x27;</span>);      <span class="comment">// true</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">isSpace</span> <span class="operator">=</span> Character.isWhitespace(<span class="string">&#x27; &#x27;</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 大小写转换</span></span><br><span class="line"><span class="type">char</span> <span class="variable">upper</span> <span class="operator">=</span> Character.toUpperCase(<span class="string">&#x27;a&#x27;</span>);  <span class="comment">// &#x27;A&#x27;</span></span><br><span class="line"><span class="type">char</span> <span class="variable">lower</span> <span class="operator">=</span> Character.toLowerCase(<span class="string">&#x27;Z&#x27;</span>);  <span class="comment">// &#x27;z&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="二、字符类型检测方法"><a href="#二、字符类型检测方法" class="headerlink" title="二、字符类型检测方法"></a>二、字符类型检测方法</h2><h3 id="1-常用检测方法"><a href="#1-常用检测方法" class="headerlink" title="1. 常用检测方法"></a>1. 常用检测方法</h3><table><thead><tr><th>方法名</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td><code>isLetter(char ch)</code></td><td>判断是否是字母</td><td><code>isLetter(&#39;A&#39;) → true</code></td></tr><tr><td><code>isDigit(char ch)</code></td><td>判断是否是数字</td><td><code>isDigit(&#39;5&#39;) → true</code></td></tr><tr><td><code>isLetterOrDigit(char)</code></td><td>判断是否是字母或数字</td><td><code>isLetterOrDigit(&#39;_&#39;) → false</code></td></tr><tr><td><code>isWhitespace(char)</code></td><td>判断是否是空白字符</td><td><code>isWhitespace(&#39;\t&#39;) → true</code></td></tr><tr><td><code>isUpperCase(char)</code></td><td>判断是否是大写字母</td><td><code>isUpperCase(&#39;A&#39;) → true</code></td></tr><tr><td><code>isLowerCase(char)</code></td><td>判断是否是小写字母</td><td><code>isLowerCase(&#39;a&#39;) → true</code></td></tr></tbody></table><h3 id="2-Unicode-相关检测"><a href="#2-Unicode-相关检测" class="headerlink" title="2. Unicode 相关检测"></a>2. Unicode 相关检测</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断是否是Java标识符起始字符</span></span><br><span class="line">Character.isJavaIdentifierStart(<span class="string">&#x27;$&#x27;</span>);  <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断是否是Java标识符部分字符</span></span><br><span class="line">Character.isJavaIdentifierPart(<span class="string">&#x27;_&#x27;</span>);   <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断是否是Unicode空格字符</span></span><br><span class="line">Character.isSpaceChar(<span class="string">&#x27;\u00A0&#x27;</span>);       <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断是否是代理字符</span></span><br><span class="line">Character.isSurrogate(<span class="string">&#x27;\uD800&#x27;</span>);       <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h2 id="三、字符转换操作"><a href="#三、字符转换操作" class="headerlink" title="三、字符转换操作"></a>三、字符转换操作</h2><h3 id="1-大小写转换"><a href="#1-大小写转换" class="headerlink" title="1. 大小写转换"></a>1. 大小写转换</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 单个字符转换</span></span><br><span class="line"><span class="type">char</span> <span class="variable">upperA</span> <span class="operator">=</span> Character.toUpperCase(<span class="string">&#x27;a&#x27;</span>);  <span class="comment">// &#x27;A&#x27;</span></span><br><span class="line"><span class="type">char</span> <span class="variable">lowerZ</span> <span class="operator">=</span> Character.toLowerCase(<span class="string">&#x27;Z&#x27;</span>);  <span class="comment">// &#x27;z&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 整个字符串转换</span></span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">upperStr</span> <span class="operator">=</span> str.toUpperCase();  <span class="comment">// &quot;HELLO WORLD&quot;</span></span><br><span class="line"><span class="type">String</span> <span class="variable">lowerStr</span> <span class="operator">=</span> str.toLowerCase();  <span class="comment">// &quot;hello world&quot;</span></span><br></pre></td></tr></table></figure><h3 id="2-数字字符转换"><a href="#2-数字字符转换" class="headerlink" title="2. 数字字符转换"></a>2. 数字字符转换</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 字符数字转数值</span></span><br><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> Character.getNumericValue(<span class="string">&#x27;9&#x27;</span>);  <span class="comment">// 9</span></span><br><span class="line"><span class="type">int</span> <span class="variable">hex</span> <span class="operator">=</span> Character.getNumericValue(<span class="string">&#x27;A&#x27;</span>);  <span class="comment">// 10 (十六进制)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 数值转字符</span></span><br><span class="line"><span class="type">char</span> <span class="variable">digit</span> <span class="operator">=</span> Character.forDigit(<span class="number">15</span>, <span class="number">16</span>);   <span class="comment">// &#x27;f&#x27; (16进制)</span></span><br></pre></td></tr></table></figure><h3 id="3-字符与Unicode"><a href="#3-字符与Unicode" class="headerlink" title="3. 字符与Unicode"></a>3. 字符与Unicode</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取Unicode代码点</span></span><br><span class="line"><span class="type">int</span> <span class="variable">codePoint</span> <span class="operator">=</span> Character.codePointAt(<span class="string">&quot;ABC&quot;</span>, <span class="number">1</span>);  <span class="comment">// 66 (&#x27;B&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 代码点转字符</span></span><br><span class="line"><span class="type">char</span>[] chars = Character.toChars(<span class="number">0x1F600</span>);  <span class="comment">// 😀</span></span><br></pre></td></tr></table></figure><h2 id="四、特殊字符处理"><a href="#四、特殊字符处理" class="headerlink" title="四、特殊字符处理"></a>四、特殊字符处理</h2><h3 id="1-转义字符"><a href="#1-转义字符" class="headerlink" title="1. 转义字符"></a>1. 转义字符</h3><table><thead><tr><th>转义序列</th><th>Unicode</th><th>描述</th></tr></thead><tbody><tr><td><code>\t</code></td><td>\u0009</td><td>水平制表符</td></tr><tr><td><code>\b</code></td><td>\u0008</td><td>退格</td></tr><tr><td><code>\n</code></td><td>\u000a</td><td>换行</td></tr><tr><td><code>\r</code></td><td>\u000d</td><td>回车</td></tr><tr><td><code>\f</code></td><td>\u000c</td><td>换页</td></tr><tr><td><code>\&#39;</code></td><td>\u0027</td><td>单引号</td></tr><tr><td><code>\&quot;</code></td><td>\u0022</td><td>双引号</td></tr><tr><td><code>\\</code></td><td>\u005c</td><td>反斜杠</td></tr></tbody></table><h3 id="2-Unicode-处理"><a href="#2-Unicode-处理" class="headerlink" title="2. Unicode 处理"></a>2. Unicode 处理</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 直接使用Unicode</span></span><br><span class="line"><span class="type">char</span> <span class="variable">omega</span> <span class="operator">=</span> <span class="string">&#x27;\u03A9&#x27;</span>;  <span class="comment">// Ω</span></span><br><span class="line">System.out.println(omega);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理代理对（Surrogate Pair）</span></span><br><span class="line"><span class="type">String</span> <span class="variable">emoji</span> <span class="operator">=</span> <span class="string">&quot;\uD83D\uDE00&quot;</span>;  <span class="comment">// 😀</span></span><br><span class="line"><span class="type">int</span> <span class="variable">codePoint</span> <span class="operator">=</span> emoji.codePointAt(<span class="number">0</span>);  <span class="comment">// 128512</span></span><br></pre></td></tr></table></figure><h2 id="五、Character-常量"><a href="#五、Character-常量" class="headerlink" title="五、Character 常量"></a>五、Character 常量</h2><p>Character 类提供了许多有用的常量：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 基本类型大小</span></span><br><span class="line">Character.SIZE;      <span class="comment">// 16 (bits)</span></span><br><span class="line">Character.BYTES;     <span class="comment">// 2 (bytes)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 特殊字符值</span></span><br><span class="line">Character.MIN_VALUE; <span class="comment">// &#x27;\u0000&#x27;</span></span><br><span class="line">Character.MAX_VALUE; <span class="comment">// &#x27;\uffff&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Unicode常量</span></span><br><span class="line">Character.MIN_CODE_POINT;  <span class="comment">// 0x000000</span></span><br><span class="line">Character.MAX_CODE_POINT;  <span class="comment">// 0x10FFFF</span></span><br><span class="line">Character.MIN_SURROGATE;   <span class="comment">// &#x27;\uD800&#x27;</span></span><br><span class="line">Character.MAX_SURROGATE;   <span class="comment">// &#x27;\uDFFF&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="六、实际应用示例"><a href="#六、实际应用示例" class="headerlink" title="六、实际应用示例"></a>六、实际应用示例</h2><h3 id="1-统计字符串中的字母和数字"><a href="#1-统计字符串中的字母和数字" class="headerlink" title="1. 统计字符串中的字母和数字"></a>1. 统计字符串中的字母和数字</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CharCounter</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">countChars</span><span class="params">(String str)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">letters</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">digits</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">others</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> c : str.toCharArray()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (Character.isLetter(c)) &#123;</span><br><span class="line">                letters++;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Character.isDigit(c)) &#123;</span><br><span class="line">                digits++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                others++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;字母: &quot;</span> + letters);</span><br><span class="line">        System.out.println(<span class="string">&quot;数字: &quot;</span> + digits);</span><br><span class="line">        System.out.println(<span class="string">&quot;其他: &quot;</span> + others);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        countChars(<span class="string">&quot;Hello123!你好&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-密码强度验证"><a href="#2-密码强度验证" class="headerlink" title="2. 密码强度验证"></a>2. 密码强度验证</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PasswordValidator</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isStrongPassword</span><span class="params">(String password)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (password == <span class="literal">null</span> || password.length() &lt; <span class="number">8</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="type">boolean</span> <span class="variable">hasUpper</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">hasLower</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">hasDigit</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">hasSpecial</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> c : password.toCharArray()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (Character.isUpperCase(c)) hasUpper = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (Character.isLowerCase(c)) hasLower = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (Character.isDigit(c)) hasDigit = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (!Character.isLetterOrDigit(c)) hasSpecial = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> hasUpper &amp;&amp; hasLower &amp;&amp; hasDigit &amp;&amp; hasSpecial;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(isStrongPassword(<span class="string">&quot;Pass123!&quot;</span>));  <span class="comment">// true</span></span><br><span class="line">        System.out.println(isStrongPassword(<span class="string">&quot;weak&quot;</span>));      <span class="comment">// false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-驼峰命名转换"><a href="#3-驼峰命名转换" class="headerlink" title="3. 驼峰命名转换"></a>3. 驼峰命名转换</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CamelCaseConverter</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">toCamelCase</span><span class="params">(String input)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (input == <span class="literal">null</span> || input.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> input;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">nextUpper</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; input.length(); i++) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">current</span> <span class="operator">=</span> input.charAt(i);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (current == <span class="string">&#x27;_&#x27;</span>) &#123;</span><br><span class="line">                nextUpper = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (nextUpper) &#123;</span><br><span class="line">                    result.append(Character.toUpperCase(current));</span><br><span class="line">                    nextUpper = <span class="literal">false</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    result.append(Character.toLowerCase(current));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> result.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(toCamelCase(<span class="string">&quot;hello_world&quot;</span>));  <span class="comment">// helloWorld</span></span><br><span class="line">        System.out.println(toCamelCase(<span class="string">&quot;MY_VAR_NAME&quot;</span>));  <span class="comment">// myVarName</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="七、性能考虑与最佳实践"><a href="#七、性能考虑与最佳实践" class="headerlink" title="七、性能考虑与最佳实践"></a>七、性能考虑与最佳实践</h2><ol><li><p><strong>避免不必要的装箱</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不好</span></span><br><span class="line"><span class="type">Character</span> <span class="variable">ch</span> <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span> (ch.equals(<span class="string">&#x27;b&#x27;</span>)) &#123;...&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 好</span></span><br><span class="line"><span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span> (c == <span class="string">&#x27;b&#x27;</span>) &#123;...&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>使用String处理字符串</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不要这样处理字符串</span></span><br><span class="line">Character[] chars = ...;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 应该使用String或char[]</span></span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> ...;</span><br><span class="line"><span class="type">char</span>[] chars = ...;</span><br></pre></td></tr></table></figure></li><li><p><strong>处理代理对</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">emoji</span> <span class="operator">=</span> <span class="string">&quot;😀&quot;</span>;</span><br><span class="line"><span class="comment">// 错误方式（会拆分成两个char）</span></span><br><span class="line"><span class="type">char</span> <span class="variable">first</span> <span class="operator">=</span> emoji.charAt(<span class="number">0</span>);  <span class="comment">// &#x27;\uD83D&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确方式（处理代码点）</span></span><br><span class="line"><span class="type">int</span> <span class="variable">codePoint</span> <span class="operator">=</span> emoji.codePointAt(<span class="number">0</span>);  <span class="comment">// 128512</span></span><br></pre></td></tr></table></figure></li><li><p><strong>使用Character常量</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不要使用魔法值</span></span><br><span class="line"><span class="keyword">if</span> (c == <span class="number">9</span>) &#123;...&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用预定义常量</span></span><br><span class="line"><span class="keyword">if</span> (c == <span class="string">&#x27;\t&#x27;</span>) &#123;...&#125;</span><br><span class="line"><span class="comment">// 或</span></span><br><span class="line"><span class="keyword">if</span> (c == Character.TAB) &#123;...&#125;</span><br></pre></td></tr></table></figure></li></ol><p>通过合理使用 Character 类，可以高效地处理各种字符操作需求，特别是在文本处理、输入验证和国际化应用中。记住在性能敏感的场景中优先使用基本类型 char，并注意 Unicode 特殊字符的处理。</p><h1 id="Java-String-类全面解析"><a href="#Java-String-类全面解析" class="headerlink" title="Java String 类全面解析"></a>Java String 类全面解析</h1><p>String 类是 Java 中最常用的类之一，用于表示和操作文本数据。下面我将系统地讲解 String 类的各种功能和使用场景。</p><h2 id="一、String-类基础"><a href="#一、String-类基础" class="headerlink" title="一、String 类基础"></a>一、String 类基础</h2><h3 id="1-创建-String-对象"><a href="#1-创建-String-对象" class="headerlink" title="1. 创建 String 对象"></a>1. 创建 String 对象</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 字面量方式（推荐）</span></span><br><span class="line"><span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构造函数方式</span></span><br><span class="line"><span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;World&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从字符数组创建</span></span><br><span class="line"><span class="type">char</span>[] charArray = &#123;<span class="string">&#x27;J&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;v&#x27;</span>, <span class="string">&#x27;a&#x27;</span>&#125;;</span><br><span class="line"><span class="type">String</span> <span class="variable">str3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(charArray);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从字节数组创建</span></span><br><span class="line"><span class="type">byte</span>[] byteArray = &#123;<span class="number">65</span>, <span class="number">66</span>, <span class="number">67</span>&#125;;</span><br><span class="line"><span class="type">String</span> <span class="variable">str4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(byteArray);  <span class="comment">// &quot;ABC&quot;</span></span><br></pre></td></tr></table></figure><h3 id="2-字符串池与内存管理"><a href="#2-字符串池与内存管理" class="headerlink" title="2. 字符串池与内存管理"></a>2. 字符串池与内存管理</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;Java&quot;</span>;      <span class="comment">// 存储在字符串常量池</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">&quot;Java&quot;</span>;      <span class="comment">// 复用常量池中的&quot;Java&quot;</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;Java&quot;</span>);  <span class="comment">// 在堆上创建新对象</span></span><br><span class="line"></span><br><span class="line">System.out.println(s1 == s2);  <span class="comment">// true (相同引用)</span></span><br><span class="line">System.out.println(s1 == s3);  <span class="comment">// false (不同对象)</span></span><br><span class="line">System.out.println(s1.equals(s3));  <span class="comment">// true (内容相同)</span></span><br></pre></td></tr></table></figure><h2 id="二、字符串基本操作"><a href="#二、字符串基本操作" class="headerlink" title="二、字符串基本操作"></a>二、字符串基本操作</h2><h3 id="1-获取字符串信息"><a href="#1-获取字符串信息" class="headerlink" title="1. 获取字符串信息"></a>1. 获取字符串信息</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取长度</span></span><br><span class="line"><span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> str.length();  <span class="comment">// 11</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取指定位置字符</span></span><br><span class="line"><span class="type">char</span> <span class="variable">ch</span> <span class="operator">=</span> str.charAt(<span class="number">1</span>);  <span class="comment">// &#x27;e&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取子字符串位置</span></span><br><span class="line"><span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> str.indexOf(<span class="string">&quot;World&quot;</span>);  <span class="comment">// 6</span></span><br><span class="line"><span class="type">int</span> <span class="variable">lastIndex</span> <span class="operator">=</span> str.lastIndexOf(<span class="string">&#x27;o&#x27;</span>);  <span class="comment">// 7</span></span><br></pre></td></tr></table></figure><h3 id="2-字符串比较"><a href="#2-字符串比较" class="headerlink" title="2. 字符串比较"></a>2. 字符串比较</h3><table><thead><tr><th>方法名</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td><code>equals(Object obj)</code></td><td>比较内容是否相同</td><td><code>&quot;abc&quot;.equals(&quot;abc&quot;) → true</code></td></tr><tr><td><code>equalsIgnoreCase(String)</code></td><td>忽略大小写比较内容</td><td><code>&quot;ABC&quot;.equalsIgnoreCase(&quot;abc&quot;) → true</code></td></tr><tr><td><code>compareTo(String)</code></td><td>按字典顺序比较</td><td><code>&quot;a&quot;.compareTo(&quot;b&quot;) → -1</code></td></tr><tr><td><code>compareToIgnoreCase(String)</code></td><td>忽略大小写的字典顺序比较</td><td><code>&quot;A&quot;.compareToIgnoreCase(&quot;a&quot;) → 0</code></td></tr><tr><td><code>startsWith(String)</code></td><td>检查是否以指定字符串开头</td><td><code>&quot;Hello&quot;.startsWith(&quot;He&quot;) → true</code></td></tr><tr><td><code>endsWith(String)</code></td><td>检查是否以指定字符串结尾</td><td><code>&quot;Hello&quot;.endsWith(&quot;lo&quot;) → true</code></td></tr></tbody></table><h2 id="三、字符串操作与转换"><a href="#三、字符串操作与转换" class="headerlink" title="三、字符串操作与转换"></a>三、字符串操作与转换</h2><h3 id="1-字符串连接"><a href="#1-字符串连接" class="headerlink" title="1. 字符串连接"></a>1. 字符串连接</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 + 运算符</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;Hello&quot;</span> + <span class="string">&quot; &quot;</span> + <span class="string">&quot;World&quot;</span>;  <span class="comment">// &quot;Hello World&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 concat 方法</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">&quot;Hello&quot;</span>.concat(<span class="string">&quot; World&quot;</span>);  <span class="comment">// &quot;Hello World&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 StringBuilder (高性能)</span></span><br><span class="line"><span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">sb.append(<span class="string">&quot;Hello&quot;</span>).append(<span class="string">&quot; &quot;</span>).append(<span class="string">&quot;World&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">s3</span> <span class="operator">=</span> sb.toString();  <span class="comment">// &quot;Hello World&quot;</span></span><br></pre></td></tr></table></figure><h3 id="2-字符串修改"><a href="#2-字符串修改" class="headerlink" title="2. 字符串修改"></a>2. 字符串修改</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">original</span> <span class="operator">=</span> <span class="string">&quot;Java Programming&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 替换字符</span></span><br><span class="line"><span class="type">String</span> <span class="variable">replaced</span> <span class="operator">=</span> original.replace(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;o&#x27;</span>);  <span class="comment">// &quot;Jovo Progromming&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 替换子串</span></span><br><span class="line"><span class="type">String</span> <span class="variable">replacedAll</span> <span class="operator">=</span> original.replaceAll(<span class="string">&quot;Java&quot;</span>, <span class="string">&quot;Python&quot;</span>);  <span class="comment">// &quot;Python Programming&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取子串</span></span><br><span class="line"><span class="type">String</span> <span class="variable">substring1</span> <span class="operator">=</span> original.substring(<span class="number">5</span>);  <span class="comment">// &quot;Programming&quot;</span></span><br><span class="line"><span class="type">String</span> <span class="variable">substring2</span> <span class="operator">=</span> original.substring(<span class="number">5</span>, <span class="number">12</span>);  <span class="comment">// &quot;Program&quot;</span></span><br></pre></td></tr></table></figure><h3 id="3-大小写转换"><a href="#3-大小写转换" class="headerlink" title="3. 大小写转换"></a>3. 大小写转换</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 转大写</span></span><br><span class="line"><span class="type">String</span> <span class="variable">upper</span> <span class="operator">=</span> str.toUpperCase();  <span class="comment">// &quot;HELLO WORLD&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 转小写</span></span><br><span class="line"><span class="type">String</span> <span class="variable">lower</span> <span class="operator">=</span> str.toLowerCase();  <span class="comment">// &quot;hello world&quot;</span></span><br></pre></td></tr></table></figure><h2 id="四、字符串格式化"><a href="#四、字符串格式化" class="headerlink" title="四、字符串格式化"></a>四、字符串格式化</h2><h3 id="1-静态-format-方法"><a href="#1-静态-format-方法" class="headerlink" title="1. 静态 format 方法"></a>1. 静态 format 方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;Alice&quot;</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">25</span>;</span><br><span class="line"><span class="type">double</span> <span class="variable">score</span> <span class="operator">=</span> <span class="number">95.5</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 格式化字符串</span></span><br><span class="line"><span class="type">String</span> <span class="variable">info</span> <span class="operator">=</span> String.format(<span class="string">&quot;Name: %s, Age: %d, Score: %.2f&quot;</span>, name, age, score);</span><br><span class="line"><span class="comment">// &quot;Name: Alice, Age: 25, Score: 95.50&quot;</span></span><br></pre></td></tr></table></figure><h3 id="2-常用格式说明符"><a href="#2-常用格式说明符" class="headerlink" title="2. 常用格式说明符"></a>2. 常用格式说明符</h3><table><thead><tr><th>说明符</th><th>适用类型</th><th>示例输出</th></tr></thead><tbody><tr><td><code>%s</code></td><td>字符串</td><td>“Hello”</td></tr><tr><td><code>%d</code></td><td>十进制整数</td><td>123</td></tr><tr><td><code>%f</code></td><td>浮点数</td><td>3.141593</td></tr><tr><td><code>%.2f</code></td><td>保留两位小数</td><td>3.14</td></tr><tr><td><code>%c</code></td><td>字符</td><td>‘A’</td></tr><tr><td><code>%b</code></td><td>布尔值</td><td>true</td></tr><tr><td><code>%n</code></td><td>平台相关的行分隔符</td><td>(换行)</td></tr></tbody></table><h2 id="五、字符串分割与正则表达式"><a href="#五、字符串分割与正则表达式" class="headerlink" title="五、字符串分割与正则表达式"></a>五、字符串分割与正则表达式</h2><h3 id="1-字符串分割"><a href="#1-字符串分割" class="headerlink" title="1. 字符串分割"></a>1. 字符串分割</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;apple,orange,banana,grape&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 简单分割</span></span><br><span class="line">String[] fruits = str.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line"><span class="comment">// [&quot;apple&quot;, &quot;orange&quot;, &quot;banana&quot;, &quot;grape&quot;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 限制分割次数</span></span><br><span class="line">String[] limited = str.split(<span class="string">&quot;,&quot;</span>, <span class="number">2</span>);</span><br><span class="line"><span class="comment">// [&quot;apple&quot;, &quot;orange,banana,grape&quot;]</span></span><br></pre></td></tr></table></figure><h3 id="2-正则表达式匹配"><a href="#2-正则表达式匹配" class="headerlink" title="2. 正则表达式匹配"></a>2. 正则表达式匹配</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">email</span> <span class="operator">=</span> <span class="string">&quot;test@example.com&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查格式</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">isValid</span> <span class="operator">=</span> email.matches(<span class="string">&quot;^[\\w-]+@[\\w-]+\\.[a-z]&#123;2,3&#125;$&quot;</span>);  <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 替换所有数字</span></span><br><span class="line"><span class="type">String</span> <span class="variable">replaced</span> <span class="operator">=</span> <span class="string">&quot;a1b2c3&quot;</span>.replaceAll(<span class="string">&quot;\\d&quot;</span>, <span class="string">&quot;-&quot;</span>);  <span class="comment">// &quot;a-b-c-&quot;</span></span><br></pre></td></tr></table></figure><h2 id="六、字符串与字符-字节数组转换"><a href="#六、字符串与字符-字节数组转换" class="headerlink" title="六、字符串与字符&#x2F;字节数组转换"></a>六、字符串与字符&#x2F;字节数组转换</h2><h3 id="1-字符数组转换"><a href="#1-字符数组转换" class="headerlink" title="1. 字符数组转换"></a>1. 字符数组转换</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// String → char[]</span></span><br><span class="line"><span class="type">char</span>[] charArray = str.toCharArray();</span><br><span class="line"></span><br><span class="line"><span class="comment">// char[] → String</span></span><br><span class="line"><span class="type">String</span> <span class="variable">newStr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(charArray);</span><br></pre></td></tr></table></figure><h3 id="2-字节数组转换"><a href="#2-字节数组转换" class="headerlink" title="2. 字节数组转换"></a>2. 字节数组转换</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// String → byte[] (使用默认编码)</span></span><br><span class="line"><span class="type">byte</span>[] byteArray = str.getBytes();</span><br><span class="line"></span><br><span class="line"><span class="comment">// byte[] → String</span></span><br><span class="line"><span class="type">String</span> <span class="variable">newStr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(byteArray);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 指定编码</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="type">byte</span>[] utf8Bytes = str.getBytes(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">fromUtf8</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(utf8Bytes, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="七、实际应用示例"><a href="#七、实际应用示例" class="headerlink" title="七、实际应用示例"></a>七、实际应用示例</h2><h3 id="1-字符串反转"><a href="#1-字符串反转" class="headerlink" title="1. 字符串反转"></a>1. 字符串反转</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringReverse</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">reverse</span><span class="params">(String input)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (input == <span class="literal">null</span> || input.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> input;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="type">char</span>[] chars = input.toCharArray();</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> chars.length - <span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">temp</span> <span class="operator">=</span> chars[left];</span><br><span class="line">            chars[left] = chars[right];</span><br><span class="line">            chars[right] = temp;</span><br><span class="line">            left++;</span><br><span class="line">            right--;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>(chars);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(reverse(<span class="string">&quot;Hello&quot;</span>));  <span class="comment">// &quot;olleH&quot;</span></span><br><span class="line">        System.out.println(reverse(<span class="string">&quot;Java&quot;</span>));   <span class="comment">// &quot;avaJ&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-检查回文字符串"><a href="#2-检查回文字符串" class="headerlink" title="2. 检查回文字符串"></a>2. 检查回文字符串</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PalindromeChecker</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isPalindrome</span><span class="params">(String str)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (str == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        str = str.toLowerCase().replaceAll(<span class="string">&quot;[^a-z0-9]&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> str.length() - <span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">            <span class="keyword">if</span> (str.charAt(left) != str.charAt(right)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            left++;</span><br><span class="line">            right--;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(isPalindrome(<span class="string">&quot;A man, a plan, a canal: Panama&quot;</span>));  <span class="comment">// true</span></span><br><span class="line">        System.out.println(isPalindrome(<span class="string">&quot;racecar&quot;</span>));  <span class="comment">// true</span></span><br><span class="line">        System.out.println(isPalindrome(<span class="string">&quot;hello&quot;</span>));    <span class="comment">// false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-统计单词出现次数"><a href="#3-统计单词出现次数" class="headerlink" title="3. 统计单词出现次数"></a>3. 统计单词出现次数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WordCounter</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String, Integer&gt; <span class="title function_">countWords</span><span class="params">(String text)</span> &#123;</span><br><span class="line">        Map&lt;String, Integer&gt; wordCount = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (text == <span class="literal">null</span> || text.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> wordCount;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        String[] words = text.split(<span class="string">&quot;\\s+&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (String word : words) &#123;</span><br><span class="line">            word = word.toLowerCase().replaceAll(<span class="string">&quot;[^a-z]&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (!word.isEmpty()) &#123;</span><br><span class="line">                wordCount.put(word, wordCount.getOrDefault(word, <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> wordCount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">text</span> <span class="operator">=</span> <span class="string">&quot;Hello world hello Java world Java&quot;</span>;</span><br><span class="line">        Map&lt;String, Integer&gt; counts = countWords(text);</span><br><span class="line">        System.out.println(counts);  <span class="comment">// &#123;hello=2, world=2, java=2&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="八、性能考虑与最佳实践"><a href="#八、性能考虑与最佳实践" class="headerlink" title="八、性能考虑与最佳实践"></a>八、性能考虑与最佳实践</h2><ol><li><p><strong>字符串拼接性能</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不好 - 创建多个临时对象</span></span><br><span class="line"><span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">    result += i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 好 - 使用StringBuilder</span></span><br><span class="line"><span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">    sb.append(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> sb.toString();</span><br></pre></td></tr></table></figure></li><li><p><strong>字符串比较</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不好 - 可能NullPointerException</span></span><br><span class="line"><span class="keyword">if</span> (str.equals(<span class="string">&quot;literal&quot;</span>)) &#123;...&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 好 - 避免NPE</span></span><br><span class="line"><span class="keyword">if</span> (<span class="string">&quot;literal&quot;</span>.equals(str)) &#123;...&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更好 - Java 7+</span></span><br><span class="line"><span class="keyword">if</span> (Objects.equals(str, <span class="string">&quot;literal&quot;</span>)) &#123;...&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>字符串常量池利用</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不好 - 创建不必要的对象</span></span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;literal&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 好 - 利用字符串常量池</span></span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;literal&quot;</span>;</span><br></pre></td></tr></table></figure></li><li><p><strong>处理大文本</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对于大文件处理，避免一次性加载到内存</span></span><br><span class="line"><span class="keyword">try</span> (<span class="type">BufferedReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;large.txt&quot;</span>))) &#123;</span><br><span class="line">    String line;</span><br><span class="line">    <span class="keyword">while</span> ((line = reader.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 处理每行</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>国际化考虑</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 指定Locale进行大小写转换</span></span><br><span class="line"><span class="type">String</span> <span class="variable">lower</span> <span class="operator">=</span> str.toLowerCase(Locale.ENGLISH);</span><br><span class="line"><span class="type">String</span> <span class="variable">upper</span> <span class="operator">=</span> str.toUpperCase(Locale.FRENCH);</span><br></pre></td></tr></table></figure></li></ol><p>通过合理使用 String 类及其相关工具类，可以高效地处理各种文本操作需求。记住字符串是不可变对象，在需要频繁修改字符串的场景中应考虑使用 StringBuilder 或 StringBuffer。</p><h1 id="Java-StringBuffer-和-StringBuilder-类全面解析"><a href="#Java-StringBuffer-和-StringBuilder-类全面解析" class="headerlink" title="Java StringBuffer 和 StringBuilder 类全面解析"></a>Java StringBuffer 和 StringBuilder 类全面解析</h1><p>StringBuffer 和 StringBuilder 是 Java 中用于高效处理可变字符串的类。下面我将系统地讲解这两个类的功能、区别和使用场景。</p><h2 id="一、StringBuffer-和-StringBuilder-基础"><a href="#一、StringBuffer-和-StringBuilder-基础" class="headerlink" title="一、StringBuffer 和 StringBuilder 基础"></a>一、StringBuffer 和 StringBuilder 基础</h2><h3 id="1-创建对象"><a href="#1-创建对象" class="headerlink" title="1. 创建对象"></a>1. 创建对象</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// StringBuilder 创建</span></span><br><span class="line"><span class="type">StringBuilder</span> <span class="variable">sb1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();       <span class="comment">// 默认容量16</span></span><br><span class="line"><span class="type">StringBuilder</span> <span class="variable">sb2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="number">100</span>);    <span class="comment">// 指定初始容量</span></span><br><span class="line"><span class="type">StringBuilder</span> <span class="variable">sb3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="string">&quot;Hello&quot;</span>); <span class="comment">// 初始内容</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// StringBuffer 创建</span></span><br><span class="line"><span class="type">StringBuffer</span> <span class="variable">sbf1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();        <span class="comment">// 默认容量16</span></span><br><span class="line"><span class="type">StringBuffer</span> <span class="variable">sbf2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(<span class="number">100</span>);     <span class="comment">// 指定初始容量</span></span><br><span class="line"><span class="type">StringBuffer</span> <span class="variable">sbf3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(<span class="string">&quot;World&quot;</span>); <span class="comment">// 初始内容</span></span><br></pre></td></tr></table></figure><h3 id="2-主要区别"><a href="#2-主要区别" class="headerlink" title="2. 主要区别"></a>2. 主要区别</h3><table><thead><tr><th>特性</th><th>StringBuilder</th><th>StringBuffer</th></tr></thead><tbody><tr><td>线程安全</td><td>非线程安全</td><td>线程安全</td></tr><tr><td>性能</td><td>更高</td><td>稍低</td></tr><tr><td>引入版本</td><td>Java 5</td><td>Java 1.0</td></tr><tr><td>适用场景</td><td>单线程环境</td><td>多线程环境</td></tr></tbody></table><h2 id="二、常用方法详解"><a href="#二、常用方法详解" class="headerlink" title="二、常用方法详解"></a>二、常用方法详解</h2><h3 id="1-追加内容-append"><a href="#1-追加内容-append" class="headerlink" title="1. 追加内容 (append)"></a>1. 追加内容 (append)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 追加各种类型数据</span></span><br><span class="line">sb.append(<span class="string">&quot; &quot;</span>);             <span class="comment">// 字符串</span></span><br><span class="line">sb.append(<span class="string">&quot;World&quot;</span>);         <span class="comment">// 字符串</span></span><br><span class="line">sb.append(<span class="number">123</span>);             <span class="comment">// 整数</span></span><br><span class="line">sb.append(<span class="number">3.14</span>);            <span class="comment">// 浮点数</span></span><br><span class="line">sb.append(<span class="string">&#x27;!&#x27;</span>);             <span class="comment">// 字符</span></span><br><span class="line">sb.append(<span class="literal">true</span>);            <span class="comment">// 布尔值</span></span><br><span class="line"></span><br><span class="line">System.out.println(sb);     <span class="comment">// &quot;Hello World1233.14!true&quot;</span></span><br></pre></td></tr></table></figure><h3 id="2-插入内容-insert"><a href="#2-插入内容-insert" class="headerlink" title="2. 插入内容 (insert)"></a>2. 插入内容 (insert)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="string">&quot;HelloWorld&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在指定位置插入各种类型数据</span></span><br><span class="line">sb.insert(<span class="number">5</span>, <span class="string">&quot; &quot;</span>);          <span class="comment">// 在索引5处插入空格</span></span><br><span class="line">sb.insert(<span class="number">6</span>, <span class="string">&quot;Java&quot;</span>);       <span class="comment">// 在索引6处插入&quot;Java&quot;</span></span><br><span class="line">sb.insert(<span class="number">10</span>, <span class="number">2023</span>);        <span class="comment">// 在索引10处插入数字</span></span><br><span class="line"></span><br><span class="line">System.out.println(sb);     <span class="comment">// &quot;Hello JavaWorld2023&quot;</span></span><br></pre></td></tr></table></figure><h3 id="3-删除内容-delete"><a href="#3-删除内容-delete" class="headerlink" title="3. 删除内容 (delete)"></a>3. 删除内容 (delete)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="string">&quot;HelloJavaWorld&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除指定范围的字符</span></span><br><span class="line">sb.delete(<span class="number">5</span>, <span class="number">9</span>);            <span class="comment">// 删除索引5-8的字符(&quot;Java&quot;)</span></span><br><span class="line">System.out.println(sb);     <span class="comment">// &quot;HelloWorld&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除指定位置的字符</span></span><br><span class="line">sb.deleteCharAt(<span class="number">5</span>);         <span class="comment">// 删除索引5的字符(&#x27;W&#x27;)</span></span><br><span class="line">System.out.println(sb);     <span class="comment">// &quot;Helloorld&quot;</span></span><br></pre></td></tr></table></figure><h3 id="4-替换内容-replace"><a href="#4-替换内容-replace" class="headerlink" title="4. 替换内容 (replace)"></a>4. 替换内容 (replace)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="string">&quot;HelloWorld&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 替换指定范围的字符</span></span><br><span class="line">sb.replace(<span class="number">5</span>, <span class="number">10</span>, <span class="string">&quot;Java&quot;</span>);  <span class="comment">// 替换索引5-9的字符</span></span><br><span class="line">System.out.println(sb);     <span class="comment">// &quot;HelloJava&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置指定位置的字符</span></span><br><span class="line">sb.setCharAt(<span class="number">5</span>, <span class="string">&#x27;j&#x27;</span>);       <span class="comment">// 替换索引5的字符</span></span><br><span class="line">System.out.println(sb);     <span class="comment">// &quot;Hellojava&quot;</span></span><br></pre></td></tr></table></figure><h3 id="5-反转字符串-reverse"><a href="#5-反转字符串-reverse" class="headerlink" title="5. 反转字符串 (reverse)"></a>5. 反转字符串 (reverse)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">sb.reverse();</span><br><span class="line">System.out.println(sb);     <span class="comment">// &quot;olleH&quot;</span></span><br></pre></td></tr></table></figure><h2 id="三、容量管理"><a href="#三、容量管理" class="headerlink" title="三、容量管理"></a>三、容量管理</h2><h3 id="1-容量相关方法"><a href="#1-容量相关方法" class="headerlink" title="1. 容量相关方法"></a>1. 容量相关方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="number">50</span>);  <span class="comment">// 初始容量50</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取信息</span></span><br><span class="line"><span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> sb.length();       <span class="comment">// 当前长度 (0)</span></span><br><span class="line"><span class="type">int</span> <span class="variable">capacity</span> <span class="operator">=</span> sb.capacity();   <span class="comment">// 当前容量 (50)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 确保最小容量</span></span><br><span class="line">sb.ensureCapacity(<span class="number">100</span>);         <span class="comment">// 确保容量至少100</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置长度</span></span><br><span class="line">sb.setLength(<span class="number">10</span>);               <span class="comment">// 设置长度为10，可能用null字符填充</span></span><br></pre></td></tr></table></figure><h3 id="2-容量增长机制"><a href="#2-容量增长机制" class="headerlink" title="2. 容量增长机制"></a>2. 容量增长机制</h3><p>当追加内容超过当前容量时，会自动扩容：</p><ul><li>新容量 &#x3D; (原容量 + 1) * 2</li><li>如果还不够，则直接扩容到所需大小</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();  <span class="comment">// 默认容量16</span></span><br><span class="line">sb.append(<span class="string">&quot;12345678901234567&quot;</span>);          <span class="comment">// 长度17</span></span><br><span class="line">System.out.println(sb.capacity());       <span class="comment">// 34 (16+1)*2</span></span><br></pre></td></tr></table></figure><h2 id="四、字符串操作"><a href="#四、字符串操作" class="headerlink" title="四、字符串操作"></a>四、字符串操作</h2><h3 id="1-获取子串和字符"><a href="#1-获取子串和字符" class="headerlink" title="1. 获取子串和字符"></a>1. 获取子串和字符</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="string">&quot;HelloWorld&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取字符</span></span><br><span class="line"><span class="type">char</span> <span class="variable">ch</span> <span class="operator">=</span> sb.charAt(<span class="number">4</span>);         <span class="comment">// &#x27;o&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取子串</span></span><br><span class="line"><span class="type">String</span> <span class="variable">sub1</span> <span class="operator">=</span> sb.substring(<span class="number">5</span>);      <span class="comment">// &quot;World&quot;</span></span><br><span class="line"><span class="type">String</span> <span class="variable">sub2</span> <span class="operator">=</span> sb.substring(<span class="number">5</span>, <span class="number">8</span>);   <span class="comment">// &quot;Wor&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取字符序列</span></span><br><span class="line"><span class="type">CharSequence</span> <span class="variable">seq</span> <span class="operator">=</span> sb.subSequence(<span class="number">3</span>, <span class="number">6</span>);  <span class="comment">// &quot;loW&quot;</span></span><br></pre></td></tr></table></figure><h3 id="2-查找操作"><a href="#2-查找操作" class="headerlink" title="2. 查找操作"></a>2. 查找操作</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="string">&quot;HelloHello&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查找字符串</span></span><br><span class="line"><span class="type">int</span> <span class="variable">first</span> <span class="operator">=</span> sb.indexOf(<span class="string">&quot;ell&quot;</span>);      <span class="comment">// 1</span></span><br><span class="line"><span class="type">int</span> <span class="variable">from</span> <span class="operator">=</span> sb.indexOf(<span class="string">&quot;ell&quot;</span>, <span class="number">2</span>);    <span class="comment">// 6</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 反向查找</span></span><br><span class="line"><span class="type">int</span> <span class="variable">last</span> <span class="operator">=</span> sb.lastIndexOf(<span class="string">&quot;ell&quot;</span>);   <span class="comment">// 6</span></span><br><span class="line"><span class="type">int</span> <span class="variable">lastFrom</span> <span class="operator">=</span> sb.lastIndexOf(<span class="string">&quot;ell&quot;</span>, <span class="number">5</span>);  <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><h2 id="五、实际应用示例"><a href="#五、实际应用示例" class="headerlink" title="五、实际应用示例"></a>五、实际应用示例</h2><h3 id="1-高效字符串拼接"><a href="#1-高效字符串拼接" class="headerlink" title="1. 高效字符串拼接"></a>1. 高效字符串拼接</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringConcatenation</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">buildString</span><span class="params">(String[] parts)</span> &#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">for</span> (String part : parts) &#123;</span><br><span class="line">            sb.append(part);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        String[] words = &#123;<span class="string">&quot;This&quot;</span>, <span class="string">&quot; &quot;</span>, <span class="string">&quot;is&quot;</span>, <span class="string">&quot; &quot;</span>, <span class="string">&quot;a&quot;</span>, <span class="string">&quot; &quot;</span>, <span class="string">&quot;test&quot;</span>&#125;;</span><br><span class="line">        System.out.println(buildString(words));  <span class="comment">// &quot;This is a test&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-SQL-查询构建"><a href="#2-SQL-查询构建" class="headerlink" title="2. SQL 查询构建"></a>2. SQL 查询构建</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SqlBuilder</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">buildQuery</span><span class="params">(String table, String[] columns, String condition)</span> &#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="string">&quot;SELECT &quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 添加列</span></span><br><span class="line">        <span class="keyword">if</span> (columns == <span class="literal">null</span> || columns.length == <span class="number">0</span>) &#123;</span><br><span class="line">            sql.append(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; columns.length; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i &gt; <span class="number">0</span>) sql.append(<span class="string">&quot;, &quot;</span>);</span><br><span class="line">                sql.append(columns[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 添加表名</span></span><br><span class="line">        sql.append(<span class="string">&quot; FROM &quot;</span>).append(table);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 添加条件</span></span><br><span class="line">        <span class="keyword">if</span> (condition != <span class="literal">null</span> &amp;&amp; !condition.isEmpty()) &#123;</span><br><span class="line">            sql.append(<span class="string">&quot; WHERE &quot;</span>).append(condition);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> sql.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        String[] cols = &#123;<span class="string">&quot;id&quot;</span>, <span class="string">&quot;name&quot;</span>, <span class="string">&quot;age&quot;</span>&#125;;</span><br><span class="line">        <span class="type">String</span> <span class="variable">query</span> <span class="operator">=</span> buildQuery(<span class="string">&quot;users&quot;</span>, cols, <span class="string">&quot;age &gt; 18&quot;</span>);</span><br><span class="line">        System.out.println(query);</span><br><span class="line">        <span class="comment">// 输出: SELECT id, name, age FROM users WHERE age &gt; 18</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-CSV-文件生成"><a href="#3-CSV-文件生成" class="headerlink" title="3. CSV 文件生成"></a>3. CSV 文件生成</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CsvGenerator</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">generateCsv</span><span class="params">(String[] headers, String[][] data)</span> &#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">csv</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 添加表头</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; headers.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &gt; <span class="number">0</span>) csv.append(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">            csv.append(<span class="string">&quot;\&quot;&quot;</span>).append(headers[i]).append(<span class="string">&quot;\&quot;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        csv.append(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 添加数据行</span></span><br><span class="line">        <span class="keyword">for</span> (String[] row : data) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; row.length; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i &gt; <span class="number">0</span>) csv.append(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">                csv.append(<span class="string">&quot;\&quot;&quot;</span>).append(row[i]).append(<span class="string">&quot;\&quot;&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            csv.append(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> csv.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        String[] headers = &#123;<span class="string">&quot;Name&quot;</span>, <span class="string">&quot;Age&quot;</span>, <span class="string">&quot;City&quot;</span>&#125;;</span><br><span class="line">        String[][] data = &#123;</span><br><span class="line">            &#123;<span class="string">&quot;Alice&quot;</span>, <span class="string">&quot;25&quot;</span>, <span class="string">&quot;New York&quot;</span>&#125;,</span><br><span class="line">            &#123;<span class="string">&quot;Bob&quot;</span>, <span class="string">&quot;30&quot;</span>, <span class="string">&quot;London&quot;</span>&#125;,</span><br><span class="line">            &#123;<span class="string">&quot;Charlie&quot;</span>, <span class="string">&quot;22&quot;</span>, <span class="string">&quot;Paris&quot;</span>&#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        </span><br><span class="line">        System.out.println(generateCsv(headers, data));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="六、性能考虑与最佳实践"><a href="#六、性能考虑与最佳实践" class="headerlink" title="六、性能考虑与最佳实践"></a>六、性能考虑与最佳实践</h2><ol><li><p><strong>选择正确的类</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 单线程环境 - 使用StringBuilder</span></span><br><span class="line"><span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 多线程环境 - 使用StringBuffer</span></span><br><span class="line"><span class="type">StringBuffer</span> <span class="variable">sbf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br></pre></td></tr></table></figure></li><li><p><strong>初始化容量</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果知道大概大小，预先设置容量</span></span><br><span class="line"><span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="number">1024</span>);  <span class="comment">// 避免频繁扩容</span></span><br></pre></td></tr></table></figure></li><li><p><strong>链式调用</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用方法链提高可读性</span></span><br><span class="line"><span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>()</span><br><span class="line">    .append(<span class="string">&quot;Name: &quot;</span>).append(name)</span><br><span class="line">    .append(<span class="string">&quot;, Age: &quot;</span>).append(age)</span><br><span class="line">    .append(<span class="string">&quot;, Score: &quot;</span>).append(score)</span><br><span class="line">    .toString();</span><br></pre></td></tr></table></figure></li><li><p><strong>与String的转换</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 只在需要时才转换为String</span></span><br><span class="line"><span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line"><span class="comment">// ...多次操作...</span></span><br><span class="line"><span class="type">String</span> <span class="variable">finalString</span> <span class="operator">=</span> sb.toString();  <span class="comment">// 最后转换</span></span><br></pre></td></tr></table></figure></li><li><p><strong>线程安全考虑</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在多线程环境中使用StringBuffer</span></span><br><span class="line"><span class="type">StringBuffer</span> <span class="variable">sharedBuffer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者使用同步包装</span></span><br><span class="line"><span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line"><span class="keyword">synchronized</span>(sb) &#123;</span><br><span class="line">    sb.append(<span class="string">&quot;thread-safe operation&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>避免不必要的使用</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 简单拼接不需要StringBuilder</span></span><br><span class="line"><span class="type">String</span> <span class="variable">simple</span> <span class="operator">=</span> <span class="string">&quot;Hello &quot;</span> + name;  <span class="comment">// 编译器会自动优化</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 循环中应该使用StringBuilder</span></span><br><span class="line"><span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">    sb.append(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>通过合理使用 StringBuffer 和 StringBuilder，可以显著提高字符串处理性能，特别是在需要频繁修改字符串内容的场景中。根据线程安全需求选择合适的类，并注意容量管理和转换时机，以获得最佳性能。</p>]]></content>
      
      
      <categories>
          
          <category> 结构速查 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java快速学习速查（2）</title>
      <link href="/2025/03/31/java%E5%BF%AB%E9%80%9F%E5%AD%A6%E4%B9%A0%E9%80%9F%E6%9F%A5(2)/"/>
      <url>/2025/03/31/java%E5%BF%AB%E9%80%9F%E5%AD%A6%E4%B9%A0%E9%80%9F%E6%9F%A5(2)/</url>
      
        <content type="html"><![CDATA[<h1 id="java快速学习速查（2）"><a href="#java快速学习速查（2）" class="headerlink" title="java快速学习速查（2）"></a>java快速学习速查（2）</h1><p>高速通过中ing……</p><blockquote><p>本篇为变量类型，变量命名规则，修饰符，运算符</p></blockquote><h1 id="Java变量类型全面解析"><a href="#Java变量类型全面解析" class="headerlink" title="Java变量类型全面解析"></a>Java变量类型全面解析</h1><p>变量是Java程序中最基本的存储单元，理解不同类型的变量及其特性是Java编程的基础。下面我将从实际开发角度，深入讲解Java中的各种变量类型。</p><h2 id="一、变量类型体系"><a href="#一、变量类型体系" class="headerlink" title="一、变量类型体系"></a>一、变量类型体系</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Java变量类型</span><br><span class="line">├── 按声明位置分</span><br><span class="line">│   ├── 成员变量（类中声明）</span><br><span class="line">│   │   ├── 实例变量（非static）</span><br><span class="line">│   │   └── 类变量（static）</span><br><span class="line">│   └── 局部变量（方法/块中声明）</span><br><span class="line">│       ├── 方法局部变量</span><br><span class="line">│       ├── 代码块变量</span><br><span class="line">│       └── 参数变量</span><br><span class="line">└── 按数据类型分</span><br><span class="line">    ├── 基本类型变量</span><br><span class="line">    └── 引用类型变量</span><br></pre></td></tr></table></figure><h2 id="二、局部变量详解"><a href="#二、局部变量详解" class="headerlink" title="二、局部变量详解"></a>二、局部变量详解</h2><h3 id="1-核心特性"><a href="#1-核心特性" class="headerlink" title="1. 核心特性"></a>1. 核心特性</h3><ul><li><strong>作用域</strong>：仅在声明它的方法&#x2F;代码块内有效</li><li><strong>生命周期</strong>：方法&#x2F;块开始执行时创建，执行结束时销毁</li><li><strong>存储位置</strong>：栈内存</li><li><strong>初始化要求</strong>：必须显式初始化后才能使用</li></ul><h3 id="2-使用示例"><a href="#2-使用示例" class="headerlink" title="2. 使用示例"></a>2. 使用示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LocalVarDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">calculate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 方法局部变量</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">0</span>;  <span class="comment">// 必须初始化</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++) &#123;  <span class="comment">// i是循环块局部变量</span></span><br><span class="line">            result += i;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// System.out.println(i);  // 错误！i已不可访问</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 参数变量args也是局部变量</span></span><br><span class="line">        <span class="keyword">if</span>(args.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;参数存在&quot;</span>;  <span class="comment">// 代码块局部变量</span></span><br><span class="line">            System.out.println(message);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// System.out.println(message);  // 错误！message已不可访问</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-关键注意事项"><a href="#3-关键注意事项" class="headerlink" title="3. 关键注意事项"></a>3. 关键注意事项</h3><ul><li>局部变量不能使用<code>static</code>修饰</li><li>不同代码块中可以声明同名局部变量</li><li>方法参数本质也是局部变量</li></ul><h2 id="三、成员变量（实例变量）深度解析"><a href="#三、成员变量（实例变量）深度解析" class="headerlink" title="三、成员变量（实例变量）深度解析"></a>三、成员变量（实例变量）深度解析</h2><h3 id="1-核心特性-1"><a href="#1-核心特性-1" class="headerlink" title="1. 核心特性"></a>1. 核心特性</h3><ul><li><strong>作用域</strong>：整个类内部（不同访问修饰符影响外部可见性）</li><li><strong>生命周期</strong>：对象创建时初始化，对象被GC回收时销毁</li><li><strong>存储位置</strong>：堆内存（作为对象的一部分）</li><li><strong>初始化</strong>：自动赋予默认值（可显式初始化）</li></ul><h3 id="2-默认值规则"><a href="#2-默认值规则" class="headerlink" title="2. 默认值规则"></a>2. 默认值规则</h3><table><thead><tr><th>数据类型</th><th>默认值</th></tr></thead><tbody><tr><td>byte&#x2F;short&#x2F;int&#x2F;long</td><td>0</td></tr><tr><td>float&#x2F;double</td><td>0.0</td></tr><tr><td>char</td><td>‘\u0000’</td></tr><tr><td>boolean</td><td>false</td></tr><tr><td>引用类型</td><td>null</td></tr></tbody></table><h3 id="3-使用示例"><a href="#3-使用示例" class="headerlink" title="3. 使用示例"></a>3. 使用示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="comment">// 实例变量</span></span><br><span class="line">    <span class="keyword">private</span> String name;    <span class="comment">// 默认null</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;        <span class="comment">// 默认0</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> graduated; <span class="comment">// 默认false</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;   <span class="comment">// 构造器中初始化</span></span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">graduate</span><span class="params">()</span> &#123;</span><br><span class="line">        graduated = <span class="literal">true</span>;   <span class="comment">// 方法中修改状态</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">localVar</span> <span class="operator">=</span> <span class="number">2023</span>; <span class="comment">// 局部变量</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;：&quot;</span> + age + <span class="string">&quot;岁，&quot;</span> + </span><br><span class="line">                          (graduated ? <span class="string">&quot;已毕业&quot;</span> : <span class="string">&quot;在读&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-最佳实践"><a href="#4-最佳实践" class="headerlink" title="4. 最佳实践"></a>4. 最佳实践</h3><ul><li>通常设为<code>private</code>，通过getter&#x2F;setter访问</li><li>重要变量应在构造器中初始化</li><li>避免过多的公有实例变量</li></ul><h2 id="四、类变量（静态变量）全面剖析"><a href="#四、类变量（静态变量）全面剖析" class="headerlink" title="四、类变量（静态变量）全面剖析"></a>四、类变量（静态变量）全面剖析</h2><h3 id="1-核心特性-2"><a href="#1-核心特性-2" class="headerlink" title="1. 核心特性"></a>1. 核心特性</h3><ul><li><strong>作用域</strong>：整个类（可通过类名直接访问）</li><li><strong>生命周期</strong>：类加载时初始化，程序结束时销毁</li><li><strong>存储位置</strong>：方法区（JDK8+的元空间）</li><li><strong>共享性</strong>：所有类实例共享同一份数据</li></ul><h3 id="2-使用示例-1"><a href="#2-使用示例-1" class="headerlink" title="2. 使用示例"></a>2. 使用示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Employee</span> &#123;</span><br><span class="line">    <span class="comment">// 实例变量</span></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 类变量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">nextId</span> <span class="operator">=</span> <span class="number">1</span>;  <span class="comment">// 下一个可用ID</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">COMPANY</span> <span class="operator">=</span> <span class="string">&quot;ABC科技&quot;</span>; <span class="comment">// 常量</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Employee</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = <span class="string">&quot;EMP&quot;</span> + String.format(<span class="string">&quot;%04d&quot;</span>, nextId++);</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getNextId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> nextId;  <span class="comment">// 静态方法访问静态变量</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;公司：&quot;</span> + Employee.COMPANY);</span><br><span class="line">        <span class="type">Employee</span> <span class="variable">e1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        <span class="type">Employee</span> <span class="variable">e2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        System.out.println(e1.id);  <span class="comment">// EMP0001</span></span><br><span class="line">        System.out.println(e2.id);  <span class="comment">// EMP0002</span></span><br><span class="line">        System.out.println(<span class="string">&quot;下一个ID：&quot;</span> + Employee.getNextId()); <span class="comment">// 3</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-关键注意事项-1"><a href="#3-关键注意事项-1" class="headerlink" title="3. 关键注意事项"></a>3. 关键注意事项</h3><ul><li>静态变量不属于任何对象实例</li><li>静态方法只能直接访问静态成员</li><li>多线程环境下需要考虑线程安全</li><li>静态常量命名推荐全大写+下划线</li></ul><h2 id="五、参数变量特殊机制"><a href="#五、参数变量特殊机制" class="headerlink" title="五、参数变量特殊机制"></a>五、参数变量特殊机制</h2><h3 id="1-值传递与引用传递"><a href="#1-值传递与引用传递" class="headerlink" title="1. 值传递与引用传递"></a>1. 值传递与引用传递</h3><ul><li><strong>基本类型</strong>：值传递（传递副本）</li><li><strong>引用类型</strong>：引用值传递（传递引用的副本）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ParamDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">modify</span><span class="params">(<span class="type">int</span> num, String str, <span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        num = <span class="number">100</span>;</span><br><span class="line">        str = <span class="string">&quot;修改后&quot;</span>;</span><br><span class="line">        arr[<span class="number">0</span>] = <span class="number">99</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;原始&quot;</span>;</span><br><span class="line">        <span class="type">int</span>[] a = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">        </span><br><span class="line">        modify(n, s, a);</span><br><span class="line">        </span><br><span class="line">        System.out.println(n);  <span class="comment">// 1（未改变）</span></span><br><span class="line">        System.out.println(s);  <span class="comment">// &quot;原始&quot;（未改变）</span></span><br><span class="line">        System.out.println(Arrays.toString(a)); <span class="comment">// [99, 2, 3]（改变）</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-可变参数"><a href="#2-可变参数" class="headerlink" title="2. 可变参数"></a>2. 可变参数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VarargsDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">average</span><span class="params">(<span class="type">int</span>... numbers)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(numbers.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> num : numbers) &#123;</span><br><span class="line">            sum += num;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (<span class="type">double</span>)sum / numbers.length;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(average(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>));     <span class="comment">// 2.0</span></span><br><span class="line">        System.out.println(average(<span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">20</span>)); <span class="comment">// 12.5</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="六、变量对比总结表"><a href="#六、变量对比总结表" class="headerlink" title="六、变量对比总结表"></a>六、变量对比总结表</h2><table><thead><tr><th>特性</th><th>局部变量</th><th>实例变量</th><th>类变量</th></tr></thead><tbody><tr><td><strong>声明位置</strong></td><td>方法&#x2F;块内部</td><td>类中方法外</td><td>类中方法外+static</td></tr><tr><td><strong>初始化要求</strong></td><td>必须显式初始化</td><td>自动初始化</td><td>自动初始化</td></tr><tr><td><strong>默认值</strong></td><td>无（必须初始化）</td><td>有（各类型默认值）</td><td>有（同实例变量）</td></tr><tr><td><strong>作用域</strong></td><td>声明块内部</td><td>整个类</td><td>整个类</td></tr><tr><td><strong>生命周期</strong></td><td>方法&#x2F;块执行期间</td><td>对象存在期间</td><td>程序运行期间</td></tr><tr><td><strong>存储位置</strong></td><td>栈内存</td><td>堆内存（对象内）</td><td>方法区</td></tr><tr><td><strong>访问方式</strong></td><td>直接访问</td><td>对象.变量名</td><td>类名.变量名</td></tr><tr><td><strong>线程安全</strong></td><td>天然线程安全</td><td>不安全</td><td>不安全</td></tr><tr><td><strong>共享性</strong></td><td>不共享</td><td>对象间不共享</td><td>全局共享</td></tr></tbody></table><h2 id="七、变量使用最佳实践"><a href="#七、变量使用最佳实践" class="headerlink" title="七、变量使用最佳实践"></a>七、变量使用最佳实践</h2><h3 id="1-命名规范"><a href="#1-命名规范" class="headerlink" title="1. 命名规范"></a>1. 命名规范</h3><ul><li>遵循驼峰命名法（局部&#x2F;实例变量小写开头，类变量全大写）</li><li>见名知意（避免单字符命名，除临时变量）</li><li>避免使用$和_开头</li></ul><h3 id="2-作用域最小化"><a href="#2-作用域最小化" class="headerlink" title="2. 作用域最小化"></a>2. 作用域最小化</h3><ul><li>尽量缩小变量作用域（优先使用局部变量）</li><li>避免不必要的成员变量</li></ul><h3 id="3-初始化策略"><a href="#3-初始化策略" class="headerlink" title="3. 初始化策略"></a>3. 初始化策略</h3><ul><li>局部变量：声明时立即初始化</li><li>实例变量：构造器中初始化关键变量</li><li>类变量：静态代码块中初始化复杂静态变量</li></ul><h3 id="4-线程安全考虑"><a href="#4-线程安全考虑" class="headerlink" title="4. 线程安全考虑"></a>4. 线程安全考虑</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Counter</span> &#123;</span><br><span class="line">    <span class="comment">// 非线程安全</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">count1</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 线程安全方案1：volatile</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="type">int</span> <span class="variable">count2</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 线程安全方案2：Atomic</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">AtomicInteger</span> <span class="variable">count3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(<span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 线程安全方案3：同步</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">count4</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">increment</span><span class="params">()</span> &#123;</span><br><span class="line">        count4++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="八、典型面试问题解析"><a href="#八、典型面试问题解析" class="headerlink" title="八、典型面试问题解析"></a>八、典型面试问题解析</h2><h3 id="问题1：以下代码输出什么？"><a href="#问题1：以下代码输出什么？" class="headerlink" title="问题1：以下代码输出什么？"></a>问题1：以下代码输出什么？</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VariableQuiz</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">VariableQuiz</span> <span class="variable">v1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">VariableQuiz</span>();</span><br><span class="line">        v1.x = <span class="number">100</span>;</span><br><span class="line">        v1.y = <span class="number">200</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="type">VariableQuiz</span> <span class="variable">v2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">VariableQuiz</span>();</span><br><span class="line">        System.out.println(v2.x + <span class="string">&quot; &quot;</span> + v2.y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>答案</strong>：输出”100 20”。因为x是静态变量被所有实例共享，y是实例变量每个对象独立。</p><h3 id="问题2：为什么局部变量必须初始化？"><a href="#问题2：为什么局部变量必须初始化？" class="headerlink" title="问题2：为什么局部变量必须初始化？"></a>问题2：为什么局部变量必须初始化？</h3><p><strong>解析</strong>：Java设计者为了避免因未初始化变量导致的不可预测行为。成员变量有默认值是为了对象创建的合理性，而局部变量作用域小，强制初始化能减少错误。</p><h3 id="问题3：以下哪种变量线程安全？"><a href="#问题3：以下哪种变量线程安全？" class="headerlink" title="问题3：以下哪种变量线程安全？"></a>问题3：以下哪种变量线程安全？</h3><p>A. 局部变量<br>B. 实例变量<br>C. 静态变量<br><strong>答案</strong>：A。局部变量存储在栈中，每个线程有自己的栈空间。</p><h1 id="Java变量命名规范深度解析"><a href="#Java变量命名规范深度解析" class="headerlink" title="Java变量命名规范深度解析"></a>Java变量命名规范深度解析</h1><p>良好的命名规范是编写可读性强、可维护性高的Java代码的基础。下面我将全面系统地讲解Java中各类变量的命名规则和最佳实践。</p><h2 id="一、命名基础规则"><a href="#一、命名基础规则" class="headerlink" title="一、命名基础规则"></a>一、命名基础规则</h2><h3 id="1-通用命名原则"><a href="#1-通用命名原则" class="headerlink" title="1. 通用命名原则"></a>1. 通用命名原则</h3><ul><li><strong>合法字符</strong>：字母、数字、下划线和美元符号（$）</li><li><strong>开头限制</strong>：不能以数字开头</li><li><strong>长度限制</strong>：理论上无限制，但建议不超过50个字符</li><li><strong>大小写敏感</strong>：<code>myVar</code>和<code>myvar</code>是不同的变量</li><li><strong>关键字规避</strong>：不能使用Java保留字（如<code>class</code>, <code>int</code>等）</li></ul><h3 id="2-命名风格对比"><a href="#2-命名风格对比" class="headerlink" title="2. 命名风格对比"></a>2. 命名风格对比</h3><table><thead><tr><th>命名风格</th><th>示例</th><th>适用场景</th></tr></thead><tbody><tr><td>小驼峰(lowerCamel)</td><td><code>studentName</code></td><td>变量、方法名</td></tr><tr><td>大驼峰(UpperCamel)</td><td><code>StudentService</code></td><td>类名、接口名</td></tr><tr><td>蛇形(SNAKE_CASE)</td><td><code>MAX_VALUE</code></td><td>常量</td></tr><tr><td>匈牙利(不推荐)</td><td><code>strFirstName</code></td><td>旧代码（现代Java不推荐）</td></tr></tbody></table><h2 id="二、具体变量类型命名规范"><a href="#二、具体变量类型命名规范" class="headerlink" title="二、具体变量类型命名规范"></a>二、具体变量类型命名规范</h2><h3 id="1-局部变量命名"><a href="#1-局部变量命名" class="headerlink" title="1. 局部变量命名"></a>1. 局部变量命名</h3><ul><li><strong>规则</strong>：小驼峰，简短且描述性</li><li><strong>示例</strong>：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">itemCount</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">customerName</span> <span class="operator">=</span> <span class="string">&quot;张三&quot;</span>;</span><br><span class="line"><span class="type">double</span> <span class="variable">totalPrice</span> <span class="operator">=</span> calculateTotal();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 临时变量可用单字符（限于非常短的作用域）</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-实例变量命名"><a href="#2-实例变量命名" class="headerlink" title="2. 实例变量命名"></a>2. 实例变量命名</h3><ul><li><strong>规则</strong>：小驼峰，反映对象状态</li><li><strong>示例</strong>：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String studentId;    <span class="comment">// 学号</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> isGraduated; <span class="comment">// 是否毕业</span></span><br><span class="line">    <span class="keyword">protected</span> String major;      <span class="comment">// 专业（protected示例）</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// boolean类型推荐is/has/can前缀</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> hasScholarship;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-静态变量命名"><a href="#3-静态变量命名" class="headerlink" title="3. 静态变量命名"></a>3. 静态变量命名</h3><ul><li><strong>规则</strong>：<ul><li>常规静态变量：小驼峰</li><li>常量：全大写+下划线</li></ul></li><li><strong>示例</strong>：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Config</span> &#123;</span><br><span class="line">    <span class="comment">// 常规静态变量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">instanceCount</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 常量</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MAX_CONNECTIONS</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DEFAULT_ENCODING</span> <span class="operator">=</span> <span class="string">&quot;UTF-8&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="4-参数变量命名"><a href="#4-参数变量命名" class="headerlink" title="4. 参数变量命名"></a>4. 参数变量命名</h3><ul><li><strong>规则</strong>：小驼峰，明确表达参数用途</li><li><strong>示例</strong>：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">registerUser</span><span class="params">(String userName, String passwordHash)</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 布尔参数推荐使用&quot;is/has/can&quot;前缀</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setActive</span><span class="params">(<span class="type">boolean</span> isActive)</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="5-泛型类型参数"><a href="#5-泛型类型参数" class="headerlink" title="5. 泛型类型参数"></a>5. 泛型类型参数</h3><ul><li><strong>规则</strong>：单个大写字母，常用约定：<ul><li><code>E</code> - 集合元素</li><li><code>K</code> - 键</li><li><code>V</code> - 值</li><li><code>T</code> - 类型</li><li><code>S</code>, <code>U</code> - 第二、第三类型</li></ul></li><li><strong>示例</strong>：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Box</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> T content;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setContent</span><span class="params">(T content)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.content = content;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Map</span>&lt;K, V&gt; &#123;</span><br><span class="line">    V <span class="title function_">get</span><span class="params">(K key)</span>;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="三、特殊场景命名规范"><a href="#三、特殊场景命名规范" class="headerlink" title="三、特殊场景命名规范"></a>三、特殊场景命名规范</h2><h3 id="1-集合类型变量"><a href="#1-集合类型变量" class="headerlink" title="1. 集合类型变量"></a>1. 集合类型变量</h3><ul><li><strong>推荐后缀</strong>：List&#x2F;Set&#x2F;Map等类型指示</li><li><strong>示例</strong>：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; studentNameList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">Map&lt;Integer, Student&gt; studentIdMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">Set&lt;Course&gt; requiredCourseSet = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-布尔类型变量"><a href="#2-布尔类型变量" class="headerlink" title="2. 布尔类型变量"></a>2. 布尔类型变量</h3><ul><li><strong>推荐前缀</strong>：<ul><li><code>is</code> - 状态标识</li><li><code>has</code> - 拥有关系</li><li><code>can</code> - 能力判断</li><li><code>should</code> - 条件判断</li></ul></li><li><strong>示例</strong>：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> isActive;</span><br><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> hasLicense;</span><br><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> canEdit;</span><br><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> shouldValidate;</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-测试代码命名"><a href="#3-测试代码命名" class="headerlink" title="3. 测试代码命名"></a>3. 测试代码命名</h3><ul><li><strong>方法名</strong>：可使用下划线增强可读性</li><li><strong>示例</strong>：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">isAdult_AgeOver18_ReturnsTrue</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 测试逻辑</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">calculatePrice_WithDiscount_AppliesDiscount</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 测试逻辑</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="四、命名禁忌与常见错误"><a href="#四、命名禁忌与常见错误" class="headerlink" title="四、命名禁忌与常见错误"></a>四、命名禁忌与常见错误</h2><h3 id="1-绝对避免的命名"><a href="#1-绝对避免的命名" class="headerlink" title="1. 绝对避免的命名"></a>1. 绝对避免的命名</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 反例1：无意义命名</span></span><br><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;  </span><br><span class="line"><span class="type">String</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="string">&quot;value&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 反例2：误导性命名</span></span><br><span class="line">List&lt;String&gt; name = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();  <span class="comment">// 实际是列表却用单数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 反例3：大小写混淆</span></span><br><span class="line">String UserName;  <span class="comment">// 类名风格用于变量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 反例4：数字开头</span></span><br><span class="line"><span class="type">int</span> 2ndPlace;  <span class="comment">// 编译错误</span></span><br></pre></td></tr></table></figure><h3 id="2-不推荐的命名实践"><a href="#2-不推荐的命名实践" class="headerlink" title="2. 不推荐的命名实践"></a>2. 不推荐的命名实践</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 匈牙利命名法（类型前缀）</span></span><br><span class="line">String strName;  </span><br><span class="line"><span class="type">int</span> iCount;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 过长的命名</span></span><br><span class="line">String theNameOfTheStudentWhoIsTakingTheAdvancedJavaCourse;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 不一致的缩写</span></span><br><span class="line"><span class="type">int</span> custCnt;  <span class="comment">// customerCount</span></span><br><span class="line"><span class="type">int</span> usrNum;   <span class="comment">// userNumber</span></span><br></pre></td></tr></table></figure><h2 id="五、行业标准参考"><a href="#五、行业标准参考" class="headerlink" title="五、行业标准参考"></a>五、行业标准参考</h2><h3 id="1-官方规范"><a href="#1-官方规范" class="headerlink" title="1. 官方规范"></a>1. 官方规范</h3><ul><li><a href="https://www.oracle.com/java/technologies/javase/codeconventions-namingconventions.html">Oracle Java编码规范</a></li><li><a href="https://google.github.io/styleguide/javaguide.html#s5-naming">Google Java风格指南</a></li></ul><h3 id="2-常用框架命名示例"><a href="#2-常用框架命名示例" class="headerlink" title="2. 常用框架命名示例"></a>2. 常用框架命名示例</h3><p><strong>Spring示例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> JdbcTemplate jdbcTemplate;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserDaoImpl</span><span class="params">(DataSource dataSource)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.jdbcTemplate = <span class="keyword">new</span> <span class="title class_">JdbcTemplate</span>(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>JUnit测试示例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringUtilsTest</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">isEmpty_WhenNullInput_ReturnsTrue</span><span class="params">()</span> &#123;</span><br><span class="line">        assertTrue(StringUtils.isEmpty(<span class="literal">null</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="六、命名检查工具"><a href="#六、命名检查工具" class="headerlink" title="六、命名检查工具"></a>六、命名检查工具</h2><h3 id="1-Checkstyle配置示例"><a href="#1-Checkstyle配置示例" class="headerlink" title="1. Checkstyle配置示例"></a>1. Checkstyle配置示例</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">&quot;LocalVariableName&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;format&quot;</span> <span class="attr">value</span>=<span class="string">&quot;^[a-z][a-zA-Z0-9]*$&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">&quot;MemberName&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;format&quot;</span> <span class="attr">value</span>=<span class="string">&quot;^[a-z][a-zA-Z0-9]*$&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">&quot;ConstantName&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;format&quot;</span> <span class="attr">value</span>=<span class="string">&quot;^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-IDE模板设置"><a href="#2-IDE模板设置" class="headerlink" title="2. IDE模板设置"></a>2. IDE模板设置</h3><ul><li><strong>IntelliJ IDEA</strong>：<code>File → Settings → Editor → Code Style → Java</code></li><li><strong>Eclipse</strong>：<code>Window → Preferences → Java → Code Style → Formatter</code></li></ul><h2 id="七、命名重构技巧"><a href="#七、命名重构技巧" class="headerlink" title="七、命名重构技巧"></a>七、命名重构技巧</h2><h3 id="1-重命名快捷键"><a href="#1-重命名快捷键" class="headerlink" title="1. 重命名快捷键"></a>1. 重命名快捷键</h3><ul><li><strong>IntelliJ</strong>：Shift+F6</li><li><strong>Eclipse</strong>：Alt+Shift+R</li></ul><h3 id="2-批量重命名示例"><a href="#2-批量重命名示例" class="headerlink" title="2. 批量重命名示例"></a>2. 批量重命名示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 重构前</span></span><br><span class="line"><span class="type">int</span> d;  <span class="comment">// 天数</span></span><br><span class="line">d = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重构后</span></span><br><span class="line"><span class="type">int</span> daysUntilExpiration;</span><br><span class="line">daysUntilExpiration = <span class="number">5</span>;</span><br></pre></td></tr></table></figure><h3 id="3-命名重构原则"><a href="#3-命名重构原则" class="headerlink" title="3. 命名重构原则"></a>3. 命名重构原则</h3><ol><li>见名知意：名称应准确表达变量用途</li><li>避免歧义：如<code>accountList</code>如果不是List类型就不要用</li><li>保持一致性：整个项目使用相同的命名风格</li><li>适度缩写：如<code>num</code>代替<code>number</code>可以接受，但避免过度缩写</li></ol><h2 id="八、典型场景命名示例"><a href="#八、典型场景命名示例" class="headerlink" title="八、典型场景命名示例"></a>八、典型场景命名示例</h2><h3 id="1-计数器变量"><a href="#1-计数器变量" class="headerlink" title="1. 计数器变量"></a>1. 计数器变量</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 好</span></span><br><span class="line"><span class="type">int</span> <span class="variable">failedAttemptCount</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不好</span></span><br><span class="line"><span class="type">int</span> <span class="variable">counter</span> <span class="operator">=</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><h3 id="2-临时变量"><a href="#2-临时变量" class="headerlink" title="2. 临时变量"></a>2. 临时变量</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 处理用户订单</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processOrder</span><span class="params">(Order order)</span> &#123;</span><br><span class="line">    <span class="comment">// 好的临时变量命名</span></span><br><span class="line">    <span class="type">double</span> <span class="variable">discountedPrice</span> <span class="operator">=</span> calculateDiscountedPrice(order);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 不好的命名</span></span><br><span class="line">    <span class="type">double</span> <span class="variable">temp</span> <span class="operator">=</span> calculateDiscountedPrice(order);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-状态标志"><a href="#3-状态标志" class="headerlink" title="3. 状态标志"></a>3. 状态标志</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 好</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">isConnected</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">hasPermission</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不好</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">status</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br></pre></td></tr></table></figure><h1 id="Java修饰符全面解析"><a href="#Java修饰符全面解析" class="headerlink" title="Java修饰符全面解析"></a>Java修饰符全面解析</h1><p>修饰符是Java语言中用于控制类、变量、方法等元素访问权限和行为特性的关键字。下面我将系统性地讲解Java中的各种修饰符及其应用场景。</p><h2 id="一、访问修饰符详解"><a href="#一、访问修饰符详解" class="headerlink" title="一、访问修饰符详解"></a>一、访问修饰符详解</h2><h3 id="1-访问控制级别对比"><a href="#1-访问控制级别对比" class="headerlink" title="1. 访问控制级别对比"></a>1. 访问控制级别对比</h3><table><thead><tr><th>修饰符</th><th>类内部</th><th>同包</th><th>不同包子类</th><th>不同包非子类</th><th>适用对象</th></tr></thead><tbody><tr><td>public</td><td>✓</td><td>✓</td><td>✓</td><td>✓</td><td>类、接口、变量、方法</td></tr><tr><td>protected</td><td>✓</td><td>✓</td><td>✓</td><td>×</td><td>变量、方法、内部类</td></tr><tr><td>default</td><td>✓</td><td>✓</td><td>×</td><td>×</td><td>类、接口、变量、方法</td></tr><tr><td>private</td><td>✓</td><td>×</td><td>×</td><td>×</td><td>变量、方法、构造器、内部类</td></tr></tbody></table><h3 id="2-public修饰符应用"><a href="#2-public修饰符应用" class="headerlink" title="2. public修饰符应用"></a>2. public修饰符应用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 公共类（文件名必须与类名一致）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="comment">// 公共变量（一般不推荐）</span></span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 公共方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot; is eating&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 公共构造方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Animal</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 其他包中可访问</span></span><br><span class="line"><span class="comment">// import com.example.Animal;</span></span><br><span class="line"><span class="comment">// Animal cat = new Animal(&quot;Tom&quot;);</span></span><br></pre></td></tr></table></figure><h3 id="3-protected修饰符实战"><a href="#3-protected修饰符实战" class="headerlink" title="3. protected修饰符实战"></a>3. protected修饰符实战</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Vehicle</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> String brand;  <span class="comment">// 子类可访问</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">startEngine</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(brand + <span class="string">&quot; engine starting&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 同包类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Garage</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">repair</span><span class="params">(Vehicle v)</span> &#123;</span><br><span class="line">        v.startEngine();  <span class="comment">// 可访问protected方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不同包子类</span></span><br><span class="line"><span class="keyword">package</span> com.test;</span><br><span class="line"><span class="keyword">import</span> com.example.Vehicle;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span> <span class="keyword">extends</span> <span class="title class_">Vehicle</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">demo</span><span class="params">()</span> &#123;</span><br><span class="line">        brand = <span class="string">&quot;Toyota&quot;</span>;  <span class="comment">// 可访问protected变量</span></span><br><span class="line">        startEngine();     <span class="comment">// 可访问protected方法</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Vehicle v = new Vehicle();</span></span><br><span class="line">        <span class="comment">// v.startEngine();  // 错误！不同包非子类不能访问</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-默认-default-修饰符示例"><a href="#4-默认-default-修饰符示例" class="headerlink" title="4. 默认(default)修饰符示例"></a>4. 默认(default)修饰符示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">PackagePrivateClass</span> &#123;  <span class="comment">// 仅包内可见</span></span><br><span class="line">    <span class="type">int</span> count;              <span class="comment">// 默认访问修饰符</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">increment</span><span class="params">()</span> &#123;</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-private修饰符最佳实践"><a href="#5-private修饰符最佳实践" class="headerlink" title="5. private修饰符最佳实践"></a>5. private修饰符最佳实践</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BankAccount</span> &#123;</span><br><span class="line">    <span class="comment">// 私有变量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> balance;</span><br><span class="line">    <span class="keyword">private</span> String accountNumber;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 公共访问方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getBalance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> balance;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 私有方法（内部辅助方法）</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">isValidAmount</span><span class="params">(<span class="type">double</span> amount)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> amount &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deposit</span><span class="params">(<span class="type">double</span> amount)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(isValidAmount(amount)) &#123;</span><br><span class="line">            balance += amount;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二、非访问修饰符深度解析"><a href="#二、非访问修饰符深度解析" class="headerlink" title="二、非访问修饰符深度解析"></a>二、非访问修饰符深度解析</h2><h3 id="1-static修饰符"><a href="#1-static修饰符" class="headerlink" title="1. static修饰符"></a>1. static修饰符</h3><h4 id="静态变量"><a href="#静态变量" class="headerlink" title="静态变量"></a>静态变量</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Employee</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">nextId</span> <span class="operator">=</span> <span class="number">1</span>;  <span class="comment">// 类变量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Employee</span><span class="params">()</span> &#123;</span><br><span class="line">        id = nextId++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getNextId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// return id;  // 错误！不能访问实例变量</span></span><br><span class="line">        <span class="keyword">return</span> nextId;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MathUtils</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">circleArea</span><span class="params">(<span class="type">double</span> radius)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Math.PI * radius * radius;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用方式</span></span><br><span class="line"><span class="type">double</span> <span class="variable">area</span> <span class="operator">=</span> MathUtils.circleArea(<span class="number">5.0</span>);</span><br></pre></td></tr></table></figure><h4 id="静态代码块"><a href="#静态代码块" class="headerlink" title="静态代码块"></a>静态代码块</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Database</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Connection conn;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">// 类加载时执行</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn = DriverManager.getConnection(<span class="string">&quot;jdbc:mysql://localhost:3306/mydb&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-final修饰符"><a href="#2-final修饰符" class="headerlink" title="2. final修饰符"></a>2. final修饰符</h3><h4 id="final变量"><a href="#final变量" class="headerlink" title="final变量"></a>final变量</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Constants</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">double</span> <span class="variable">PI</span> <span class="operator">=</span> <span class="number">3.141592653589793</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> MAX_USERS;  <span class="comment">// 空白final</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Constants</span><span class="params">(<span class="type">int</span> max)</span> &#123;</span><br><span class="line">        MAX_USERS = max;  <span class="comment">// 只能在构造器中赋值一次</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">LOCAL_CONST</span> <span class="operator">=</span> <span class="number">100</span>;  <span class="comment">// 局部final变量</span></span><br><span class="line">        <span class="comment">// LOCAL_CONST = 200;  // 错误！</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="final方法"><a href="#final方法" class="headerlink" title="final方法"></a>final方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Parent</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">importantMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 不允许子类覆盖</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Child</span> <span class="keyword">extends</span> <span class="title class_">Parent</span> &#123;</span><br><span class="line">    <span class="comment">// @Override public void importantMethod() &#123;&#125;  // 错误！</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="final类"><a href="#final类" class="headerlink" title="final类"></a>final类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">StringUtils</span> &#123;  <span class="comment">// 不能被继承</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">(String str)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> str == <span class="literal">null</span> || str.trim().isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// class ExtendedUtils extends StringUtils &#123;&#125;  // 错误！</span></span><br></pre></td></tr></table></figure><h3 id="3-abstract修饰符"><a href="#3-abstract修饰符" class="headerlink" title="3. abstract修饰符"></a>3. abstract修饰符</h3><h4 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> String color;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Shape</span><span class="params">(String color)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 抽象方法（无实现）</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="type">double</span> <span class="title function_">area</span><span class="params">()</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 具体方法</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getColor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> color;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="抽象方法实现"><a href="#抽象方法实现" class="headerlink" title="抽象方法实现"></a>抽象方法实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span> <span class="keyword">extends</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> radius;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Circle</span><span class="params">(String color, <span class="type">double</span> radius)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(color);</span><br><span class="line">        <span class="built_in">this</span>.radius = radius;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">area</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Math.PI * radius * radius;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-synchronized修饰符"><a href="#4-synchronized修饰符" class="headerlink" title="4. synchronized修饰符"></a>4. synchronized修饰符</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Counter</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 同步方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">increment</span><span class="params">()</span> &#123;</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 同步块</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> value)</span> &#123;</span><br><span class="line">        <span class="keyword">synchronized</span>(<span class="built_in">this</span>) &#123;</span><br><span class="line">            count += value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-volatile修饰符"><a href="#5-volatile修饰符" class="headerlink" title="5. volatile修饰符"></a>5. volatile修饰符</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SharedObject</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">toggleFlag</span><span class="params">()</span> &#123;</span><br><span class="line">        flag = !flag;  <span class="comment">// 原子操作</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isFlag</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> flag;   <span class="comment">// 直接从主内存读取</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-transient修饰符"><a href="#6-transient修饰符" class="headerlink" title="6. transient修饰符"></a>6. transient修饰符</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> String password;  <span class="comment">// 不被序列化</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 敏感数据不应序列化</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> CreditCard creditCard;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、修饰符组合规则"><a href="#三、修饰符组合规则" class="headerlink" title="三、修饰符组合规则"></a>三、修饰符组合规则</h2><h3 id="1-合法组合示例"><a href="#1-合法组合示例" class="headerlink" title="1. 合法组合示例"></a>1. 合法组合示例</h3><table><thead><tr><th>组合</th><th>示例</th><th>说明</th></tr></thead><tbody><tr><td>public static</td><td><code>public static void main()</code></td><td>主方法必须如此</td></tr><tr><td>public final</td><td><code>public final class String</code></td><td>不可继承的公共类</td></tr><tr><td>protected abstract</td><td><code>protected abstract void draw()</code></td><td>需要子类实现的受保护方法</td></tr><tr><td>private static</td><td><code>private static Logger log</code></td><td>类内部使用的静态工具</td></tr><tr><td>public synchronized</td><td><code>public synchronized void put()</code></td><td>线程安全的公共方法</td></tr></tbody></table><h3 id="2-非法组合及原因"><a href="#2-非法组合及原因" class="headerlink" title="2. 非法组合及原因"></a>2. 非法组合及原因</h3><table><thead><tr><th>非法组合</th><th>原因</th></tr></thead><tbody><tr><td>abstract final</td><td>abstract需要继承，final禁止继承</td></tr><tr><td>abstract private</td><td>private方法不能被子类覆盖</td></tr><tr><td>abstract static</td><td>static方法不参与多态</td></tr><tr><td>final volatile</td><td>final不可变，volatile需要可变</td></tr><tr><td>synchronized abstract</td><td>抽象方法没有实现，无法同步</td></tr></tbody></table><h2 id="四、类成员修饰符适用表"><a href="#四、类成员修饰符适用表" class="headerlink" title="四、类成员修饰符适用表"></a>四、类成员修饰符适用表</h2><table><thead><tr><th>修饰符</th><th>类</th><th>接口</th><th>变量</th><th>方法</th><th>构造器</th><th>代码块</th></tr></thead><tbody><tr><td>public</td><td>✓</td><td>✓</td><td>✓</td><td>✓</td><td>✓</td><td>×</td></tr><tr><td>protected</td><td>×</td><td>×</td><td>✓</td><td>✓</td><td>✓</td><td>×</td></tr><tr><td>default</td><td>✓</td><td>✓</td><td>✓</td><td>✓</td><td>✓</td><td>×</td></tr><tr><td>private</td><td>×</td><td>×</td><td>✓</td><td>✓</td><td>✓</td><td>×</td></tr><tr><td>static</td><td>×</td><td>×</td><td>✓</td><td>✓</td><td>×</td><td>✓</td></tr><tr><td>final</td><td>✓</td><td>×</td><td>✓</td><td>✓</td><td>×</td><td>×</td></tr><tr><td>abstract</td><td>✓</td><td>✓</td><td>×</td><td>✓</td><td>×</td><td>×</td></tr><tr><td>synchronized</td><td>×</td><td>×</td><td>×</td><td>✓</td><td>×</td><td>✓</td></tr><tr><td>volatile</td><td>×</td><td>×</td><td>✓</td><td>×</td><td>×</td><td>×</td></tr><tr><td>transient</td><td>×</td><td>×</td><td>✓</td><td>×</td><td>×</td><td>×</td></tr></tbody></table><h2 id="五、典型应用场景"><a href="#五、典型应用场景" class="headerlink" title="五、典型应用场景"></a>五、典型应用场景</h2><h3 id="1-单例模式实现"><a href="#1-单例模式实现" class="headerlink" title="1. 单例模式实现"></a>1. 单例模式实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Singleton instance;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;&#125;  <span class="comment">// 私有构造器</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">                    instance = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-工具类设计"><a href="#2-工具类设计" class="headerlink" title="2. 工具类设计"></a>2. 工具类设计</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">StringUtils</span> &#123;</span><br><span class="line">    <span class="comment">// 私有构造器防止实例化</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">StringUtils</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isBlank</span><span class="params">(String str)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> str == <span class="literal">null</span> || str.trim().isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">reverse</span><span class="params">(String str)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (str == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(str).reverse().toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-线程安全计数器"><a href="#3-线程安全计数器" class="headerlink" title="3. 线程安全计数器"></a>3. 线程安全计数器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SafeCounter</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> count;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">increment</span><span class="params">()</span> &#123;</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="type">int</span> <span class="title function_">get</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 使用原子变量更高效</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">AtomicInteger</span> <span class="variable">atomicCount</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(<span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">atomicIncrement</span><span class="params">()</span> &#123;</span><br><span class="line">        atomicCount.incrementAndGet();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="六、修饰符使用最佳实践"><a href="#六、修饰符使用最佳实践" class="headerlink" title="六、修饰符使用最佳实践"></a>六、修饰符使用最佳实践</h2><ol><li><strong>封装原则</strong>：成员变量尽量私有，通过方法控制访问</li><li><strong>最小权限</strong>：使用最严格的访问级别（优先private）</li><li><strong>static慎用</strong>：避免滥用导致内存泄漏和测试困难</li><li><strong>final应用</strong>：尽可能使变量不可变，减少并发问题</li><li><strong>同步策略</strong>：优先使用并发工具类而非synchronized</li><li><strong>抽象设计</strong>：抽象类定义框架，具体类实现细节</li></ol><h1 id="Java运算符全面解析"><a href="#Java运算符全面解析" class="headerlink" title="Java运算符全面解析"></a>Java运算符全面解析</h1><p>运算符是Java语言中用于执行各种操作的符号。下面我将系统地讲解Java中的各类运算符及其使用场景。</p><h2 id="一、算术运算符"><a href="#一、算术运算符" class="headerlink" title="一、算术运算符"></a>一、算术运算符</h2><h3 id="1-基本算术运算符"><a href="#1-基本算术运算符" class="headerlink" title="1. 基本算术运算符"></a>1. 基本算术运算符</h3><table><thead><tr><th>运算符</th><th>名称</th><th>示例</th><th>说明</th></tr></thead><tbody><tr><td>+</td><td>加法</td><td>a + b</td><td>也可用于字符串连接</td></tr><tr><td>-</td><td>减法</td><td>a - b</td><td></td></tr><tr><td>*</td><td>乘法</td><td>a * b</td><td></td></tr><tr><td>&#x2F;</td><td>除法</td><td>a &#x2F; b</td><td>整数相除结果取整</td></tr><tr><td>%</td><td>取模</td><td>a % b</td><td>取余数</td></tr></tbody></table><p><strong>代码示例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line">System.out.println(a + b);  <span class="comment">// 13</span></span><br><span class="line">System.out.println(a - b);  <span class="comment">// 7</span></span><br><span class="line">System.out.println(a * b);  <span class="comment">// 30</span></span><br><span class="line">System.out.println(a / b);  <span class="comment">// 3 (整数除法)</span></span><br><span class="line">System.out.println(a % b);  <span class="comment">// 1</span></span><br><span class="line">System.out.println(<span class="number">10.0</span> / <span class="number">3</span>); <span class="comment">// 3.333... (浮点除法)</span></span><br></pre></td></tr></table></figure><h3 id="2-自增-自减运算符"><a href="#2-自增-自减运算符" class="headerlink" title="2. 自增&#x2F;自减运算符"></a>2. 自增&#x2F;自减运算符</h3><table><thead><tr><th>运算符</th><th>名称</th><th>示例</th><th>等价于</th></tr></thead><tbody><tr><td>++i</td><td>前自增</td><td>int j &#x3D; ++i;</td><td>i &#x3D; i + 1; j &#x3D; i;</td></tr><tr><td>i++</td><td>后自增</td><td>int j &#x3D; i++;</td><td>j &#x3D; i; i &#x3D; i + 1;</td></tr><tr><td>–i</td><td>前自减</td><td>int j &#x3D; –i;</td><td>i &#x3D; i - 1; j &#x3D; i;</td></tr><tr><td>i–</td><td>后自减</td><td>int j &#x3D; i–;</td><td>j &#x3D; i; i &#x3D; i - 1;</td></tr></tbody></table><p><strong>示例分析：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> x++;  <span class="comment">// y=5, x=6</span></span><br><span class="line"><span class="type">int</span> <span class="variable">z</span> <span class="operator">=</span> ++x;  <span class="comment">// x=7, z=7</span></span><br></pre></td></tr></table></figure><h2 id="二、关系运算符"><a href="#二、关系运算符" class="headerlink" title="二、关系运算符"></a>二、关系运算符</h2><p>关系运算符用于比较两个值，返回布尔结果：</p><table><thead><tr><th>运算符</th><th>名称</th><th>示例</th><th>说明</th></tr></thead><tbody><tr><td>&#x3D;&#x3D;</td><td>等于</td><td>a &#x3D;&#x3D; b</td><td>比较值是否相等</td></tr><tr><td>!&#x3D;</td><td>不等于</td><td>a !&#x3D; b</td><td></td></tr><tr><td>&gt;</td><td>大于</td><td>a &gt; b</td><td></td></tr><tr><td>&lt;</td><td>小于</td><td>a &lt; b</td><td></td></tr><tr><td>&gt;&#x3D;</td><td>大于等于</td><td>a &gt;&#x3D; b</td><td></td></tr><tr><td>&lt;&#x3D;</td><td>小于等于</td><td>a &lt;&#x3D; b</td><td></td></tr></tbody></table><p><strong>注意事项：</strong></p><ul><li>比较引用类型时，<code>==</code>比较的是引用地址</li><li>比较字符串内容应使用<code>equals()</code>方法</li></ul><p><strong>示例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>, b = <span class="number">20</span>;</span><br><span class="line">System.out.println(a == b);  <span class="comment">// false</span></span><br><span class="line">System.out.println(a != b);  <span class="comment">// true</span></span><br><span class="line">System.out.println(a &gt; b);   <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">System.out.println(s1 == s2);      <span class="comment">// false (不同对象)</span></span><br><span class="line">System.out.println(s1.equals(s2)); <span class="comment">// true (内容相同)</span></span><br></pre></td></tr></table></figure><h2 id="三、逻辑运算符"><a href="#三、逻辑运算符" class="headerlink" title="三、逻辑运算符"></a>三、逻辑运算符</h2><h3 id="1-基本逻辑运算符"><a href="#1-基本逻辑运算符" class="headerlink" title="1. 基本逻辑运算符"></a>1. 基本逻辑运算符</h3><table><thead><tr><th>运算符</th><th>名称</th><th>示例</th><th>说明</th></tr></thead><tbody><tr><td>&amp;&amp;</td><td>逻辑与</td><td>a &amp;&amp; b</td><td>短路与</td></tr><tr><td>||</td><td>逻辑或</td><td>a || b</td><td>短路或</td></tr><tr><td>!</td><td>逻辑非</td><td>!a</td><td>取反</td></tr></tbody></table><p><strong>短路特性示例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> (x &lt; <span class="number">4</span>) &amp;&amp; (x++ &lt; <span class="number">10</span>); </span><br><span class="line"><span class="comment">// 第一个条件为false，第二个不执行</span></span><br><span class="line">System.out.println(x);  <span class="comment">// 仍为5</span></span><br></pre></td></tr></table></figure><h3 id="2-位运算符"><a href="#2-位运算符" class="headerlink" title="2. 位运算符"></a>2. 位运算符</h3><table><thead><tr><th>运算符</th><th>名称</th><th>示例</th><th>说明</th></tr></thead><tbody><tr><td>&amp;</td><td>位与</td><td>a &amp; b</td><td>按位与</td></tr><tr><td>|</td><td>位或</td><td>a | b</td><td>按位或</td></tr><tr><td>^</td><td>位异或</td><td>a ^ b</td><td>相同为0，不同为1</td></tr><tr><td>~</td><td>位非</td><td>~a</td><td>按位取反</td></tr><tr><td>&lt;&lt;</td><td>左移</td><td>a &lt;&lt; 2</td><td>左移，低位补0</td></tr><tr><td>&gt;&gt;</td><td>右移</td><td>a &gt;&gt; 2</td><td>右移，高位补符号位</td></tr><tr><td>&gt;&gt;&gt;</td><td>无符号右移</td><td>a &gt;&gt;&gt; 2</td><td>右移，高位补0</td></tr></tbody></table><p><strong>位运算示例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">60</span>;    <span class="comment">// 60 = 0011 1100</span></span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">13</span>;    <span class="comment">// 13 = 0000 1101</span></span><br><span class="line">System.out.println(a &amp; b);   <span class="comment">// 12 = 0000 1100</span></span><br><span class="line">System.out.println(a | b);   <span class="comment">// 61 = 0011 1101</span></span><br><span class="line">System.out.println(a ^ b);   <span class="comment">// 49 = 0011 0001</span></span><br><span class="line">System.out.println(~a);      <span class="comment">// -61 = 1100 0011</span></span><br><span class="line">System.out.println(a &lt;&lt; <span class="number">2</span>);  <span class="comment">// 240 = 1111 0000</span></span><br><span class="line">System.out.println(a &gt;&gt; <span class="number">2</span>);  <span class="comment">// 15 = 0000 1111</span></span><br></pre></td></tr></table></figure><h2 id="四、赋值运算符"><a href="#四、赋值运算符" class="headerlink" title="四、赋值运算符"></a>四、赋值运算符</h2><h3 id="1-基本赋值运算符"><a href="#1-基本赋值运算符" class="headerlink" title="1. 基本赋值运算符"></a>1. 基本赋值运算符</h3><table><thead><tr><th>运算符</th><th>示例</th><th>等价于</th></tr></thead><tbody><tr><td>&#x3D;</td><td>a &#x3D; b</td><td></td></tr><tr><td>+&#x3D;</td><td>a +&#x3D; b</td><td>a &#x3D; a + b</td></tr><tr><td>-&#x3D;</td><td>a -&#x3D; b</td><td>a &#x3D; a - b</td></tr><tr><td>*&#x3D;</td><td>a *&#x3D; b</td><td>a &#x3D; a * b</td></tr><tr><td>&#x2F;&#x3D;</td><td>a &#x2F;&#x3D; b</td><td>a &#x3D; a &#x2F; b</td></tr><tr><td>%&#x3D;</td><td>a %&#x3D; b</td><td>a &#x3D; a % b</td></tr></tbody></table><p><strong>复合赋值示例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">x += <span class="number">5</span>;   <span class="comment">// x = 15</span></span><br><span class="line">x *= <span class="number">2</span>;   <span class="comment">// x = 30</span></span><br><span class="line">x %= <span class="number">7</span>;   <span class="comment">// x = 2</span></span><br></pre></td></tr></table></figure><h3 id="2-位运算赋值运算符"><a href="#2-位运算赋值运算符" class="headerlink" title="2. 位运算赋值运算符"></a>2. 位运算赋值运算符</h3><table><thead><tr><th>运算符</th><th>示例</th><th>等价于</th></tr></thead><tbody><tr><td>&amp;&#x3D;</td><td>a &amp;&#x3D; b</td><td>a &#x3D; a &amp; b</td></tr><tr><td>|&#x3D;</td><td>a |&#x3D; b</td><td>a &#x3D; a | b</td></tr><tr><td>^&#x3D;</td><td>a ^&#x3D; b</td><td>a &#x3D; a ^ b</td></tr><tr><td>&lt;&lt;&#x3D;</td><td>a &lt;&lt;&#x3D; b</td><td>a &#x3D; a &lt;&lt; b</td></tr><tr><td>&gt;&gt;&#x3D;</td><td>a &gt;&gt;&#x3D; b</td><td>a &#x3D; a &gt;&gt; b</td></tr><tr><td>&gt;&gt;&gt;&#x3D;</td><td>a &gt;&gt;&gt;&#x3D; b</td><td>a &#x3D; a &gt;&gt;&gt; b</td></tr></tbody></table><h2 id="五、条件运算符（三元运算符）"><a href="#五、条件运算符（三元运算符）" class="headerlink" title="五、条件运算符（三元运算符）"></a>五、条件运算符（三元运算符）</h2><p>语法：<code>条件 ? 表达式1 : 表达式2</code></p><p><strong>示例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>, b = <span class="number">20</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> (a &gt; b) ? a : b;  <span class="comment">// max = 20</span></span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> (score &gt;= <span class="number">60</span>) ? <span class="string">&quot;及格&quot;</span> : <span class="string">&quot;不及格&quot;</span>;</span><br></pre></td></tr></table></figure><h2 id="六、instanceof运算符"><a href="#六、instanceof运算符" class="headerlink" title="六、instanceof运算符"></a>六、instanceof运算符</h2><p>用于检查对象是否是特定类的实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">System.out.println(obj <span class="keyword">instanceof</span> String);  <span class="comment">// true</span></span><br><span class="line">System.out.println(obj <span class="keyword">instanceof</span> Integer); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Vehicle</span> &#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span> <span class="keyword">extends</span> <span class="title class_">Vehicle</span> &#123;&#125;</span><br><span class="line"><span class="type">Car</span> <span class="variable">car</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Car</span>();</span><br><span class="line">System.out.println(car <span class="keyword">instanceof</span> Vehicle); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h2 id="七、运算符优先级"><a href="#七、运算符优先级" class="headerlink" title="七、运算符优先级"></a>七、运算符优先级</h2><p>下表按优先级从高到低排列：</p><table><thead><tr><th>优先级</th><th>运算符</th><th>结合性</th></tr></thead><tbody><tr><td>1</td><td>() [] .</td><td>左→右</td></tr><tr><td>2</td><td>! ~ ++ – +(正) -(负)</td><td>右→左</td></tr><tr><td>3</td><td>* &#x2F; %</td><td>左→右</td></tr><tr><td>4</td><td>+ -</td><td>左→右</td></tr><tr><td>5</td><td>&lt;&lt; &gt;&gt; &gt;&gt;&gt;</td><td>左→右</td></tr><tr><td>6</td><td>&lt; &lt;&#x3D; &gt; &gt;&#x3D; instanceof</td><td>左→右</td></tr><tr><td>7</td><td>&#x3D;&#x3D; !&#x3D;</td><td>左→右</td></tr><tr><td>8</td><td>&amp;</td><td>左→右</td></tr><tr><td>9</td><td>^</td><td>左→右</td></tr><tr><td>10</td><td>|</td><td>左→右</td></tr><tr><td>11</td><td>&amp;&amp;</td><td>左→右</td></tr><tr><td>12</td><td>||</td><td>左→右</td></tr><tr><td>13</td><td>?:</td><td>右→左</td></tr><tr><td>14</td><td>&#x3D; +&#x3D; -&#x3D; *&#x3D; &#x2F;&#x3D; %&#x3D; &amp;&#x3D; |&#x3D; ^&#x3D; &lt;&lt;&#x3D; &gt;&gt;&#x3D; &gt;&gt;&gt;&#x3D;</td><td>右→左</td></tr></tbody></table><p><strong>优先级示例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">5</span> + <span class="number">3</span> * <span class="number">2</span>;      <span class="comment">// 11 (乘法优先)</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="number">5</span> &gt; <span class="number">3</span> &amp;&amp; <span class="number">2</span> &lt; <span class="number">4</span>; <span class="comment">// true (关系运算优先)</span></span><br></pre></td></tr></table></figure><h2 id="八、特殊运算符技巧"><a href="#八、特殊运算符技巧" class="headerlink" title="八、特殊运算符技巧"></a>八、特殊运算符技巧</h2><h3 id="1-交换变量值"><a href="#1-交换变量值" class="headerlink" title="1. 交换变量值"></a>1. 交换变量值</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">5</span>, b = <span class="number">10</span>;</span><br><span class="line">a = a ^ b;</span><br><span class="line">b = a ^ b;</span><br><span class="line">a = a ^ b;</span><br><span class="line"><span class="comment">// 现在 a=10, b=5</span></span><br></pre></td></tr></table></figure><h3 id="2-判断奇偶"><a href="#2-判断奇偶" class="headerlink" title="2. 判断奇偶"></a>2. 判断奇偶</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ((num &amp; <span class="number">1</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;偶数&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;奇数&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-快速乘除2的幂次"><a href="#3-快速乘除2的幂次" class="headerlink" title="3. 快速乘除2的幂次"></a>3. 快速乘除2的幂次</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">8</span>;</span><br><span class="line">n = n &lt;&lt; <span class="number">1</span>;  <span class="comment">// n*2 = 16</span></span><br><span class="line">n = n &gt;&gt; <span class="number">2</span>;  <span class="comment">// n/4 = 4</span></span><br></pre></td></tr></table></figure><h2 id="九、常见问题与陷阱"><a href="#九、常见问题与陷阱" class="headerlink" title="九、常见问题与陷阱"></a>九、常见问题与陷阱</h2><ol><li><p><strong>整数除法</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">double</span> <span class="variable">d</span> <span class="operator">=</span> <span class="number">5</span> / <span class="number">2</span>;  <span class="comment">// 2.0 (不是2.5)</span></span><br><span class="line"><span class="type">double</span> <span class="variable">d2</span> <span class="operator">=</span> <span class="number">5.0</span> / <span class="number">2</span>; <span class="comment">// 2.5</span></span><br></pre></td></tr></table></figure></li><li><p><strong>浮点数比较</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 错误方式</span></span><br><span class="line"><span class="keyword">if</span> (f1 == f2) &#123;...&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确方式</span></span><br><span class="line"><span class="keyword">if</span> (Math.abs(f1 - f2) &lt; <span class="number">1e-6</span>) &#123;...&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>字符串比较</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">System.out.println(s1 == s2);      <span class="comment">// false</span></span><br><span class="line">System.out.println(s1.equals(s2)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li><li><p><strong>运算符优先级混淆</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">5</span> + <span class="number">3</span> * <span class="number">2</span>;    <span class="comment">// 11 不是16</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">5</span> &gt; <span class="number">3</span> == <span class="literal">true</span>; <span class="comment">// true (5&gt;3为true，true==true)</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 结构速查 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java快速学习速查（1）</title>
      <link href="/2025/03/31/java%E5%BF%AB%E9%80%9F%E5%AD%A6%E4%B9%A0%E9%80%9F%E6%9F%A5%EF%BC%881%EF%BC%89/"/>
      <url>/2025/03/31/java%E5%BF%AB%E9%80%9F%E5%AD%A6%E4%B9%A0%E9%80%9F%E6%9F%A5%EF%BC%881%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="java快速学习速查（1）"><a href="#java快速学习速查（1）" class="headerlink" title="java快速学习速查（1）"></a>java快速学习速查（1）</h1><blockquote><p>在经历了艰苦卓绝的思想斗争之后，我决定走Java的全栈开发，这是个很难走的路线，但是这是最合适现在的环境的（自认为）</p></blockquote><p>我将会在一周内快速解决Java的本体基础学习，会在乐扣上用题目辅助</p><p>注意：这是全栈学习的开端，而且必须要快！！<br>我将以更系统化和结构化的方式为你整理Java基础语法内容，并补充更多实用细节和示例。</p><blockquote><p>这篇文章涉及Java基础语法，注释，对象和类，基本数据类型</p></blockquote><h1 id="Java基础语法全面解析"><a href="#Java基础语法全面解析" class="headerlink" title="Java基础语法全面解析"></a>Java基础语法全面解析</h1><p>一个 Java 程序可以认为是一系列对象的集合，而这些对象通过调用彼此的方法来协同工作。下面简要介绍下类、对象、方法和实例变量的概念。</p><ul><li><strong>对象</strong>：对象是类的一个实例，有状态和行为。例如，一条狗是一个对象，它的状态有：颜色、名字、品种；行为有：摇尾巴、叫、吃等。</li><li><strong>类</strong>：类是一个模板，它描述一类对象的行为和状态。</li><li>方法：方法就是行为，一个类可以有很多方法。逻辑运算、数据修改以及所有动作都是在方法中完成的。</li><li><strong>实例变量：</strong>每个对象都有独特的实例变量，对象的状态由这些实例变量的值决定。</li></ul><h2 id="一、程序结构核心概念"><a href="#一、程序结构核心概念" class="headerlink" title="一、程序结构核心概念"></a>一、程序结构核心概念</h2><p>这是构成Java语法结构的最基本框架</p><ol><li><p><strong>类与对象</strong></p><ul><li>类：对象的蓝图&#x2F;模板<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span> &#123;  <span class="comment">// 类名首字母大写</span></span><br><span class="line">    <span class="comment">// 类内容</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>对象：类的具体实例<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Dog</span> <span class="variable">myDog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();  <span class="comment">// 创建Dog类的对象</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>main方法详解</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">// 程序入口必须严格按此格式</span></span><br><span class="line">    <span class="comment">// public: 访问修饰符</span></span><br><span class="line">    <span class="comment">// static: 静态方法</span></span><br><span class="line">    <span class="comment">// void: 无返回值</span></span><br><span class="line">    <span class="comment">// String[] args: 命令行参数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="二、命名规范与语法规则"><a href="#二、命名规范与语法规则" class="headerlink" title="二、命名规范与语法规则"></a>二、命名规范与语法规则</h3><p>编写 Java 程序时，应注意以下几点：</p><ul><li><strong>大小写敏感</strong>：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。<br>-** 类名：<strong>对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。<br>-</strong> 方法名：<strong>所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。<br>-</strong> 源文件名：<strong>源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。<br>-</strong> 主方法入口：**所有的 Java 程序由 public static void main(String[] args) 方法开始执行。<table><thead><tr><th>元素类型</th><th>规范示例</th><th>错误示例</th></tr></thead><tbody><tr><td>类名</td><td><code>MyFirstClass</code></td><td><code>myFirstClass</code></td></tr><tr><td>方法名</td><td><code>calculateTotal()</code></td><td><code>CalculateTotal()</code></td></tr><tr><td>变量名</td><td><code>studentCount</code></td><td><code>StudentCount</code></td></tr><tr><td>常量名</td><td><code>MAX_VALUE</code></td><td><code>max_value</code></td></tr></tbody></table></li></ul><p><strong>重要规则</strong>：</p><ul><li>源文件名必须与public类名完全匹配（包括大小写）</li><li>一个.java文件只能有一个public类</li></ul><h2 id="三、数据类型深度解析"><a href="#三、数据类型深度解析" class="headerlink" title="三、数据类型深度解析"></a>三、数据类型深度解析</h2><ol><li><p><strong>基本数据类型</strong>（8种）</p><table><thead><tr><th>类型</th><th>大小</th><th>范围&#x2F;示例</th></tr></thead><tbody><tr><td>byte</td><td>8位</td><td>-128 ~ 127</td></tr><tr><td>short</td><td>16位</td><td>-32768 ~ 32767</td></tr><tr><td>int</td><td>32位</td><td>-2^31 ~ 2^31-1</td></tr><tr><td>long</td><td>64位</td><td>需加L后缀：<code>100L</code></td></tr><tr><td>float</td><td>32位</td><td>需加f后缀：<code>3.14f</code></td></tr><tr><td>double</td><td>64位</td><td>默认小数类型</td></tr><tr><td>char</td><td>16位</td><td><code>&#39;A&#39;</code> 或 Unicode</td></tr><tr><td>boolean</td><td>-</td><td><code>true/false</code></td></tr></tbody></table></li><li><p><strong>引用数据类型</strong></p><ul><li>类对象：<code>String str = &quot;Hello&quot;</code></li><li>数组：<code>int[] arr = new int[5]</code></li><li>接口：<code>List&lt;String&gt; list</code></li></ul></li></ol><h2 id="四、变量类型对比"><a href="#四、变量类型对比" class="headerlink" title="四、变量类型对比"></a>四、变量类型对比</h2><table><thead><tr><th>变量类型</th><th>声明位置</th><th>生命周期</th><th>初始化要求</th></tr></thead><tbody><tr><td>局部变量</td><td>方法&#x2F;块内</td><td>方法&#x2F;块执行期间</td><td>必须显式初始化</td></tr><tr><td>实例变量</td><td>类内方法外</td><td>对象存在期间</td><td>自动初始化(0&#x2F;false&#x2F;null)</td></tr><tr><td>类变量</td><td>类内+static</td><td>程序运行期间</td><td>自动初始化</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VariableDemo</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> classVar;  <span class="comment">// 类变量</span></span><br><span class="line">    </span><br><span class="line">    String instanceVar;   <span class="comment">// 实例变量</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">localVar</span> <span class="operator">=</span> <span class="number">10</span>; <span class="comment">// 局部变量必须初始化</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="五、数组使用详解"><a href="#五、数组使用详解" class="headerlink" title="五、数组使用详解"></a>五、数组使用详解</h2><ol><li><p><strong>声明与初始化</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方式1</span></span><br><span class="line"><span class="type">int</span>[] arr1 = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>];  <span class="comment">// [0,0,0]</span></span><br><span class="line"><span class="comment">// 方式2</span></span><br><span class="line"><span class="type">int</span>[] arr2 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line"><span class="comment">// 方式3</span></span><br><span class="line"><span class="type">int</span>[] arr3 = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br></pre></td></tr></table></figure></li><li><p><strong>多维数组</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[][] matrix = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>][<span class="number">3</span>];</span><br><span class="line">matrix[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br></pre></td></tr></table></figure></li></ol><h2 id="六、枚举-Enum-高级用法"><a href="#六、枚举-Enum-高级用法" class="headerlink" title="六、枚举(Enum)高级用法"></a>六、枚举(Enum)高级用法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Pizza</span> &#123;</span><br><span class="line">    <span class="keyword">enum</span> <span class="title class_">Size</span> &#123;</span><br><span class="line">        SMALL(<span class="string">&quot;S&quot;</span>), MEDIUM(<span class="string">&quot;M&quot;</span>), LARGE(<span class="string">&quot;L&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">private</span> String abbreviation;</span><br><span class="line">        </span><br><span class="line">        Size(String abbreviation) &#123;</span><br><span class="line">            <span class="built_in">this</span>.abbreviation = abbreviation;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">getAbbreviation</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> abbreviation;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Size</span> <span class="variable">size</span> <span class="operator">=</span> Size.MEDIUM;</span><br><span class="line">        System.out.println(size.getAbbreviation()); <span class="comment">// 输出 M</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="七、核心关键字分类说明"><a href="#七、核心关键字分类说明" class="headerlink" title="七、核心关键字分类说明"></a>七、核心关键字分类说明</h2><p>如果你要关键字全集<a href="https://www.runoob.com/java/java-basic-syntax.html">点这里</a></p><ol><li><p><strong>访问控制</strong></p><ul><li><code>private</code>：仅本类可见</li><li><code>protected</code>：本包+子类可见</li><li><code>public</code>：所有类可见</li><li>默认(不写)：本包可见</li></ul></li><li><p><strong>类与对象</strong></p><ul><li><code>new</code>：创建对象 <code>Dog d = new Dog()</code></li><li><code>this</code>：指代当前对象</li><li><code>super</code>：指代父类对象</li></ul></li><li><p><strong>流程控制</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// if-else</span></span><br><span class="line"><span class="keyword">if</span>(condition) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(condition2) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// switch (Java 12+支持表达式形式)</span></span><br><span class="line"><span class="type">int</span> <span class="variable">day</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">dayType</span> <span class="operator">=</span> <span class="keyword">switch</span>(day) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> -&gt; <span class="string">&quot;Weekday&quot;</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">6</span>, <span class="number">7</span> -&gt; <span class="string">&quot;Weekend&quot;</span>;</span><br><span class="line">    <span class="keyword">default</span> -&gt; <span class="string">&quot;Invalid&quot;</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol><h2 id="八、注释规范"><a href="#八、注释规范" class="headerlink" title="八、注释规范"></a>八、注释规范</h2><ol><li><p><strong>单行注释</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这是单行注释</span></span><br></pre></td></tr></table></figure></li><li><p><strong>多行注释</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 这是多行注释</span></span><br><span class="line"><span class="comment"> * 可以跨越多行</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure></li><li><p><strong>文档注释</strong>（生成API文档）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 计算两个数的和</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> a 第一个加数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> b 第二个加数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 两数之和</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="九、编译与执行流程"><a href="#九、编译与执行流程" class="headerlink" title="九、编译与执行流程"></a>九、编译与执行流程</h2><ol><li><p><strong>完整步骤</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 编写HelloWorld.java</span><br><span class="line">2. 编译: javac HelloWorld.java → 生成HelloWorld.class</span><br><span class="line">3. 运行: java HelloWorld</span><br></pre></td></tr></table></figure></li><li><p><strong>常见问题解决</strong></p><ul><li>编码问题：<code>javac -encoding UTF-8 HelloWorld.java</code></li><li>类路径问题：<code>java -cp . HelloWorld</code></li></ul></li><li><p><strong>JVM执行过程</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">源代码(.java) → 编译器 → 字节码(.class) → JVM → 机器码</span><br></pre></td></tr></table></figure></li></ol><h2 id="十、面向对象核心概念"><a href="#十、面向对象核心概念" class="headerlink" title="十、面向对象核心概念"></a>十、面向对象核心概念</h2><ol><li><p><strong>继承示例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Eating...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">bark</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Barking...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>接口示例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Drawable</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span>;  <span class="comment">// 默认public abstract</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span> <span class="keyword">implements</span> <span class="title class_">Drawable</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Drawing circle&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="最佳实践建议"><a href="#最佳实践建议" class="headerlink" title="最佳实践建议"></a>最佳实践建议</h2><ol><li><p><strong>代码风格</strong></p><ul><li>类名使用大驼峰：<code>MyClass</code></li><li>方法名使用小驼峰：<code>myMethod()</code></li><li>常量全大写：<code>MAX_COUNT</code></li></ul></li><li><p><strong>调试技巧</strong></p><ul><li>使用<code>System.out.println()</code>进行简单调试</li><li>学会阅读编译错误信息</li><li>使用IDE的调试功能（如IntelliJ IDEA）</li></ul></li></ol><h1 id="Java注释全面指南"><a href="#Java注释全面指南" class="headerlink" title="Java注释全面指南"></a>Java注释全面指南</h1><p>注释是编程中不可或缺的部分，好的注释能极大提升代码可读性和可维护性。下面我将详细讲解Java中的三种注释类型及其最佳实践。</p><p>你自己读得懂代码才行啊。</p><h2 id="一、注释类型详解"><a href="#一、注释类型详解" class="headerlink" title="一、注释类型详解"></a>一、注释类型详解</h2><h3 id="1-单行注释（Single-line）"><a href="#1-单行注释（Single-line）" class="headerlink" title="1. 单行注释（Single-line）"></a>1. 单行注释（Single-line）</h3><p><strong>语法</strong>：<code>// 注释内容</code></p><p><strong>特点</strong>：</p><ul><li>从<code>//</code>开始到行尾</li><li>适用于简短解释或行尾说明</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 计算订单总金额</span></span><br><span class="line"><span class="type">double</span> <span class="variable">total</span> <span class="operator">=</span> price * quantity;  <span class="comment">// price是单价，quantity是数量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 下面这行代码被暂时禁用</span></span><br><span class="line"><span class="comment">// System.out.println(&quot;调试信息&quot;);</span></span><br></pre></td></tr></table></figure><h3 id="2-多行注释（Multi-line）"><a href="#2-多行注释（Multi-line）" class="headerlink" title="2. 多行注释（Multi-line）"></a>2. 多行注释（Multi-line）</h3><p><strong>语法</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/* </span><br><span class="line"> * 注释内容</span><br><span class="line"> * 可以跨越多行</span><br><span class="line"> */</span><br></pre></td></tr></table></figure><p><strong>特点</strong>：</p><ul><li>以<code>/*</code>开始，<code>*/</code>结束</li><li>适合较长的解释说明或临时屏蔽代码块</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 这段代码实现了用户登录验证功能</span></span><br><span class="line"><span class="comment"> * 包含以下步骤：</span></span><br><span class="line"><span class="comment"> * 1. 检查用户名格式</span></span><br><span class="line"><span class="comment"> * 2. 验证密码强度</span></span><br><span class="line"><span class="comment"> * 3. 查询数据库匹配</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">loginSuccess</span> <span class="operator">=</span> validateLogin(username, password);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 临时注释掉的代码块</span></span><br><span class="line"><span class="comment">if(debugMode) &#123;</span></span><br><span class="line"><span class="comment">    logger.log(&quot;进入支付流程&quot;);</span></span><br><span class="line"><span class="comment">    processPayment();</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="3-文档注释（Javadoc）"><a href="#3-文档注释（Javadoc）" class="headerlink" title="3. 文档注释（Javadoc）"></a>3. 文档注释（Javadoc）</h3><p>这玩意在大型工程基本上才用得到，一般情况用不到<br><strong>语法</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 描述信息</span><br><span class="line"> * @tag 标签内容</span><br><span class="line"> */</span><br></pre></td></tr></table></figure><p><strong>特点</strong>：</p><ul><li>以<code>/**</code>开始，<code>*/</code>结束</li><li>用于生成正式的API文档</li><li>支持HTML标签和特殊标记</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 计算两个数的和</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;该方法接受两个整数参数，返回它们的算术和&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> a 第一个加数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> b 第二个加数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 两个参数的和</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IllegalArgumentException 如果参数为负数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(a &lt; <span class="number">0</span> || b &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;参数不能为负数&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二、Javadoc常用标签"><a href="#二、Javadoc常用标签" class="headerlink" title="二、Javadoc常用标签"></a>二、Javadoc常用标签</h2><p>标签很重要，但不是现在说的</p><table><thead><tr><th>标签</th><th>用途</th><th>适用对象</th></tr></thead><tbody><tr><td><code>@param</code></td><td>方法参数说明</td><td>方法</td></tr><tr><td><code>@return</code></td><td>返回值说明</td><td>方法</td></tr><tr><td><code>@throws</code>&#x2F;<code>@exception</code></td><td>抛出异常说明</td><td>方法</td></tr><tr><td><code>@see</code></td><td>参考链接</td><td>类&#x2F;方法&#x2F;字段</td></tr><tr><td><code>@deprecated</code></td><td>标记已过时</td><td>类&#x2F;方法&#x2F;字段</td></tr><tr><td><code>@since</code></td><td>引入版本</td><td>类&#x2F;方法&#x2F;字段</td></tr><tr><td><code>@version</code></td><td>版本信息</td><td>类</td></tr><tr><td><code>@author</code></td><td>作者信息</td><td>类</td></tr></tbody></table><p><strong>示例</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 表示二维点的类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> John Doe</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.2</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2020-03-15</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Point</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 计算到另一点的距离</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> other 另一个点对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 两点间的距离</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> Math#sqrt(double)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">distanceTo</span><span class="params">(Point other)</span> &#123;</span><br><span class="line">        <span class="comment">// 实现代码...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、注释最佳实践"><a href="#三、注释最佳实践" class="headerlink" title="三、注释最佳实践"></a>三、注释最佳实践</h2><ol><li><p><strong>该注释什么</strong>：</p><ul><li>复杂算法逻辑</li><li>不直观的设计决策</li><li>公共API的用法</li><li>已知问题的临时解决方案</li><li>特殊业务规则</li></ul></li><li><p><strong>不该注释什么</strong>：</p><ul><li>自我解释的简单代码</li><li>重复方法名的信息</li><li>过时的实现细节</li></ul></li><li><p><strong>良好注释示例</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用快速排序因为：</span></span><br><span class="line"><span class="comment">// 1. 数据集通常部分有序</span></span><br><span class="line"><span class="comment">// 2. 空间复杂度要求O(log n)</span></span><br><span class="line"><span class="comment">// 3. 基准测试显示比其他算法快15%</span></span><br><span class="line">sortAlgorithm = <span class="keyword">new</span> <span class="title class_">QuickSort</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 转换日期格式（线程安全版本）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@deprecated</span> 请使用&#123;<span class="doctag">@link</span> DateFormatter#formatSafe(Date)&#125;</span></span><br><span class="line"><span class="comment"> *             因为发现时区处理问题</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Deprecated</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">formatDate</span><span class="params">(Date date)</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>注释风格建议</strong>：</p><ul><li>保持注释与代码同步更新</li><li>使用完整的句子和正确的语法</li><li>避免幽默或不专业的语言</li><li>重点说明”为什么”而不是”做什么”</li></ul></li></ol><h2 id="四、生成API文档"><a href="#四、生成API文档" class="headerlink" title="四、生成API文档"></a>四、生成API文档</h2><p>使用JDK自带的javadoc工具：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javadoc -d docs -encoding UTF-8 -sourcepath src com.example.package</span><br></pre></td></tr></table></figure><p>常用参数：</p><ul><li><code>-d</code>：输出目录</li><li><code>-encoding</code>：指定源文件编码</li><li><code>-sourcepath</code>：源代码路径</li><li><code>-author</code>&#x2F;<code>-version</code>：包含作者&#x2F;版本信息</li></ul><h2 id="五、特殊注释技巧"><a href="#五、特殊注释技巧" class="headerlink" title="五、特殊注释技巧"></a>五、特殊注释技巧</h2><ol><li><p><strong>调试标记</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 需要优化数据库查询</span></span><br><span class="line"><span class="comment">// <span class="doctag">FIXME:</span> 时区处理有问题</span></span><br></pre></td></tr></table></figure></li><li><p><strong>条件编译</strong>（通过final变量实现）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">DEBUG</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(DEBUG) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;调试信息&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>注释中的代码示例</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用示例：</span></span><br><span class="line"><span class="comment"> * &lt;pre&gt;&#123;<span class="doctag">@code</span></span></span><br><span class="line"><span class="comment"> * List&lt;String&gt; list = new ArrayList&lt;&gt;();</span></span><br><span class="line"><span class="comment"> * list.add(&quot;item&quot;);</span></span><br><span class="line"><span class="comment"> * &#125;&lt;/pre&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p>接下来是很重要的一个部分</p></li></ol><h1 id="Java对象和类深度解析"><a href="#Java对象和类深度解析" class="headerlink" title="Java对象和类深度解析"></a>Java对象和类深度解析</h1><p>面向对象编程(OOP)是Java的核心思想，下面我将从实际开发角度，通过丰富的示例详细讲解Java中类和对象的各个方面。</p><h2 id="一、类与对象全面解析"><a href="#一、类与对象全面解析" class="headerlink" title="一、类与对象全面解析"></a>一、类与对象全面解析</h2><p>Java 作为一种面向对象的编程语言，支持以下基本概念：</p><h3 id="概念解释和简单示例"><a href="#概念解释和简单示例" class="headerlink" title="概念解释和简单示例"></a>概念解释和简单示例</h3><h4 id="1、类（Class）："><a href="#1、类（Class）：" class="headerlink" title="1、类（Class）："></a>1、类（Class）：</h4><p>定义对象的蓝图，包括属性和方法。</p><blockquote><p>示例：public class Car { … }</p></blockquote><p>构建蓝图：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Car</span> &#123;<span class="comment">// 类名首字母大写</span></span><br><span class="line">    <span class="comment">// 属性(特征)</span></span><br><span class="line">    String brand;  <span class="comment">// 品牌</span></span><br><span class="line">    String color;  <span class="comment">// 颜色</span></span><br><span class="line">    <span class="type">int</span> year;      <span class="comment">// 年份</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 行为（功能）     成员方法</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">drive</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Driving...&quot;</span>);</span><br><span class="line">    &#125;<span class="comment">//不带public也可以</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//行为（功能）     成员方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">stop</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Stopping...&quot;</span>);</span><br><span class="line">    &#125;<span class="comment">//携带public的成员方法，在其他类中可以直接调用</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果不带public，在其他类中不能直接调用,需要创建对象，再调用</span></span><br><span class="line">    <span class="comment">//为了方便调用，一般都带上public</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、对象（Object）："><a href="#2、对象（Object）：" class="headerlink" title="2、对象（Object）："></a>2、对象（Object）：</h4><p>类的实例，具有状态和行为。</p><blockquote><p>示例：Car myCar &#x3D; new Car();<br>实例化对象：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建Car类的对象</span></span><br><span class="line"><span class="type">Car</span> <span class="variable">myCar</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Car</span>();<span class="comment">//myCar是对象名，Car是类名，new Car()是实例化对象</span></span><br><span class="line"><span class="comment">// 访问对象的属性和方法</span></span><br><span class="line">myCar.brand = <span class="string">&quot;Toyota&quot;</span>;<span class="comment">//给对象的属性赋值</span></span><br><span class="line">myCar.color = <span class="string">&quot;Red&quot;</span>;<span class="comment">//给对象的属性赋值</span></span><br><span class="line">myCar.year = <span class="number">2020</span>;<span class="comment">//给对象的属性赋值</span></span><br><span class="line">myCar.drive();<span class="comment">//调用对象的方法</span></span><br><span class="line">myCar.stop();<span class="comment">//调用对象的方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 另一个Car对象</span></span><br><span class="line"><span class="type">Car</span> <span class="variable">yourCar</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Car</span>();</span><br><span class="line">yourCar.brand = <span class="string">&quot;Honda&quot;</span>;</span><br><span class="line">yourCar.color = <span class="string">&quot;Blue&quot;</span>;</span><br><span class="line">yourCar.year = <span class="number">2019</span>;</span><br><span class="line">yourCar.drive();</span><br><span class="line">yourCar.stop();</span><br></pre></td></tr></table></figure><p><strong>调用对象的时候如果不在同一个类中，需要创建对象，再调用（记得导入包）不导包绝对炸</strong></p><p><strong>成员变量和局部变量的区别：</strong><br>1、定义位置：</p><ul><li>成员变量：定义在类中，方法外。</li><li>局部变量：定义在方法中，参数列表或方法体中,包含方法的形参<br>2、作用域：</li><li>成员变量：从该类的实例被创建时就存在，直到系统销毁这个实例。</li><li>局部变量：只在定义它的方法中有效，出了方法用不了。<br>3、默认值：</li><li>成员变量：有默认值，如int为0，boolean为false，String为null。</li><li>局部变量：没有默认值，必须先定义、初始化才能使用。<br>4、生命周期：</li><li>成员变量：和对象一样，对象被销毁了就回收了。</li><li>局部变量：和方法一样，方法被调用，或者方法执行完毕就回收了。</li></ul><p><strong>成员变量的生命周期比局部变量的要长</strong></p><p>5、内存位置：</p><ul><li>成员变量：堆内存，new位于堆内存。</li><li>局部变量：位于栈内存。</li></ul><h4 id="3、继承（Inheritance）："><a href="#3、继承（Inheritance）：" class="headerlink" title="3、继承（Inheritance）："></a>3、继承（Inheritance）：</h4><p>继承是用来解决代码复用的问题，方便维护和扩展。</p><p>一个类可以继承另一个类的属性和方法。<br>多个类存在相同的属性和方法时，可以从这些类中派生出一个新类，这个新类能吸收了它们的属性和方法。并能拓展新的能力。</p><blockquote><p>示例：public class Dog extends Animal { … }</p></blockquote><ul><li>父类：可以叫做父类，基类，超类。</li><li>子类：可以叫做子类，派生类，扩展类。</li></ul><p><strong>继承的特性</strong></p><ul><li>子类可以继承父类的属性和方法。（儿子继承爹）</li><li>子类可以拓展自己的属性和方法。（儿子可以有自己的属性和方法）</li><li>子类可以重写父类的方法。（儿子可以有自己的方法，但是方法名和父类的方法名一样，方法体不一样）</li><li>子类可以访问父类的构造方法。（儿子可以有自己的构造方法，但是构造方法名和父类的构造方法名一样，方法体不一样）</li></ul><blockquote><p>想要继承任何东西，名字得不重名，方法名也不重名。并且有最近原则，优先子类的方法。</p></blockquote><p><strong>注意</strong></p><ul><li>子类不能继承父类的<strong>构造方法</strong>。（儿子不能有自己的构造方法，但是可以有自己的方法）</li><li>子类不能继承父类的<strong>私有属性和方法</strong>。（儿子不能继承爹的隐私）</li><li>子类可以继承父类的静态属性和方法。（儿子可以继承爹的静态属性和方法）</li><li>如果子类和父类有同名的属性和方法，子类会覆盖<code>（重写）</code>父类的属性和方法。但是子类可以通过super关键字访问父类的属性和方法。（揭老爹老底）<br><strong>super用法：</strong></li><li>1、super.属性名：访问父类的属性。</li><li>2、super.方法名()：调用父类的方法。</li><li>3、super()：调用父类的构造方法。</li></ul><p><strong>重写</strong>：<br>@Override：重写的注解，用于检查方法是否正确重写了父类的方法。<br>写法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span> <span class="comment">//重写的注解，用于检查方法是否正确重写了父类的方法。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>.eat();<span class="comment">//调用父类的方法</span></span><br><span class="line">    System.out.println(<span class="string">&quot;在学校食堂&quot;</span>);<span class="comment">//拓展新的能力</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>方法重写要求：</strong>一、方法名参数列表啥的都得一样。二、返回值得小于等于父类的返回值范围。三、访问修饰符的范围大于等于父类的访问修饰符范围。四、抛出的异常的范围小于等于父类的抛出的异常范围。</p></blockquote><p><strong>访问权限大小关系：public &gt; protected &gt; 默认 &gt; private</strong></p><p><strong>重写和重载的区别：</strong></p><ul><li>重写：<code>继承</code>体系里面，子类重新编写父类的方法。</li><li>重载：一个类中有多个方法，方法名相同，参数的个数，顺序，类型不同，返回值类型可以相同也可以不同。</li></ul><p><strong>蓝图如下：</strong><code>主要用到的是extends关键字</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 人类父类（基类）</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Human</span> &#123;</span><br><span class="line">    <span class="comment">// 公共属性</span></span><br><span class="line">    <span class="keyword">protected</span> String name;</span><br><span class="line">    <span class="keyword">protected</span> <span class="type">int</span> age;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 构造方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Human</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 基础方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;在吃饭&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 学生子类（派生类）</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Human</span> &#123;</span><br><span class="line">    <span class="comment">// 特有属性</span></span><br><span class="line">    <span class="keyword">private</span> String school;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 构造方法（调用父类构造）</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, <span class="type">int</span> age, String school)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name, age);  <span class="comment">// 必须首先调用父类构造</span></span><br><span class="line">        <span class="built_in">this</span>.school = school;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 特有方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">study</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;在学习&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 方法重写</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.eat();  <span class="comment">// 调用父类方法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;在学校食堂&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上蓝图的main方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">// 创建人类对象</span></span><br><span class="line">    <span class="type">Human</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Human</span>(<span class="string">&quot;张三&quot;</span>, <span class="number">30</span>);</span><br><span class="line">    person.eat();  <span class="comment">// 调用父类方法</span></span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;----------&quot;</span>);</span><br><span class="line">    <span class="comment">// 创建学生对象</span></span><br><span class="line">    <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;李四&quot;</span>, <span class="number">20</span>, <span class="string">&quot;清华大学&quot;</span>);</span><br><span class="line">    student.eat();  <span class="comment">// 调用重写后的方法</span></span><br><span class="line">    student.study();  <span class="comment">// 调用子类特有方法</span></span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;----------&quot;</span>);</span><br><span class="line">    <span class="comment">// 多态：父类引用指向子类对象</span></span><br><span class="line">    <span class="type">Human</span> <span class="variable">human</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;王五&quot;</span>, <span class="number">22</span>, <span class="string">&quot;北京大学&quot;</span>);</span><br><span class="line">    human.eat();  <span class="comment">// 调用重写后的方法，多态</span></span><br><span class="line">&#125;</span><br><span class="line">**案例如下：**</span><br><span class="line">```java</span><br><span class="line"><span class="comment">// 人类父类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Human</span> &#123;</span><br><span class="line">    <span class="comment">// 公共属性</span></span><br><span class="line">    <span class="keyword">protected</span> String name;</span><br><span class="line">    <span class="keyword">protected</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">protected</span> String gender;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 构造方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Human</span><span class="params">(String name, <span class="type">int</span> age, String gender)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.gender = gender;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 公共方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;正在吃饭&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;正在睡觉&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">introduce</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是&quot;</span> + name + <span class="string">&quot;，今年&quot;</span> + age + <span class="string">&quot;岁，性别&quot;</span> + gender);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 学生子类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Human</span> &#123;</span><br><span class="line">    <span class="comment">// 特有属性</span></span><br><span class="line">    <span class="keyword">private</span> String school;</span><br><span class="line">    <span class="keyword">private</span> String studentId;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 构造方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, <span class="type">int</span> age, String gender, String school, String studentId)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name, age, gender);  <span class="comment">// 调用父类构造器</span></span><br><span class="line">        <span class="built_in">this</span>.school = school;</span><br><span class="line">        <span class="built_in">this</span>.studentId = studentId;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 重写父类方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">introduce</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.introduce();  <span class="comment">// 调用父类方法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;我是&quot;</span> + school + <span class="string">&quot;的学生，学号是&quot;</span> + studentId);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 特有方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">study</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;正在学习&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">takeExam</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;正在参加考试&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HumanStudentExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建人类对象</span></span><br><span class="line">        <span class="type">Human</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Human</span>(<span class="string">&quot;张三&quot;</span>, <span class="number">30</span>, <span class="string">&quot;男&quot;</span>);</span><br><span class="line">        person.introduce();</span><br><span class="line">        person.eat();</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;----------&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 创建学生对象</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;李四&quot;</span>, <span class="number">20</span>, <span class="string">&quot;女&quot;</span>, <span class="string">&quot;清华大学&quot;</span>, <span class="string">&quot;2023001&quot;</span>);</span><br><span class="line">        student.introduce();  <span class="comment">// 调用重写后的方法</span></span><br><span class="line">        student.study();      <span class="comment">// 调用子类特有方法</span></span><br><span class="line">        student.sleep();      <span class="comment">// 调用继承自父类的方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4、封装（Encapsulation）："><a href="#4、封装（Encapsulation）：" class="headerlink" title="4、封装（Encapsulation）："></a>4、封装（Encapsulation）：</h4><p>在面向对象程序设计模式中，封装是隐藏对象的属性和实现细节，仅对外公开接口，然后通过设置属性访问控制级别来控制属性的读写。</p><p>将对象的状态（字段）私有化，通过公共方法访问。</p><blockquote><p>示例：<br>private String name;<br>public String getName() { return name; }</p></blockquote><p><strong>封装的优点；</strong><br>1.良好的封装能够减少耦合。（高内聚，低耦合）<br>2.类内部的结构可以自由修改。<br>3.可以对成员变量进行更精确的控制。<br>4.隐藏信息，实现细节。</p><p><strong>封装的步骤:</strong><br>1.将属性私有化，使用<code>private</code>关键字修饰。<br>as:<code>private String name;</code><br>2.提供公共的<code>（getter和setter）</code>方法，用于获取和设置属性的值。<br>sa:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>你定义一个类，里面的A你不想被人知道，你就把A私有化，然后提供一个公共的方法，让别人可以获取A的值，但是你不能让别人直接修改A的值，你只能通过这个方法来修改A的值。</p></blockquote><p><strong>说人话就是《在外面身份是自己给的》</strong></p><p><strong>一般用private修饰属性，用public修饰方法。</strong></p><blockquote><p>私有的属性只能在本类中访问，其他类中不能访问。<br>公共的方法可以在其他类中访问私有属性。</p></blockquote><p><strong>this关键字</strong><br>this关键字用于区分局部变量和成员变量的同名问题。</p><blockquote><p>如果局部变量和成员变量的名字相同，那么在方法中访问的是局部变量，</p></blockquote><p>就像这样的情况：（若是不使用this会赋值失败）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;<span class="comment">//可以看见形参变量名和成员变量名一样</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;<span class="comment">//可以看见形参变量名和成员变量名一样</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>封装例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个Person类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="comment">// 私有属性</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用一对getXX()/setXX()方法分别获取和设置这些属性的值，并且对属性进行了封装和隐藏。</span></span><br><span class="line">    <span class="comment">//getter方法用于获取属性的值，setter方法用于设置属性的值。</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 公共方法（getter和setter）</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;   <span class="comment">//获取name属性的值</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;<span class="comment">//this关键字表示当前对象，可以省略</span></span><br><span class="line">    &#125;   <span class="comment">//设置name属性的值 </span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;  </span><br><span class="line">    &#125;   <span class="comment">//获取age属性的值</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (age &gt; <span class="number">0</span> &amp;&amp; age &lt; <span class="number">150</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.age = age;<span class="comment">//this关键字的作用是区分局部变量和成员变量的同名问题。</span></span><br><span class="line">            <span class="comment">//如果局部变量和成员变量的名字相同，那么在方法中访问的是局部变量，</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;您是死灵法师还是练气大成！？&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;   <span class="comment">//设置age属性的值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>在main中调用：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建Person对象</span></span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用setter方法设置属性值</span></span><br><span class="line">        person.setName(<span class="string">&quot;Alice&quot;</span>);</span><br><span class="line">        person.setAge(<span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用getter方法获取属性值</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Name: &quot;</span> + person.getName());</span><br><span class="line">        System.out.println(<span class="string">&quot;Age: &quot;</span> + person.getAge()); </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5、多态（Polymorphism）："><a href="#5、多态（Polymorphism）：" class="headerlink" title="5、多态（Polymorphism）："></a>5、多态（Polymorphism）：</h4><p>对象可以表现为多种形态，主要通过方法重载和方法重写实现。</p><blockquote><p>示例：<br>方法重载：public int add(int a, int b) { … } 和 public double add(double a, double b) { … }<br>方法重写：@Override public void makeSound() { System.out.println(“Meow”); }</p></blockquote><h4 id="6、抽象（Abstraction）："><a href="#6、抽象（Abstraction）：" class="headerlink" title="6、抽象（Abstraction）："></a>6、抽象（Abstraction）：</h4><p>使用抽象类和接口来定义必须实现的方法，不提供具体实现。<br>示例：</p><blockquote><p>抽象类：public abstract class Shape { abstract void draw(); }<br>接口：public interface Animal { void eat(); }</p></blockquote><h4 id="7、接口（Interface）："><a href="#7、接口（Interface）：" class="headerlink" title="7、接口（Interface）："></a>7、接口（Interface）：</h4><p>定义类必须实现的方法，支持多重继承。</p><blockquote><p>示例：public interface Drivable { void drive(); }</p></blockquote><h4 id="8、方法（Method）："><a href="#8、方法（Method）：" class="headerlink" title="8、方法（Method）："></a>8、方法（Method）：</h4><p>定义类的行为，包含在类中的函数。</p><blockquote><p>示例：public void displayInfo() { System.out.println(“Info”); }</p></blockquote><h4 id="9、方法重载（Method-Overloading）："><a href="#9、方法重载（Method-Overloading）：" class="headerlink" title="9、方法重载（Method Overloading）："></a>9、方法重载（Method Overloading）：</h4><p>同一个类中可以有多个同名的方法，但参数不同。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public class MathUtils &#123;</span><br><span class="line">    public int add(int a, int b) &#123;</span><br><span class="line">        return a + b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public double add(double a, double b) &#123;</span><br><span class="line">        return a + b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-类-Class-的本质"><a href="#1-类-Class-的本质" class="headerlink" title="1. 类(Class)的本质"></a>1. 类(Class)的本质</h3><p><strong>类</strong>是创建对象的模板，它定义了：</p><ul><li><strong>属性</strong>（字段&#x2F;成员变量）：描述对象的状态</li><li><strong>方法</strong>：定义对象的行为</li><li><strong>构造器</strong>：用于初始化对象</li></ul><p><strong>定义对象的蓝图，包括属性和方法。<br>示例：public class Car { … }</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 汽车类 - 演示类的基本结构</span></span><br><span class="line"><span class="comment"> * 包含字段、方法和构造器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Car</span> &#123;</span><br><span class="line">    <span class="comment">// 字段/属性</span></span><br><span class="line">    <span class="keyword">private</span> String brand;  <span class="comment">// 品牌</span></span><br><span class="line">    <span class="keyword">private</span> String color;  <span class="comment">// 颜色</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> price;  <span class="comment">// 价格</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 构造器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Car</span><span class="params">(String brand, String color, <span class="type">double</span> price)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.brand = brand;</span><br><span class="line">        <span class="built_in">this</span>.color = color;</span><br><span class="line">        <span class="built_in">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">startEngine</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(brand + <span class="string">&quot;汽车引擎启动&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">displayInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.printf(<span class="string">&quot;品牌：%s，颜色：%s，价格：%.2f万\n&quot;</span>, </span><br><span class="line">                         brand, color, price);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Getter和Setter方法</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getBrand</span><span class="params">()</span> &#123; <span class="keyword">return</span> brand; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setColor</span><span class="params">(String color)</span> &#123; <span class="built_in">this</span>.color = color; &#125;</span><br><span class="line">    <span class="comment">// 其他getter/setter...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-对象-Object-的创建与使用"><a href="#2-对象-Object-的创建与使用" class="headerlink" title="2. 对象(Object)的创建与使用"></a>2. 对象(Object)的创建与使用</h3><p><strong>对象</strong>是类的具体实例，创建和使用过程：</p><p>类的实例，具有状态和行为。<br>示例：Car myCar &#x3D; new Car();**</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CarTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建Car类的实例（对象）</span></span><br><span class="line">        <span class="type">Car</span> <span class="variable">myCar</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Car</span>(<span class="string">&quot;比亚迪&quot;</span>, <span class="string">&quot;红色&quot;</span>, <span class="number">15.99</span>);</span><br><span class="line">        <span class="type">Car</span> <span class="variable">yourCar</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Car</span>(<span class="string">&quot;特斯拉&quot;</span>, <span class="string">&quot;白色&quot;</span>, <span class="number">29.99</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 调用对象方法</span></span><br><span class="line">        myCar.startEngine();  <span class="comment">// 输出：比亚迪汽车引擎启动</span></span><br><span class="line">        yourCar.displayInfo(); <span class="comment">// 输出：品牌：特斯拉，颜色：白色，价格：29.99万</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 修改对象状态</span></span><br><span class="line">        myCar.setColor(<span class="string">&quot;蓝色&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;修改后颜色：&quot;</span> + myCar.getColor());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="访问实例变量和方法"><a href="#访问实例变量和方法" class="headerlink" title="访问实例变量和方法"></a>访问实例变量和方法</h3><p>通过已创建的对象来访问成员变量和成员方法，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 实例化对象 */</span></span><br><span class="line"><span class="type">Object</span> <span class="variable">referenceVariable</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Constructor</span>();</span><br><span class="line"><span class="comment">/* 访问类中的变量 */</span></span><br><span class="line">referenceVariable.variableName;</span><br><span class="line"><span class="comment">/* 访问类中的方法 */</span></span><br><span class="line">referenceVariable.methodName();</span><br></pre></td></tr></table></figure><p>使用 Object 类型声明变量只能在编译时访问 Object 类中的方法和属性，但在运行时，你可以通过强制类型转换将其转换为特定类型，以便访问特定类型的方法和属性。</p><h3 id="3-内存模型解析"><a href="#3-内存模型解析" class="headerlink" title="3. 内存模型解析"></a>3. 内存模型解析</h3><p>这是类和对象的内存中的状态解析</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">栈内存(Stack)：</span><br><span class="line">- 存储基本类型变量和对象引用</span><br><span class="line">- myCar (引用地址0x100)</span><br><span class="line">- yourCar (引用地址0x200)</span><br><span class="line"></span><br><span class="line">堆内存(Heap)：</span><br><span class="line">0x100: Car对象 &#123;</span><br><span class="line">    brand = &quot;比亚迪&quot;</span><br><span class="line">    color = &quot;红色&quot; → 修改为&quot;蓝色&quot;</span><br><span class="line">    price = 15.99</span><br><span class="line">&#125;</span><br><span class="line">0x200: Car对象 &#123;</span><br><span class="line">    brand = &quot;特斯拉&quot;</span><br><span class="line">    color = &quot;白色&quot;</span><br><span class="line">    price = 29.99</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二、构造方法深度探讨"><a href="#二、构造方法深度探讨" class="headerlink" title="二、构造方法深度探讨"></a>二、构造方法深度探讨</h2><p>构造方法用于在创建对象时初始化对象，保证对象的数据完整性。</p><h3 id="1-构造方法特点"><a href="#1-构造方法特点" class="headerlink" title="1. 构造方法特点"></a>1. 构造方法特点</h3><p>每个类都有构造方法。如果没有显式地为类定义构造方法，Java 编译器将会为该类提供一个默认构造方法（自动提供）。</p><p>在创建一个对象的时候，至少要调用一个构造方法。构造方法的名称<strong>必须与类同名</strong>，一个类可以有多个构造方法</p><ul><li>与类同名</li><li>无返回类型（连void都没有）</li><li>可以重载（多个构造方法）构造重载</li><li>默认提供无参构造（除非显式定义其他构造方法）</li><li>使用构造方法创建类的对象的时候，构造方法只运行过一次</li></ul><blockquote><p>其实当使用new来实例化对象的时候，类没有自定义构造函数的时候，会自动默认提供一个无参构造函数，但是当类自定义了构造函数的时候，就会使用自定义的构造函数</p></blockquote><h3 id="2-构造方法示例"><a href="#2-构造方法示例" class="headerlink" title="2. 构造方法示例"></a>2. 构造方法示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String major;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 默认构造器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(<span class="string">&quot;未知&quot;</span>, <span class="number">18</span>, <span class="string">&quot;未定&quot;</span>); <span class="comment">// 调用其他构造器</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 带部分参数的构造器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(name, age, <span class="string">&quot;计算机科学&quot;</span>); <span class="comment">// 默认专业</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 全参数构造器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, <span class="type">int</span> age, String major)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(age &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;年龄不能为负数&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.major = major;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 拷贝构造器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(Student other)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(other.name, other.age, other.major);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>构造方法的重载</strong><br>如果定义了带参数的构造方法，还想使用无参数构造方法创建对象，就需要在类中显式定义一个无参数构造方法。(如果你还想new,就得手动写一个无参构造函数)</p></blockquote><p>典型案例对照：(标准格式)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.classTestingPackage.Class;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String color;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> weight;</span><br><span class="line">    <span class="comment">//无参构造器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Dog</span><span class="params">()</span> &#123;<span class="comment">//如果定义了带参数的构造方法，还想使用无参数构造方法创建对象，就需要在类中显式定义一个无参数构造方法。(如果你还想new,就得手动写一个无参构造函数)</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setColor</span><span class="params">(String color)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setWeight</span><span class="params">(<span class="type">double</span> weight)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.weight = weight;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getColor</span><span class="params">(String color)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getWeight</span><span class="params">(<span class="type">double</span> weight)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.weight;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//带参构造器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Dog</span><span class="params">(String name, String color, <span class="type">double</span> weight)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.color = color;</span><br><span class="line">        <span class="built_in">this</span>.weight = weight;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;狗狗的盒：姓名：&quot;</span>+ name +<span class="string">&quot;,颜色：&quot;</span> + color +<span class="string">&quot;,体重:&quot;</span> + weight);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>main函数部分调用示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">            <span class="comment">//使用带参构造器</span></span><br><span class="line">            <span class="type">Dog</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&quot;花花公子&quot;</span>, <span class="string">&quot;黄色&quot;</span>, <span class="number">32.5</span>);</span><br><span class="line">            a.show();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//使用无参构造器</span></span><br><span class="line">            <span class="type">Dog</span> <span class="variable">d</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">            d.setName(<span class="string">&quot;草草公子&quot;</span>);</span><br><span class="line">            d.setColor(<span class="string">&quot;绿&quot;</span>);</span><br><span class="line">            d.setWeight(<span class="number">100</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="3-构造方法使用场景"><a href="#3-构造方法使用场景" class="headerlink" title="3. 构造方法使用场景"></a>3. 构造方法使用场景</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Student</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();  <span class="comment">// 使用默认构造器</span></span><br><span class="line"><span class="type">Student</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;张三&quot;</span>, <span class="number">20</span>);</span><br><span class="line"><span class="type">Student</span> <span class="variable">s3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;李四&quot;</span>, <span class="number">22</span>, <span class="string">&quot;人工智能&quot;</span>);</span><br><span class="line"><span class="type">Student</span> <span class="variable">s4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(s3);  <span class="comment">// 拷贝创建</span></span><br></pre></td></tr></table></figure><h2 id="三、封装与访问控制实践"><a href="#三、封装与访问控制实践" class="headerlink" title="三、封装与访问控制实践"></a>三、封装与访问控制实践</h2><h3 id="1-封装原则"><a href="#1-封装原则" class="headerlink" title="1. 封装原则"></a>1. 封装原则</h3><ul><li><strong>将字段设为private</strong></li><li><strong>通过public方法访问</strong></li><li>在方法中添加业务逻辑</li></ul><h3 id="2-完整封装示例"><a href="#2-完整封装示例" class="headerlink" title="2. 完整封装示例"></a>2. 完整封装示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BankAccount</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String accountNumber;</span><br><span class="line">    <span class="keyword">private</span> String accountHolder;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> balance;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">double</span> <span class="variable">MAX_DEPOSIT</span> <span class="operator">=</span> <span class="number">100000</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BankAccount</span><span class="params">(String accountNumber, String accountHolder)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.accountNumber = accountNumber;</span><br><span class="line">        <span class="built_in">this</span>.accountHolder = accountHolder;</span><br><span class="line">        <span class="built_in">this</span>.balance = <span class="number">0.0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deposit</span><span class="params">(<span class="type">double</span> amount)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(amount &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;存款金额必须为正数&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(amount &gt; MAX_DEPOSIT) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;单笔存款不能超过&quot;</span> + MAX_DEPOSIT);</span><br><span class="line">        &#125;</span><br><span class="line">        balance += amount;</span><br><span class="line">        System.out.printf(<span class="string">&quot;成功存款%.2f，当前余额：%.2f\n&quot;</span>, amount, balance);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">withdraw</span><span class="params">(<span class="type">double</span> amount)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(amount &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;取款金额必须为正数&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(amount &gt; balance) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;余额不足&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        balance -= amount;</span><br><span class="line">        System.out.printf(<span class="string">&quot;成功取款%.2f，当前余额：%.2f\n&quot;</span>, amount, balance);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 只提供getter方法，不提供setter，防止随意修改</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getBalance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> balance;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getAccountInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> String.format(<span class="string">&quot;账号：%s，户主：%s&quot;</span>, accountNumber, accountHolder);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四、变量类型全解析"><a href="#四、变量类型全解析" class="headerlink" title="四、变量类型全解析"></a>四、变量类型全解析</h2><h3 id="1-三种变量对比"><a href="#1-三种变量对比" class="headerlink" title="1. 三种变量对比"></a>1. 三种变量对比</h3><table><thead><tr><th>变量类型</th><th>声明位置</th><th>生命周期</th><th>初始化要求</th><th>访问方式</th></tr></thead><tbody><tr><td>局部变量</td><td>方法&#x2F;块内</td><td>方法&#x2F;块执行期间</td><td>必须显式初始化</td><td>直接访问</td></tr><tr><td>实例变量</td><td>类内方法外</td><td>对象存在期间</td><td>自动初始化</td><td>通过对象访问</td></tr><tr><td>类变量</td><td>类内+static</td><td>程序运行期间</td><td>自动初始化</td><td>类名或对象访问</td></tr></tbody></table><h3 id="2-变量使用示例"><a href="#2-变量使用示例" class="headerlink" title="2. 变量使用示例"></a>2. 变量使用示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VariableDemo</span> &#123;</span><br><span class="line">    <span class="comment">// 实例变量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> instanceVar;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 类变量（静态变量）</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> classVar;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 局部变量</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">localVar</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;局部变量：&quot;</span> + localVar);</span><br><span class="line">        System.out.println(<span class="string">&quot;实例变量：&quot;</span> + <span class="built_in">this</span>.instanceVar);</span><br><span class="line">        System.out.println(<span class="string">&quot;类变量：&quot;</span> + VariableDemo.classVar);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">VariableDemo</span> <span class="variable">demo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">VariableDemo</span>();</span><br><span class="line">        demo.method();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 不同对象共享类变量</span></span><br><span class="line">        VariableDemo.classVar = <span class="number">100</span>;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">VariableDemo</span>().method();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="五、方法设计与重载"><a href="#五、方法设计与重载" class="headerlink" title="五、方法设计与重载"></a>五、方法设计与重载</h2><h3 id="1-方法组成要素"><a href="#1-方法组成要素" class="headerlink" title="1. 方法组成要素"></a>1. 方法组成要素</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[访问修饰符] [<span class="keyword">static</span>/<span class="keyword">final</span>/<span class="keyword">abstract</span>] 返回类型 方法名(参数列表) [<span class="keyword">throws</span> 异常列表] &#123;</span><br><span class="line">    <span class="comment">// 方法体</span></span><br><span class="line">    [<span class="keyword">return</span> 返回值;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-方法重载最佳实践"><a href="#2-方法重载最佳实践" class="headerlink" title="2. 方法重载最佳实践"></a>2. 方法重载最佳实践</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Calculator</span> &#123;</span><br><span class="line">    <span class="comment">// 整数加法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;调用int版本&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 小数加法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">add</span><span class="params">(<span class="type">double</span> a, <span class="type">double</span> b)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;调用double版本&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 可变参数加法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span>... numbers)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;调用可变参数版本&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> num : numbers) &#123;</span><br><span class="line">            sum += num;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 方法重载的调用</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Calculator</span> <span class="variable">calc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Calculator</span>();</span><br><span class="line">        System.out.println(calc.add(<span class="number">1</span>, <span class="number">2</span>));       <span class="comment">// 调用int版本</span></span><br><span class="line">        System.out.println(calc.add(<span class="number">1.5</span>, <span class="number">2.5</span>));   <span class="comment">// 调用double版本</span></span><br><span class="line">        System.out.println(calc.add(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>));    <span class="comment">// 调用可变参数版本</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="六、综合案例：员工管理系统"><a href="#六、综合案例：员工管理系统" class="headerlink" title="六、综合案例：员工管理系统"></a>六、综合案例：员工管理系统</h2><h3 id="Employee-java"><a href="#Employee-java" class="headerlink" title="Employee.java"></a>Employee.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.time.LocalDate;</span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 员工类</span></span><br><span class="line"><span class="comment"> * 演示完整的类设计：封装、构造器、方法、重写等</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Employee</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String id;          <span class="comment">// 员工ID（不可变）</span></span><br><span class="line">    <span class="keyword">private</span> String name;              <span class="comment">// 姓名</span></span><br><span class="line">    <span class="keyword">private</span> Department department;    <span class="comment">// 部门（枚举）</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> salary;            <span class="comment">// 薪资</span></span><br><span class="line">    <span class="keyword">private</span> LocalDate hireDate;       <span class="comment">// 入职日期</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 构造器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Employee</span><span class="params">(String id, String name, Department department, </span></span><br><span class="line"><span class="params">                   <span class="type">double</span> salary, LocalDate hireDate)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = Objects.requireNonNull(id, <span class="string">&quot;ID不能为空&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.name = Objects.requireNonNull(name, <span class="string">&quot;姓名不能为空&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.department = Objects.requireNonNull(department);</span><br><span class="line">        setSalary(salary);  <span class="comment">// 通过方法设置以便验证</span></span><br><span class="line">        <span class="built_in">this</span>.hireDate = Objects.requireNonNull(hireDate);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 业务方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">raiseSalary</span><span class="params">(<span class="type">double</span> percent)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(percent &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;加薪比例必须为正数&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.salary *= (<span class="number">1</span> + percent / <span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">yearsOfService</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> LocalDate.now().getYear() - hireDate.getYear();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 访问器方法</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getId</span><span class="params">()</span> &#123; <span class="keyword">return</span> id; &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123; <span class="keyword">return</span> name; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123; <span class="built_in">this</span>.name = name; &#125;</span><br><span class="line">    <span class="comment">// 其他getter/setter...</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 重写Object方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> String.format(<span class="string">&quot;Employee[id=%s, name=%s, dept=%s, salary=%.2f, hireDate=%s]&quot;</span>, </span><br><span class="line">               id, name, department, salary, hireDate);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span> == o) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="literal">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">Employee</span> <span class="variable">employee</span> <span class="operator">=</span> (Employee) o;</span><br><span class="line">        <span class="keyword">return</span> id.equals(employee.id);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.hash(id);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 部门枚举</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">Department</span> &#123;</span><br><span class="line">        HR, FINANCE, ENGINEERING, MARKETING, SALES</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="EmployeeManagement-java"><a href="#EmployeeManagement-java" class="headerlink" title="EmployeeManagement.java"></a>EmployeeManagement.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.time.LocalDate;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 员工管理系统</span></span><br><span class="line"><span class="comment"> * 演示对象集合操作</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmployeeManagement</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;Employee&gt; employees = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 添加员工</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addEmployee</span><span class="params">(Employee employee)</span> &#123;</span><br><span class="line">        employees.add(Objects.requireNonNull(employee));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 根据ID查找员工</span></span><br><span class="line">    <span class="keyword">public</span> Employee <span class="title function_">findEmployeeById</span><span class="params">(String id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> employees.stream()</span><br><span class="line">                .filter(e -&gt; e.getId().equals(id))</span><br><span class="line">                .findFirst()</span><br><span class="line">                .orElse(<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 给部门员工加薪</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">raiseSalaryForDepartment</span><span class="params">(Employee.Department dept, <span class="type">double</span> percent)</span> &#123;</span><br><span class="line">        employees.stream()</span><br><span class="line">                .filter(e -&gt; e.getDepartment() == dept)</span><br><span class="line">                .forEach(e -&gt; e.raiseSalary(percent));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 显示所有员工</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">displayAllEmployees</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;\n===== 员工列表 =====&quot;</span>);</span><br><span class="line">        employees.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">EmployeeManagement</span> <span class="variable">system</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EmployeeManagement</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 添加员工</span></span><br><span class="line">        system.addEmployee(<span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&quot;001&quot;</span>, <span class="string">&quot;张三&quot;</span>, Employee.Department.ENGINEERING, </span><br><span class="line">                <span class="number">15000</span>, LocalDate.of(<span class="number">2020</span>, <span class="number">5</span>, <span class="number">10</span>)));</span><br><span class="line">        system.addEmployee(<span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&quot;002&quot;</span>, <span class="string">&quot;李四&quot;</span>, Employee.Department.HR, </span><br><span class="line">                <span class="number">12000</span>, LocalDate.of(<span class="number">2019</span>, <span class="number">3</span>, <span class="number">15</span>)));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 操作员工数据</span></span><br><span class="line">        system.raiseSalaryForDepartment(Employee.Department.ENGINEERING, <span class="number">10</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 查找并修改员工</span></span><br><span class="line">        <span class="type">Employee</span> <span class="variable">emp</span> <span class="operator">=</span> system.findEmployeeById(<span class="string">&quot;002&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(emp != <span class="literal">null</span>) &#123;</span><br><span class="line">            emp.setName(<span class="string">&quot;李四（已更名）&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 显示结果</span></span><br><span class="line">        system.displayAllEmployees();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="七、Java文件组织规范"><a href="#七、Java文件组织规范" class="headerlink" title="七、Java文件组织规范"></a>七、Java文件组织规范</h2><h3 id="1-源文件规则"><a href="#1-源文件规则" class="headerlink" title="1. 源文件规则"></a>1. 源文件规则</h3><ol><li>一个<code>.java</code>文件只能有一个<code>public</code>类</li><li>文件名必须与<code>public</code>类名完全一致（包括大小写）</li><li>包声明(<code>package</code>)必须位于文件首行</li><li>导入语句(<code>import</code>)位于包声明之后，类定义之前</li></ol><h3 id="2-典型文件结构"><a href="#2-典型文件结构" class="headerlink" title="2. 典型文件结构"></a>2. 典型文件结构</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// Employee.java</span><br><span class="line">package com.company.model;</span><br><span class="line"></span><br><span class="line">import java.time.LocalDate;</span><br><span class="line">import java.util.Objects;</span><br><span class="line"></span><br><span class="line">public class Employee &#123;</span><br><span class="line">    // 类实现...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class EmployeeHelper &#123;  // 非public辅助类</span><br><span class="line">    // 实现...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="八、包-package-与导入-import-机制"><a href="#八、包-package-与导入-import-机制" class="headerlink" title="八、包(package)与导入(import)机制"></a>八、包(package)与导入(import)机制</h2><p>为了更好的组织和管理Java代码，Java引入了包的概念。包是一种命名空间，用于组织类和接口，其实就行个文件夹。</p><h3 id="1-包的作用"><a href="#1-包的作用" class="headerlink" title="1. 包的作用"></a>1. 包的作用</h3><ul><li>把功能相似的或者相关的类和接口组织在同一个包中，方便类的查找和使用。</li><li>防止命名冲突，当两个类的名称相同时，可以使用完整的包名来区分。</li><li>包限定了访问权限，拥有访问权限的类才能访问该包中的类和接口。</li></ul><h3 id="2-包命名规范"><a href="#2-包命名规范" class="headerlink" title="2. 包命名规范"></a>2. 包命名规范</h3><ul><li>公司域名倒写：<code>com.company.project</code></li><li>要求全部小写</li><li>不可以使用Java保留字</li></ul><h3 id="3-导入使用技巧"><a href="#3-导入使用技巧" class="headerlink" title="3. 导入使用技巧"></a>3. 导入使用技巧</h3><p>使用<code>import</code>关键字导入其他包中的类、接口或静态成员，简化代码编写。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.List;       <span class="comment">// 导入单个类</span></span><br><span class="line"><span class="keyword">import</span> java.util.*;          <span class="comment">// 导入整个包（不推荐）</span></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.Math.PI;  <span class="comment">// 静态导入</span></span><br><span class="line"><span class="keyword">import</span> com.company.model.Employee; <span class="comment">// 导入自定义类</span></span><br></pre></td></tr></table></figure><h2 id="九、开发建议与常见问题"><a href="#九、开发建议与常见问题" class="headerlink" title="九、开发建议与常见问题"></a>九、开发建议与常见问题</h2><h3 id="1-类设计原则"><a href="#1-类设计原则" class="headerlink" title="1. 类设计原则"></a>1. 类设计原则</h3><ol><li>单一职责原则：一个类只做一件事</li><li>高内聚低耦合：内部紧密相关，外部依赖最少</li><li>优先使用组合而非继承</li><li>为所有公开API添加文档注释</li></ol><h3 id="2-常见错误"><a href="#2-常见错误" class="headerlink" title="2. 常见错误"></a>2. 常见错误</h3><ol><li>忘记实例化对象：<code>MyClass obj; obj.method();</code> → NullPointerException</li><li>混淆实例变量和局部变量：使用<code>this</code>明确指代</li><li>过度使用静态成员：破坏面向对象特性</li><li>忽视封装：直接暴露字段</li></ol><h1 id="Java基本数据类型全面解析"><a href="#Java基本数据类型全面解析" class="headerlink" title="Java基本数据类型全面解析"></a>Java基本数据类型全面解析</h1><p>Java作为一门强类型语言，其数据类型系统是编程基础中的核心。下面我将从实际应用角度，深入讲解Java的基本数据类型。</p><h2 id="一、Java数据类型体系"><a href="#一、Java数据类型体系" class="headerlink" title="一、Java数据类型体系"></a>一、Java数据类型体系</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Java数据类型</span><br><span class="line">├── 基本数据类型（8种）</span><br><span class="line">│   ├── 数值型</span><br><span class="line">│   │   ├── 整数类型（byte, short, int, long）</span><br><span class="line">│   │   └── 浮点类型（float, double）</span><br><span class="line">│   ├── 字符型（char）</span><br><span class="line">│   └── 布尔型（boolean）</span><br><span class="line">└── 引用数据类型</span><br><span class="line">    ├── 类（Class）</span><br><span class="line">    ├── 接口（Interface）</span><br><span class="line">    └── 数组</span><br></pre></td></tr></table></figure><h2 id="二、八大基本数据类型详解"><a href="#二、八大基本数据类型详解" class="headerlink" title="二、八大基本数据类型详解"></a>二、八大基本数据类型详解</h2><h3 id="1-整数类型"><a href="#1-整数类型" class="headerlink" title="1. 整数类型"></a>1. 整数类型</h3><table><thead><tr><th>类型</th><th>位数</th><th>取值范围</th><th>默认值</th><th>包装类</th><th>应用场景</th></tr></thead><tbody><tr><td>byte</td><td>8</td><td>-128 ~ 127</td><td>0</td><td>Byte</td><td>二进制数据、节省空间</td></tr><tr><td>short</td><td>16</td><td>-32,768 ~ 32,767</td><td>0</td><td>Short</td><td>较少使用，兼容性考虑</td></tr><tr><td>int</td><td>32</td><td>-2^31 ~ 2^31-1 (约±21亿)</td><td>0</td><td>Integer</td><td>最常用的整数类型</td></tr><tr><td>long</td><td>64</td><td>-2^63 ~ 2^63-1</td><td>0L</td><td>Long</td><td>大整数、时间戳</td></tr></tbody></table><p><strong>代码示例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">byte</span> <span class="variable">fileData</span> <span class="operator">=</span> -<span class="number">128</span>;          <span class="comment">// 最小byte值</span></span><br><span class="line"><span class="type">short</span> <span class="variable">pixelValue</span> <span class="operator">=</span> <span class="number">32767</span>;      <span class="comment">// 最大short值</span></span><br><span class="line"><span class="type">int</span> <span class="variable">population</span> <span class="operator">=</span> <span class="number">2_147_483_647</span>; <span class="comment">// 使用下划线增强可读性</span></span><br><span class="line"><span class="type">long</span> <span class="variable">globalPopulation</span> <span class="operator">=</span> <span class="number">7_900_000_000L</span>; <span class="comment">// 注意L后缀</span></span><br></pre></td></tr></table></figure><h3 id="2-浮点类型"><a href="#2-浮点类型" class="headerlink" title="2. 浮点类型"></a>2. 浮点类型</h3><table><thead><tr><th>类型</th><th>位数</th><th>取值范围</th><th>默认值</th><th>包装类</th><th>精度</th></tr></thead><tbody><tr><td>float</td><td>32</td><td>±1.4E-45 ~ 3.4028235E38</td><td>0.0f</td><td>Float</td><td>6-7位有效数字</td></tr><tr><td>double</td><td>64</td><td>±4.9E-324 ~ 1.7976931348623157E308</td><td>0.0d</td><td>Double</td><td>15位有效数字</td></tr></tbody></table><p><strong>重要特性：</strong></p><ul><li>浮点数遵循IEEE 754标准</li><li>存在舍入误差，不适合精确计算（如金融）</li><li>默认字面量是double类型</li></ul><p><strong>代码示例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">float</span> <span class="variable">piApprox</span> <span class="operator">=</span> <span class="number">3.14159f</span>;    <span class="comment">// 必须加f后缀</span></span><br><span class="line"><span class="type">double</span> <span class="variable">precisePi</span> <span class="operator">=</span> <span class="number">3.141592653589793</span>;</span><br><span class="line"><span class="type">double</span> <span class="variable">scientific</span> <span class="operator">=</span> <span class="number">1.23e10</span>;  <span class="comment">// 科学计数法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 浮点精度问题演示</span></span><br><span class="line">System.out.println(<span class="number">0.1</span> + <span class="number">0.2</span>); <span class="comment">// 输出0.30000000000000004</span></span><br></pre></td></tr></table></figure><h3 id="3-字符类型（char）"><a href="#3-字符类型（char）" class="headerlink" title="3. 字符类型（char）"></a>3. 字符类型（char）</h3><ul><li>16位Unicode字符</li><li>范围：\u0000 ~ \uffff（0~65535）</li><li>默认值：’\u0000’</li><li>包装类：Character</li></ul><p><strong>特殊表示方式：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> <span class="variable">letterA</span> <span class="operator">=</span> <span class="string">&#x27;A&#x27;</span>;          <span class="comment">// 直接字符</span></span><br><span class="line"><span class="type">char</span> <span class="variable">unicodeChar</span> <span class="operator">=</span> <span class="string">&#x27;\u0041&#x27;</span>; <span class="comment">// Unicode表示（也是&#x27;A&#x27;）</span></span><br><span class="line"><span class="type">char</span> <span class="variable">tab</span> <span class="operator">=</span> <span class="string">&#x27;\t&#x27;</span>;             <span class="comment">// 转义字符</span></span><br></pre></td></tr></table></figure><h3 id="4-布尔类型（boolean）"><a href="#4-布尔类型（boolean）" class="headerlink" title="4. 布尔类型（boolean）"></a>4. 布尔类型（boolean）</h3><ul><li>只有true和false两个值</li><li>默认值：false</li><li>包装类：Boolean</li><li>大小：JVM规范未明确定义（通常按int处理）</li></ul><p><strong>注意事项：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="variable">isJavaFun</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"><span class="comment">// if(isJavaFun == true)  // 不推荐写法</span></span><br><span class="line"><span class="keyword">if</span>(isJavaFun)            <span class="comment">// 推荐写法</span></span><br></pre></td></tr></table></figure><h2 id="三、类型转换机制"><a href="#三、类型转换机制" class="headerlink" title="三、类型转换机制"></a>三、类型转换机制</h2><h3 id="1-自动类型转换（隐式转换）"><a href="#1-自动类型转换（隐式转换）" class="headerlink" title="1. 自动类型转换（隐式转换）"></a>1. 自动类型转换（隐式转换）</h3><p><strong>转换方向：低精度 → 高精度</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">byte → short → int → long → float → double</span><br><span class="line">          ↑</span><br><span class="line">         char</span><br></pre></td></tr></table></figure><p><strong>转换规则：</strong></p><ul><li><strong>两种类型兼容</strong></li><li><strong>目标类型范围大于源类型</strong></li></ul><p><strong>示例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"><span class="type">long</span> <span class="variable">l</span> <span class="operator">=</span> i;      <span class="comment">// 自动转换</span></span><br><span class="line"><span class="type">float</span> <span class="variable">f</span> <span class="operator">=</span> l;     <span class="comment">// 可能丢失精度（但自动转换）</span></span><br></pre></td></tr></table></figure><h3 id="2-强制类型转换（显式转换）"><a href="#2-强制类型转换（显式转换）" class="headerlink" title="2. 强制类型转换（显式转换）"></a>2. 强制类型转换（显式转换）</h3><p>语法：(目标类型)值</p><p><strong>风险点：</strong></p><ul><li>数据溢出</li><li>精度丢失</li><li>非兼容类型转换</li></ul><p><strong>示例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">double</span> <span class="variable">d</span> <span class="operator">=</span> <span class="number">100.04</span>;</span><br><span class="line"><span class="type">long</span> <span class="variable">l</span> <span class="operator">=</span> (<span class="type">long</span>)d;  <span class="comment">// 截断小数部分，l=100</span></span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> (<span class="type">int</span>)l;    <span class="comment">// 安全转换</span></span><br><span class="line"></span><br><span class="line"><span class="type">byte</span> <span class="variable">b</span> <span class="operator">=</span> (<span class="type">byte</span>)<span class="number">128</span>; <span class="comment">// 溢出！b=-128</span></span><br></pre></td></tr></table></figure><h3 id="3-特殊转换场景"><a href="#3-特殊转换场景" class="headerlink" title="3. 特殊转换场景"></a>3. 特殊转换场景</h3><p><strong>char与整型的转换：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> c;        <span class="comment">// 自动转换，i=65</span></span><br><span class="line"><span class="type">char</span> <span class="variable">c2</span> <span class="operator">=</span> (<span class="type">char</span>)(i + <span class="number">1</span>); <span class="comment">// c2=&#x27;B&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>布尔类型限制：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// boolean cannot = 1;       // 错误！</span></span><br><span class="line"><span class="comment">// int number = true;        // 错误！</span></span><br></pre></td></tr></table></figure><h2 id="四、类型默认值与内存分配"><a href="#四、类型默认值与内存分配" class="headerlink" title="四、类型默认值与内存分配"></a>四、类型默认值与内存分配</h2><h3 id="1-默认值规则"><a href="#1-默认值规则" class="headerlink" title="1. 默认值规则"></a>1. 默认值规则</h3><table><thead><tr><th>数据类型</th><th>默认值</th></tr></thead><tbody><tr><td>byte&#x2F;short&#x2F;int&#x2F;long</td><td>0</td></tr><tr><td>float&#x2F;double</td><td>0.0</td></tr><tr><td>char</td><td>‘\u0000’</td></tr><tr><td>boolean</td><td>false</td></tr><tr><td>引用类型</td><td>null</td></tr></tbody></table><p><strong>示例验证：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DefaultValues</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> intValue;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">boolean</span> boolValue;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(intValue);  <span class="comment">// 输出0</span></span><br><span class="line">        System.out.println(boolValue); <span class="comment">// 输出false</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 局部变量必须初始化</span></span><br><span class="line">        <span class="comment">// int localInt;  // 编译错误</span></span><br><span class="line">        <span class="comment">// System.out.println(localInt);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-内存占用分析"><a href="#2-内存占用分析" class="headerlink" title="2. 内存占用分析"></a>2. 内存占用分析</h3><table><thead><tr><th>类型</th><th>大小</th><th>备注</th></tr></thead><tbody><tr><td>boolean</td><td>~1字节</td><td>JVM依赖，通常按int处理</td></tr><tr><td>byte</td><td>1字节</td><td></td></tr><tr><td>short</td><td>2字节</td><td></td></tr><tr><td>char</td><td>2字节</td><td>UTF-16编码</td></tr><tr><td>int</td><td>4字节</td><td></td></tr><tr><td>float</td><td>4字节</td><td></td></tr><tr><td>long</td><td>8字节</td><td></td></tr><tr><td>double</td><td>8字节</td><td></td></tr></tbody></table><p><strong>数组内存计算示例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">100</span>];  <span class="comment">// 占用约100*4=400字节</span></span><br></pre></td></tr></table></figure><h2 id="五、包装类与自动装箱拆箱"><a href="#五、包装类与自动装箱拆箱" class="headerlink" title="五、包装类与自动装箱拆箱"></a>五、包装类与自动装箱拆箱</h2><h3 id="1-基本类型与包装类对应"><a href="#1-基本类型与包装类对应" class="headerlink" title="1. 基本类型与包装类对应"></a>1. 基本类型与包装类对应</h3><table><thead><tr><th>基本类型</th><th>包装类</th></tr></thead><tbody><tr><td>byte</td><td>Byte</td></tr><tr><td>short</td><td>Short</td></tr><tr><td>int</td><td>Integer</td></tr><tr><td>long</td><td>Long</td></tr><tr><td>float</td><td>Float</td></tr><tr><td>double</td><td>Double</td></tr><tr><td>char</td><td>Character</td></tr><tr><td>boolean</td><td>Boolean</td></tr></tbody></table><h3 id="2-自动装箱-拆箱机制"><a href="#2-自动装箱-拆箱机制" class="headerlink" title="2. 自动装箱&#x2F;拆箱机制"></a>2. 自动装箱&#x2F;拆箱机制</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自动装箱</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">objInt</span> <span class="operator">=</span> <span class="number">100</span>;  <span class="comment">// 编译器转换为 Integer.valueOf(100)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 自动拆箱</span></span><br><span class="line"><span class="type">int</span> <span class="variable">primInt</span> <span class="operator">=</span> objInt;  <span class="comment">// 编译器转换为 objInt.intValue()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 集合中的使用</span></span><br><span class="line">List&lt;Integer&gt; numbers = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">numbers.add(<span class="number">1</span>);        <span class="comment">// 自动装箱</span></span><br><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> numbers.get(<span class="number">0</span>); <span class="comment">// 自动拆箱</span></span><br></pre></td></tr></table></figure><p><strong>注意事项：</strong></p><ul><li>包装类对象可能为null，拆箱时可能引发NullPointerException</li><li>整数缓存：-128~127的Integer对象会被缓存</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Integer</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">127</span>;</span><br><span class="line"><span class="type">Integer</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">127</span>;</span><br><span class="line">System.out.println(a == b); <span class="comment">// true（缓存对象）</span></span><br><span class="line"></span><br><span class="line"><span class="type">Integer</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">128</span>;</span><br><span class="line"><span class="type">Integer</span> <span class="variable">d</span> <span class="operator">=</span> <span class="number">128</span>;</span><br><span class="line">System.out.println(c == d); <span class="comment">// false（新建对象）</span></span><br></pre></td></tr></table></figure><h2 id="六、类型相关工具方法"><a href="#六、类型相关工具方法" class="headerlink" title="六、类型相关工具方法"></a>六、类型相关工具方法</h2><h3 id="1-类型大小与极值"><a href="#1-类型大小与极值" class="headerlink" title="1. 类型大小与极值"></a>1. 类型大小与极值</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;int范围：&quot;</span> + Integer.MIN_VALUE + <span class="string">&quot;~&quot;</span> + Integer.MAX_VALUE);</span><br><span class="line">System.out.println(<span class="string">&quot;float精度位数：&quot;</span> + Float.SIZE);</span><br></pre></td></tr></table></figure><h3 id="2-类型转换工具"><a href="#2-类型转换工具" class="headerlink" title="2. 类型转换工具"></a>2. 类型转换工具</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 字符串转数字</span></span><br><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> Integer.parseInt(<span class="string">&quot;123&quot;</span>);</span><br><span class="line"><span class="type">double</span> <span class="variable">d</span> <span class="operator">=</span> Double.parseDouble(<span class="string">&quot;3.14&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数字转字符串</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> Integer.toString(<span class="number">123</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> Double.toString(<span class="number">3.14</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 进制转换</span></span><br><span class="line"><span class="type">String</span> <span class="variable">binary</span> <span class="operator">=</span> Integer.toBinaryString(<span class="number">10</span>); <span class="comment">// &quot;1010&quot;</span></span><br><span class="line"><span class="type">String</span> <span class="variable">hex</span> <span class="operator">=</span> Integer.toHexString(<span class="number">255</span>);     <span class="comment">// &quot;ff&quot;</span></span><br></pre></td></tr></table></figure><h3 id="3-数学运算工具"><a href="#3-数学运算工具" class="headerlink" title="3. 数学运算工具"></a>3. 数学运算工具</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 安全运算</span></span><br><span class="line">Math.addExact(a, b);  <span class="comment">// 溢出时抛出ArithmeticException</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 比较</span></span><br><span class="line"><span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> Integer.max(a, b);</span><br><span class="line"><span class="type">float</span> <span class="variable">min</span> <span class="operator">=</span> Float.min(x, y);</span><br></pre></td></tr></table></figure><h2 id="七、最佳实践与常见问题"><a href="#七、最佳实践与常见问题" class="headerlink" title="七、最佳实践与常见问题"></a>七、最佳实践与常见问题</h2><h3 id="1-类型选择建议"><a href="#1-类型选择建议" class="headerlink" title="1. 类型选择建议"></a>1. 类型选择建议</h3><ul><li><strong>整数</strong>：优先使用int，大数用long</li><li><strong>小数</strong>：优先使用double，除非内存敏感</li><li><strong>布尔</strong>：避免用其他类型模拟boolean</li><li><strong>字符</strong>：明确需要单个字符时才使用char</li></ul><h3 id="2-常见陷阱"><a href="#2-常见陷阱" class="headerlink" title="2. 常见陷阱"></a>2. 常见陷阱</h3><p><strong>浮点数比较：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 错误方式</span></span><br><span class="line"><span class="keyword">if</span> (d1 == d2) &#123;...&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确方式</span></span><br><span class="line"><span class="keyword">if</span> (Math.abs(d1 - d2) &lt; <span class="number">1e-6</span>) &#123;...&#125;</span><br></pre></td></tr></table></figure><p><strong>大数溢出：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 错误：发生溢出</span></span><br><span class="line"><span class="type">int</span> <span class="variable">million</span> <span class="operator">=</span> <span class="number">1000000</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> million * million;  <span class="comment">// -727379968</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确：使用long</span></span><br><span class="line"><span class="type">long</span> <span class="variable">result</span> <span class="operator">=</span> (<span class="type">long</span>)million * million;</span><br></pre></td></tr></table></figure><p><strong>自动装箱性能：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 低效（创建多余对象）</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10000</span>; i++) &#123;</span><br><span class="line">    sum += i;  <span class="comment">// 反复装箱拆箱</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 高效</span></span><br><span class="line"><span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><h3 id="3-特殊值处理"><a href="#3-特殊值处理" class="headerlink" title="3. 特殊值处理"></a>3. 特殊值处理</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 浮点特殊值</span></span><br><span class="line"><span class="type">double</span> <span class="variable">inf</span> <span class="operator">=</span> Double.POSITIVE_INFINITY;</span><br><span class="line"><span class="type">double</span> <span class="variable">nan</span> <span class="operator">=</span> Double.NaN;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断NaN</span></span><br><span class="line"><span class="keyword">if</span> (Double.isNaN(nan)) &#123;...&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最大值处理</span></span><br><span class="line"><span class="type">long</span> <span class="variable">max</span> <span class="operator">=</span> Long.MAX_VALUE;</span><br><span class="line"><span class="comment">// max + 1 会变成 Long.MIN_VALUE</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 结构速查 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python 学习速查笔记（4）</title>
      <link href="/2025/03/31/python%E5%AD%A6%E4%B9%A0%E9%80%9F%E6%9F%A5%E7%AC%94%E8%AE%B0%EF%BC%884%EF%BC%89/"/>
      <url>/2025/03/31/python%E5%AD%A6%E4%B9%A0%E9%80%9F%E6%9F%A5%E7%AC%94%E8%AE%B0%EF%BC%884%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="python-学习速查笔记"><a href="#python-学习速查笔记" class="headerlink" title="python 学习速查笔记"></a>python 学习速查笔记</h1><blockquote><p>这一部分主要是数字，字符串，列表，元组，字典，集合的学习笔记。</p></blockquote><p><strong>这篇文章真的很长，累死了，查的时候看大纲mmd</strong></p><h2 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h2><p>Python 数字数据类型用于<strong>存储数值</strong>。<br>数据类型是<strong>不允许改变的</strong>，这就意味着如果改变数字数据类型的值，将<strong>重新分配内存空间</strong>。<br>以下实例在变量赋值时 Number 对象将被创建：</p><blockquote><p>var1 &#x3D; 1<br>var2 &#x3D; 10</p></blockquote><p>使用del语句删除一些数字对象的引用。<br>del语句的语法是：</p><blockquote><p>del var1[,var2[,var3[….,varN]]]</p></blockquote><p>使用del语句删除单个或多个对象的引用，例如：</p><blockquote><p>del var<br>del var_a, var_b</p></blockquote><h2 id="数字类型分类-三类"><a href="#数字类型分类-三类" class="headerlink" title="数字类型分类(三类)"></a>数字类型分类(三类)</h2><table><thead><tr><th>类型</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td>整型(int)</td><td>不限大小的正负整数</td><td><code>10</code>, <code>-5</code>, <code>0x1F</code></td></tr><tr><td>浮点型(float)</td><td>含小数或科学计数法表示的数</td><td><code>3.14</code>, <code>2.5e2</code></td></tr><tr><td>复数(complex)</td><td>实部+虚部（浮点数形式）</td><td><code>3+4j</code>, <code>complex(2,3)</code></td></tr><tr><td>布尔(bool)</td><td>int子类（True&#x3D;1, False&#x3D;0）</td><td><code>True</code>, <code>False</code></td></tr></tbody></table><ul><li><strong>整型(int) <strong>- 通常被称为是整型或整数，是正或负整数，不带小数点。Python3 <strong>整型是没有限制大小的</strong>，可以当作<code>Long</code>类型使用，所以 Python3 没有 Python2 的 Long 类型。</strong>布尔(bool)是整型的子类型</strong>。</li><li><strong>浮点型(float) <strong>- 浮点型由</strong>整数部分</strong>与<strong>小数部分</strong>组成，浮点型也可以使用科学计数法表示（2.5e2 &#x3D; 2.5 x 102 &#x3D; 250）</li><li><strong>复数( (complex)) <strong>- 复数由</strong>实数部分</strong>和<strong>虚数部分</strong>构成，可以用<code>a + bj</code>,或者<code>complex(a,b)</code>表示， <strong>复数的实部a和虚部b都是浮点型</strong>。</li></ul><p>我们可以使用十六进制和八进制来代表整数</p><h2 id="Python-数字类型转换"><a href="#Python-数字类型转换" class="headerlink" title="Python 数字类型转换"></a>Python 数字类型转换</h2><p>数据类型的转换，你只需要将数据类型作为函数名即可。</p><ul><li>int(x) 将x转换为一个整数。</li><li>float(x) 将x转换到一个浮点数。</li><li>complex(x) 将x转换到一个复数，实数部分为 x，虚数部分为 0。</li><li>complex(x, y) 将 x 和 y 转换到一个复数，实数部分为 x，虚数部分为 y。x 和 y 是数字表达式。<br>以下实例将浮点数变量 a 转换为整数：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a = 1.0</span><br><span class="line">&gt;&gt;&gt; int(a)</span><br><span class="line">1</span><br></pre></td></tr></table></figure></li></ul><h2 id="Python-数字运算"><a href="#Python-数字运算" class="headerlink" title="Python 数字运算"></a>Python 数字运算</h2><p>Python 解释器可以作为一个简单的计算器，您可以在解释器里输入一个表达式，它将输出表达式的值。<br>表达式的语法很直白： <code>+</code>, <code>-</code>,<code>*</code>和 <code>/</code>, 和其它语言（如Pascal或C）里一样。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; 2 + 2</span><br><span class="line">4</span><br><span class="line">&gt;&gt;&gt; 50 - 5*6</span><br><span class="line">20</span><br><span class="line">&gt;&gt;&gt; (50 - 5*6) / 4</span><br><span class="line">5.0</span><br><span class="line">&gt;&gt;&gt; 8 / 5  # 总是返回一个浮点数</span><br><span class="line">1.6</span><br></pre></td></tr></table></figure><p>浮点数运算有精度问题，不同机器上的结果可能不同<br>在整数除法中，除法<code>/</code>总是返回一个浮点数，如果只想得到整数的结果，丢弃可能的分数部分，可以使用运算符<code>//</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; 17 / 3  # 整数除法返回浮点型</span><br><span class="line">5.666666666666667</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">&gt;&gt;&gt; 17 // 3  # 整数除法返回向下取整后的结果</span><br><span class="line">5</span><br><span class="line">&gt;&gt;&gt; 17 % 3  # ％操作符返回除法的余数</span><br><span class="line">2</span><br><span class="line">&gt;&gt;&gt; 5 * 3 + 2 </span><br><span class="line">17</span><br></pre></td></tr></table></figure><p>注意：<code>//</code> 得到的并不一定是整数类型的数，它与分母分子的数据类型有关系。<br>例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; 7//2</span><br><span class="line">3</span><br><span class="line">&gt;&gt;&gt; 7.0//2</span><br><span class="line">3.0</span><br><span class="line">&gt;&gt;&gt; 7//2.0</span><br><span class="line">3.0</span><br><span class="line">&gt;&gt;&gt; </span><br></pre></td></tr></table></figure><p>等号<code>=</code>用于给变量赋值。赋值之后，除了下一个提示符，解释器不会显示任何结果。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; width = 20</span><br><span class="line">&gt;&gt;&gt; height = 5*9</span><br><span class="line">&gt;&gt;&gt; width * height</span><br><span class="line">900</span><br></pre></td></tr></table></figure><p>Python 可以使用<code>**</code>操作来进行幂运算：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; 5 ** 2  # 5 的平方</span><br><span class="line">25</span><br><span class="line">&gt;&gt;&gt; 2 ** 7  # 2的7次方</span><br><span class="line">128</span><br></pre></td></tr></table></figure><p><strong>变量在使用前必须先”定义”（即赋予变量一个值），否则会出现错误：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; n   # 尝试访问一个未定义的变量</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">NameError: name &#x27;n&#x27; is not defined</span><br></pre></td></tr></table></figure><p><strong>不同类型的数混合运算时会将整数转换为浮点数：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; 3 * 3.75 / 1.5</span><br><span class="line">7.5</span><br><span class="line">&gt;&gt;&gt; 7.0 / 2</span><br><span class="line">3.5</span><br></pre></td></tr></table></figure><p>在交互模式中，最后被输出的表达式结果被赋值给变量 _ 。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; tax = 12.5 / 100</span><br><span class="line">&gt;&gt;&gt; price = 100.50</span><br><span class="line">&gt;&gt;&gt; price * tax</span><br><span class="line">12.5625</span><br><span class="line">&gt;&gt;&gt; price + _</span><br><span class="line">113.0625</span><br><span class="line">&gt;&gt;&gt; round(_, 2)</span><br><span class="line">113.06</span><br></pre></td></tr></table></figure><p>以下是 Python 中常用数学函数的详细表格（包含 <code>math</code> 模块和内置函数）：</p><h2 id="Python-数学函数速查表"><a href="#Python-数学函数速查表" class="headerlink" title="Python 数学函数速查表"></a><strong>Python 数学函数速查表</strong></h2><table><thead><tr><th><strong>函数&#x2F;常量</strong></th><th><strong>描述</strong></th><th><strong>示例</strong></th><th><strong>输出结果</strong></th></tr></thead><tbody><tr><td><strong>内置函数</strong></td><td></td><td></td><td></td></tr><tr><td><code>abs(x)</code></td><td>返回绝对值</td><td><code>abs(-5)</code></td><td><code>5</code></td></tr><tr><td><code>round(x[, n])</code></td><td>四舍五入（可指定小数位数）</td><td><code>round(3.14159, 2)</code></td><td><code>3.14</code></td></tr><tr><td><code>pow(x, y)</code></td><td>计算 x 的 y 次幂（等价于 <code>x**y</code>）</td><td><code>pow(2, 3)</code></td><td><code>8</code></td></tr><tr><td><code>divmod(a, b)</code></td><td>返回商和余组的元组 <code>(a//b, a%b)</code></td><td><code>divmod(10, 3)</code></td><td><code>(3, 1)</code></td></tr><tr><td><strong>math 模块函数</strong></td><td>（需 <code>import math</code>）</td><td></td><td></td></tr><tr><td><code>math.ceil(x)</code></td><td>向上取整</td><td><code>math.ceil(4.2)</code></td><td><code>5</code></td></tr><tr><td><code>math.floor(x)</code></td><td>向下取整</td><td><code>math.floor(4.9)</code></td><td><code>4</code></td></tr><tr><td><code>math.sqrt(x)</code></td><td>平方根</td><td><code>math.sqrt(16)</code></td><td><code>4.0</code></td></tr><tr><td><code>math.exp(x)</code></td><td>返回 e 的 x 次幂</td><td><code>math.exp(1)</code></td><td><code>2.718281828459045</code></td></tr><tr><td><code>math.log(x[, base])</code></td><td>对数运算（默认自然对数，可指定底数）</td><td><code>math.log(100, 10)</code></td><td><code>2.0</code></td></tr><tr><td><code>math.log10(x)</code></td><td>以 10 为底的对数</td><td><code>math.log10(1000)</code></td><td><code>3.0</code></td></tr><tr><td><code>math.sin(x)</code></td><td>正弦函数（x 为弧度）</td><td><code>math.sin(math.pi/2)</code></td><td><code>1.0</code></td></tr><tr><td><code>math.cos(x)</code></td><td>余弦函数</td><td><code>math.cos(0)</code></td><td><code>1.0</code></td></tr><tr><td><code>math.tan(x)</code></td><td>正切函数</td><td><code>math.tan(math.pi/4)</code></td><td><code>0.999...</code>（≈1.0）</td></tr><tr><td><code>math.degrees(x)</code></td><td>弧度转角度</td><td><code>math.degrees(math.pi)</code></td><td><code>180.0</code></td></tr><tr><td><code>math.radians(x)</code></td><td>角度转弧度</td><td><code>math.radians(90)</code></td><td><code>1.570...</code>（≈π&#x2F;2）</td></tr><tr><td><code>math.hypot(x, y)</code></td><td>计算欧几里得范数（√(x² + y²)）</td><td><code>math.hypot(3, 4)</code></td><td><code>5.0</code></td></tr><tr><td><code>math.factorial(n)</code></td><td>阶乘计算</td><td><code>math.factorial(5)</code></td><td><code>120</code></td></tr><tr><td><code>math.gcd(a, b)</code></td><td>最大公约数</td><td><code>math.gcd(36, 60)</code></td><td><code>12</code></td></tr><tr><td><strong>math 常量</strong></td><td></td><td></td><td></td></tr><tr><td><code>math.pi</code></td><td>圆周率 π</td><td><code>math.pi</code></td><td><code>3.141592653589793</code></td></tr><tr><td><code>math.e</code></td><td>自然常数 e</td><td><code>math.e</code></td><td><code>2.718281828459045</code></td></tr><tr><td><code>math.inf</code></td><td>正无穷大</td><td><code>math.inf &gt; 1e10</code></td><td><code>True</code></td></tr><tr><td><code>math.nan</code></td><td>非数字（Not a Number）</td><td><code>math.isnan(math.nan)</code></td><td><code>True</code></td></tr></tbody></table><h3 id="使用示例代码"><a href="#使用示例代码" class="headerlink" title="使用示例代码"></a><strong>使用示例代码</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算圆的面积</span></span><br><span class="line">radius = <span class="number">5</span></span><br><span class="line">area = math.pi * math.<span class="built_in">pow</span>(radius, <span class="number">2</span>)  <span class="comment"># 或 radius**2</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;圆面积: <span class="subst">&#123;area:<span class="number">.2</span>f&#125;</span>&quot;</span>)  <span class="comment"># 输出: 圆面积: 78.54</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 解三角形（已知斜边和角度）</span></span><br><span class="line">hypotenuse = <span class="number">10</span></span><br><span class="line">angle_deg = <span class="number">30</span></span><br><span class="line">angle_rad = math.radians(angle_deg)</span><br><span class="line">opposite = hypotenuse * math.sin(angle_rad)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;对边长度: <span class="subst">&#123;opposite:<span class="number">.2</span>f&#125;</span>&quot;</span>)  <span class="comment"># 输出: 对边长度: 5.00</span></span><br></pre></td></tr></table></figure><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a><strong>注意事项</strong></h3><ol><li><strong>精度问题</strong>：浮点数运算可能存在微小误差（如 <code>math.sin(math.pi)</code> 实际输出 <code>1.2246467991473532e-16</code> 而非 <code>0</code>）。</li><li><strong>异常处理</strong>：负数开平方会引发 <code>ValueError</code>，建议用 <code>try-except</code> 捕获。</li><li><strong>性能</strong>：对于大量计算，考虑使用 <code>numpy</code> 替代 <code>math</code> 模块。</li></ol><blockquote><p><em>建议将此表格保存为快速参考手册！</em></p></blockquote><p><a href="https://www.runoob.com/python3/python3-number.html">其他完整函数</a></p><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p><a href="https://www.runoob.com/python3/python3-string.html">详细网站，详见菜鸟教程</a></p><h1 id="Python-字符串操作完全指南"><a href="#Python-字符串操作完全指南" class="headerlink" title="Python 字符串操作完全指南"></a>Python 字符串操作完全指南</h1><h2 id="1-访问字符串中的值"><a href="#1-访问字符串中的值" class="headerlink" title="1. 访问字符串中的值"></a>1. 访问字符串中的值</h2><p>Python 不支持单字符类型，单字符在 Python 中也是作为一个字符串使用。</p><p>Python 访问子字符串，可以使用方括号 [] 来截取字符串，字符串的截取的语法格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">变量[头下标:尾下标]</span><br></pre></td></tr></table></figure><h3 id="索引访问"><a href="#索引访问" class="headerlink" title="索引访问"></a>索引访问</h3><ul><li>Python 字符串是字符的有序集合，可通过索引访问<strong>单个字符</strong></li><li><strong>索引从0开始</strong>，支持<strong>正向索引和反向索引</strong></li><li>正向索引：<code>0</code> 到 <code>len(str)-1</code></li><li>反向索引：<code>-1</code> 表示最后一个字符，<code>-len(str)</code> 表示第一个字符</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">&quot;Python&quot;</span></span><br><span class="line"><span class="built_in">print</span>(s[<span class="number">0</span>])    <span class="comment"># &#x27;P&#x27; (第一个字符)</span></span><br><span class="line"><span class="built_in">print</span>(s[-<span class="number">1</span>])   <span class="comment"># &#x27;n&#x27; (最后一个字符)</span></span><br></pre></td></tr></table></figure><h3 id="切片访问"><a href="#切片访问" class="headerlink" title="切片访问"></a>切片访问</h3><ul><li>语法：<code>str[start:end:step]</code></li><li><strong>左闭右开区间</strong>：包含start，不包含end</li><li>省略值：<ul><li><strong>start默认为0</strong></li><li><strong>end默认为字符串长度</strong></li><li><strong>step默认为1</strong></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">&quot;Hello World&quot;</span></span><br><span class="line"><span class="built_in">print</span>(s[<span class="number">0</span>:<span class="number">5</span>])   <span class="comment"># &#x27;Hello&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(s[<span class="number">6</span>:])    <span class="comment"># &#x27;World&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(s[::<span class="number">2</span>])   <span class="comment"># &#x27;HloWrd&#x27; (步长为2)</span></span><br><span class="line"><span class="built_in">print</span>(s[::-<span class="number">1</span>])  <span class="comment"># &#x27;dlroW olleH&#x27; (反转字符串)</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong>：</p><ul><li>索引越界会引发<code>IndexError</code><br>  注意字长防止越界</li><li>切片越界不会报错，会自动调整到有效范围</li></ul><h2 id="2-字符串更新"><a href="#2-字符串更新" class="headerlink" title="2. 字符串更新"></a>2. 字符串更新</h2><h3 id="字符串不可变性"><a href="#字符串不可变性" class="headerlink" title="字符串不可变性"></a>字符串不可变性</h3><ul><li>Python字符串是<strong>不可变对象</strong>，不能<strong>直接修改某个字符</strong></li><li>必须通过<strong>创建新字符串</strong>实现”修改”<br>  内存对象会发生变化</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">&quot;Python&quot;</span></span><br><span class="line"><span class="comment"># s[0] = &#x27;J&#x27;  # 错误！会引发TypeError</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 正确做法：创建新字符串</span></span><br><span class="line">s = <span class="string">&#x27;J&#x27;</span> + s[<span class="number">1</span>:]  <span class="comment"># &#x27;Jython&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="常用更新方法"><a href="#常用更新方法" class="headerlink" title="常用更新方法"></a>常用更新方法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 替换子串</span></span><br><span class="line">s = s.replace(<span class="string">&#x27;Py&#x27;</span>, <span class="string">&#x27;Ja&#x27;</span>)  <span class="comment"># &#x27;Jython&#x27; → &#x27;Jython&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 拼接字符串</span></span><br><span class="line">s = s[:<span class="number">2</span>] + <span class="string">&#x27;va&#x27;</span> + s[<span class="number">4</span>:]  <span class="comment"># &#x27;Jython&#x27; → &#x27;Javaon&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="3-转义字符"><a href="#3-转义字符" class="headerlink" title="3. 转义字符"></a>3. 转义字符</h2><h3 id="常见转义字符"><a href="#常见转义字符" class="headerlink" title="常见转义字符"></a>常见转义字符</h3><p>在需要在字符中使用特殊字符时，python 用反斜杠 \ 转义字符。如下表：</p><table><thead><tr><th>转义字符</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td><code>\\</code></td><td>反斜杠</td><td><code>&quot;C:\\path&quot;</code></td></tr><tr><td><code>\&#39;</code></td><td>单引号</td><td><code>&#39;It\&#39;s&#39;</code></td></tr><tr><td><code>\&quot;</code></td><td>双引号</td><td><code>&quot;He said \&quot;Hi\&quot;&quot;</code></td></tr><tr><td><code>\n</code></td><td>换行</td><td><code>&quot;Line1\nLine2&quot;</code></td></tr><tr><td><code>\t</code></td><td>水平制表符</td><td><code>&quot;Name\tAge&quot;</code></td></tr><tr><td><code>\r</code></td><td>回车</td><td><code>&quot;Hello\rWorld&quot;</code></td></tr><tr><td><code>\b</code></td><td>退格</td><td><code>&quot;Hel\blo&quot;</code></td></tr><tr><td><code>\uxxxx</code></td><td>Unicode字符</td><td><code>&quot;\u03A9&quot;</code> (Ω)</td></tr><tr><td>特殊案例，使用<code>\r</code>实现百分比进度：</td><td></td><td></td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">101</span>): <span class="comment"># 添加进度条图形和百分比</span></span><br><span class="line">    bar = <span class="string">&#x27;[&#x27;</span> + <span class="string">&#x27;=&#x27;</span> * (i // <span class="number">2</span>) + <span class="string">&#x27; &#x27;</span> * (<span class="number">50</span> - i // <span class="number">2</span>) + <span class="string">&#x27;]&#x27;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;\r<span class="subst">&#123;bar&#125;</span> <span class="subst">&#123;i:<span class="number">3</span>&#125;</span>%&quot;</span>, end=<span class="string">&#x27;&#x27;</span>, flush=<span class="literal">True</span>)</span><br><span class="line">    time.sleep(<span class="number">0.05</span>)</span><br><span class="line"><span class="built_in">print</span>()</span><br></pre></td></tr></table></figure><p>以下实例，我们使用了不同的转义字符来演示单引号、换行符、制表符、退格符、换页符、ASCII、二进制、八进制数和十六进制数的效果：（整体效果)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\&#x27;Hello, world!\&#x27;&#x27;</span>)  <span class="comment"># 输出：&#x27;Hello, world!&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Hello, world!\nHow are you?&quot;</span>)  <span class="comment"># 输出：Hello, world!</span></span><br><span class="line">                                        <span class="comment">#       How are you?</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Hello, world!\tHow are you?&quot;</span>)  <span class="comment"># 输出：Hello, world!    How are you?</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Hello,\b world!&quot;</span>)  <span class="comment"># 输出：Hello world!</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Hello,\f world!&quot;</span>)  <span class="comment"># 输出：</span></span><br><span class="line">                           <span class="comment"># Hello,</span></span><br><span class="line">                           <span class="comment">#  world!</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;A 对应的 ASCII 值为：&quot;</span>, <span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>))  <span class="comment"># 输出：A 对应的 ASCII 值为： 65</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\x41 为 A 的 ASCII 代码&quot;</span>)  <span class="comment"># 输出：A 为 A 的 ASCII 代码</span></span><br><span class="line"></span><br><span class="line">decimal_number = <span class="number">42</span></span><br><span class="line">binary_number = <span class="built_in">bin</span>(decimal_number)  <span class="comment"># 十进制转换为二进制</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;转换为二进制:&#x27;</span>, binary_number)  <span class="comment"># 转换为二进制: 0b101010</span></span><br><span class="line"></span><br><span class="line">octal_number = <span class="built_in">oct</span>(decimal_number)  <span class="comment"># 十进制转换为八进制</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;转换为八进制:&#x27;</span>, octal_number)  <span class="comment"># 转换为八进制: 0o52</span></span><br><span class="line"></span><br><span class="line">hexadecimal_number = <span class="built_in">hex</span>(decimal_number)  <span class="comment"># 十进制转换为十六进制</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;转换为十六进制:&#x27;</span>, hexadecimal_number) <span class="comment"># 转换为十六进制: 0x2a</span></span><br></pre></td></tr></table></figure><h3 id="原始字符串"><a href="#原始字符串" class="headerlink" title="原始字符串"></a>原始字符串</h3><ul><li>在字符串前加<code>r</code>或<code>R</code>，<strong>转义字符不会生效</strong></li><li>常用于正则表达式和文件路径</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">path = <span class="string">r&quot;C:\new_folder\test.txt&quot;</span></span><br><span class="line"><span class="built_in">print</span>(path)  <span class="comment"># 输出: C:\new_folder\test.txt</span></span><br></pre></td></tr></table></figure><h2 id="4-字符串运算符"><a href="#4-字符串运算符" class="headerlink" title="4. 字符串运算符"></a>4. 字符串运算符</h2><h3 id="基本运算符"><a href="#基本运算符" class="headerlink" title="基本运算符"></a>基本运算符</h3><p>不是数字运算符，具有和长得像罢了(ノ￣▽￣)</p><table><thead><tr><th>运算符</th><th>描述</th><th>示例</th><th>结果</th></tr></thead><tbody><tr><td><code>+</code></td><td>字符串连接</td><td><code>&quot;Py&quot; + &quot;thon&quot;</code></td><td><code>&quot;Python&quot;</code></td></tr><tr><td><code>*</code></td><td>重复字符串</td><td><code>&quot;Hi&quot; * 3</code></td><td><code>&quot;HiHiHi&quot;</code></td></tr><tr><td><code>[]</code></td><td>索引访问</td><td><code>&quot;Python&quot;[1]</code></td><td><code>&#39;y&#39;</code></td></tr><tr><td><code>[:]</code></td><td>切片</td><td><code>&quot;Python&quot;[1:4]</code></td><td><code>&#39;yth&#39;</code></td></tr><tr><td><code>in</code></td><td>成员检查</td><td><code>&#39;Py&#39; in &#39;Python&#39;</code></td><td><code>True</code></td></tr><tr><td><code>not in</code></td><td>非成员检查</td><td><code>&#39;Ruby&#39; not in &#39;Python&#39;</code></td><td><code>True</code></td></tr><tr><td>我摘这里搞个是咧捏：</td><td></td><td></td><td></td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"> </span><br><span class="line">a = <span class="string">&quot;Hello&quot;</span></span><br><span class="line">b = <span class="string">&quot;Python&quot;</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;a + b 输出结果：&quot;</span>, a + b)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;a * 2 输出结果：&quot;</span>, a * <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;a[1] 输出结果：&quot;</span>, a[<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;a[1:4] 输出结果：&quot;</span>, a[<span class="number">1</span>:<span class="number">4</span>])</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span>( <span class="string">&quot;H&quot;</span> <span class="keyword">in</span> a) :</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;H 在变量 a 中&quot;</span>)</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;H 不在变量 a 中&quot;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span>( <span class="string">&quot;M&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> a) :</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;M 不在变量 a 中&quot;</span>)</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;M 在变量 a 中&quot;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span> (<span class="string">r&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">R&#x27;\n&#x27;</span>)</span><br></pre></td></tr></table></figure><p>输出结果如下啊</p><blockquote><p>a + b 输出结果： HelloPython<br>a * 2 输出结果： HelloHello<br>a[1] 输出结果： e<br>a[1:4] 输出结果： ell<br>H 在变量 a 中<br>M 不在变量 a 中<br>\n<br>\n</p></blockquote><h3 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h3><p>字符串按字典序比较（ASCII&#x2F;Unicode码值）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;apple&quot;</span> &lt; <span class="string">&quot;banana&quot;</span>)  <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Apple&quot;</span> &lt; <span class="string">&quot;apple&quot;</span>)   <span class="comment"># True (大写字母ASCII码更小)</span></span><br></pre></td></tr></table></figure><h2 id="5-字符串格式化"><a href="#5-字符串格式化" class="headerlink" title="5. 字符串格式化"></a>5. 字符串格式化</h2><p>Python 支持格式化字符串的输出 。尽管这样可能会用到非常复杂的表达式，但最基本的用法是将一个值插入到一个有字符串格式符 %s 的字符串中。<br>有点像c欸(｡◕ˇ∀ˇ◕)<br>各个版本的我都搞下</p><h3 id="1-格式化-旧式"><a href="#1-格式化-旧式" class="headerlink" title="1. % 格式化 (旧式)"></a>1. % 格式化 (旧式)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">&quot;Alice&quot;</span></span><br><span class="line">age = <span class="number">25</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Name: %s, Age: %d&quot;</span> % (name, age))</span><br></pre></td></tr></table></figure><table><thead><tr><th>格式符</th><th>说明</th></tr></thead><tbody><tr><td><code>%s</code></td><td>字符串</td></tr><tr><td><code>%d</code></td><td>十进制整数</td></tr><tr><td><code>%f</code></td><td>浮点数</td></tr><tr><td><code>%x</code></td><td>十六进制整数</td></tr></tbody></table><h3 id="2-str-format-Python-2-6"><a href="#2-str-format-Python-2-6" class="headerlink" title="2. str.format() (Python 2.6+)"></a>2. str.format() (Python 2.6+)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Name: &#123;&#125;, Age: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(name, age))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Name: &#123;1&#125;, Age: &#123;0&#125;&quot;</span>.<span class="built_in">format</span>(age, name))  <span class="comment"># 按索引</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Name: &#123;n&#125;, Age: &#123;a&#125;&quot;</span>.<span class="built_in">format</span>(n=name, a=age))  <span class="comment"># 关键字</span></span><br></pre></td></tr></table></figure><h3 id="3-f-string-Python-3-6-推荐"><a href="#3-f-string-Python-3-6-推荐" class="headerlink" title="3. f-string (Python 3.6+ 推荐)"></a>3. f-string (Python 3.6+ 推荐)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Name: <span class="subst">&#123;name&#125;</span>, Age: <span class="subst">&#123;age&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Next year: <span class="subst">&#123;age + <span class="number">1</span>&#125;</span>&quot;</span>)  <span class="comment"># 支持表达式</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Name: <span class="subst">&#123;name.upper()&#125;</span>&quot;</span>)  <span class="comment"># 支持方法调用</span></span><br></pre></td></tr></table></figure><p><strong>格式化规范</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pi = <span class="number">3.1415926</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Pi: <span class="subst">&#123;pi:<span class="number">.2</span>f&#125;</span>&quot;</span>)      <span class="comment"># 保留2位小数: Pi: 3.14</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Hex: <span class="subst">&#123;<span class="number">255</span>:#0x&#125;</span>&quot;</span>)    <span class="comment"># 十六进制: Hex: 0xff</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Percent: <span class="subst">&#123;<span class="number">0.25</span>:<span class="number">.1</span>%&#125;</span>&quot;</span>) <span class="comment"># 百分比: Percent: 25.0%</span></span><br></pre></td></tr></table></figure><h2 id="6-三引号字符串"><a href="#6-三引号字符串" class="headerlink" title="6. 三引号字符串"></a>6. 三引号字符串</h2><p>python三引号允许一个字符串跨多行，字符串中可以包含换行符、制表符以及其他特殊字符。</p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul><li>使用三个单引号<code>&#39;&#39;&#39;</code>或双引号<code>&quot;&quot;&quot;</code></li><li><strong>保留所有格式</strong>（换行、缩进等）</li><li>常用于多行字符串、文档字符串(docstring)</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">multi_line = <span class="string">&quot;&quot;&quot;第一行</span></span><br><span class="line"><span class="string">第二行</span></span><br><span class="line"><span class="string">    第三行(带缩进)&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="文档字符串示例"><a href="#文档字符串示例" class="headerlink" title="文档字符串示例"></a>文档字符串示例</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">calculate</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;计算两个数的和与差</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        a: 第一个数</span></span><br><span class="line"><span class="string">        b: 第二个数</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        返回包含和与差的元组 (sum, difference)</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> a + b, a - b</span><br></pre></td></tr></table></figure><p>makedown玩家狂喜(⁎˃ᴗ˂⁎)，所见即所得万岁！！</p><h2 id="7-Unicode-字符串"><a href="#7-Unicode-字符串" class="headerlink" title="7. Unicode 字符串"></a>7. Unicode 字符串</h2><p>在Python2中，普通字符串是以8位ASCII码进行存储的，而Unicode字符串则存储为16位unicode字符串，这样能够表示更多的字符集。使用的语法是在字符串前面加上前缀 u。</p><h3 id="Python-3-的字符串"><a href="#Python-3-的字符串" class="headerlink" title="Python 3 的字符串"></a>Python 3 的字符串</h3><ul><li>Python 3 中所有字符串默认都是Unicode字符串（<code>str</code>类型）</li><li>使用<code>\u</code>转义表示Unicode字符</li><li>支持多语言字符</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">&quot;中文 Español Français&quot;</span></span><br><span class="line"><span class="built_in">print</span>(s)  <span class="comment"># 正常显示多语言</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Unicode码点</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\u03A9&quot;</span>)  <span class="comment"># 输出希腊字母Ω</span></span><br></pre></td></tr></table></figure><h3 id="编码转换"><a href="#编码转换" class="headerlink" title="编码转换"></a>编码转换</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># str → bytes</span></span><br><span class="line">data = <span class="string">&quot;中文&quot;</span>.encode(<span class="string">&quot;utf-8&quot;</span>)  <span class="comment"># b&#x27;\xe4\xb8\xad\xe6\x96\x87&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># bytes → str</span></span><br><span class="line">text = data.decode(<span class="string">&quot;utf-8&quot;</span>)   <span class="comment"># &#x27;中文&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong>：</p><ul><li>文件操作时注意指定编码：<code>open(&quot;file.txt&quot;, encoding=&quot;utf-8&quot;)</code></li><li>避免”编码地狱”：统一使用UTF-8编码</li></ul><h2 id="8-字符串内建函数"><a href="#8-字符串内建函数" class="headerlink" title="8. 字符串内建函数"></a>8. 字符串内建函数</h2><h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><table><thead><tr><th>方法</th><th>描述</th><th>示例</th><th>结果</th></tr></thead><tbody><tr><td><code>str.lower()</code></td><td>转为小写</td><td><code>&quot;Python&quot;.lower()</code></td><td><code>&#39;python&#39;</code></td></tr><tr><td><code>str.upper()</code></td><td>转为大写</td><td><code>&quot;Python&quot;.upper()</code></td><td><code>&#39;PYTHON&#39;</code></td></tr><tr><td><code>str.strip()</code></td><td>去除两端空白</td><td><code>&quot;  hello  &quot;.strip()</code></td><td><code>&#39;hello&#39;</code></td></tr><tr><td><code>str.split()</code></td><td>分割字符串</td><td><code>&quot;a,b,c&quot;.split(&#39;,&#39;)</code></td><td><code>[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]</code></td></tr><tr><td><code>str.join(iterable)</code></td><td>连接序列元素</td><td><code>&#39;,&#39;.join([&#39;a&#39;, &#39;b&#39;, &#39;c&#39;])</code></td><td><code>&#39;a,b,c&#39;</code></td></tr><tr><td><code>str.find(sub)</code></td><td>查找子串位置</td><td><code>&quot;python&quot;.find(&#39;th&#39;)</code></td><td><code>2</code></td></tr><tr><td><code>str.replace(old, new)</code></td><td>替换子串</td><td><code>&quot;hello&quot;.replace(&#39;l&#39;, &#39;L&#39;)</code></td><td><code>&#39;heLLo&#39;</code></td></tr><tr><td><code>str.startswith(prefix)</code></td><td>检查前缀</td><td><code>&quot;hello&quot;.startswith(&#39;he&#39;)</code></td><td><code>True</code></td></tr><tr><td><code>str.endswith(suffix)</code></td><td>检查后缀</td><td><code>&quot;hello&quot;.endswith(&#39;lo&#39;)</code></td><td><code>True</code></td></tr><tr><td><code>str.isdigit()</code></td><td>是否全数字</td><td><code>&quot;123&quot;.isdigit()</code></td><td><code>True</code></td></tr><tr><td><code>str.isalpha()</code></td><td>是否全字母</td><td><code>&quot;abc&quot;.isalpha()</code></td><td><code>True</code></td></tr></tbody></table><h3 id="重要方法详解"><a href="#重要方法详解" class="headerlink" title="重要方法详解"></a>重要方法详解</h3><p><strong>1. split() vs splitlines()</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">text = <span class="string">&quot;line1\nline2\r\nline3&quot;</span></span><br><span class="line"><span class="built_in">print</span>(text.split())        <span class="comment"># [&#x27;line1&#x27;, &#x27;line2&#x27;, &#x27;line3&#x27;] (默认按空白分割)</span></span><br><span class="line"><span class="built_in">print</span>(text.split(<span class="string">&#x27;\n&#x27;</span>))    <span class="comment"># [&#x27;line1&#x27;, &#x27;line2\r&#x27;, &#x27;line3&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(text.splitlines())   <span class="comment"># [&#x27;line1&#x27;, &#x27;line2&#x27;, &#x27;line3&#x27;] (智能识别换行符)</span></span><br></pre></td></tr></table></figure><p><strong>2. partition() 与 rpartition()</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">url = <span class="string">&quot;user:pass@domain.com&quot;</span></span><br><span class="line"><span class="built_in">print</span>(url.partition(<span class="string">&#x27;@&#x27;</span>))  <span class="comment"># (&#x27;user:pass&#x27;, &#x27;@&#x27;, &#x27;domain.com&#x27;)</span></span><br><span class="line"><span class="built_in">print</span>(url.rpartition(<span class="string">&#x27;.&#x27;</span>)) <span class="comment"># (&#x27;user:pass@domain&#x27;, &#x27;.&#x27;, &#x27;com&#x27;)</span></span><br></pre></td></tr></table></figure><p><strong>3. 字符串填充</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;42&quot;</span>.zfill(<span class="number">5</span>))      <span class="comment"># &#x27;00042&#x27; (左侧补零)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hello&quot;</span>.center(<span class="number">10</span>, <span class="string">&#x27;*&#x27;</span>))  <span class="comment"># &#x27;**hello***&#x27; (居中填充)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hello&quot;</span>.ljust(<span class="number">10</span>))  <span class="comment"># &#x27;hello     &#x27; (左对齐)</span></span><br></pre></td></tr></table></figure><ol><li><strong>split() vs splitlines()</strong></li></ol><ul><li><p><strong>split()</strong> - 切菜刀</p><ul><li>默认按空格&#x2F;换行&#x2F;制表符切：<code>&quot;a b c&quot;.split()</code> → <code>[&#39;a&#39;,&#39;b&#39;,&#39;c&#39;]</code></li><li>可以指定切什么：<code>&quot;a,b,c&quot;.split(&#39;,&#39;)</code> → <code>[&#39;a&#39;,&#39;b&#39;,&#39;c&#39;]</code></li><li>遇到连续分隔符会切出空字符串：<code>&quot;a,,b&quot;.split(&#39;,&#39;)</code> → <code>[&#39;a&#39;,&#39;&#39;,&#39;b&#39;]</code></li></ul></li><li><p><strong>splitlines()</strong> - 智能换行切割机</p><ul><li>专切换行，不管你是<code>\n</code>还是<code>\r\n</code>都能认</li><li><code>&quot;第一行\n第二行&quot;.splitlines()</code> → <code>[&#39;第一行&#39;,&#39;第二行&#39;]</code></li><li>不会像split()那样切出空行</li></ul></li></ul><ol start="2"><li><strong>partition() 和 rpartition()</strong></li></ol><ul><li><p>都是<strong>切三段的刀</strong>，找到第一个指定分隔符切成：</p><ul><li>分隔符前 | 分隔符自己 | 分隔符后</li></ul></li><li><p><strong>partition()</strong> - 从左往右找</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;账号:密码@网址&quot;</span>.partition(<span class="string">&#x27;@&#x27;</span>) → (<span class="string">&#x27;账号:密码&#x27;</span>, <span class="string">&#x27;@&#x27;</span>, <span class="string">&#x27;网址&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li><p><strong>rpartition()</strong> - 从右往左找</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;图片.jpg&quot;</span>.rpartition(<span class="string">&#x27;.&#x27;</span>) → (<span class="string">&#x27;图片&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;jpg&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li><p>找不到分隔符时：返回<code>(原字符串, &#39;&#39;, &#39;&#39;)</code></p></li></ul><ol start="3"><li><strong>字符串填充</strong></li></ol><ul><li><p><strong>zfill()</strong> - 补零神器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;5&quot;</span>.zfill(<span class="number">3</span>) → <span class="string">&#x27;005&#x27;</span>  <span class="comment"># 补到3位</span></span><br></pre></td></tr></table></figure></li><li><p><strong>center()</strong> - 文字居中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;hi&quot;</span>.center(<span class="number">6</span>,<span class="string">&#x27;*&#x27;</span>) → <span class="string">&#x27;**hi**&#x27;</span>  <span class="comment"># 总长度6，两边用*填</span></span><br></pre></td></tr></table></figure></li><li><p><strong>ljust()&#x2F;rjust()</strong> - 左右对齐</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;hi&quot;</span>.ljust(<span class="number">4</span>) → <span class="string">&#x27;hi  &#x27;</span>  <span class="comment"># 长度4，右边补空格</span></span><br><span class="line"><span class="string">&quot;hi&quot;</span>.rjust(<span class="number">4</span>,<span class="string">&#x27;-&#x27;</span>) → <span class="string">&#x27;--hi&#x27;</span>  <span class="comment"># 左边补-</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="一句话总结"><a href="#一句话总结" class="headerlink" title="一句话总结"></a>一句话总结</h3><ul><li><code>split()</code>：随便切，<code>splitlines()</code>专切换行</li><li><code>partition()</code>：切三段，从左&#x2F;从右找分隔符</li><li>填充方法：<code>zfill</code>补零，<code>center</code>居中，<code>ljust/rjust</code>左右对齐</li></ul><h2 id="关键要点总结"><a href="#关键要点总结" class="headerlink" title="关键要点总结"></a>关键要点总结</h2><ol><li><strong>不可变性</strong>：字符串创建后不能修改，所有”修改”操作都返回新字符串</li><li><strong>编码规范</strong>：Python 3 默认使用Unicode，处理文件时明确指定编码</li><li><strong>性能考虑</strong>：<ul><li>避免循环中使用<code>+</code>拼接字符串（使用<code>join()</code>更高效）</li><li>频繁字符串操作考虑使用<code>io.StringIO</code></li></ul></li><li><strong>格式化选择</strong>：<ul><li>Python 3.6+ 优先使用f-string</li><li>需要兼容旧版本时用<code>str.format()</code></li></ul></li><li><strong>安全注意</strong>：<ul><li>避免用<code>eval()</code>处理字符串</li><li>SQL查询使用参数化而非字符串拼接</li></ul></li></ol><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>这还有多少部分啊啊！！凸(艹皿艹 )，写不动了捏<br>序列是 Python 中<strong>最基本的数据结构</strong>。<br>序列中的每个值都有对应的位置值，称之为索引，第一个索引是 0，第二个索引是 1，依此类推。<br>Python 有<code>6</code>个序列的内置类型，但最常见的是列表和元组。<br>列表都可以进行的操作包括<strong>索引，切片，加，乘，检查成员</strong>。<br>此外，Python <em>已经内置<strong>确定序列的长度</strong>以及<strong>确定最大和最小的元素</strong>的方法</em>。<br>列表的数据项不需要具有相同的类型<br>创建一个列表，只要把逗号分隔的不同的数据项使用方括号括起来即可。如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">list1 = [&#x27;Google&#x27;, &#x27;Runoob&#x27;, 1997, 2000]</span><br><span class="line">list2 = [1, 2, 3, 4, 5 ]</span><br><span class="line">list3 = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;]</span><br><span class="line">list4 = [&#x27;red&#x27;, &#x27;green&#x27;, &#x27;blue&#x27;, &#x27;yellow&#x27;, &#x27;white&#x27;, &#x27;black&#x27;]</span><br></pre></td></tr></table></figure><p>像不像数组啊喵<br><a href="https://www.runoob.com/python3/python3-list.html">详细解释点这里，点这里啊，你为什么不点￣へ￣</a></p><h2 id="创建列表（注意列表格式）【很重要所以我先放上来了】"><a href="#创建列表（注意列表格式）【很重要所以我先放上来了】" class="headerlink" title="创建列表（注意列表格式）【很重要所以我先放上来了】"></a>创建列表（注意列表格式）【很重要所以我先放上来了】</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 空列表</span></span><br><span class="line">empty_list = []</span><br><span class="line"></span><br><span class="line"><span class="comment"># 包含不同类型元素的列表</span></span><br><span class="line">mixed_list = [<span class="number">1</span>, <span class="string">&quot;hello&quot;</span>, <span class="number">3.14</span>, <span class="literal">True</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 嵌套列表</span></span><br><span class="line">nested_list = [[<span class="number">1</span>, <span class="number">2</span>], [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>]]</span><br></pre></td></tr></table></figure><h2 id="Python3-列表完全指南"><a href="#Python3-列表完全指南" class="headerlink" title="Python3 列表完全指南"></a>Python3 列表完全指南</h2><h3 id="1-列表基础"><a href="#1-列表基础" class="headerlink" title="1. 列表基础"></a>1. 列表基础</h3><p>列表是Python中最灵活的数据结构，用方括号<code>[]</code>表示，元素用逗号分隔。</p><h4 id="创建列表（注意列表格式）"><a href="#创建列表（注意列表格式）" class="headerlink" title="创建列表（注意列表格式）"></a>创建列表（注意列表格式）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 空列表</span></span><br><span class="line">empty_list = []</span><br><span class="line"></span><br><span class="line"><span class="comment"># 包含不同类型元素的列表</span></span><br><span class="line">mixed_list = [<span class="number">1</span>, <span class="string">&quot;hello&quot;</span>, <span class="number">3.14</span>, <span class="literal">True</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 嵌套列表</span></span><br><span class="line">nested_list = [[<span class="number">1</span>, <span class="number">2</span>], [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>]]</span><br></pre></td></tr></table></figure><p><strong>特点</strong>：</p><ul><li>有序集合（元素有固定位置）</li><li>可变（可以修改内容），这就比呢个啥字符串自由多了吧</li><li>可包含任意数据类型，ヾ(ﾟ∀ﾟゞ)z真的吗</li><li>支持重复元素</li></ul><h3 id="2-访问列表元素"><a href="#2-访问列表元素" class="headerlink" title="2. 访问列表元素"></a>2. 访问列表元素</h3><p>你看下面的东西，直接搬用吧</p><h4 id="索引访问-1"><a href="#索引访问-1" class="headerlink" title="索引访问"></a>索引访问</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fruits = [<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;cherry&quot;</span>]</span><br><span class="line"><span class="built_in">print</span>(fruits[<span class="number">0</span>])   <span class="comment"># &quot;apple&quot;（正向索引从0开始）</span></span><br><span class="line"><span class="built_in">print</span>(fruits[-<span class="number">1</span>])  <span class="comment"># &quot;cherry&quot;（负索引从-1开始）</span></span><br></pre></td></tr></table></figure><h4 id="切片操作"><a href="#切片操作" class="headerlink" title="切片操作"></a>切片操作</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">numbers = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="built_in">print</span>(numbers[<span class="number">1</span>:<span class="number">4</span>])  <span class="comment"># [1, 2, 3]（左闭右开）</span></span><br><span class="line"><span class="built_in">print</span>(numbers[:<span class="number">3</span>])   <span class="comment"># [0, 1, 2]</span></span><br><span class="line"><span class="built_in">print</span>(numbers[<span class="number">2</span>:])   <span class="comment"># [2, 3, 4, 5]</span></span><br><span class="line"><span class="built_in">print</span>(numbers[::<span class="number">2</span>])  <span class="comment"># [0, 2, 4]（步长为2）</span></span><br><span class="line"><span class="built_in">print</span>(numbers[::-<span class="number">1</span>]) <span class="comment"># [5, 4, 3, 2, 1, 0]（反转）</span></span><br></pre></td></tr></table></figure><h3 id="3-修改列表"><a href="#3-修改列表" class="headerlink" title="3. 修改列表"></a>3. 修改列表</h3><h4 id="更新元素"><a href="#更新元素" class="headerlink" title="更新元素"></a>更新元素</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fruits = [<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;cherry&quot;</span>]</span><br><span class="line">fruits[<span class="number">1</span>] = <span class="string">&quot;blueberry&quot;</span>  <span class="comment"># 直接通过索引修改</span></span><br></pre></td></tr></table></figure><p>极高的效率</p><h4 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 末尾添加</span></span><br><span class="line">fruits.append(<span class="string">&quot;orange&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定位置插入</span></span><br><span class="line">fruits.insert(<span class="number">1</span>, <span class="string">&quot;mango&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 合并列表</span></span><br><span class="line">fruits.extend([<span class="string">&quot;grape&quot;</span>, <span class="string">&quot;pear&quot;</span>])</span><br><span class="line"><span class="comment"># 等价于 fruits += [&quot;grape&quot;, &quot;pear&quot;]</span></span><br></pre></td></tr></table></figure><h4 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 按索引删除</span></span><br><span class="line"><span class="keyword">del</span> fruits[<span class="number">0</span>]</span><br><span class="line">popped = fruits.pop(<span class="number">1</span>)  <span class="comment"># 删除并返回被删元素</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 按值删除</span></span><br><span class="line">fruits.remove(<span class="string">&quot;cherry&quot;</span>)  <span class="comment"># 只删除第一个匹配项</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 清空列表</span></span><br><span class="line">fruits.clear()</span><br></pre></td></tr></table></figure><h3 id="4-列表运算符"><a href="#4-列表运算符" class="headerlink" title="4. 列表运算符"></a>4. 列表运算符</h3><p>又称为Python列表脚本操作符 ︿(￣︶￣)︿</p><table><thead><tr><th>运算符</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td><code>+</code></td><td>列表拼接</td><td><code>[1,2] + [3,4]</code> → <code>[1,2,3,4]</code></td></tr><tr><td><code>*</code></td><td>重复列表</td><td><code>[0]*3</code> → <code>[0,0,0]</code></td></tr><tr><td><code>in</code></td><td>成员检测</td><td><code>2 in [1,2,3]</code> → <code>True</code></td></tr><tr><td><code>==</code></td><td>列表比较</td><td><code>[1,2] == [1,2]</code> → <code>True</code></td></tr></tbody></table><h3 id="5-常用列表方法"><a href="#5-常用列表方法" class="headerlink" title="5. 常用列表方法"></a>5. 常用列表方法</h3><table><thead><tr><th>方法</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td><code>len()</code></td><td>返回列表长度</td><td><code>len([1,2,3])</code> → <code>3</code></td></tr><tr><td><code>sort()</code></td><td>原地排序</td><td><code>[3,1,2].sort()</code> → <code>[1,2,3]</code></td></tr><tr><td><code>reverse()</code></td><td>反转列表</td><td><code>[1,2,3].reverse()</code> → <code>[3,2,1]</code></td></tr><tr><td><code>count()</code></td><td>统计元素出现次数</td><td><code>[1,2,2].count(2)</code> → <code>2</code></td></tr><tr><td><code>index()</code></td><td>返回元素首次出现的索引</td><td><code>[&quot;a&quot;,&quot;b&quot;].index(&quot;b&quot;)</code> → <code>1</code></td></tr><tr><td><code>copy()</code></td><td>浅拷贝列表</td><td><code>new = old.copy()</code></td></tr></tbody></table><h3 id="6-列表推导式"><a href="#6-列表推导式" class="headerlink" title="6. 列表推导式"></a>6. 列表推导式</h3><p>简洁创建列表的方式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建平方数列表</span></span><br><span class="line">squares = [x**<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>)]  <span class="comment"># [0, 1, 4, 9, 16]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 带条件的推导式</span></span><br><span class="line">evens = [x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>) <span class="keyword">if</span> x%<span class="number">2</span>==<span class="number">0</span>]  <span class="comment"># [0, 2, 4, 6, 8]</span></span><br></pre></td></tr></table></figure><p>劲啊，我感觉到了算法题深深的恶意 ╥﹏╥</p><h3 id="7-注意事项"><a href="#7-注意事项" class="headerlink" title="7. 注意事项"></a>7. 注意事项</h3><ol><li><p><strong>可变性</strong>：列表可变，函数可能修改原始列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">modify</span>(<span class="params">lst</span>):</span><br><span class="line">    lst.append(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">my_list = []</span><br><span class="line">modify(my_list)  <span class="comment"># my_list会被修改</span></span><br></pre></td></tr></table></figure></li><li><p><strong>浅拷贝问题</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">original = [[<span class="number">1</span>,<span class="number">2</span>], [<span class="number">3</span>,<span class="number">4</span>]]</span><br><span class="line">copied = original.copy()</span><br><span class="line">copied[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">99</span>  <span class="comment"># 也会修改original!</span></span><br></pre></td></tr></table></figure></li><li><p><strong>性能考虑</strong>：</p><ul><li><code>append()</code>&#x2F;<code>pop()</code>是O(1)操作</li><li><code>insert(0, x)</code>&#x2F;<code>remove()</code>是O(n)操作</li></ul></li><li><p><strong>内存效率</strong>：</p><ul><li>列表比元组占用更多内存</li><li>大数据集考虑使用生成器或NumPy数组</li></ul></li></ol><h2 id="8-实用技巧（你猜为什么变成二级索引）"><a href="#8-实用技巧（你猜为什么变成二级索引）" class="headerlink" title="8. 实用技巧（你猜为什么变成二级索引）"></a>8. 实用技巧（你猜为什么变成二级索引）</h2><p>直接复制版用吧，这个真的很有用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 同时遍历索引和值</span></span><br><span class="line"><span class="keyword">for</span> index, value <span class="keyword">in</span> <span class="built_in">enumerate</span>([<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>]):</span><br><span class="line">    <span class="built_in">print</span>(index, value)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 合并成字符串</span></span><br><span class="line">words = [<span class="string">&quot;Hello&quot;</span>, <span class="string">&quot;world&quot;</span>]</span><br><span class="line">sentence = <span class="string">&quot; &quot;</span>.join(words)  <span class="comment"># &quot;Hello world&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 快速去重（保持顺序）</span></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> OrderedDict</span><br><span class="line">unique = <span class="built_in">list</span>(OrderedDict.fromkeys([<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>]))  <span class="comment"># [1,2,3]</span></span><br></pre></td></tr></table></figure><p>列表是Python中最常用的数据结构之一，掌握这些操作可以大大提高编码效率！</p><p>马上到元组了，呼呼，快结束了捏</p><h2 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h2><p><a href="https://www.runoob.com/python3/python3-tuple.html">吾乃懒汉，讲解在这里了，速速收下</a></p><p>Python 的元组与列表类似，不同之处在于<strong>元组的元素不能修改</strong>。<br><strong>元组使用小括号 ( )，列表使用方括号 [ ]。</strong><br>元组创建很简单，只需要在括号中添加元素，并使用逗号隔开即可。<br>不信你看嘛╭(╯^╰)╮</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>tup1 = (<span class="string">&#x27;Google&#x27;</span>, <span class="string">&#x27;Runoob&#x27;</span>, <span class="number">1997</span>, <span class="number">2000</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tup2 = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> )</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tup3 = <span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;d&quot;</span>   <span class="comment">#  不需要括号也可以</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">type</span>(tup3)</span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;tuple&#x27;</span>&gt;</span><br></pre></td></tr></table></figure><h2 id="Python3-元组完全指南"><a href="#Python3-元组完全指南" class="headerlink" title="Python3 元组完全指南"></a>Python3 元组完全指南</h2><h3 id="1-元组基础"><a href="#1-元组基础" class="headerlink" title="1. 元组基础"></a>1. 元组基础</h3><p>元组是Python的不可变序列，用圆括号<code>()</code>表示，元素用逗号分隔。</p><h4 id="创建元组"><a href="#创建元组" class="headerlink" title="创建元组"></a>创建元组</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 空元组</span></span><br><span class="line">empty_tuple = ()</span><br><span class="line"></span><br><span class="line"><span class="comment">## 单元素元组（必须加逗号）</span></span><br><span class="line">single = (<span class="number">50</span>,)  <span class="comment"># 注意逗号</span></span><br><span class="line">not_tuple = (<span class="number">50</span>)  <span class="comment"># 这是整数，不是元组！</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 多元素元组</span></span><br><span class="line">tup1 = (<span class="string">&#x27;Google&#x27;</span>, <span class="string">&#x27;Runoob&#x27;</span>, <span class="number">1997</span>, <span class="number">2000</span>)</span><br><span class="line">tup2 = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">## 省略括号创建</span></span><br><span class="line">tup3 = <span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>  <span class="comment"># 自动识别为元组</span></span><br></pre></td></tr></table></figure><p><strong>特点</strong>：</p><ul><li><strong>不可变性</strong>（创建后不能修改） 这……肯定有他的优势</li><li><strong>有序集合</strong>（元素有固定位置） 这不显得你好找吗</li><li>可包含任意数据类型</li><li>比列表更节省内存，看见没，用户的内存又不是我的内存</li></ul><h3 id="2-访问元组元素"><a href="#2-访问元组元素" class="headerlink" title="2. 访问元组元素"></a>2. 访问元组元素</h3><p>看着用吧(〃’▽’〃)</p><h4 id="索引访问-2"><a href="#索引访问-2" class="headerlink" title="索引访问"></a>索引访问</h4><p>元组可以使用下标索引来访问元组中的值，如下实例:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tup = (<span class="string">&#x27;Google&#x27;</span>, <span class="string">&#x27;Runoob&#x27;</span>, <span class="string">&#x27;Taobao&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(tup[<span class="number">0</span>])   <span class="comment"># &#x27;Google&#x27;（正向索引从0开始）</span></span><br><span class="line"><span class="built_in">print</span>(tup[-<span class="number">1</span>])  <span class="comment"># &#x27;Taobao&#x27;（负索引从-1开始）</span></span><br></pre></td></tr></table></figure><h4 id="切片操作-1"><a href="#切片操作-1" class="headerlink" title="切片操作"></a>切片操作</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">numbers = (<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(numbers[<span class="number">1</span>:<span class="number">4</span>])  <span class="comment"># (1, 2, 3)（左闭右开）</span></span><br><span class="line"><span class="built_in">print</span>(numbers[:<span class="number">3</span>])   <span class="comment"># (0, 1, 2)</span></span><br><span class="line"><span class="built_in">print</span>(numbers[::<span class="number">2</span>])  <span class="comment"># (0, 2, 4)（步长为2）</span></span><br></pre></td></tr></table></figure><h3 id="3-元组操作"><a href="#3-元组操作" class="headerlink" title="3. 元组操作"></a>3. 元组操作</h3><p>元组中的元素值是不允许修改的，但我们可以对元组进行连接组合，如下实例:</p><h4 id="元组拼接"><a href="#元组拼接" class="headerlink" title="元组拼接"></a>元组拼接</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tup1 = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">tup2 = (<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">combined = tup1 + tup2  <span class="comment"># (1, 2, 3, &#x27;a&#x27;, &#x27;b&#x27;)</span></span><br></pre></td></tr></table></figure><h4 id="元组重复"><a href="#元组重复" class="headerlink" title="元组重复"></a>元组重复</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tup = (<span class="string">&#x27;Hi!&#x27;</span>,) * <span class="number">3</span>  <span class="comment"># (&#x27;Hi!&#x27;, &#x27;Hi!&#x27;, &#x27;Hi!&#x27;)</span></span><br></pre></td></tr></table></figure><p>h和那个啥差不多，别用错了啊</p><h4 id="成员检测"><a href="#成员检测" class="headerlink" title="成员检测"></a>成员检测</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="number">3</span> <span class="keyword">in</span> (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>))  <span class="comment"># True</span></span><br></pre></td></tr></table></figure><h3 id="4-元组不可变性"><a href="#4-元组不可变性" class="headerlink" title="4. 元组不可变性"></a>4. 元组不可变性</h3><h4 id="无法修改元素"><a href="#无法修改元素" class="headerlink" title="无法修改元素"></a>无法修改元素</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tup = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="comment"># tup[0] = 4  # 报错！TypeError</span></span><br></pre></td></tr></table></figure><h4 id="重新赋值"><a href="#重新赋值" class="headerlink" title="重新赋值"></a>重新赋值</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tup = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(tup))  <span class="comment"># 内存地址1</span></span><br><span class="line">tup = (<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)  <span class="comment"># 创建新元组</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(tup))  <span class="comment"># 新内存地址</span></span><br></pre></td></tr></table></figure><h3 id="5-元组内置函数"><a href="#5-元组内置函数" class="headerlink" title="5. 元组内置函数"></a>5. 元组内置函数</h3><table><thead><tr><th>函数</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td><code>len()</code></td><td>返回元组长度</td><td><code>len((1,2,3))</code> → <code>3</code></td></tr><tr><td><code>max()</code></td><td>返回最大值</td><td><code>max((1,3,2))</code> → <code>3</code></td></tr><tr><td><code>min()</code></td><td>返回最小值</td><td><code>min((1,3,2))</code> → <code>1</code></td></tr><tr><td><code>tuple()</code></td><td>将可迭代对象转为元组</td><td><code>tuple([1,2,3])</code> → <code>(1,2,3)</code></td></tr></tbody></table><h3 id="6-元组解包"><a href="#6-元组解包" class="headerlink" title="6. 元组解包"></a>6. 元组解包</h3><h3 id="基本解包"><a href="#基本解包" class="headerlink" title="基本解包"></a>基本解包</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tup = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">a, b, c = tup  <span class="comment"># a=1, b=2, c=3</span></span><br></pre></td></tr></table></figure><p>一一对应</p><h4 id="星号解包"><a href="#星号解包" class="headerlink" title="星号解包"></a>星号解包</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">first, *middle, last = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line"><span class="comment"># first=1, middle=[2,3,4], last=5</span></span><br></pre></td></tr></table></figure><h3 id="7-元组与列表对比"><a href="#7-元组与列表对比" class="headerlink" title="7. 元组与列表对比"></a>7. 元组与列表对比</h3><table><thead><tr><th>特性</th><th>元组</th><th>列表</th></tr></thead><tbody><tr><td>可变性</td><td>不可变</td><td>可变</td></tr><tr><td>语法</td><td><code>()</code></td><td><code>[]</code></td></tr><tr><td>内存占用</td><td>较小</td><td>较大</td></tr><tr><td>方法</td><td>较少</td><td>丰富</td></tr><tr><td>适用场景</td><td>数据保护&#x2F;字典键&#x2F;函数返回值</td><td>需要频繁修改的数据集合</td></tr></tbody></table><h3 id="8-使用场景"><a href="#8-使用场景" class="headerlink" title="8. 使用场景"></a>8. 使用场景</h3><h3 id="适合使用元组的情况"><a href="#适合使用元组的情况" class="headerlink" title="适合使用元组的情况"></a><strong>适合使用元组的情况</strong></h3><ol><li><p><strong>字典键</strong>（因为不可变）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dict_with_tuple = &#123;(<span class="number">1</span>,<span class="number">2</span>): <span class="string">&quot;value&quot;</span>&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>函数多返回值</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_stats</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>  <span class="comment"># 自动打包为元组</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">min</span>, <span class="built_in">max</span>, avg = get_stats()  <span class="comment"># 解包</span></span><br></pre></td></tr></table></figure></li><li><p><strong>保护数据不被修改</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CONSTANTS = (<span class="number">3.14</span>, <span class="number">2.718</span>)  <span class="comment"># 确保不会被意外修改</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="9-性能比较"><a href="#9-性能比较" class="headerlink" title="9. 性能比较"></a>9. 性能比较</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> timeit</span><br><span class="line"></span><br><span class="line">lst = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">tup = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(sys.getsizeof(lst))  <span class="comment"># 通常比元组大</span></span><br><span class="line"><span class="built_in">print</span>(sys.getsizeof(tup))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建速度测试</span></span><br><span class="line"><span class="built_in">print</span>(timeit.timeit(<span class="string">&#x27;(1,2,3)&#x27;</span>))  <span class="comment"># 通常比列表快</span></span><br><span class="line"><span class="built_in">print</span>(timeit.timeit(<span class="string">&#x27;[1,2,3]&#x27;</span>))</span><br></pre></td></tr></table></figure><h2 id="10-实用技巧"><a href="#10-实用技巧" class="headerlink" title="10. 实用技巧"></a>10. 实用技巧</h2><h3 id="元组与字符串转换"><a href="#元组与字符串转换" class="headerlink" title="元组与字符串转换"></a>元组与字符串转换</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chars = <span class="built_in">tuple</span>(<span class="string">&quot;Hello&quot;</span>)  <span class="comment"># (&#x27;H&#x27;, &#x27;e&#x27;, &#x27;l&#x27;, &#x27;l&#x27;, &#x27;o&#x27;)</span></span><br><span class="line">joined = <span class="string">&#x27;&#x27;</span>.join(chars)  <span class="comment"># &#x27;Hello&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="命名元组（更高级用法）"><a href="#命名元组（更高级用法）" class="headerlink" title="命名元组（更高级用法）"></a>命名元组（更高级用法）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> namedtuple</span><br><span class="line">Point = namedtuple(<span class="string">&#x27;Point&#x27;</span>, [<span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;y&#x27;</span>])</span><br><span class="line">p = Point(<span class="number">11</span>, y=<span class="number">22</span>)  <span class="comment"># p.x = 11, p.y = 22</span></span><br></pre></td></tr></table></figure><p>元组虽然简单，但在Python编程中非常重要，特别是在需要保证数据不被修改的场景下非常有用！</p><h2 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h2><p>哈哈哈，文章太长了，颜色都没有了（指的是makedown编辑器）<br>字典是另一种可变容器模型，且可存储任意类型对象。</p><p>字典的每个键值<code>key=&gt;value</code>对用冒号 : 分割，每个对之间用逗号(,)分割，整个字典包括在花括号<code>&#123;&#125;</code>中 ,格式如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;key1 : value1, key2 : value2, key3 : value3 &#125;</span><br></pre></td></tr></table></figure><p><a href="https://www.runoob.com/python3/python3-dictionary.html">看这里看这里，直接跳权威指南学习</a></p><h2 id="Python3-字典完全指南"><a href="#Python3-字典完全指南" class="headerlink" title="Python3 字典完全指南"></a>Python3 字典完全指南</h2><h3 id="1-字典基础"><a href="#1-字典基础" class="headerlink" title="1. 字典基础"></a>1. 字典基础</h3><p>字典是Python中的键值对集合，用花括号<code>&#123;&#125;</code>表示，键值对用冒号<code>:</code>分隔。</p><h3 id="创建字典"><a href="#创建字典" class="headerlink" title="创建字典"></a>创建字典</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 空字典</span></span><br><span class="line">empty_dict = &#123;&#125;</span><br><span class="line">empty_dict = <span class="built_in">dict</span>()  <span class="comment"># 等效写法</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 带初始值的字典</span></span><br><span class="line">person = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Alice&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">25</span>, <span class="string">&#x27;city&#x27;</span>: <span class="string">&#x27;New York&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用dict()构造函数</span></span><br><span class="line">person = <span class="built_in">dict</span>(name=<span class="string">&#x27;Bob&#x27;</span>, age=<span class="number">30</span>)  <span class="comment"># 键不用引号</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 混合类型键值</span></span><br><span class="line">mixed_dict = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Alice&#x27;</span>, <span class="number">1</span>: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], (<span class="number">1</span>,<span class="number">2</span>): <span class="string">&#x27;tuple key&#x27;</span>&#125;</span><br></pre></td></tr></table></figure><p><strong>特点</strong>：</p><ul><li><strong>键必须是不可变类型（字符串&#x2F;数字&#x2F;元组）</strong>WARING</li><li><strong>值可以是任意类型</strong></li><li><strong>键唯一，重复键会覆盖前值</strong> 注意覆盖关系，类似结构体在内存中的关系</li><li>Python 3.7+ 保持插入顺序</li></ul><h3 id="2-访问字典元素（记住上面创建字典的初值）"><a href="#2-访问字典元素（记住上面创建字典的初值）" class="headerlink" title="2. 访问字典元素（记住上面创建字典的初值）"></a>2. 访问字典元素（记住上面创建字典的初值）</h3><h3 id="基本访问"><a href="#基本访问" class="headerlink" title="基本访问"></a>基本访问</h3><p>把相应的键放入到方括号中j即可访问，不存在的键会报错</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(person[<span class="string">&#x27;name&#x27;</span>])  <span class="comment"># &#x27;Alice&#x27;</span></span><br><span class="line"><span class="comment"># print(person[&#x27;job&#x27;])  # KeyError，键不存在会报错</span></span><br></pre></td></tr></table></figure><h4 id="安全访问方法"><a href="#安全访问方法" class="headerlink" title="安全访问方法"></a>安全访问方法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># get()方法</span></span><br><span class="line"><span class="built_in">print</span>(person.get(<span class="string">&#x27;name&#x27;</span>))     <span class="comment"># &#x27;Alice&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(person.get(<span class="string">&#x27;job&#x27;</span>))      <span class="comment"># None（不报错）</span></span><br><span class="line"><span class="built_in">print</span>(person.get(<span class="string">&#x27;job&#x27;</span>, <span class="string">&#x27;N/A&#x27;</span>))  <span class="comment"># &#x27;N/A&#x27;（指定默认值）</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># setdefault()方法</span></span><br><span class="line">person.setdefault(<span class="string">&#x27;job&#x27;</span>, <span class="string">&#x27;Engineer&#x27;</span>)  <span class="comment"># 不存在则添加</span></span><br></pre></td></tr></table></figure><h3 id="3-修改字典"><a href="#3-修改字典" class="headerlink" title="3. 修改字典"></a>3. 修改字典</h3><p>向字典添加新内容的方法是增加新的键&#x2F;值对，修改或删除已有键&#x2F;值对</p><h4 id="添加-更新元素"><a href="#添加-更新元素" class="headerlink" title="添加&#x2F;更新元素"></a>添加&#x2F;更新元素</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">person[<span class="string">&#x27;age&#x27;</span>] = <span class="number">26</span>  <span class="comment"># 更新已有键</span></span><br><span class="line">person[<span class="string">&#x27;job&#x27;</span>] = <span class="string">&#x27;Engineer&#x27;</span>  <span class="comment"># 添加新键</span></span><br></pre></td></tr></table></figure><h4 id="合并字典"><a href="#合并字典" class="headerlink" title="合并字典"></a>合并字典</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># update()方法</span></span><br><span class="line">extra_info = &#123;<span class="string">&#x27;hobby&#x27;</span>: <span class="string">&#x27;reading&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">27</span>&#125;</span><br><span class="line">person.update(extra_info)  <span class="comment"># age被更新，hobby被添加</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Python 3.9+ 合并运算符</span></span><br><span class="line">new_person = person | extra_info  <span class="comment"># 创建新字典</span></span><br></pre></td></tr></table></figure><h3 id="4-删除元素"><a href="#4-删除元素" class="headerlink" title="4. 删除元素"></a>4. 删除元素</h3><p>能删单一的元素也能清空字典，清空只需一项操作。</p><h4 id="各种删除方法"><a href="#各种删除方法" class="headerlink" title="各种删除方法"></a>各种删除方法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># del语句</span></span><br><span class="line"><span class="keyword">del</span> person[<span class="string">&#x27;city&#x27;</span>]  <span class="comment"># 删除指定键</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># pop()方法</span></span><br><span class="line">age = person.pop(<span class="string">&#x27;age&#x27;</span>)  <span class="comment"># 删除并返回值</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># popitem()方法（Python 3.7+按LIFO顺序）</span></span><br><span class="line">key, value = person.popitem()  <span class="comment"># 删除最后一项</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># clear()方法</span></span><br><span class="line">person.clear()  <span class="comment"># 清空字典</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># del删除整个字典</span></span><br><span class="line"><span class="keyword">del</span> person  <span class="comment"># 字典对象被删除</span></span><br></pre></td></tr></table></figure><h3 id="5-字典视图对象"><a href="#5-字典视图对象" class="headerlink" title="5. 字典视图对象"></a>5. 字典视图对象</h3><h4 id="三种视图方法"><a href="#三种视图方法" class="headerlink" title="三种视图方法"></a>三种视图方法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">person = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Alice&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">25</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># keys() - 键视图</span></span><br><span class="line"><span class="built_in">print</span>(person.keys())    <span class="comment"># dict_keys([&#x27;name&#x27;, &#x27;age&#x27;])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># values() - 值视图</span></span><br><span class="line"><span class="built_in">print</span>(person.values())  <span class="comment"># dict_values([&#x27;Alice&#x27;, 25])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># items() - 键值对视图</span></span><br><span class="line"><span class="built_in">print</span>(person.items())   <span class="comment"># dict_items([(&#x27;name&#x27;, &#x27;Alice&#x27;), (&#x27;age&#x27;, 25)])</span></span><br></pre></td></tr></table></figure><p><strong>视图特性</strong>：</p><ul><li>动态反映字典变化</li><li>可迭代</li><li>支持集合操作（Python 3+）</li></ul><h3 id="6-字典推导式"><a href="#6-字典推导式" class="headerlink" title="6. 字典推导式"></a>6. 字典推导式</h3><h4 id="创建字典的简洁方式"><a href="#创建字典的简洁方式" class="headerlink" title="创建字典的简洁方式"></a>创建字典的简洁方式</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 基本形式</span></span><br><span class="line">squares = &#123;x: x**<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>)&#125;  <span class="comment"># &#123;0:0, 1:1, 2:4, 3:9, 4:16&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 带条件的推导式</span></span><br><span class="line">even_squares = &#123;x: x**<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>) <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">0</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 键值转换</span></span><br><span class="line">person = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;alice&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="string">&#x27;25&#x27;</span>&#125;</span><br><span class="line">upper_person = &#123;k.upper(): v <span class="keyword">for</span> k, v <span class="keyword">in</span> person.items()&#125;</span><br></pre></td></tr></table></figure><h3 id="7-常用字典方法"><a href="#7-常用字典方法" class="headerlink" title="7. 常用字典方法"></a>7. 常用字典方法</h3><table><thead><tr><th>方法</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td><code>len()</code></td><td>返回键值对数量</td><td><code>len(person)</code> → <code>3</code></td></tr><tr><td><code>copy()</code></td><td>浅拷贝</td><td><code>new = person.copy()</code></td></tr><tr><td><code>fromkeys()</code></td><td>用序列创建新字典</td><td><code>dict.fromkeys([&#39;a&#39;,&#39;b&#39;], 0)</code> → <code>&#123;&#39;a&#39;:0, &#39;b&#39;:0&#125;</code></td></tr><tr><td><code>in</code></td><td>检查键是否存在</td><td><code>&#39;name&#39; in person</code> → <code>True</code></td></tr><tr><td><code>reversed()</code></td><td>反向迭代键(Python 3.8+)</td><td><code>list(reversed(person))</code></td></tr></tbody></table><h3 id="8-字典与JSON转换"><a href="#8-字典与JSON转换" class="headerlink" title="8. 字典与JSON转换"></a>8. 字典与JSON转换</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="comment"># 字典转JSON字符串</span></span><br><span class="line">person_json = json.dumps(person)  <span class="comment"># &#x27;&#123;&quot;name&quot;: &quot;Alice&quot;, &quot;age&quot;: 25&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># JSON字符串转字典</span></span><br><span class="line">person_dict = json.loads(person_json)</span><br></pre></td></tr></table></figure><h3 id="9-高级技巧"><a href="#9-高级技巧" class="headerlink" title="9. 高级技巧"></a>9. 高级技巧</h3><h4 id="默认字典"><a href="#默认字典" class="headerlink" title="默认字典"></a>默认字典</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自动初始化不存在的键</span></span><br><span class="line">word_count = defaultdict(<span class="built_in">int</span>)  <span class="comment"># 默认值0</span></span><br><span class="line"><span class="keyword">for</span> word <span class="keyword">in</span> words:</span><br><span class="line">    word_count[word] += <span class="number">1</span></span><br></pre></td></tr></table></figure><h4 id="有序字典"><a href="#有序字典" class="headerlink" title="有序字典"></a>有序字典</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> OrderedDict</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保持插入顺序（Python 3.7+普通字典已有序）</span></span><br><span class="line">ordered = OrderedDict([(<span class="string">&#x27;a&#x27;</span>, <span class="number">1</span>), (<span class="string">&#x27;b&#x27;</span>, <span class="number">2</span>)])</span><br></pre></td></tr></table></figure><h4 id="合并多个字典"><a href="#合并多个字典" class="headerlink" title="合并多个字典"></a>合并多个字典</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Python 3.5+</span></span><br><span class="line">combined = &#123;**dict1, **dict2, **dict3&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Python 3.9+</span></span><br><span class="line">combined = dict1 | dict2 | dict3</span><br></pre></td></tr></table></figure><h3 id="10-性能与内存"><a href="#10-性能与内存" class="headerlink" title="10. 性能与内存"></a>10. 性能与内存</h3><ul><li><strong>查找速度</strong>：O(1)时间复杂度</li><li><strong>内存占用</strong>：比列表更大</li><li><strong>键哈希</strong>：键必须是可哈希对象（不可变类型）</li></ul><h3 id="11-常见错误与解决"><a href="#11-常见错误与解决" class="headerlink" title="11. 常见错误与解决"></a>11. 常见错误与解决</h3><ol><li><p><strong>KeyError异常</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 错误方式</span></span><br><span class="line">value = my_dict[<span class="string">&#x27;nonexistent_key&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 正确方式</span></span><br><span class="line">value = my_dict.get(<span class="string">&#x27;nonexistent_key&#x27;</span>, default_value)</span><br></pre></td></tr></table></figure></li><li><p><strong>可变对象作为键</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 错误：列表不可哈希</span></span><br><span class="line">bad_dict = &#123;[<span class="string">&#x27;a&#x27;</span>]: <span class="number">1</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 正确：使用元组</span></span><br><span class="line">good_dict = &#123;(<span class="string">&#x27;a&#x27;</span>,): <span class="number">1</span>&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>字典比较顺序</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Python 3.7+ 字典比较顺序敏感</span></span><br><span class="line">&#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>&#125; == &#123;<span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>, <span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>&#125;  <span class="comment"># False（Python 3.6及之前可能为True）</span></span><br></pre></td></tr></table></figure></li></ol><p>字典是Python中最重要和高效的数据结构之一，掌握这些技巧可以大幅提升编程效率！</p><p>马上结束了，呜呜(Ｔ▽Ｔ)</p><h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><p><strong>集合</strong>是一个<strong>无序的不重复元素序列</strong>。<br>集合中的<strong>元素不会重复</strong>，并且可以进行<strong>交集、并集、差集</strong>等常见的集合操作。<br>可以使用大括号<code>&#123; &#125;</code>创建集合，元素之间用逗号<code>,</code>分隔， 或者也可以使用<code>set()</code>函数创建集合。</p><p><a href="https://www.runoob.com/python3/python3-set.html">点这个，带你看集合指南</a></p><h2 id="Python3-集合完全指南"><a href="#Python3-集合完全指南" class="headerlink" title="Python3 集合完全指南"></a>Python3 集合完全指南</h2><h3 id="1-集合基础"><a href="#1-集合基础" class="headerlink" title="1. 集合基础"></a>1. 集合基础</h3><p>集合是Python中的无序不重复元素集，用花括号<code>&#123;&#125;</code>表示（空集合必须用<code>set()</code>创建）。</p><h3 id="创建集合"><a href="#创建集合" class="headerlink" title="创建集合"></a>创建集合</h3><p>注意：创建一个空集合必须用 set() 而不是 { }，因为 { } 是用来创建一个空字典。里面有初始值那你随意</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 空集合</span></span><br><span class="line">empty_set = <span class="built_in">set</span>()  <span class="comment"># 注意：&#123;&#125; 创建的是空字典</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 带初始值的集合</span></span><br><span class="line">fruits = &#123;<span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;orange&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>&#125;</span><br><span class="line">numbers = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从其他序列创建</span></span><br><span class="line">letters = <span class="built_in">set</span>(<span class="string">&#x27;abracadabra&#x27;</span>)  <span class="comment"># &#123;&#x27;a&#x27;, &#x27;b&#x27;, &#x27;r&#x27;, &#x27;c&#x27;, &#x27;d&#x27;&#125;</span></span><br></pre></td></tr></table></figure><p><strong>特点</strong>：</p><ul><li>元素唯一（自动去重）</li><li>无序（不记录插入顺序）</li><li>可包含不可变类型（数字&#x2F;字符串&#x2F;元组）</li><li>可变（可增删元素）</li></ul><p>到这里我已经很累了</p><h3 id="2-基本操作"><a href="#2-基本操作" class="headerlink" title="2. 基本操作"></a>2. 基本操作</h3><h4 id="添加元素-1"><a href="#添加元素-1" class="headerlink" title="添加元素"></a>添加元素</h4><p>语法格式如下：</p><blockquote><p>s.add( x )<br>s.update( x )#参数可以是列表，元组，字典等</p></blockquote><p>将元素添加到集合中，如果元素已存在，则不进行任何操作。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">fruits = &#123;<span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>&#125;<span class="comment">#原有集合</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加单个元素</span></span><br><span class="line">fruits.add(<span class="string">&#x27;orange&#x27;</span>)  <span class="comment"># &#123;&#x27;apple&#x27;, &#x27;banana&#x27;, &#x27;orange&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加多个元素</span></span><br><span class="line">fruits.update([<span class="string">&#x27;kiwi&#x27;</span>, <span class="string">&#x27;mango&#x27;</span>])  <span class="comment"># 可接受任何可迭代对象</span></span><br></pre></td></tr></table></figure><h4 id="移除元素"><a href="#移除元素" class="headerlink" title="移除元素"></a>移除元素</h4><blockquote><p>s.remove( x )<br>s.discard( x )<br>s.pop() </p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安全移除（元素不存在不报错）</span></span><br><span class="line">fruits.discard(<span class="string">&#x27;apple&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 强制移除（元素不存在报KeyError）</span></span><br><span class="line">fruits.remove(<span class="string">&#x27;banana&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 随机移除并返回</span></span><br><span class="line">random_fruit = fruits.pop()  <span class="comment"># 集合为空时报KeyError</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 清空集合</span></span><br><span class="line">fruits.clear()  <span class="comment"># set()</span></span><br></pre></td></tr></table></figure><h3 id="3-集合运算"><a href="#3-集合运算" class="headerlink" title="3. 集合运算"></a>3. 集合运算</h3><p>要知道一件事，那就是在表格中看你不见的一般是<code>|</code>，这玩意会变成表格边边</p><h4 id="基本运算"><a href="#基本运算" class="headerlink" title="基本运算"></a>基本运算</h4><table><thead><tr><th>运算符&#x2F;方法</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td>&#96;</td><td><code>或</code>union()&#96;</td><td>并集</td></tr><tr><td><code>&amp;</code> 或 <code>intersection()</code></td><td>交集</td><td><code>a &amp; b</code></td></tr><tr><td><code>-</code> 或 <code>difference()</code></td><td>差集</td><td><code>a - b</code></td></tr><tr><td><code>^</code> 或 <code>symmetric_difference()</code></td><td>对称差集（仅出现在一个集合中的元素）</td><td><code>a ^ b</code></td></tr></tbody></table><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">b = &#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a | b)  <span class="comment"># &#123;1, 2, 3, 4&#125;</span></span><br><span class="line"><span class="built_in">print</span>(a &amp; b)  <span class="comment"># &#123;2, 3&#125;</span></span><br><span class="line"><span class="built_in">print</span>(a - b)  <span class="comment"># &#123;1&#125;</span></span><br><span class="line"><span class="built_in">print</span>(a ^ b)  <span class="comment"># &#123;1, 4&#125;</span></span><br></pre></td></tr></table></figure><h3 id="4-集合关系判断"><a href="#4-集合关系判断" class="headerlink" title="4. 集合关系判断"></a>4. 集合关系判断</h3><table><thead><tr><th>方法</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td><code>issubset()</code> 或 <code>&lt;=</code></td><td>判断子集</td><td><code>a.issubset(b)</code></td></tr><tr><td><code>issuperset()</code> 或 <code>&gt;=</code></td><td>判断超集</td><td><code>a.issuperset(b)</code></td></tr><tr><td><code>isdisjoint()</code></td><td>判断无交集</td><td><code>a.isdisjoint(b)</code></td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = &#123;<span class="number">1</span>, <span class="number">2</span>&#125;</span><br><span class="line">b = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a &lt;= b)  <span class="comment"># True (a是b的子集)</span></span><br><span class="line"><span class="built_in">print</span>(b &gt;= a)  <span class="comment"># True (b是a的超集)</span></span><br><span class="line"><span class="built_in">print</span>(a.isdisjoint(&#123;<span class="number">4</span>,<span class="number">5</span>&#125;))  <span class="comment"># True (无交集)</span></span><br></pre></td></tr></table></figure><h3 id="5-集合推导式"><a href="#5-集合推导式" class="headerlink" title="5. 集合推导式"></a>5. 集合推导式</h3><p>类似列表推导式，生成集合：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成字符集合（自动去重）</span></span><br><span class="line">letters = &#123;char <span class="keyword">for</span> char <span class="keyword">in</span> <span class="string">&#x27;abracadabra&#x27;</span>&#125;  <span class="comment"># &#123;&#x27;a&#x27;, &#x27;b&#x27;, &#x27;r&#x27;, &#x27;c&#x27;, &#x27;d&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 带条件的推导式</span></span><br><span class="line">squares = &#123;x**<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>) <span class="keyword">if</span> x%<span class="number">2</span>==<span class="number">0</span>&#125;  <span class="comment"># &#123;0, 4, 16, 36, 64&#125;</span></span><br></pre></td></tr></table></figure><h3 id="6-不可变集合（frozenset）"><a href="#6-不可变集合（frozenset）" class="headerlink" title="6. 不可变集合（frozenset）"></a>6. 不可变集合（frozenset）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建不可变集合</span></span><br><span class="line">immutable = <span class="built_in">frozenset</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 特性：</span></span><br><span class="line"><span class="comment"># - 不能增删元素</span></span><br><span class="line"><span class="comment"># - 可哈希（可用作字典键）</span></span><br><span class="line"><span class="comment"># - 支持集合运算</span></span><br></pre></td></tr></table></figure><h3 id="7-常用方法速查"><a href="#7-常用方法速查" class="headerlink" title="7. 常用方法速查"></a>7. 常用方法速查</h3><table><thead><tr><th>方法</th><th>描述</th><th>时间复杂度</th></tr></thead><tbody><tr><td><code>len(s)</code></td><td>返回元素个数</td><td>O(1)</td></tr><tr><td><code>x in s</code></td><td>成员检测</td><td>O(1)</td></tr><tr><td><code>copy()</code></td><td>浅拷贝</td><td>O(n)</td></tr><tr><td><code>difference_update()</code></td><td>原地差集操作</td><td>O(len(b))</td></tr><tr><td><code>intersection_update()</code></td><td>原地交集操作</td><td>O(len(b))</td></tr><tr><td><code>symmetric_difference_update()</code></td><td>原地对称差集操作</td><td>O(len(b))</td></tr></tbody></table><h3 id="8-实用技巧"><a href="#8-实用技巧" class="headerlink" title="8. 实用技巧"></a>8. 实用技巧</h3><h4 id="快速去重"><a href="#快速去重" class="headerlink" title="快速去重"></a>快速去重</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">names = [<span class="string">&#x27;Alice&#x27;</span>, <span class="string">&#x27;Bob&#x27;</span>, <span class="string">&#x27;Alice&#x27;</span>, <span class="string">&#x27;Charlie&#x27;</span>]</span><br><span class="line">unique_names = <span class="built_in">list</span>(<span class="built_in">set</span>(names))  <span class="comment"># 顺序可能改变</span></span><br></pre></td></tr></table></figure><h4 id="元素存在性测试"><a href="#元素存在性测试" class="headerlink" title="元素存在性测试"></a>元素存在性测试</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">valid_users = &#123;<span class="string">&#x27;Alice&#x27;</span>, <span class="string">&#x27;Bob&#x27;</span>, <span class="string">&#x27;Charlie&#x27;</span>&#125;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">input</span>(<span class="string">&#x27;用户名: &#x27;</span>) <span class="keyword">in</span> valid_users:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;访问 granted&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="集合与字典键转换"><a href="#集合与字典键转换" class="headerlink" title="集合与字典键转换"></a>集合与字典键转换</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 字典键转集合</span></span><br><span class="line">keys = &#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>&#125;.keys()  <span class="comment"># dict_keys对象</span></span><br><span class="line">keys_set = <span class="built_in">set</span>(keys)  <span class="comment"># &#123;&#x27;a&#x27;, &#x27;b&#x27;&#125;</span></span><br></pre></td></tr></table></figure><h3 id="9-性能特点"><a href="#9-性能特点" class="headerlink" title="9. 性能特点"></a>9. 性能特点</h3><ul><li><strong>查找速度</strong>：O(1) 时间复杂度</li><li><strong>内存占用</strong>：比列表更大</li><li><strong>适用场景</strong>：<ul><li>快速成员检测</li><li>数据去重</li><li>数学集合运算</li></ul></li></ul><h2 id="10-注意事项"><a href="#10-注意事项" class="headerlink" title="10. 注意事项"></a>10. 注意事项</h2><ol><li><p><strong>不可哈希元素</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 错误：列表不可哈希</span></span><br><span class="line">invalid_set = &#123;[<span class="number">1</span>,<span class="number">2</span>], [<span class="number">3</span>,<span class="number">4</span>]&#125;  <span class="comment"># TypeError</span></span><br></pre></td></tr></table></figure></li><li><p><strong>顺序不可靠</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Python 3.7+ 字典保持插入顺序，但集合仍然无序</span></span><br><span class="line"><span class="built_in">print</span>(&#123;<span class="number">1</span>, <span class="number">2</span>&#125; == &#123;<span class="number">2</span>, <span class="number">1</span>&#125;)  <span class="comment"># True</span></span><br></pre></td></tr></table></figure></li><li><p><strong>空集合陷阱</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">empty = &#123;&#125;    <span class="comment"># 这是字典！</span></span><br><span class="line">empty = <span class="built_in">set</span>() <span class="comment"># 这才是空集合</span></span><br></pre></td></tr></table></figure></li></ol><p>集合是处理唯一性数据和数学运算的强大工具，合理使用可以大幅提升代码效率和可读性！</p><p>到这里吧，就到这里吧，累了真的</p>]]></content>
      
      
      <categories>
          
          <category> 结构速查 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitHub项目仓库构建方法</title>
      <link href="/2025/03/31/GitHub%E9%A1%B9%E7%9B%AE%E4%BB%93%E5%BA%93%E6%9E%84%E5%BB%BA%E6%96%B9%E6%B3%95/"/>
      <url>/2025/03/31/GitHub%E9%A1%B9%E7%9B%AE%E4%BB%93%E5%BA%93%E6%9E%84%E5%BB%BA%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="GitHub项目本地仓库构建方法"><a href="#GitHub项目本地仓库构建方法" class="headerlink" title="GitHub项目本地仓库构建方法"></a>GitHub项目本地仓库构建方法</h1><blockquote><p>是这样的，我在本地的仓库中，想要把我想要的文件上传到GitHub上，但是我不想每次都去GitHub上找，所以我就想把我想要的文件上传到本地仓库中，然后再上传到GitHub上，这样就可以避免每次都去GitHub上找了。</p></blockquote><p>首先啊，你得确保GitHub上有一个空仓库。</p><p>当然，其实还是本人懒得不行，我想把相关的指令放网站上好找</p><h1 id="GitHub本地仓库构建与更新流程"><a href="#GitHub本地仓库构建与更新流程" class="headerlink" title="GitHub本地仓库构建与更新流程"></a>GitHub本地仓库构建与更新流程</h1><h2 id="1-前期准备"><a href="#1-前期准备" class="headerlink" title="1. 前期准备"></a>1. 前期准备</h2><ol><li><strong>安装Git</strong>：<a href="https://git-scm.com/">官网下载</a></li><li><strong>创建GitHub空仓库</strong>（不要初始化README）</li></ol><h2 id="2-首次上传项目"><a href="#2-首次上传项目" class="headerlink" title="2. 首次上传项目"></a>2. 首次上传项目</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入项目文件夹</span></span><br><span class="line"><span class="built_in">cd</span> /path/to/your/project   <span class="comment">#这个过程你可以直接在项目文件夹打开git</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化本地仓库</span></span><br><span class="line">git init</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加所有文件到暂存区</span></span><br><span class="line">git add .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交到本地仓库（必须写有意义的提交信息）</span></span><br><span class="line">git commit -m <span class="string">&quot;initial commit&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 关联远程仓库（注意替换URL）</span></span><br><span class="line">git remote add origin https://github.com/用户名/仓库名.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 推送到GitHub（注意分支名称）</span></span><br><span class="line">git push -u origin main  <span class="comment"># GitHub现在默认用main分支</span></span><br></pre></td></tr></table></figure><h2 id="3-后续更新项目"><a href="#3-后续更新项目" class="headerlink" title="3. 后续更新项目"></a>3. 后续更新项目</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看当前文件状态（可选）</span></span><br><span class="line">git status</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加所有修改到暂存区</span></span><br><span class="line">git add .  <span class="comment"># 注意add和点之间有空格！</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交到本地仓库（必须写有意义的提交信息）</span></span><br><span class="line">git commit -m <span class="string">&quot;fix: 更新了登录功能&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 推送到GitHub</span></span><br><span class="line">git push  <span class="comment"># 首次之后可以简写</span></span><br></pre></td></tr></table></figure><h2 id="关键注意事项"><a href="#关键注意事项" class="headerlink" title="关键注意事项"></a>关键注意事项</h2><ol><li><p><strong>分支名称问题</strong>：</p><ul><li>GitHub现在默认使用<code>main</code>分支而非<code>master</code></li><li>你不需要同时推送到master和main，只需推送到main即可</li></ul></li><li><p><strong>常见错误修正</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果遇到分支不匹配错误</span></span><br><span class="line">git branch -M main  <span class="comment"># 重命名本地分支为main</span></span><br><span class="line">git push -u origin main</span><br></pre></td></tr></table></figure></li><li><p><strong><code>.gitignore</code>文件</strong>：<br>在项目根目录创建<code>.gitignore</code>文件，避免上传临时文件&#x2F;敏感信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 示例内容</span><br><span class="line">node_modules/</span><br><span class="line">.env</span><br><span class="line">*.log</span><br><span class="line">.DS_Store</span><br></pre></td></tr></table></figure></li><li><p><strong>SSH连接（可选但推荐）</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 替换HTTPS为SSH地址更安全</span></span><br><span class="line">git remote set-url origin git@github.com:用户名/仓库名.git</span><br></pre></td></tr></table></figure><p>首次使用SSH需要配置公钥，参考[GitHub帮助文档](URL_ADDRESS   首次使用SSH需要配置公钥，参考<a href="https://docs.github.com/en/authentication/connecting-to-github-with-ssh">GitHub帮助文档</a>。</p></li></ol><h2 id="简化工作流程（推荐使用）"><a href="#简化工作流程（推荐使用）" class="headerlink" title="简化工作流程（推荐使用）"></a>简化工作流程（推荐使用）</h2><ol><li><p><strong>使用别名</strong>（添加到<code>~/.bashrc</code>或<code>~/.zshrc</code>）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">alias</span> gs=<span class="string">&#x27;git status&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> ga=<span class="string">&#x27;git add .&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> gc=<span class="string">&#x27;git commit -m&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> gp=<span class="string">&#x27;git push&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>可视化工具推荐</strong>：</p><ul><li>GitHub Desktop</li><li>VS Code内置Git工具</li><li>GitKraken</li></ul></li></ol><hr><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><ol><li><p><strong>报错：remote origin already exists</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git remote remove origin</span><br><span class="line">git remote add origin [你的仓库URL]</span><br></pre></td></tr></table></figure></li><li><p><strong>报错：failed to push some refs</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git pull origin main --allow-unrelated-histories</span><br><span class="line">git push</span><br></pre></td></tr></table></figure></li><li><p><strong>误提交大文件后</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用BFG工具清理历史记录</span></span><br><span class="line">java -jar bfg.jar --strip-blobs-bigger-than 100M your-repo.git</span><br></pre></td></tr></table></figure><p>以下是多人协同维护 GitHub 项目的完整操作指南，包含权限管理、分支策略和协作流程：</p></li></ol><hr><h1 id="多人协作管理GitHub项目"><a href="#多人协作管理GitHub项目" class="headerlink" title="多人协作管理GitHub项目"></a>多人协作管理GitHub项目</h1><h2 id="1-基础协作设置"><a href="#1-基础协作设置" class="headerlink" title="1. 基础协作设置"></a><strong>1. 基础协作设置</strong></h2><h3 id="1-添加协作者"><a href="#1-添加协作者" class="headerlink" title="(1) 添加协作者"></a>(1) 添加协作者</h3><ul><li><strong>仓库设置</strong> → <strong>Collaborators</strong> → <strong>Add people</strong>（输入GitHub用户名）</li><li><strong>权限级别</strong>：<ul><li><code>Read</code>：仅查看</li><li><code>Write</code>：可推送代码</li><li><code>Admin</code>：可管理仓库设置</li></ul></li></ul><h3 id="2-推荐使用-Organization（组织）"><a href="#2-推荐使用-Organization（组织）" class="headerlink" title="(2) 推荐使用 Organization（组织）"></a>(2) 推荐使用 <strong>Organization（组织）</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 成员通过邀请加入组织</span></span><br><span class="line">Settings → Organizations → Invite member</span><br></pre></td></tr></table></figure><ul><li>可设置团队（Teams）分配不同仓库权限</li></ul><h2 id="2-标准协作流程（Git-Flow模型）"><a href="#2-标准协作流程（Git-Flow模型）" class="headerlink" title="2. 标准协作流程（Git Flow模型）"></a><strong>2. 标准协作流程（Git Flow模型）</strong></h2><h3 id="1-克隆仓库"><a href="#1-克隆仓库" class="headerlink" title="(1) 克隆仓库"></a>(1) 克隆仓库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/用户名/仓库名.git</span><br><span class="line"><span class="built_in">cd</span> 仓库名</span><br></pre></td></tr></table></figure><h3 id="2-创建特性分支"><a href="#2-创建特性分支" class="headerlink" title="(2) 创建特性分支"></a>(2) 创建特性分支</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b feature/新功能名称  <span class="comment"># 从main分支创建</span></span><br></pre></td></tr></table></figure><h3 id="3-提交更改"><a href="#3-提交更改" class="headerlink" title="(3) 提交更改"></a>(3) 提交更改</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;feat: 添加用户登录功能&quot;</span>  <span class="comment"># 使用语义化提交信息</span></span><br></pre></td></tr></table></figure><h3 id="4-同步主分支"><a href="#4-同步主分支" class="headerlink" title="(4) 同步主分支"></a>(4) 同步主分支</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull origin main  <span class="comment"># 定期同步避免冲突</span></span><br></pre></td></tr></table></figure><h3 id="5-推送分支"><a href="#5-推送分支" class="headerlink" title="(5) 推送分支"></a>(5) 推送分支</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -u origin feature/新功能名称</span><br></pre></td></tr></table></figure><h3 id="6-创建Pull-Request（PR）"><a href="#6-创建Pull-Request（PR）" class="headerlink" title="(6) 创建Pull Request（PR）"></a>(6) 创建Pull Request（PR）</h3><ol><li>GitHub仓库页面点击 <strong>New pull request</strong></li><li>选择 <code>feature/新功能名称</code> → <code>main</code> 分支</li><li>添加说明并@相关成员审查</li></ol><h3 id="7-代码审查后合并"><a href="#7-代码审查后合并" class="headerlink" title="(7) 代码审查后合并"></a>(7) 代码审查后合并</h3><ul><li>审查通过后点击 <strong>Merge pull request</strong></li><li>删除已合并的分支（勾选<code>Delete branch</code>）</li></ul><hr><h2 id="3-冲突解决方案"><a href="#3-冲突解决方案" class="headerlink" title="3. 冲突解决方案"></a><strong>3. 冲突解决方案</strong></h2><h3 id="1-拉取最新代码时遇到冲突"><a href="#1-拉取最新代码时遇到冲突" class="headerlink" title="(1) 拉取最新代码时遇到冲突"></a>(1) 拉取最新代码时遇到冲突</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git pull origin main</span><br><span class="line"><span class="comment"># 冲突文件会显示 &lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD 标记</span></span><br></pre></td></tr></table></figure><h3 id="2-手动解决冲突后"><a href="#2-手动解决冲突后" class="headerlink" title="(2) 手动解决冲突后"></a>(2) 手动解决冲突后</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add 冲突文件</span><br><span class="line">git commit -m <span class="string">&quot;fix: 解决与main分支的冲突&quot;</span></span><br><span class="line">git push</span><br></pre></td></tr></table></figure><h3 id="3-使用图形化工具（推荐）"><a href="#3-使用图形化工具（推荐）" class="headerlink" title="(3) 使用图形化工具（推荐）"></a>(3) 使用图形化工具（推荐）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git mergetool  <span class="comment"># 调用meld/vscode等工具</span></span><br></pre></td></tr></table></figure><h2 id="4-高级协作管理"><a href="#4-高级协作管理" class="headerlink" title="4. 高级协作管理"></a><strong>4. 高级协作管理</strong></h2><h3 id="1-保护主分支"><a href="#1-保护主分支" class="headerlink" title="(1) 保护主分支"></a>(1) 保护主分支</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在仓库设置中：</span></span><br><span class="line"><span class="string">Settings</span> <span class="string">→</span> <span class="string">Branches</span> <span class="string">→</span> <span class="string">Add</span> <span class="string">branch</span> <span class="string">protection</span> <span class="string">rule</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">☑</span> <span class="string">Require</span> <span class="string">pull</span> <span class="string">request</span> <span class="string">before</span> <span class="string">merging</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">☑</span> <span class="string">Require</span> <span class="string">approvals</span> <span class="string">(至少1人审查)</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">☑</span> <span class="string">Require</span> <span class="string">status</span> <span class="string">checks</span> <span class="string">to</span> <span class="string">pass</span> <span class="string">(CI/CD)</span></span><br></pre></td></tr></table></figure><h3 id="2-使用Issue跟踪任务"><a href="#2-使用Issue跟踪任务" class="headerlink" title="(2) 使用Issue跟踪任务"></a>(2) 使用Issue跟踪任务</h3><ul><li>关联PR与Issue：在提交信息中添加 <code>fix #123</code></li><li>项目看板：<code>Projects</code> → <code>New project</code></li></ul><h3 id="3-CI-CD集成"><a href="#3-CI-CD集成" class="headerlink" title="(3) CI&#x2F;CD集成"></a>(3) CI&#x2F;CD集成</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例.github/workflows/test.yml</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">Tests</span></span><br><span class="line"><span class="attr">on:</span> [<span class="string">push</span>, <span class="string">pull_request</span>]</span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">test:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">run:</span> <span class="string">pytest</span></span><br></pre></td></tr></table></figure><h2 id="5-常用协作命令速查"><a href="#5-常用协作命令速查" class="headerlink" title="5. 常用协作命令速查"></a><strong>5. 常用协作命令速查</strong></h2><table><thead><tr><th>场景</th><th>命令</th></tr></thead><tbody><tr><td>查看远程分支</td><td><code>git branch -r</code></td></tr><tr><td>同步他人分支</td><td><code>git fetch &amp;&amp; git checkout 分支名</code></td></tr><tr><td>撤销本地提交</td><td><code>git reset --soft HEAD~1</code></td></tr><tr><td>合并多个提交</td><td><code>git rebase -i HEAD~3</code></td></tr><tr><td>临时保存修改</td><td><code>git stash</code></td></tr></tbody></table><h2 id="6-最佳实践"><a href="#6-最佳实践" class="headerlink" title="6. 最佳实践"></a><strong>6. 最佳实践</strong></h2><ol><li><p><strong>分支命名规范</strong>：</p><ul><li><code>feature/</code>：新功能开发</li><li><code>fix/</code>：Bug修复</li><li><code>hotfix/</code>：紧急生产环境修复</li></ul></li><li><p><strong>提交信息格式</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type(scope): 描述</span><br></pre></td></tr></table></figure><p>常用type：<code>feat</code>, <code>fix</code>, <code>docs</code>, <code>style</code>, <code>refactor</code></p></li><li><p><strong>定期同步</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git fetch --all  <span class="comment"># 获取所有远程更新</span></span><br><span class="line">git <span class="built_in">log</span> --all --graph --oneline  <span class="comment"># 可视化分支</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="7-可视化工具推荐"><a href="#7-可视化工具推荐" class="headerlink" title="7. 可视化工具推荐"></a><strong>7. 可视化工具推荐</strong></h2><ol><li><strong>GitHub Desktop</strong>：适合新手图形化操作</li><li><strong>VS Code Git插件</strong>：内置冲突解决工具</li><li><strong>SourceTree</strong>：高级分支管理</li></ol><h1 id="将github上的项目获取到本地"><a href="#将github上的项目获取到本地" class="headerlink" title="将github上的项目获取到本地"></a>将github上的项目获取到本地</h1><p>将 GitHub 上的项目代码获取到本地主要有两种方式，以下是详细步骤说明：</p><h2 id="方法-1：使用-git-clone（推荐，可同步更新）"><a href="#方法-1：使用-git-clone（推荐，可同步更新）" class="headerlink" title="方法 1：使用 git clone（推荐，可同步更新）"></a><strong>方法 1：使用 <code>git clone</code>（推荐，可同步更新）</strong></h2><h3 id="适用场景："><a href="#适用场景：" class="headerlink" title="适用场景："></a>适用场景：</h3><ul><li>需要参与项目开发（可提交代码）</li><li>需要保持与远程仓库同步</li></ul><h3 id="操作步骤："><a href="#操作步骤：" class="headerlink" title="操作步骤："></a>操作步骤：</h3><ol><li><p><strong>复制仓库地址</strong>：</p><ul><li>在 GitHub 项目页点击绿色 <strong><code>Code</code></strong> 按钮</li><li>选择 <strong>HTTPS</strong> 或 <strong>SSH</strong>（推荐 SSH，需提前<a href="https://docs.github.com/en/authentication/connecting-to-github-with-ssh">配置密钥</a>）<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git@github.com:用户名/仓库名.git  <span class="comment"># SSH示例</span></span><br><span class="line">https://github.com/用户名/仓库名.git  <span class="comment"># HTTPS示例</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>克隆到本地</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打开终端（Git Bash/CMD/PowerShell等）</span></span><br><span class="line">git <span class="built_in">clone</span> 复制的仓库地址</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例（SSH方式）：</span></span><br><span class="line">git <span class="built_in">clone</span> git@github.com:torvalds/linux.git</span><br></pre></td></tr></table></figure></li><li><p><strong>进入项目目录</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> 仓库名  <span class="comment"># 自动创建的本地文件夹</span></span><br></pre></td></tr></table></figure></li></ol><hr><h2 id="方法-2：下载-ZIP（仅获取代码，不可同步）"><a href="#方法-2：下载-ZIP（仅获取代码，不可同步）" class="headerlink" title="方法 2：下载 ZIP（仅获取代码，不可同步）"></a><strong>方法 2：下载 ZIP（仅获取代码，不可同步）</strong></h2><h3 id="适用场景：-1"><a href="#适用场景：-1" class="headerlink" title="适用场景："></a>适用场景：</h3><ul><li>仅查看&#x2F;使用代码（不参与开发）</li><li>网络环境无法使用 Git</li></ul><h3 id="操作步骤：-1"><a href="#操作步骤：-1" class="headerlink" title="操作步骤："></a>操作步骤：</h3><ol><li>在 GitHub 项目页点击 <strong><code>Code</code></strong> → <strong><code>Download ZIP</code></strong></li><li>解压 ZIP 文件到本地目录</li></ol><hr><h2 id="进阶操作"><a href="#进阶操作" class="headerlink" title="进阶操作"></a><strong>进阶操作</strong></h2><h3 id="1-克隆特定分支"><a href="#1-克隆特定分支" class="headerlink" title="1. 克隆特定分支"></a>1. 克隆特定分支</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> -b 分支名 仓库地址</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例：只克隆dev分支</span></span><br><span class="line">git <span class="built_in">clone</span> -b dev git@github.com:vuejs/vue.git</span><br></pre></td></tr></table></figure><h3 id="2-同步最新代码（已克隆的项目）"><a href="#2-同步最新代码（已克隆的项目）" class="headerlink" title="2. 同步最新代码（已克隆的项目）"></a>2. 同步最新代码（已克隆的项目）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull origin 分支名  <span class="comment"># 例如 git pull origin main</span></span><br></pre></td></tr></table></figure><h3 id="3-查看远程仓库信息"><a href="#3-查看远程仓库信息" class="headerlink" title="3. 查看远程仓库信息"></a>3. 查看远程仓库信息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote -v  <span class="comment"># 显示关联的远程仓库</span></span><br></pre></td></tr></table></figure><hr><h2 id="常见问题解决"><a href="#常见问题解决" class="headerlink" title="常见问题解决"></a><strong>常见问题解决</strong></h2><h3 id="1-权限被拒绝（Permission-denied）"><a href="#1-权限被拒绝（Permission-denied）" class="headerlink" title="1. 权限被拒绝（Permission denied）"></a>1. 权限被拒绝（Permission denied）</h3><ul><li><strong>SSH 方式</strong>：检查 <a href="https://docs.github.com/en/authentication/connecting-to-github-with-ssh">SSH 密钥是否配置正确</a></li><li><strong>HTTPS 方式</strong>：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global credential.helper store  <span class="comment"># 保存账号密码</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/用户名/仓库名.git  <span class="comment"># 首次需输入账号密码</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="2-网络连接超时"><a href="#2-网络连接超时" class="headerlink" title="2. 网络连接超时"></a>2. 网络连接超时</h3><ul><li>检查代理设置：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global http.proxy http://127.0.0.1:1080  <span class="comment"># 替换为你的代理端口</span></span><br></pre></td></tr></table></figure></li><li>或使用 GitHub 镜像站（如 <code>https://hub.fastgit.org</code>）</li></ul><hr><h2 id="可视化工具推荐"><a href="#可视化工具推荐" class="headerlink" title="可视化工具推荐"></a><strong>可视化工具推荐</strong></h2><table><thead><tr><th>工具</th><th>特点</th></tr></thead><tbody><tr><td><a href="https://desktop.github.com/">GitHub Desktop</a></td><td>官方图形化工具，一键克隆</td></tr><tr><td>VS Code</td><td>内置Git支持，<code>Ctrl+Shift+P</code> → <code>Git: Clone</code></td></tr><tr><td><a href="https://www.sourcetreeapp.com/">Sourcetree</a></td><td>高级分支管理</td></tr></tbody></table><p>如需参与协作开发，建议使用 <code>git clone</code> 方式并熟悉 <a href="https://guides.github.com/introduction/git-handbook/">Git 基本工作流程</a>。</p><p>以上便是简单的github本地和协同部署的基本方法，如果有什么问题请查阅官方文档，链接在这里：<a href="https://docs.github.com/en">GitHub 官方文档</a>》。</p><p>是不是一股子ai味道，不得不说这玩意是真的香，我以后会经常用的，但是感觉很死板啊，做这些列指令的页面太合适了woc</p>]]></content>
      
      
      <categories>
          
          <category> 仓库管理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 外部技术支持 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python 学习速查笔记（3）</title>
      <link href="/2025/03/30/python%E5%AD%A6%E4%B9%A0%E9%80%9F%E6%9F%A5%E7%AC%94%E8%AE%B0(3)/"/>
      <url>/2025/03/30/python%E5%AD%A6%E4%B9%A0%E9%80%9F%E6%9F%A5%E7%AC%94%E8%AE%B0(3)/</url>
      
        <content type="html"><![CDATA[<h1 id="python-学习速查笔记（3）"><a href="#python-学习速查笔记（3）" class="headerlink" title="python 学习速查笔记（3）"></a>python 学习速查笔记（3）</h1><blockquote><p>本章涉及<strong>数据类型转换</strong>，<strong>解释器</strong>，<strong>运算符</strong>，很快就可以结束</p></blockquote><h1 id="Python3-解释器"><a href="#Python3-解释器" class="headerlink" title="Python3 解释器"></a>Python3 解释器</h1><p>如果你是Linux<br>Linux&#x2F;Unix的系统上，一般默认的 python 版本为 2.x，我们可以将 python3.x 安装在 &#x2F;usr&#x2F;local&#x2F;python3 目录中。</p><p>安装完成后，我们可以将路径 &#x2F;usr&#x2F;local&#x2F;python3&#x2F;bin 添加到您的 Linux&#x2F;Unix 操作系统的环境变量中，这样您就可以通过 shell 终端输入下面的命令来启动 Python3 。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ PATH=$PATH:/usr/local/python3/bin/python3    # 设置环境变量</span><br><span class="line">$ python3 --version</span><br><span class="line">Python 3.4.0</span><br></pre></td></tr></table></figure><p>如果你是window</p><p>在Window系统下你可以通过以下命令来设置Python的环境变量，假设你的Python安装在 C:\Python34 下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set path=%path%;C:\python34</span><br></pre></td></tr></table></figure><h2 id="交互式编程"><a href="#交互式编程" class="headerlink" title="交互式编程"></a>交互式编程</h2><p>我们可以在命令提示符中输入”Python”命令来启动Python解释器：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ python3</span><br></pre></td></tr></table></figure><p>执行以上命令后，出现如下窗口信息：</p><blockquote><p>$ python3<br>Python 3.4.0 (default, Apr 11 2014, 13:05:11)<br>[GCC 4.8.2] on linux<br>Type “help”, “copyright”, “credits” or “license” for more information.</p><blockquote><blockquote></blockquote></blockquote></blockquote><p>在 python 提示符中输入以下语句，然后按回车键查看运行效果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print (&quot;Hello, Python!&quot;);</span><br></pre></td></tr></table></figure><p>以上命令执行结果如下：</p><blockquote><p>Hello, Python!</p></blockquote><p>当键入一个多行结构时，续行是必须的。我们可以看下如下 if 语句：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; flag = True</span><br><span class="line">&gt;&gt;&gt; if flag :</span><br><span class="line">...     print(&quot;flag 条件为 True!&quot;)</span><br><span class="line">... </span><br><span class="line">flag 条件为 True!</span><br></pre></td></tr></table></figure><h2 id="脚本式编程"><a href="#脚本式编程" class="headerlink" title="脚本式编程"></a>脚本式编程</h2><p>将如下代码拷贝至 hello.py文件中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print (&quot;Hello, Python!&quot;);</span><br></pre></td></tr></table></figure><p>通过以下命令执行该脚本：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 hello.py</span><br></pre></td></tr></table></figure><p>输出结果为：</p><blockquote><p>Hello, Python!</p></blockquote><p>在Linux&#x2F;Unix系统中，你可以在脚本顶部添加以下命令让Python脚本可以像SHELL脚本一样可直接执行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#! /usr/bin/env python3</span><br></pre></td></tr></table></figure><p>然后修改脚本权限，使其有执行权限，命令如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ chmod +x hello.py</span><br></pre></td></tr></table></figure><p>执行以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./hello.py</span><br></pre></td></tr></table></figure><p>输出结果为：</p><blockquote><p>Hello, Python!</p></blockquote><h1 id="Python-运算符详解（库存）"><a href="#Python-运算符详解（库存）" class="headerlink" title="Python 运算符详解（库存）"></a>Python 运算符详解（库存）</h1><p>以下是 Python 中支持的各类运算符及其功能、实例和注意事项的详细说明。</p><h2 id="1-运算符总览表"><a href="#1-运算符总览表" class="headerlink" title="1. 运算符总览表"></a>1. 运算符总览表</h2><table><thead><tr><th>运算符类别</th><th>运算符示例</th><th>功能描述</th></tr></thead><tbody><tr><td>算术运算符</td><td><code>+</code>, <code>-</code>, <code>*</code>, <code>/</code> 等</td><td>基本数学运算</td></tr><tr><td>比较运算符</td><td><code>==</code>, <code>!=</code>, <code>&gt;</code>, <code>&lt;</code> 等</td><td>比较两个值的关系</td></tr><tr><td>赋值运算符</td><td><code>=</code>, <code>+=</code>, <code>-=</code> 等</td><td>给变量赋值</td></tr><tr><td>逻辑运算符</td><td><code>and</code>, <code>or</code>, <code>not</code></td><td>布尔逻辑运算</td></tr><tr><td>位运算符</td><td><code>&amp;</code>, &#96;</td><td><code>, </code>^<code>, </code>~&#96; 等</td></tr><tr><td>成员运算符</td><td><code>in</code>, <code>not in</code></td><td>检查元素是否在序列中</td></tr><tr><td>身份运算符</td><td><code>is</code>, <code>is not</code></td><td>比较对象的内存地址</td></tr><tr><td>运算符优先级</td><td>多种运算符组合</td><td>决定运算顺序的规则</td></tr></tbody></table><h2 id="2-详细说明与实例"><a href="#2-详细说明与实例" class="headerlink" title="2. 详细说明与实例"></a>2. 详细说明与实例</h2><h3 id="2-1-算术运算符"><a href="#2-1-算术运算符" class="headerlink" title="2.1 算术运算符"></a>2.1 算术运算符</h3><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th><th>结果</th></tr></thead><tbody><tr><td><code>+</code></td><td>加法</td><td><code>3 + 2</code></td><td>5</td></tr><tr><td><code>-</code></td><td>减法</td><td><code>5 - 2</code></td><td>3</td></tr><tr><td><code>*</code></td><td>乘法</td><td><code>3 * 4</code></td><td>12</td></tr><tr><td><code>/</code></td><td>除法</td><td><code>10 / 2</code></td><td>5.0</td></tr><tr><td><code>%</code></td><td>取模</td><td><code>10 % 3</code></td><td>1</td></tr><tr><td><code>**</code></td><td>幂运算</td><td><code>2 ** 3</code></td><td>8</td></tr><tr><td><code>//</code></td><td>整除</td><td><code>10 // 3</code></td><td>3</td></tr></tbody></table><p><strong>注意事项</strong>：</p><ul><li>除法(<code>/</code>)总是返回<strong>浮点数</strong></li><li>整除(<code>//</code>)<strong>向下取整</strong></li><li>幂运算(<code>**</code>)<strong>优先级高于其他算术运算符</strong><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line">a = <span class="number">21</span></span><br><span class="line">b = <span class="number">10</span></span><br><span class="line">c = <span class="number">0</span></span><br><span class="line">c = a + b</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;1 - c 的值为：&quot;</span>, c)</span><br><span class="line">c += a</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;2 - c 的值为：&quot;</span>, c)</span><br><span class="line">c *= a</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;3 - c 的值为：&quot;</span>, c)</span><br><span class="line">c /= a </span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;4 - c 的值为：&quot;</span>, c)</span><br><span class="line">c = <span class="number">2</span></span><br><span class="line">c %= a</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;5 - c 的值为：&quot;</span>, c)</span><br><span class="line">c **= a</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;6 - c 的值为：&quot;</span>, c)</span><br><span class="line">c //= a</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;7 - c 的值为：&quot;</span>, c)</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-2-比较运算符"><a href="#2-2-比较运算符" class="headerlink" title="2.2 比较运算符"></a>2.2 比较运算符</h3><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th><th>结果</th></tr></thead><tbody><tr><td><code>==</code></td><td>等于</td><td><code>3 == 2</code></td><td>False</td></tr><tr><td><code>!=</code></td><td>不等于</td><td><code>3 != 2</code></td><td>True</td></tr><tr><td><code>&gt;</code></td><td>大于</td><td><code>3 &gt; 2</code></td><td>True</td></tr><tr><td><code>&lt;</code></td><td>小于</td><td><code>3 &lt; 2</code></td><td>False</td></tr><tr><td><code>&gt;=</code></td><td>大于等于</td><td><code>3 &gt;= 3</code></td><td>True</td></tr><tr><td><code>&lt;=</code></td><td>小于等于</td><td><code>3 &lt;= 2</code></td><td>False</td></tr></tbody></table><p><strong>注意事项</strong>：</p><ul><li>可以链式比较：<code>1 &lt; 2 &lt; 3</code> 等价于 <code>1 &lt; 2 and 2 &lt; 3</code></li><li>比较字符串时按字典序</li></ul><h3 id="2-3-赋值运算符"><a href="#2-3-赋值运算符" class="headerlink" title="2.3 赋值运算符"></a>2.3 赋值运算符</h3><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th><th>等价于</th></tr></thead><tbody><tr><td><code>=</code></td><td>赋值</td><td><code>x = 5</code></td><td>-</td></tr><tr><td><code>+=</code></td><td>加后赋值</td><td><code>x += 3</code></td><td><code>x = x + 3</code></td></tr><tr><td><code>-=</code></td><td>减后赋值</td><td><code>x -= 2</code></td><td><code>x = x - 2</code></td></tr><tr><td><code>*=</code></td><td>乘后赋值</td><td><code>x *= 4</code></td><td><code>x = x * 4</code></td></tr><tr><td><code>/=</code></td><td>除后赋值</td><td><code>x /= 2</code></td><td><code>x = x / 2</code></td></tr><tr><td><code>%=</code></td><td>取模赋值</td><td><code>x %= 3</code></td><td><code>x = x % 3</code></td></tr><tr><td><code>**=</code></td><td>幂赋值</td><td><code>x **= 2</code></td><td><code>x = x ** 2</code></td></tr><tr><td><code>//=</code></td><td>整除赋值</td><td><code>x //= 2</code></td><td><code>x = x // 2</code></td></tr></tbody></table><p><strong>注意事项</strong>：</p><ul><li>增强赋值运算符更高效</li><li>可变对象的增强赋值可能就地修改对象</li></ul><h3 id="2-4-逻辑运算符"><a href="#2-4-逻辑运算符" class="headerlink" title="2.4 逻辑运算符"></a>2.4 逻辑运算符</h3><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th><th>结果</th></tr></thead><tbody><tr><td><code>and</code></td><td>逻辑与</td><td><code>True and False</code></td><td>False</td></tr><tr><td><code>or</code></td><td>逻辑或</td><td><code>True or False</code></td><td>True</td></tr><tr><td><code>not</code></td><td>逻辑非</td><td><code>not True</code></td><td>False</td></tr></tbody></table><p><strong>注意事项</strong>：</p><ul><li>短路特性：<code>and</code>和<code>or</code>会提前终止计算</li><li>返回最后一个求值的操作数，不一定是布尔值</li></ul><h3 id="2-5-位运算符"><a href="#2-5-位运算符" class="headerlink" title="2.5 位运算符"></a>2.5 位运算符</h3><p>按位运算符是把数字看作二进制来进行计算的。Python中的按位运算法则如下：</p><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th><th>结果</th></tr></thead><tbody><tr><td><code>&amp;</code></td><td>按位与</td><td><code>5 &amp; 3</code></td><td>1</td></tr><tr><td>&#96;</td><td>&#96;</td><td>按位或</td><td>&#96;5</td></tr><tr><td><code>^</code></td><td>按位异或</td><td><code>5 ^ 3</code></td><td>6</td></tr><tr><td><code>~</code></td><td>按位取反</td><td><code>~5</code></td><td>-6</td></tr><tr><td><code>&lt;&lt;</code></td><td>左移</td><td><code>5 &lt;&lt; 1</code></td><td>10</td></tr><tr><td><code>&gt;&gt;</code></td><td>右移</td><td><code>5 &gt;&gt; 1</code></td><td>2</td></tr></tbody></table><p>这里可能会显示错误，按位或运算符为“<code>|</code>”</p><p><code>&amp;</code><strong>按位与运算符</strong>：参与运算的两个值,如果两个相应位都为1,则该位的结果为1,否则为0(a &amp; b) 输出结果 12 ，二进制解释： 0000 1100<br><code>|</code><strong>按位或运算符</strong>：只要对应的二个二进位有一个为1时，结果位就为1。(a | b) 输出结果 61 ，二进制解释： 0011 1101<br><code>^</code><strong>按位异或运算符</strong>：当两对应的二进位相异时，结果为1(a ^ b) 输出结果 49 ，二进制解释： 0011 0001<br><code>~</code><strong>按位取反运算符</strong>：对数据的每个二进制位取反,即把1变为0,把0变为1。<del>x 类似于 -x-1(</del>a ) 输出结果 -61 ，二进制解释： 1100 0011， 在一个有符号二进制数的补码形式。<br><code>&lt;&lt;</code><strong>左移动运算符</strong>：运算数的各二进位全部左移若干位，由”&lt;&lt;”右边的数指定移动的位数，高位丢弃，低位补0。a &lt;&lt; 2 输出结果 240 ，二进制解释： 1111 0000<br><code>&gt;&gt;</code><strong>右移动运算符</strong>：把”&gt;&gt;”左边的运算数的各二进位全部右移若干位，”&gt;&gt;”右边的数指定移动的位数a &gt;&gt; 2 输出结果 15 ，二进制解释： 0000 1111</p><p><strong>注意事项</strong>：</p><ul><li>操作数会被转换为<strong>二进制</strong>形式</li><li>负数以<strong>补码</strong>形式表示</li></ul><h3 id="2-6-成员运算符"><a href="#2-6-成员运算符" class="headerlink" title="2.6 成员运算符"></a>2.6 成员运算符</h3><p>除了以上的一些运算符之外，Python还支持成员运算符，测试实例中包含了一系列的成员，包括字符串，列表或元组。</p><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th><th>结果</th></tr></thead><tbody><tr><td><code>in</code></td><td>在序列中</td><td><code>&#39;a&#39; in [&#39;a&#39;, &#39;b&#39;]</code></td><td>True</td></tr><tr><td><code>not in</code></td><td>不在序列中</td><td><code>&#39;c&#39; not in &#39;abc&#39;</code></td><td>False</td></tr></tbody></table><p><code>in</code><strong>如果在指定的序列中找到值返回 True，否则返回 False。</strong>x 在 y 序列中 , 如果 x 在 y 序列中返回 True。<br><code>not in</code><strong>如果在指定的序列中没有找到值返回 True，否则返回 False。</strong>x 不在 y 序列中 , 如果 x 不在 y 序列中返回 True。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python3</span><br><span class="line"> </span><br><span class="line">a = 10</span><br><span class="line">b = 20</span><br><span class="line">list = [1, 2, 3, 4, 5 ]</span><br><span class="line"> </span><br><span class="line">if ( a in list ):</span><br><span class="line">   print (&quot;1 - 变量 a 在给定的列表中 list 中&quot;)</span><br><span class="line">else:</span><br><span class="line">   print (&quot;1 - 变量 a 不在给定的列表中 list 中&quot;)</span><br><span class="line"> </span><br><span class="line">if ( b not in list ):</span><br><span class="line">   print (&quot;2 - 变量 b 不在给定的列表中 list 中&quot;)</span><br><span class="line">else:</span><br><span class="line">   print (&quot;2 - 变量 b 在给定的列表中 list 中&quot;)</span><br><span class="line"> </span><br><span class="line"># 修改变量 a 的值</span><br><span class="line">a = 2</span><br><span class="line">if ( a in list ):</span><br><span class="line">   print (&quot;3 - 变量 a 在给定的列表中 list 中&quot;)</span><br><span class="line">else:</span><br><span class="line">   print (&quot;3 - 变量 a 不在给定的列表中 list 中&quot;)</span><br></pre></td></tr></table></figure><p><strong>注意事项</strong>：</p><ul><li><strong>适用于字符串、列表、元组、字典(检查键)等</strong></li><li><strong>字典中只检查键，不检查值</strong></li></ul><h3 id="2-7-身份运算符"><a href="#2-7-身份运算符" class="headerlink" title="2.7 身份运算符"></a>2.7 身份运算符</h3><p>身份运算符用于比较两个对象的存储单元</p><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th><th>结果</th></tr></thead><tbody><tr><td><code>is</code></td><td>是同一对象</td><td><code>a is b</code></td><td>取决于对象ID</td></tr><tr><td><code>is not</code></td><td>不是同一对象</td><td><code>a is not b</code></td><td>取决于对象ID</td></tr></tbody></table><p><code>is</code><strong>is 是判断两个标识符是不是引用自一个对象</strong>x is y, 类似 id(x) &#x3D;&#x3D; id(y) , 如果引用的是同一个对象则返回 True，否则返回 False<br><code>is not</code><strong>is not 是判断两个标识符是不是引用自不同对象</strong>x is not y ， 类似 id(x) !&#x3D; id(y)。如果引用的不是同一个对象则返回结果 True，否则返回 False。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python3</span><br><span class="line"> </span><br><span class="line">a = 20</span><br><span class="line">b = 20</span><br><span class="line"> </span><br><span class="line">if ( a is b ):</span><br><span class="line">   print (&quot;1 - a 和 b 有相同的标识&quot;)</span><br><span class="line">else:</span><br><span class="line">   print (&quot;1 - a 和 b 没有相同的标识&quot;)</span><br><span class="line"> </span><br><span class="line">if ( id(a) == id(b) ):</span><br><span class="line">   print (&quot;2 - a 和 b 有相同的标识&quot;)</span><br><span class="line">else:</span><br><span class="line">   print (&quot;2 - a 和 b 没有相同的标识&quot;)</span><br><span class="line"> </span><br><span class="line"># 修改变量 b 的值</span><br><span class="line">b = 30</span><br><span class="line">if ( a is b ):</span><br><span class="line">   print (&quot;3 - a 和 b 有相同的标识&quot;)</span><br><span class="line">else:</span><br><span class="line">   print (&quot;3 - a 和 b 没有相同的标识&quot;)</span><br><span class="line"> </span><br><span class="line">if ( a is not b ):</span><br><span class="line">   print (&quot;4 - a 和 b 没有相同的标识&quot;)</span><br><span class="line">else:</span><br><span class="line">   print (&quot;4 - a 和 b 有相同的标识&quot;)#!/usr/bin/python3</span><br><span class="line"> </span><br><span class="line">a = 20</span><br><span class="line">b = 20</span><br><span class="line"> </span><br><span class="line">if ( a is b ):</span><br><span class="line">   print (&quot;1 - a 和 b 有相同的标识&quot;)</span><br><span class="line">else:</span><br><span class="line">   print (&quot;1 - a 和 b 没有相同的标识&quot;)</span><br><span class="line"> </span><br><span class="line">if ( id(a) == id(b) ):</span><br><span class="line">   print (&quot;2 - a 和 b 有相同的标识&quot;)</span><br><span class="line">else:</span><br><span class="line">   print (&quot;2 - a 和 b 没有相同的标识&quot;)</span><br><span class="line"> </span><br><span class="line"># 修改变量 b 的值</span><br><span class="line">b = 30</span><br><span class="line">if ( a is b ):</span><br><span class="line">   print (&quot;3 - a 和 b 有相同的标识&quot;)</span><br><span class="line">else:</span><br><span class="line">   print (&quot;3 - a 和 b 没有相同的标识&quot;)</span><br><span class="line"> </span><br><span class="line">if ( a is not b ):</span><br><span class="line">   print (&quot;4 - a 和 b 没有相同的标识&quot;)</span><br><span class="line">else:</span><br><span class="line">   print (&quot;4 - a 和 b 有相同的标识&quot;)</span><br></pre></td></tr></table></figure><p>实例输出结果为：</p><blockquote><p>1 - a 和 b 有相同的标识<br>2 - a 和 b 有相同的标识<br>3 - a 和 b 没有相同的标识<br>4 - a 和 b 没有相同的标识</p></blockquote><p><code>is</code> 用于判断两个变量<strong>引用对象是否为同一个</strong>， <code>==</code> 用于判断<strong>引用变量的值是否相等</strong>。</p><p><strong>注意事项</strong>：</p><ul><li>比较的是对象的内存地址</li><li>小整数和短字符串会被Python缓存</li></ul><h3 id="2-8-运算符优先级"><a href="#2-8-运算符优先级" class="headerlink" title="2.8 运算符优先级"></a>2.8 运算符优先级</h3><table><thead><tr><th>优先级</th><th>运算符</th></tr></thead><tbody><tr><td>1</td><td><code>()</code> (括号)</td></tr><tr><td>2</td><td><code>**</code> (幂)</td></tr><tr><td>3</td><td><code>+x</code>, <code>-x</code>, <code>~x</code> (一元运算符)</td></tr><tr><td>4</td><td><code>*</code>, <code>/</code>, <code>//</code>, <code>%</code></td></tr><tr><td>5</td><td><code>+</code>, <code>-</code></td></tr><tr><td>6</td><td><code>&lt;&lt;</code>, <code>&gt;&gt;</code></td></tr><tr><td>7</td><td><code>&amp;</code></td></tr><tr><td>8</td><td><code>^</code></td></tr><tr><td>9</td><td>&#96;</td></tr><tr><td>10</td><td><code>==</code>, <code>!=</code>, <code>&gt;</code>, <code>&lt;</code>, <code>&gt;=</code>, <code>&lt;=</code></td></tr><tr><td>11</td><td><code>is</code>, <code>is not</code>, <code>in</code>, <code>not in</code></td></tr><tr><td>12</td><td><code>not</code></td></tr><tr><td>13</td><td><code>and</code></td></tr><tr><td>14</td><td><code>or</code></td></tr></tbody></table><p><strong>注意事项</strong>：</p><ul><li>使用括号可以明确优先级</li><li>同级别运算符从左到右计算(幂运算除外)</li></ul><h2 id="3-综合实例"><a href="#3-综合实例" class="headerlink" title="3. 综合实例"></a>3. 综合实例</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 算术运算符</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">2</span> + <span class="number">3</span> * <span class="number">4</span>)  <span class="comment"># 输出: 14 (先乘后加)</span></span><br><span class="line"><span class="built_in">print</span>((<span class="number">2</span> + <span class="number">3</span>) * <span class="number">4</span>)  <span class="comment"># 输出: 20 (括号优先)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 比较和逻辑运算符</span></span><br><span class="line">a = <span class="number">5</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">3</span> &lt; a &lt; <span class="number">7</span>)  <span class="comment"># 输出: True (链式比较)</span></span><br><span class="line"><span class="built_in">print</span>(a == <span class="number">5</span> <span class="keyword">and</span> <span class="keyword">not</span> a &lt; <span class="number">4</span>)  <span class="comment"># 输出: True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 位运算符</span></span><br><span class="line">x = <span class="number">10</span>  <span class="comment"># 1010</span></span><br><span class="line">y = <span class="number">4</span>   <span class="comment"># 0100</span></span><br><span class="line"><span class="built_in">print</span>(x &amp; y)  <span class="comment"># 输出: 0 (0000)</span></span><br><span class="line"><span class="built_in">print</span>(x | y)  <span class="comment"># 输出: 14 (1110)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 成员和身份运算符</span></span><br><span class="line">lst = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="number">2</span> <span class="keyword">in</span> lst)  <span class="comment"># 输出: True</span></span><br><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">b = a</span><br><span class="line"><span class="built_in">print</span>(a <span class="keyword">is</span> b)  <span class="comment"># 输出: True</span></span><br><span class="line"><span class="built_in">print</span>(a == [<span class="number">1</span>, <span class="number">2</span>])  <span class="comment"># 输出: True</span></span><br><span class="line"><span class="built_in">print</span>(a <span class="keyword">is</span> [<span class="number">1</span>, <span class="number">2</span>])  <span class="comment"># 输出: False</span></span><br></pre></td></tr></table></figure><h2 id="4-重要注意事项"><a href="#4-重要注意事项" class="headerlink" title="4. 重要注意事项"></a>4. 重要注意事项</h2><ol><li><p><strong>不可变对象与可变对象</strong>：</p><ul><li>对于不可变对象(数字、字符串、元组)，运算符通常会创建新对象</li><li>对于可变对象(列表、字典)，某些运算符(如<code>+=</code>)可能就地修改对象</li></ul></li><li><p><strong>浮点数精度问题</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="number">0.1</span> + <span class="number">0.2</span> == <span class="number">0.3</span>)  <span class="comment"># 输出: False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">round</span>(<span class="number">0.1</span> + <span class="number">0.2</span>, <span class="number">1</span>) == <span class="number">0.3</span>)  <span class="comment"># 正确比较方式</span></span><br></pre></td></tr></table></figure></li><li><p><strong>短路特性</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;函数被调用&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="literal">False</span> <span class="keyword">and</span> func()  <span class="comment"># func()不会被调用</span></span><br><span class="line"><span class="literal">True</span> <span class="keyword">or</span> func()    <span class="comment"># func()不会被调用</span></span><br></pre></td></tr></table></figure></li><li><p><strong><code>is</code>与<code>==</code>的区别</strong>：</p><ul><li><code>is</code>比较对象标识(内存地址)</li><li><code>==</code>比较对象值</li></ul></li><li><p><strong>增强赋值的陷阱</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">lst = [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">lst2 = lst</span><br><span class="line">lst += [<span class="number">3</span>]  <span class="comment"># 会修改lst和lst2</span></span><br><span class="line">lst = lst + [<span class="number">4</span>]  <span class="comment"># 创建新列表，不影响lst2</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="Python-运算符输出数据类型表"><a href="#Python-运算符输出数据类型表" class="headerlink" title="Python 运算符输出数据类型表"></a>Python 运算符输出数据类型表</h1><blockquote><p>以下是 Python 中各类运算符运算结果的数据类型规则说明：</p></blockquote><h2 id="1-算术运算符结果类型"><a href="#1-算术运算符结果类型" class="headerlink" title="1. 算术运算符结果类型"></a>1. 算术运算符结果类型</h2><table><thead><tr><th>运算符</th><th>操作数类型组合</th><th>结果类型</th><th>示例</th></tr></thead><tbody><tr><td><code>+</code></td><td>int + int</td><td>int</td><td><code>3 + 2</code> → <code>5</code> (int)</td></tr><tr><td><code>+</code></td><td>int + float</td><td>float</td><td><code>3 + 2.0</code> → <code>5.0</code> (float)</td></tr><tr><td><code>+</code></td><td>float + float</td><td>float</td><td><code>3.0 + 2.0</code> → <code>5.0</code></td></tr><tr><td><code>-</code></td><td>同上规则</td><td>同上规则</td><td><code>5 - 2.0</code> → <code>3.0</code></td></tr><tr><td><code>*</code></td><td>同上规则</td><td>同上规则</td><td><code>3 * 2.0</code> → <code>6.0</code></td></tr><tr><td><code>/</code></td><td>任何数字组合</td><td>float</td><td><code>10 / 2</code> → <code>5.0</code></td></tr><tr><td><code>//</code></td><td>int &#x2F;&#x2F; int</td><td>int</td><td><code>10 // 3</code> → <code>3</code></td></tr><tr><td><code>//</code></td><td>含float的操作数</td><td>float</td><td><code>10.0 // 3</code> → <code>3.0</code></td></tr><tr><td><code>%</code></td><td>同除法规则</td><td>同除法规则</td><td><code>10 % 3</code> → <code>1</code> (int)</td></tr><tr><td><code>**</code></td><td>同乘法规则</td><td>同乘法规则</td><td><code>2 ** 3</code> → <code>8</code> (int)</td></tr></tbody></table><p><strong>注意</strong>：字符串乘法(<code>str * int</code>)返回字符串</p><h2 id="2-比较运算符结果类型"><a href="#2-比较运算符结果类型" class="headerlink" title="2. 比较运算符结果类型"></a>2. 比较运算符结果类型</h2><table><thead><tr><th>运算符</th><th>结果类型</th><th>说明</th></tr></thead><tbody><tr><td><code>==</code></td><td>bool</td><td>所有比较运算都返回布尔值</td></tr><tr><td><code>!=</code></td><td>bool</td><td></td></tr><tr><td><code>&gt;</code></td><td>bool</td><td></td></tr><tr><td><code>&lt;</code></td><td>bool</td><td></td></tr><tr><td><code>&gt;=</code></td><td>bool</td><td></td></tr><tr><td><code>&lt;=</code></td><td>bool</td><td></td></tr></tbody></table><h2 id="3-赋值运算符结果类型"><a href="#3-赋值运算符结果类型" class="headerlink" title="3. 赋值运算符结果类型"></a>3. 赋值运算符结果类型</h2><table><thead><tr><th>运算符</th><th>结果类型</th><th>说明</th></tr></thead><tbody><tr><td><code>=</code></td><td>右侧表达式类型</td><td>返回赋值的值</td></tr><tr><td><code>+=</code></td><td>同算术运算规则</td><td>可能就地修改可变对象</td></tr><tr><td>其他复合赋值</td><td>同算术运算规则</td><td></td></tr></tbody></table><h2 id="4-逻辑运算符结果类型"><a href="#4-逻辑运算符结果类型" class="headerlink" title="4. 逻辑运算符结果类型"></a>4. 逻辑运算符结果类型</h2><table><thead><tr><th>运算符</th><th>操作数类型</th><th>结果类型</th><th>说明</th></tr></thead><tbody><tr><td><code>and</code></td><td>任意</td><td>最后一个求值的操作数</td><td>短路求值</td></tr><tr><td><code>or</code></td><td>任意</td><td>最后一个求值的操作数</td><td>短路求值</td></tr><tr><td><code>not</code></td><td>任意</td><td>bool</td><td>总是返回布尔值</td></tr></tbody></table><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="number">3</span> <span class="keyword">and</span> <span class="string">&#x27;hello&#x27;</span>)  <span class="comment"># &#x27;hello&#x27; (str)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">0</span> <span class="keyword">or</span> [])        <span class="comment"># [] (list)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="keyword">not</span> <span class="number">5</span>)          <span class="comment"># False (bool)</span></span><br></pre></td></tr></table></figure><h2 id="5-位运算符结果类型"><a href="#5-位运算符结果类型" class="headerlink" title="5. 位运算符结果类型"></a>5. 位运算符结果类型</h2><table><thead><tr><th>运算符</th><th>结果类型</th><th>说明</th></tr></thead><tbody><tr><td><code>&amp;</code></td><td>int</td><td>操作数会被转换为整数</td></tr><tr><td>&#96;</td><td>&#96;</td><td>int</td></tr><tr><td><code>^</code></td><td>int</td><td></td></tr><tr><td><code>~</code></td><td>int</td><td></td></tr><tr><td><code>&lt;&lt;</code></td><td>int</td><td></td></tr><tr><td><code>&gt;&gt;</code></td><td>int</td><td></td></tr></tbody></table><h2 id="6-成员运算符结果类型"><a href="#6-成员运算符结果类型" class="headerlink" title="6. 成员运算符结果类型"></a>6. 成员运算符结果类型</h2><table><thead><tr><th>运算符</th><th>结果类型</th><th>说明</th></tr></thead><tbody><tr><td><code>in</code></td><td>bool</td><td>总是返回布尔值</td></tr><tr><td><code>not in</code></td><td>bool</td><td></td></tr></tbody></table><h2 id="7-身份运算符结果类型"><a href="#7-身份运算符结果类型" class="headerlink" title="7. 身份运算符结果类型"></a>7. 身份运算符结果类型</h2><table><thead><tr><th>运算符</th><th>结果类型</th><th>说明</th></tr></thead><tbody><tr><td><code>is</code></td><td>bool</td><td>比较对象标识</td></tr><tr><td><code>is not</code></td><td>bool</td><td></td></tr></tbody></table><h2 id="8-特殊运算类型规则"><a href="#8-特殊运算类型规则" class="headerlink" title="8. 特殊运算类型规则"></a>8. 特殊运算类型规则</h2><table><thead><tr><th>运算</th><th>结果类型规则</th><th>示例</th></tr></thead><tbody><tr><td>字符串拼接(<code>+</code>)</td><td>str</td><td><code>&#39;a&#39; + &#39;b&#39;</code> → <code>&#39;ab&#39;</code></td></tr><tr><td>列表拼接(<code>+</code>)</td><td>list</td><td><code>[1] + [2]</code> → <code>[1, 2]</code></td></tr><tr><td>序列重复(<code>*</code>)</td><td>与左操作数相同</td><td><code>&#39;a&#39;*3</code> → <code>&#39;aaa&#39;</code></td></tr><tr><td>字典合并(&#96;</td><td>&#96;)</td><td>dict (Python 3.9+)</td></tr></tbody></table><h1 id="类型转换规则总结"><a href="#类型转换规则总结" class="headerlink" title="类型转换规则总结"></a>类型转换规则总结</h1><ol><li><p><strong>算术运算</strong>：</p><ul><li><strong>只要有float参与，结果就是float</strong></li><li>除法(<code>/</code>)总是<strong>返回float</strong></li><li>整数运算可能自动转换为长整数(超出普通int范围时)</li></ul></li><li><p><strong>混合类型运算</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="number">3</span> + <span class="number">4.0</span>))     <span class="comment"># &lt;class &#x27;float&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="literal">True</span> + <span class="number">2</span>))    <span class="comment"># &lt;class &#x27;int&#x27;&gt; (True=1)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="literal">False</span> * <span class="number">3.5</span>)) <span class="comment"># &lt;class &#x27;float&#x27;&gt; (False=0)</span></span><br></pre></td></tr></table></figure></li><li><p><strong>布尔上下文</strong>：</p><ul><li><strong>在需要布尔值的上下文中，非零数字、非空序列&#x2F;映射等被视为True</strong></li><li>逻辑运算符可能返回非布尔值</li></ul></li></ol><p><strong>重要提示</strong>：使用<code>type()</code>函数可以检查任何表达式的结果类型：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="number">3</span> / <span class="number">2</span>))    <span class="comment"># &lt;class &#x27;float&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="number">3</span> // <span class="number">2</span>))   <span class="comment"># &lt;class &#x27;int&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="string">&#x27;a&#x27;</span> * <span class="number">3</span>))  <span class="comment"># &lt;class &#x27;str&#x27;&gt;</span></span><br></pre></td></tr></table></figure><p>就到这里吧，得快点学习了</p>]]></content>
      
      
      <categories>
          
          <category> 结构速查 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vercel部署过程</title>
      <link href="/2025/03/25/vercel%E9%83%A8%E7%BD%B2%E8%BF%87%E7%A8%8B/"/>
      <url>/2025/03/25/vercel%E9%83%A8%E7%BD%B2%E8%BF%87%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="vercel部署过程"><a href="#vercel部署过程" class="headerlink" title="vercel部署过程"></a>vercel部署过程</h1><p>我懒的很，很多时候这里是放指令的地方，但是我网站访问偏慢，我也不知道是不是问ai更快啊QAQ，那我写这个有什么意义吗？<br>猜猜我为什么不发图，发图很费图床的好吧，而且代理站点有点远，上图床很大概率加载不出来┭┮﹏┭┮</p><p>文章参考地址：<a href="https://www.cnblogs.com/echolun/p/17524216.html">https://www.cnblogs.com/echolun/p/17524216.html</a></p><blockquote><p><strong>Vercel</strong>，一个支持静态和动态网站部署的云服务平台，其特点包括个人版免费、内置CICD、自动部署、GitHub集成和丰富的集成能力。文章详细讲解了如何部署、优势及注意事项，包括环境区分、部署保护和高级功能如Monorepos和Next.js项目支持。</p></blockquote><p><strong>但是这玩意部署的东西是墙外的，如果要墙内访问，请手动解析dns和解析一个国内域名，或者更暴力的，直接挂梯子出去访问</strong></p><p>你可以让其和你的git仓库联系上，可同步过来几个仓库，方便管理</p><p>我还是多啰嗦下啊，为什么选择Vercel</p><ul><li>个人版永久免费，每个月 100G 带宽（别人访问你的项目所耗费的流量），个人项目部署完全够用，需要注意的是团队模式收费，所以要协作你只能付费。</li><li>内置 CI CD，你可以理解成一个黑盒，项目丢进去，只需要将项目导入 vercel ，一句命令自动部署。</li><li>因为内置构建流程，支持代码推送、PR 自动触发构建，不同分支唯一地址，方便测试。</li><li>支持本地、测试、生产三种环境部署，仅仅是命令区别，上手成本极低。</li><li>丰富的集成能力，项目部署自动监控，端到端自动化测试等等，当然这些并并属于 vercel 自身的能力，但它可以为你提供集成入口，让这些成为你自动部署中自动进行的一步，比如构建生产后自动完成性能指标输出，自动化测试，以及后续项目监控等等。</li></ul><p>部署方便且便宜是最大的优点了，至于访问这个不是问题<br>##部署方式<br>将项目导入 vercel 后，vercel 会自动检测并为项目所用的框架设置最佳构建配置和部署配置，这也是为什么导入项目就能直接构建的一部分原因，我们先说两种导入项目到 vercel 平台的两种方式。</p><h3 id="GitHub部署"><a href="#GitHub部署" class="headerlink" title="GitHub部署"></a>GitHub部署</h3><p>在<code>dashboard</code>点击<code>Add New</code>按钮选择 <code>Project</code>，这时会跳转到导入项目界面，选择你的<code>GitHub</code>账号（如果之前没绑定这里也可以绑定 GitHub 账号），然后点击导入按钮，这是会跳转到项目设置。</p><p><strong>这个过程会自动识别你的项目框架，如果没识别准确的话，请根据实际情况更改</strong><br>配置完毕后直接点击下面的 Deploy 进行部署，然后坐等构建就能看到 vercel 为我们部署后独一无二的<strong>预览地址</strong>了。这个网站如果要访问的话一般要梯子，请提前准备好。<br>你之后更新的项目，在后续的修改过程中，你修改项目代码，push 到仓库，GitHub 感知到代码变动，vercel 就会自动再次部署。<strong>这个过程完全自动</strong><br>我<code>GitHub</code>项目拷贝下来会有主分支，以及我的开发分支，vercel 虽然能自动部署，它怎么知道我要部署到什么环境，事实上 vercel 也已经做了提前预设，假设你的代码变动发生在 main 或者 master 分支，那么 vercel 就会自动构建部署生产环境，除此之外的分支，vercel 都会更新预览（测试）环境。</p><p>另外，让远程仓库代码变动有两种方式，<strong>第一种是直接本地推送代码，第二种就是提 PR 后合并到目标分支触发变动。</strong></p><p>假设你集成了<code>GitHub</code>，在你 PR 合并前，你甚至能在<code>GitHub PR</code>中直接看到你需要提 PR 的分支部署后的预览地址，直接看 vercel 帮你部署后的效果。</p><h3 id="本地部署"><a href="#本地部署" class="headerlink" title="本地部署"></a>本地部署</h3><p>你要觉得一些测试项目扔git上面太掉价，你又要一个假云服务器，就直接本地部署得了。</p><p><strong>我们需要在本地安装 vercel，建议是全局安装</strong>，这时候在不c盘战士后头累死你</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g vercel</span><br></pre></td></tr></table></figure><p>之后执行如下命令保证你本地登录了<code> vercel</code> 账号：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vercel login</span><br></pre></td></tr></table></figure><p>他会叫你邮箱验证的喔，去邮箱里面操作，不是卡住了o(￣ヘ￣o＃)</p><p>然后进入到项目根目录，执行<code>vercel</code>即可：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vercel</span><br></pre></td></tr></table></figure><p>之后你需要进行一些基础配置，比如你需要选择要部署的项目目录、构建命令和输出目录，如果直接回车就是执行默认配置，这些配置走完后项目就会进行部署，你可以直接等待终端部署完成后的预览地址，你可以回到 vercel 后台找到你刚才关联部署的项目，一样可以找到预览地址</p><p><strong>我的建议是除非你很熟练，那么先一路默认配置先，后头可以改的</strong><br>我们需要区分 GitHub 部署与本地部署的一些区别，集成 GitHub 后，vercel 会根据 GitHub 代码仓库分支变化，对应的自动部署匹配环境：</p><ul><li><strong>生产环境</strong>：假设 GitHub 主分支直接发生代码变动，比如 push，或者有 PR 合并到主分支都会导致生产环境重新部署，而主分支默认是 main 或者 master 分支，你可以在 GitHub 自定义你的主分支。</li><li><strong>预览环境</strong>：除了主分支之外的其他分支如果发生代码变动，vercel 会自动构建属于这个分支的独一无二的预览地址。<br>我们也可以直接通过命令来进行本地部署，但如果我们集成 GitHub，还是建议走 GitHub 工作流，这样构建会更加规范。</li></ul><p>因此构建命令更适用于本地部署，因为我们的项目并未集成 GitHub ，vercel 无处感知代码变化，这就需要开发来手动通过命令来达到不同环境部署更新的目的，接下来我们介绍不同环境的区别以及对应的命令。</p><p>你的项目结构请一定要清楚，使用什么框架进行部署</p><h2 id="构建命令与环境介绍"><a href="#构建命令与环境介绍" class="headerlink" title="构建命令与环境介绍"></a>构建命令与环境介绍</h2><p><code>vercel</code> 其实也分为<strong>开发环境，预览环境（测试环境）以及生产环境</strong>三个概念，在 vercel 团队版，你甚至能在预览环境直接进行评论（而且评论也能集成到 slack，挺符合目前我们的生态）<br>我们可以通过如下三个命令分别构建不同环境，个人感觉很重要的，因为你在编辑的时候看不见啊，要是谁可以搞个多语言通用的即时编辑器我会爱死他的。</p><ol><li><code>vercel dev： </code>这个命令用于启动本地的开发环境。它会模拟 Vercel 的云环境，让你可以在本地进行开发和测试。使用这个命令，你可以实时看到你的更改效果，而不需要将它们部署到预览或生产环境。</li><li><code>vercel： </code>这个命令用于将你的项目部署到 Vercel 的预览环境。预览环境是一个为了测试和分享而设立的临时环境，你可以在里面看到你的更改会在生产环境中出现的样子。这个命令非常适用于团队合作的场景，你可以用它来分享你的更改，获取反馈，然后在推向生产环境之前进行进一步的调整。</li><li><code>vercel --prod： </code>这个命令会将你的应用部署到生产环境。生产环境通常代表了你的应用的正式发布版本，所部署的内容会对公众可见。这个命令就是将你的项目部署上线的最终步骤。</li></ol><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>注意你的英语阅读能力或者有一个靠谱的阅读器或者翻译器，你会感谢我的噗噗。</p><ul><li>vercel 部署对于文件大小写引用更为严格，比如我发现自己项目一些文件引用文件是小写，但引用某个字母大写，Jenkins部署这些非常正常，也不会报错，但vercel 会认为这是错误，并直接报错</li></ul><p>所以如果遇到这样的错误，直接找到<strong>构建错误信息的文件</strong>去看看资源是否存在，或者资源命是否大小写匹配<br>乐中乐之大小写错误，简单而又致命，<del>怎么这么大人还会大小写不分啊，杂鱼杂鱼</del></p><ul><li>主要对应版本号</li><li>你可能需要根据自身项目构建配置，对应的调整 vercel 平台的项目设置，在这里可以看到构建相关设置，在之前我们提到 vercel 会根据你的项目自动识别框架并初始化默认配置，然而这有些时候你的项目并没有叫这个的，记得核对更改</li><li><strong>vercel 平台环境并不支持 zip，我在很长一段时间构建项目时 vercel 一直给我报找不到 zip 命令的错误，但我并未发现我的包依赖中有这个包名，</strong></li></ul><h2 id="未来展望"><a href="#未来展望" class="headerlink" title="未来展望"></a>未来展望</h2><p><strong>支持域名自定义</strong><br>你要一直用默认给你分配的那个又臭又长的地址，我相信你会疯的，点进去就一直转圈圈，你咖啡都凉了都进不去。<br>自用还好，你对外使用？，呦西，你也不想让别人看见你的地址环境吧，快去搞个域名使使。<br><strong>支持部署 URL 私有化与预览地址自定义（要钱）</strong><br>看见那个<code>要钱</code>了吗，我当然知道，但是我……哇达西，没钱啊┭┮﹏┭┮<br>所以这部分没体验过，拜拜~<br><strong>部署保护</strong><br>vercel 支持单个部署添加密码保护或者直接将部署设置为私有化部署，前者需要输入预设的密码才能访问地址，后者可以直接大范围让所有部署地址变成私有化，你可能需要密码或者 vercel 身份效验才能访问，比如企业版中我们可能不希望团队外任何人访问测试地址。<br><strong>丰富的集成能力</strong><br>除了前面提到的 GitHub 在集成上表现，vercel 其实提供了配套的对于项目部署中性能检测、项目安全、项目监控、端到端测试等一系列能力，当然现在我们的做法是分散了不同平台（比如 sentry），而非自动化部署一条线中的一部分。</p><p>最后我发现我写这个基本上没啥大用处，更多的是作者无聊的体现，是的，作者的脑子已经不在这里了，它随着早上的洗脸水一起流到下水道去了。</p>]]></content>
      
      
      <categories>
          
          <category> 平台工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 部署平台工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python 学习速查笔记（2）</title>
      <link href="/2025/03/24/python%20%E5%AD%A6%E4%B9%A0%E9%80%9F%E6%9F%A5%E7%AC%94%E8%AE%B0(2)/"/>
      <url>/2025/03/24/python%20%E5%AD%A6%E4%B9%A0%E9%80%9F%E6%9F%A5%E7%AC%94%E8%AE%B0(2)/</url>
      
        <content type="html"><![CDATA[<p>#python 学习速查笔记（2）</p><h1 id="Python-基本数据类型"><a href="#Python-基本数据类型" class="headerlink" title="Python 基本数据类型"></a>Python 基本数据类型</h1><blockquote><p>与上一篇不同，从这篇开始我将详细的开始解释各个部分</p></blockquote><ul><li>在Python 中的变量<strong>不需要声明</strong>。但是每个变量在<strong>使用前都必须赋值</strong>，变量赋值以后该变量才会被<strong>创建</strong>。</li><li>在 Python 中，<strong>变量就是变量，它没有类型</strong>，我们所说的”类型”是变量所指的<strong>内存中对象的类型</strong>。</li><li>等号<code>（=）</code>用来给变量赋值。</li></ul><p>等号（&#x3D;）运算符左边是一个变量名,等号（&#x3D;）运算符右边是存储在变量中的值。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line">counter = <span class="number">100</span>          <span class="comment"># 整型变量</span></span><br><span class="line">miles   = <span class="number">1000.0</span>       <span class="comment"># 浮点型变量</span></span><br><span class="line">name    = <span class="string">&quot;runoob&quot;</span>     <span class="comment"># 字符串</span></span><br><span class="line"><span class="built_in">print</span> (counter)</span><br><span class="line"><span class="built_in">print</span> (miles)</span><br><span class="line"><span class="built_in">print</span> (name)</span><br></pre></td></tr></table></figure><p>若是执行以上程序会输出：</p><blockquote><p>100<br>1000.0<br>runoob</p></blockquote><h2 id="多个变量赋值"><a href="#多个变量赋值" class="headerlink" title="多个变量赋值"></a>多个变量赋值</h2><p>在Python允许你同时为多个变量赋值。例如：</p><blockquote><p>a &#x3D; b &#x3D; c &#x3D; 1</p></blockquote><p>这三个整型变量这时都被赋值为1，<strong>从后向前赋值</strong>，这三个变量都被赋予相同的值，当然，为多个对象指定多个变量也是可以的,例如：</p><blockquote><p>a, b, c &#x3D; 1, 2, “runoob”</p></blockquote><p>以上a为1，b为2，c为runoob，注意赋值的时候会<strong>变更数据类型</strong></p><h1 id="标准数据类型"><a href="#标准数据类型" class="headerlink" title="标准数据类型"></a>标准数据类型</h1><p>Python3 中常见的数据类型有：</p><blockquote><ul><li>Number（数字）</li></ul></blockquote><ul><li>String（字符串）</li><li>bool（布尔类型）</li><li>List（列表）</li><li>Tuple（元组）</li><li>Set（集合）</li><li>Dictionary（字典）</li></ul><p>字典类型为python特有的数据类型，其中又有如下的分类</p><ul><li><strong>不可变数据</strong>（3 个）：Number（数字）、String（字符串）、Tuple（元组）；</li><li><strong>可变数据</strong>（3 个）：List（列表）、Dictionary（字典）、Set（集合）。</li></ul><p>除此之外还有一些高级的数据类型，如字节数组类型(bytes)等等<br>接下来我将逐一分析学习</p><h2 id="Number（数字）"><a href="#Number（数字）" class="headerlink" title="Number（数字）"></a>Number（数字）</h2><p>在Python3中支持 <code>int</code>、<code>float</code>、<code>bool</code>、<code>complex</code>（复数）。<br>在Python 3里，<strong>只有一种整数类型</strong>即为 <code>int</code>，表示为长整型，没有Long和longlong。<br>内置的<code>type()</code>函数可以用来查询变量所指的<strong>对象类型</strong>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a, b, c, d = 20, 5.5, True, 4+3j</span><br><span class="line">&gt;&gt;&gt; print(type(a), type(b), type(c), type(d))</span><br><span class="line">&lt;class &#x27;int&#x27;&gt; &lt;class &#x27;float&#x27;&gt; &lt;class &#x27;bool&#x27;&gt; &lt;class &#x27;complex&#x27;&gt;</span><br></pre></td></tr></table></figure><p>你也可以使用isinstance 来判断所选数据类型是否正确,和type有点相似</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="number">111</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">isinstance</span>(a, <span class="built_in">int</span>)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p><strong>当你指定一个值时，Number 对象就会被创建：</strong></p><blockquote><p>var1 &#x3D; 1<br>var2 &#x3D; 10</p></blockquote><p><strong>也可以使用del语句删除一些对象引用</strong>,具体的使用方法为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">del var1[,var2[,var3[....,varN]]]</span><br></pre></td></tr></table></figure><p><strong>如果要删除单个或多个对象。</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">del var</span><br><span class="line">del var_a, var_b</span><br></pre></td></tr></table></figure><h3 id="isinstance-和-type-关系分辨"><a href="#isinstance-和-type-关系分辨" class="headerlink" title="isinstance() 和 type()关系分辨"></a>isinstance() 和 type()关系分辨</h3><p><strong>type() 函数</strong><br>这玩意返回对象的<strong>实际类型</strong>，属于精准判断类型</p><ul><li>type() <strong>不会考虑继承关系</strong>，它只返回对象的确切类型。</li><li>如果对象是子类的实例，type() 只会返回子类类型，而不会认为它是父类类型。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>(<span class="title class_ inherited__">Animal</span>):  <span class="comment"># Dog 是 Animal 的子类</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">dog = Dog()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(dog))  <span class="comment"># 输出：&lt;class &#x27;__main__.Dog&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(dog) == Animal)  <span class="comment"># 输出：False</span></span><br><span class="line"><span class="comment">#这里 type(dog) 返回的是 Dog 类型，而不是 Animal 类型</span></span><br></pre></td></tr></table></figure><strong>isinstance() 函数</strong><br>这玩意检查的对象式某个类或者子类的实例，是大类查找，范围广</li><li>isinstance() <strong>会考虑继承关系</strong>，如果对象是子类的实例，它也会认为对象是父类的实例。</li><li>可以同时检查多个类型（传入一个元组）。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>(<span class="title class_ inherited__">Animal</span>):  <span class="comment"># Dog 是 Animal 的子类</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">dog = Dog()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">isinstance</span>(dog, Dog))  <span class="comment"># 输出：True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">isinstance</span>(dog, Animal))  <span class="comment"># 输出：True</span></span><br><span class="line"><span class="comment">#这里 isinstance(dog, Animal) 返回 True，因为 Dog 是 Animal 的子类。</span></span><br></pre></td></tr></table></figure>打比方就是在车子中，type()找的是小米su7这一种车，但是isinstance()找的是汽车这一个种类<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>(<span class="title class_ inherited__">Animal</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">dog = Dog()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 type()</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(dog) == Dog)    <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(dog) == Animal) <span class="comment"># False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 isinstance()</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">isinstance</span>(dog, Dog))    <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">isinstance</span>(dog, Animal)) <span class="comment"># True</span></span><br></pre></td></tr></table></figure>但是要注意一件事情：Python3 中，bool 是 int 的子类，True 和 False 可以和数字相加，<code> True==1、False==0</code> 会返回<code> True</code>，但可以通过<code>is</code>来判断类型。</li></ul><h3 id="数值运算"><a href="#数值运算" class="headerlink" title="数值运算"></a>数值运算</h3><p>这玩意小学生都看得懂ok,我直接摆出来</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">5</span> + <span class="number">4</span>  <span class="comment"># 加法</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">4.3</span> - <span class="number">2</span> <span class="comment"># 减法</span></span><br><span class="line"><span class="number">2.3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">3</span> * <span class="number">7</span>  <span class="comment"># 乘法</span></span><br><span class="line"><span class="number">21</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">2</span> / <span class="number">4</span>  <span class="comment"># 除法，得到一个浮点数</span></span><br><span class="line"><span class="number">0.5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">2</span> // <span class="number">4</span> <span class="comment"># 除法，得到一个整数</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">17</span> % <span class="number">3</span> <span class="comment"># 取余 </span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">2</span> ** <span class="number">5</span> <span class="comment"># 乘方</span></span><br><span class="line"><span class="number">32</span></span><br></pre></td></tr></table></figure><p><strong>注意事项：</strong></p><ul><li>Python可以<strong>同时为多个变量赋值</strong>，如a, b &#x3D; 1, 2。</li><li>一个变量可以通过<strong>赋值</strong>指向<strong>不同类型</strong>的对象。</li><li>数值的<strong>除法</strong>包含两个运算符：**&#x2F; 返回一个浮点数，&#x2F;&#x2F; 返回一个整数**。</li><li>在混合计算时，Python会把<strong>整型转换成为浮点数</strong>。<br>注意精度问题<br>Python 还支持复数，复数由实数部分和虚数部分构成，可以用 a + bj，或者 complex(a,b) 表示， <strong>复数的实部 a 和虚部 b 都是浮点型</strong>。</li></ul><h2 id="String（字符串）"><a href="#String（字符串）" class="headerlink" title="String（字符串）"></a>String（字符串）</h2><p>Python中的字符串用单引号<code>&#39;</code>或双引号<code>&quot;</code>括起来，同时使用反斜杠<code>\</code>转义特殊字符。<br>字符串的截取的语法格式如下：</p><blockquote><p>变量[头下标:尾下标]    这个一般是单个字符访问</p></blockquote><p>切片用于从字符串中提取子字符串，语法为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">字符串[start:end:step]</span><br></pre></td></tr></table></figure><ul><li>start：起始索引（包含）。</li><li>end：结束索引（不包含）。</li><li>step：步长（可选，默认为 1）。</li></ul><p><strong>切片规则</strong></p><ul><li>如果省略 start，默认从字符串开头开始。</li><li>如果省略 end，默认到字符串末尾。</li><li>如果省略 step，默认为 1。</li><li>步长可以为负数，表示从右向左切片。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">&quot;Hello, World!&quot;</span></span><br><span class="line"><span class="comment"># 提取从索引 0 到 5 的子字符串（不包含索引 5）</span></span><br><span class="line"><span class="built_in">print</span>(s[<span class="number">0</span>:<span class="number">5</span>])  <span class="comment"># 输出：Hello</span></span><br><span class="line"><span class="comment"># 省略 start，从开头到索引 5</span></span><br><span class="line"><span class="built_in">print</span>(s[:<span class="number">5</span>])  <span class="comment"># 输出：Hello</span></span><br><span class="line"><span class="comment"># 省略 end，从索引 7 到末尾</span></span><br><span class="line"><span class="built_in">print</span>(s[<span class="number">7</span>:])  <span class="comment"># 输出：World!</span></span><br><span class="line"><span class="comment"># 使用负索引</span></span><br><span class="line"><span class="built_in">print</span>(s[-<span class="number">6</span>:-<span class="number">1</span>])  <span class="comment"># 输出：World</span></span><br><span class="line"><span class="comment"># 使用步长</span></span><br><span class="line"><span class="built_in">print</span>(s[::<span class="number">2</span>])  <span class="comment"># 输出：Hlo ol!（每隔一个字符取一个）</span></span><br><span class="line"><span class="comment"># 步长为负数，反转字符串</span></span><br><span class="line"><span class="built_in">print</span>(s[::-<span class="number">1</span>])  <span class="comment"># 输出：!dlroW ,olleH</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>索引值以 0 为开始值，-1 为从末尾的开始位置。</strong><br>在python中我们可以把字符串视为一个数组来理解，每个数字在自己的位置都有自己的编号，类似于门牌号一一对应，所以可以找到一个字符串的元素的具体位置</p><p>加号<code>+</code>是字符串的连接符， 星号<code>*</code>表示<strong>复制</strong>当前字符串，<strong>与之结合的数字为复制的次数</strong>。实例如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">str</span> = <span class="string">&#x27;Runoob&#x27;</span>  <span class="comment"># 定义一个字符串变量</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>)           <span class="comment"># 打印整个字符串</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>[<span class="number">0</span>:-<span class="number">1</span>])     <span class="comment"># 打印字符串第一个到倒数第二个字符（不包含倒数第一个字符）</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>[<span class="number">0</span>])        <span class="comment"># 打印字符串的第一个字符</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>[<span class="number">2</span>:<span class="number">5</span>])      <span class="comment"># 打印字符串第三到第五个字符（包含第五个字符）</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>[<span class="number">2</span>:])       <span class="comment"># 打印字符串从第三个字符开始到末尾</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span> * <span class="number">2</span>)       <span class="comment"># 打印字符串两次</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span> + <span class="string">&quot;TEST&quot;</span>)  <span class="comment"># 打印字符串和&quot;TEST&quot;拼接在一起</span></span><br></pre></td></tr></table></figure><p>输出结果如下：</p><blockquote><p>Runoob<br>Runoo<br>R<br>noo<br>noob<br>RunoobRunoob<br>RunoobTEST</p></blockquote><p>这里可以看出来啦，<strong>字符串索引规则</strong></p><ul><li><strong>索引从 0 开始</strong>：字符串的第一个字符的索引是 0，第二个字符的索引是 1，依此类推。</li><li>负索引：Python 支持负索引，从右向左计数，**-1 表示最后一个字符**，-2 表示倒数第二个字符，依此类推。</li><li>索引范围：如果索引超出字符串的长度，会抛出 IndexError 异常。</li></ul><p>Python 使用反斜杠<code>\</code>转义特殊字符，如果你不想让反斜杠发生转义，可以在字符串前面添加一个 <code>r</code>，表示原始字符串：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; print(&#x27;Ru\noob&#x27;)</span><br><span class="line">Ru</span><br><span class="line">oob</span><br><span class="line">&gt;&gt;&gt; print(r&#x27;Ru\noob&#x27;)</span><br><span class="line">Ru\noob</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>另外，反斜杠<code>(\)</code>可以作为续行符，表示下一行是上一行的延续。也可以使用<code>&quot;&quot;&quot;...&quot;&quot;&quot;</code>或者 <code>&#39;&#39;&#39;...&#39;&#39;&#39; </code>跨越多行。<br>**注意，Python 没有单独的字符类型，一个字符就是长度为1的字符串。<br>**</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; word = &#x27;Python&#x27;</span><br><span class="line">&gt;&gt;&gt; print(word[0], word[5])</span><br><span class="line">P n</span><br><span class="line">&gt;&gt;&gt; print(word[-1], word[-6])</span><br><span class="line">n P</span><br></pre></td></tr></table></figure><p><strong>注意啊，只是拿字符串和数组进行结构类似比较，没有实际关系，在python中字符串不能被改变，想你个索引的部分赋值会干报错的</strong></p><p><strong>注意：</strong><br>1、反斜杠可以用来转义，使用r可以让反斜杠不发生转义。<br>2、字符串可以用+运算符连接在一起，用*运算符重复。<br>3、Python中的字符串有两种索引方式，从左往右以0开始，从右往左以-1开始。<br>4、Python中的字符串不能改变。</p><p><em>果需要修改字符串，可以创建一个新的字符串</em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">&quot;Hello, World!&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 尝试修改字符会报错</span></span><br><span class="line"><span class="comment"># s[0] = &#x27;h&#x27;  # 报错：TypeError: &#x27;str&#x27; object does not support item assignment</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以通过切片和拼接创建新字符串</span></span><br><span class="line">new_s = <span class="string">&#x27;h&#x27;</span> + s[<span class="number">1</span>:]</span><br><span class="line"><span class="built_in">print</span>(new_s)  <span class="comment"># 输出：hello, World!</span></span><br></pre></td></tr></table></figure><p><strong>常用的字符串操作</strong><br>使用<code>len()</code>函数获取字符串的<strong>长度</strong>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">&quot;Hello, World!&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(s))  <span class="comment"># 输出：13</span></span><br></pre></td></tr></table></figure><p>可以通过<strong>索引</strong>或<strong>直接遍历</strong>字符串中的字符。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">&quot;Hello&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过索引遍历</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s)):</span><br><span class="line">    <span class="built_in">print</span>(s[i])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 直接遍历字符</span></span><br><span class="line"><span class="keyword">for</span> char <span class="keyword">in</span> s:</span><br><span class="line">    <span class="built_in">print</span>(char)</span><br></pre></td></tr></table></figure><p>使用<code>in</code>关键字检查某个字符或子字符串是否存在于字符串中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">&quot;Hello, World!&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;o&#x27;</span> <span class="keyword">in</span> s)  <span class="comment"># 输出：True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Python&#x27;</span> <span class="keyword">in</span> s)  <span class="comment"># 输出：False</span></span><br></pre></td></tr></table></figure><h2 id="bool（布尔类型）"><a href="#bool（布尔类型）" class="headerlink" title="bool（布尔类型）"></a>bool（布尔类型）</h2><p><strong>布尔类型即 True 或 False。</strong><br>在 Python 中，True 和 False 都是关键字，表示布尔值。注意格式转换<br>布尔类型可以用来控制程序的流程，比如判断某个条件是否成立，或者在某个条件满足时执行某段代码。<br><strong>布尔类型特点：</strong></p><ul><li>布尔类型只有两个值：True 和 False。没多的了</li><li>** bool 是 int 的子类<strong>，因此</strong>布尔值可以被看作整数<strong>来使用，其中</strong> True 等价于 1**。</li><li>布尔类型<strong>可以和其他数据类型进行比较</strong>，比如数字、字符串等。在比较时，Python 会将 <strong>True 视为 1，False 视为 0</strong>。</li><li>布尔类型可以和<strong>逻辑运算符一起使用</strong>，包括 <code>and</code>、<code>or</code> 和 <code>not</code>。这些运算符可以用来<strong>组合多个布尔表达式</strong>，生成一个新的布尔值。</li><li>布尔类型也可以<strong>被转换成其他数据类型</strong>，比如整数、浮点数和字符串。在转换时，True 会被转换成 1，False 会被转换成 0。</li><li>可以使用 bool() 函数将其他类型的值转换为布尔值。以下值在转换为布尔值时为 False：None、False、零 (0、0.0、0j)、空序列（如 ‘’、()、[]）和空映射（如 {}）。其他所有值转换为布尔值时均为 True。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 布尔类型的值和类型</span></span><br><span class="line">a = <span class="literal">True</span></span><br><span class="line">b = <span class="literal">False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(a))  <span class="comment"># &lt;class &#x27;bool&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(b))  <span class="comment"># &lt;class &#x27;bool&#x27;&gt;</span></span><br><span class="line"><span class="comment"># 布尔类型的整数表现</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">int</span>(<span class="literal">True</span>))   <span class="comment"># 1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">int</span>(<span class="literal">False</span>))  <span class="comment"># 0</span></span><br><span class="line"><span class="comment"># 使用 bool() 函数进行转换</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bool</span>(<span class="number">0</span>))         <span class="comment"># False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bool</span>(<span class="number">42</span>))        <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bool</span>(<span class="string">&#x27;&#x27;</span>))        <span class="comment"># False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bool</span>(<span class="string">&#x27;Python&#x27;</span>))  <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bool</span>([]))        <span class="comment"># False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bool</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])) <span class="comment"># True</span></span><br><span class="line"><span class="comment"># 布尔逻辑运算</span></span><br><span class="line"><span class="built_in">print</span>(<span class="literal">True</span> <span class="keyword">and</span> <span class="literal">False</span>)  <span class="comment"># False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="literal">True</span> <span class="keyword">or</span> <span class="literal">False</span>)   <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="keyword">not</span> <span class="literal">True</span>)        <span class="comment"># False</span></span><br><span class="line"><span class="comment"># 布尔比较运算</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">5</span> &gt; <span class="number">3</span>)  <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">2</span> == <span class="number">2</span>) <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">7</span> &lt; <span class="number">4</span>)  <span class="comment"># False</span></span><br><span class="line"><span class="comment"># 布尔值在控制流中的应用</span></span><br><span class="line"><span class="keyword">if</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;This will always print&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> <span class="literal">False</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;This will also always print&quot;</span>)</span><br><span class="line">x = <span class="number">10</span></span><br><span class="line"><span class="keyword">if</span> x:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;x is non-zero and thus True in a boolean context&quot;</span>)</span><br></pre></td></tr></table></figure>这里要注意<strong>数据类型的真假性</strong>，因为在 Python 中，所有非零的数字和非空的字符串、列表、元组等数据类型都被视为 True，只有** 0、空字符串、空列表、空元组**等被视为 False。</li></ul><h2 id="List（列表）"><a href="#List（列表）" class="headerlink" title="List（列表）"></a>List（列表）</h2><p>这玩意怕不是在python中用的最为频繁的数据类型之一<br>列表可以完成大多数<strong>集合类的数据结构实现</strong>。列表中<strong>元素的类型可以不相同</strong>，它支持数字，字符串甚至可以包含列表（所谓嵌套）。表中套表</p><p>列表是写在方括号 [] 之间、用逗号分隔开的元素列表。</p><blockquote><p>变量[头下标:尾下标]</p></blockquote><p>和字符串一样，列表同样可以被索引和截取，列表被截取后返回一个包含所需元素的新列表。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建一个空列表</span></span><br><span class="line">empty_list = []</span><br><span class="line"><span class="comment"># 创建一个包含整数的列表</span></span><br><span class="line">numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="comment"># 创建一个包含不同类型元素的列表</span></span><br><span class="line">mixed_list = [<span class="number">1</span>, <span class="string">&quot;Hello&quot;</span>, <span class="number">3.14</span>, <span class="literal">True</span>]</span><br><span class="line"><span class="comment"># 创建一个嵌套列表（列表中的列表）</span></span><br><span class="line">nested_list = [[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>], [<span class="number">5</span>, <span class="number">6</span>]]</span><br></pre></td></tr></table></figure><p>从排列逻辑上这个和字符串相当像，但是列表式可以修改的，如果你要修改，请见下<br><strong>修改单个元素</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fruits = [<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;cherry&quot;</span>]</span><br><span class="line">fruits[<span class="number">1</span>] = <span class="string">&quot;blueberry&quot;</span></span><br><span class="line"><span class="built_in">print</span>(fruits)  <span class="comment"># 输出：[&#x27;apple&#x27;, &#x27;blueberry&#x27;, &#x27;cherry&#x27;]</span></span><br></pre></td></tr></table></figure><p><strong>修改多个元素（通过切片）</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">numbers = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">numbers[<span class="number">1</span>:<span class="number">4</span>] = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>]</span><br><span class="line"><span class="built_in">print</span>(numbers)  <span class="comment"># 输出：[0, 10, 20, 30, 4, 5]</span></span><br></pre></td></tr></table></figure><blockquote><p>Python 列表截取可以接收第三个参数，参数作用是截取的步长，以下实例在索引 1 到索引 4 的位置并设置为步长为 2（间隔一个位置）来截取字符串：</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">def reverseWords(input): </span><br><span class="line">    # 通过空格将字符串分隔符，把各个单词分隔为列表</span><br><span class="line">    inputWords = input.split(&quot; &quot;) </span><br><span class="line">    # 翻转字符串</span><br><span class="line">    # 假设列表 list = [1,2,3,4],  </span><br><span class="line">    # list[0]=1, list[1]=2 ，而 -1 表示最后一个元素 list[-1]=4 ( 与 list[3]=4 一样) </span><br><span class="line">    # inputWords[-1::-1] 有三个参数</span><br><span class="line">    # 第一个参数 -1 表示最后一个元素</span><br><span class="line">    # 第二个参数为空，表示移动到列表末尾</span><br><span class="line">    # 第三个参数为步长，-1 表示逆向</span><br><span class="line">    inputWords=inputWords[-1::-1] </span><br><span class="line">    # 重新组合字符串</span><br><span class="line">    output = &#x27; &#x27;.join(inputWords) </span><br><span class="line">    return output </span><br><span class="line">if __name__ == &quot;__main__&quot;: </span><br><span class="line">    input = &#x27;I like runoob&#x27;</span><br><span class="line">    rw = reverseWords(input) </span><br><span class="line">    print(rw)</span><br></pre></td></tr></table></figure><blockquote><p>runoob like I</p></blockquote><p>其他常用操作</p><h3 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h3><ul><li>**append()**：在列表末尾添加一个元素。</li><li>**extend()**：在列表末尾添加多个元素（传入一个可迭代对象）。</li><li>**insert()**：在指定位置插入一个元素。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">fruits = [<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>]</span><br><span class="line"><span class="comment"># 添加单个元素</span></span><br><span class="line">fruits.append(<span class="string">&quot;cherry&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(fruits)  <span class="comment"># 输出：[&#x27;apple&#x27;, &#x27;banana&#x27;, &#x27;cherry&#x27;]</span></span><br><span class="line"><span class="comment"># 添加多个元素</span></span><br><span class="line">fruits.extend([<span class="string">&quot;orange&quot;</span>, <span class="string">&quot;grape&quot;</span>])</span><br><span class="line"><span class="built_in">print</span>(fruits)  <span class="comment"># 输出：[&#x27;apple&#x27;, &#x27;banana&#x27;, &#x27;cherry&#x27;, &#x27;orange&#x27;, &#x27;grape&#x27;]</span></span><br><span class="line"><span class="comment"># 在指定位置插入元素</span></span><br><span class="line">fruits.insert(<span class="number">1</span>, <span class="string">&quot;blueberry&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(fruits)  <span class="comment"># 输出：[&#x27;apple&#x27;, &#x27;blueberry&#x27;, &#x27;banana&#x27;, &#x27;cherry&#x27;, &#x27;orange&#x27;, &#x27;grape&#x27;]</span></span><br></pre></td></tr></table></figure>有加就有减</li></ul><h3 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h3><p>-** remove()**：删除第一个匹配的元素。</p><ul><li>**pop()**：删除指定位置的元素（默认删除最后一个元素）。</li><li><strong>del 语句</strong>：删除指定位置的元素或切片。</li><li>**clear()**：清空列表。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">fruits = [<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;cherry&quot;</span>, <span class="string">&quot;banana&quot;</span>]</span><br><span class="line"><span class="comment"># 删除第一个匹配的元素</span></span><br><span class="line">fruits.remove(<span class="string">&quot;banana&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(fruits)  <span class="comment"># 输出：[&#x27;apple&#x27;, &#x27;cherry&#x27;, &#x27;banana&#x27;]</span></span><br><span class="line"><span class="comment"># 删除指定位置的元素</span></span><br><span class="line">fruits.pop(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(fruits)  <span class="comment"># 输出：[&#x27;apple&#x27;, &#x27;banana&#x27;]</span></span><br><span class="line"><span class="comment"># 删除最后一个元素</span></span><br><span class="line">fruits.pop()</span><br><span class="line"><span class="built_in">print</span>(fruits)  <span class="comment"># 输出：[&#x27;apple&#x27;]</span></span><br><span class="line"><span class="comment"># 使用 del 语句删除元素</span></span><br><span class="line"><span class="keyword">del</span> fruits[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(fruits)  <span class="comment"># 输出：[]</span></span><br><span class="line"><span class="comment"># 清空列表</span></span><br><span class="line">fruits.clear()</span><br><span class="line"><span class="built_in">print</span>(fruits)  <span class="comment"># 输出：[]</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="查找元素"><a href="#查找元素" class="headerlink" title="查找元素"></a>查找元素</h3><ul><li>**index()**：返回第一个匹配元素的索引。</li><li><strong>in 关键字</strong>：检查元素是否存在于列表中<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">fruits = [<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;cherry&quot;</span>]</span><br><span class="line"><span class="comment"># 查找元素的索引</span></span><br><span class="line"><span class="built_in">print</span>(fruits.index(<span class="string">&quot;banana&quot;</span>))  <span class="comment"># 输出：1</span></span><br><span class="line"><span class="comment"># 检查元素是否存在</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;cherry&quot;</span> <span class="keyword">in</span> fruits)  <span class="comment"># 输出：True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;orange&quot;</span> <span class="keyword">in</span> fruits)  <span class="comment"># 输出：False</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="排序和反转"><a href="#排序和反转" class="headerlink" title="排序和反转"></a>排序和反转</h3><ul><li>**sort()**：对列表进行排序（默认升序）。</li><li>**reverse()**：反转列表。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">numbers = [<span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">2</span>]</span><br><span class="line"><span class="comment"># 排序</span></span><br><span class="line">numbers.sort()</span><br><span class="line"><span class="built_in">print</span>(numbers)  <span class="comment"># 输出：[1, 1, 2, 3, 4, 5, 9]</span></span><br><span class="line"><span class="comment"># 反转</span></span><br><span class="line">numbers.reverse()</span><br><span class="line"><span class="built_in">print</span>(numbers)  <span class="comment"># 输出：[9, 5, 4, 3, 2, 1, 1]</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="针对列表的常用函数"><a href="#针对列表的常用函数" class="headerlink" title="针对列表的常用函数"></a>针对列表的常用函数</h3><ul><li>**len()**：返回列表的长度。</li><li>**min()**：返回列表中的最小值。</li><li>**max()**：返回列表中的最大值。</li><li>**sum()**：返回列表中所有元素的和（仅适用于数值列表）。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(numbers))  <span class="comment"># 输出：5</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">min</span>(numbers))  <span class="comment"># 输出：1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">max</span>(numbers))  <span class="comment"># 输出：5</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>(numbers))  <span class="comment"># 输出：15</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="列表推导式"><a href="#列表推导式" class="headerlink" title="列表推导式"></a>列表推导式</h3><p>这是一种非常简洁快速的列表创建方式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建一个包含 0 到 9 的平方的列表</span></span><br><span class="line">squares = [x**<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line"><span class="built_in">print</span>(squares)  <span class="comment"># 输出：[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]</span></span><br><span class="line"><span class="comment"># 创建一个包含偶数的列表</span></span><br><span class="line">evens = [x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>) <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(evens)  <span class="comment"># 输出：[0, 2, 4, 6, 8]</span></span><br></pre></td></tr></table></figure><h3 id="列表的嵌套"><a href="#列表的嵌套" class="headerlink" title="列表的嵌套"></a>列表的嵌套</h3><p>列表可以嵌套，但是在内存中的结构会显得比较复杂</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">matrix = [</span><br><span class="line">    [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">    [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>],</span><br><span class="line">    [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line">]</span><br><span class="line"><span class="comment"># 访问嵌套列表中的元素</span></span><br><span class="line"><span class="built_in">print</span>(matrix[<span class="number">1</span>][<span class="number">2</span>])  <span class="comment"># 输出：6</span></span><br></pre></td></tr></table></figure><h2 id="Tuple（元组）"><a href="#Tuple（元组）" class="headerlink" title="Tuple（元组）"></a>Tuple（元组）</h2><p>这玩意和列表及其接近，不同之处在于<strong>元组的元素不能修改。</strong>元组写在小括号<code>()</code>里，元素之间用逗号隔开。<br>元组中的元素类型也可以不相同：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="built_in">tuple</span> = ( <span class="string">&#x27;abcd&#x27;</span>, <span class="number">786</span> , <span class="number">2.23</span>, <span class="string">&#x27;runoob&#x27;</span>, <span class="number">70.2</span>  )</span><br><span class="line">tinytuple = (<span class="number">123</span>, <span class="string">&#x27;runoob&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">tuple</span>)             <span class="comment"># 输出完整元组</span></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">tuple</span>[<span class="number">0</span>])          <span class="comment"># 输出元组的第一个元素</span></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">tuple</span>[<span class="number">1</span>:<span class="number">3</span>])        <span class="comment"># 输出从第二个元素开始到第三个元素</span></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">tuple</span>[<span class="number">2</span>:])         <span class="comment"># 输出从第三个元素开始的所有元素</span></span><br><span class="line"><span class="built_in">print</span> (tinytuple * <span class="number">2</span>)     <span class="comment"># 输出两次元组</span></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">tuple</span> + tinytuple) <span class="comment"># 连接元组</span></span><br></pre></td></tr></table></figure><p><strong>输出结果如下：</strong></p><blockquote><p>(‘abcd’, 786, 2.23, ‘runoob’, 70.2)<br>abcd<br>(786, 2.23)<br>(2.23, ‘runoob’, 70.2)<br>(123, ‘runoob’, 123, ‘runoob’)<br>(‘abcd’, 786, 2.23, ‘runoob’, 70.2, 123, ‘runoob’)</p></blockquote><ul><li>可以把字符串看作一种特殊的元组。*<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; tup = (1, 2, 3, 4, 5, 6)</span><br><span class="line">&gt;&gt;&gt; print(tup[0])</span><br><span class="line">1</span><br><span class="line">&gt;&gt;&gt; print(tup[1:5])</span><br><span class="line">(2, 3, 4, 5)</span><br><span class="line">&gt;&gt;&gt; tup[0] = 11  # 修改元组元素的操作是非法的</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">TypeError: &#x27;tuple&#x27; object does not support item assignment</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure></li></ul><ul><li>虽然tuple的元素不可改变，但它可以包含可变的对象，比如list列表。</li><li>构造包含 0 个或 1 个元素的元组比较特殊，所以有一些额外的语法规则：<br>例如：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tup1 = ()    # 空元组</span><br><span class="line">tup2 = (20,) # 一个元素，需要在元素后添加逗号</span><br></pre></td></tr></table></figure>如果你想创建<strong>只有一个元素</strong>的元组，需要注意在<strong>元素后面添加一个逗号</strong>，以区分它是一个元组而不是一个普通的值，这是因为在没有逗号的情况下，<strong>Python会将括号解释为数学运算中的括号，而不是元组的表示</strong>。</li></ul><p>如果不添加逗号，如下所示，它将被解释为一个普通的值而不是元组：</p><blockquote><p>not_a_tuple &#x3D; (42)</p></blockquote><p>这样的话，not_a_tuple 将是整数类型而不是元组类型。<br>string、list 和 tuple 都属于 sequence（序列）。<br><strong>注意：</strong></p><p>1、与字符串一样，<strong>元组的元素不能修改</strong>。很像一个大号的字符串<br>2、元组也可以被<strong>索引和切片</strong>，方法一样。<br>3、注意构造包含 0 或 1 个元素的元组的特殊语法规则。<br>4、元组也可以使用 + 操作符进行拼接<br>基本和列表做好区分即可，性质基本上一致</p><h2 id="Set（集合）"><a href="#Set（集合）" class="headerlink" title="Set（集合）"></a>Set（集合）</h2><p>Python 中的<strong>集合（Set）</strong>是一种<strong>无序、可变</strong>的数据类型，用于<strong>存储唯一的元素</strong>。<br>集合中的元素不会重复，并且可以进行<strong>交集、并集、差集</strong>等常见的集合操作。就像是正常的数学集合操作<br>在 Python 中，集合使用大括号<code>&#123;&#125;</code>表示，元素之间用逗号<code>,</code>分隔。<br>另外，也可以使用<code>set()</code>函数创建集合。<br><strong>这里注意下：</strong>语法重叠<br><strong>创建一个空集合必须用 set() 而不是 { }，因为 { } 是用来创建一个空字典。</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">parame = &#123;value01,value02,...&#125;</span><br><span class="line">或者</span><br><span class="line">set(value)</span><br></pre></td></tr></table></figure><p>以下给出一个简单的实例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"></span><br><span class="line">sites = &#123;<span class="string">&#x27;Google&#x27;</span>, <span class="string">&#x27;Taobao&#x27;</span>, <span class="string">&#x27;Runoob&#x27;</span>, <span class="string">&#x27;Facebook&#x27;</span>, <span class="string">&#x27;Zhihu&#x27;</span>, <span class="string">&#x27;Baidu&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(sites)   <span class="comment"># 输出集合，重复的元素被自动去掉</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 成员测试</span></span><br><span class="line"><span class="keyword">if</span> <span class="string">&#x27;Runoob&#x27;</span> <span class="keyword">in</span> sites :</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Runoob 在集合中&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Runoob 不在集合中&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># set可以进行集合运算</span></span><br><span class="line">a = <span class="built_in">set</span>(<span class="string">&#x27;abracadabra&#x27;</span>)</span><br><span class="line">b = <span class="built_in">set</span>(<span class="string">&#x27;alacazam&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a - b)     <span class="comment"># a 和 b 的差集</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a | b)     <span class="comment"># a 和 b 的并集</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a &amp; b)     <span class="comment"># a 和 b 的交集</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a ^ b)     <span class="comment"># a 和 b 中不同时存在的元素</span></span><br></pre></td></tr></table></figure><p>输出结果：</p><blockquote><p>{‘Zhihu’, ‘Baidu’, ‘Taobao’, ‘Runoob’, ‘Google’, ‘Facebook’}<br>Runoob 在集合中<br>{‘b’, ‘c’, ‘a’, ‘r’, ‘d’}<br>{‘r’, ‘b’, ‘d’}<br>{‘b’, ‘c’, ‘a’, ‘z’, ‘m’, ‘r’, ‘l’, ‘d’}<br>{‘c’, ‘a’}<br>{‘z’, ‘b’, ‘m’, ‘r’, ‘l’, ‘d’}</p></blockquote><h2 id="Dictionary（字典）"><a href="#Dictionary（字典）" class="headerlink" title="Dictionary（字典）"></a>Dictionary（字典）</h2><p>这玩意是python中特有的数据类型，是<strong>内置数据类型</strong>，<strong>重要也非常有用</strong><br><em>列表是有序的对象集合，字典是无序的对象集合</em>。两者之间的区别在于：字典当中的元素是通过<strong>键</strong>（key）来存取的，而不是通过<strong>偏移存取</strong>。<br>这个数据结构存储的是<strong>键值对</strong>，字典是<strong>无序的</strong>，可变的，且键必须是<strong>唯一的</strong><br><em>字典用花括号 {} 表示，键值对之间用逗号 , 分隔</em>大体构建实例如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建一个空字典</span></span><br><span class="line">empty_dict = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个包含键值对的字典</span></span><br><span class="line">person = &#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Alice&quot;</span>,</span><br><span class="line">    <span class="string">&quot;age&quot;</span>: <span class="number">25</span>,</span><br><span class="line">    <span class="string">&quot;city&quot;</span>: <span class="string">&quot;New York&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 dict() 函数创建字典</span></span><br><span class="line">another_dict = <span class="built_in">dict</span>(name=<span class="string">&quot;Bob&quot;</span>, age=<span class="number">30</span>, city=<span class="string">&quot;San Francisco&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 嵌套字典</span></span><br><span class="line">nested_dict = &#123;</span><br><span class="line">    <span class="string">&quot;person1&quot;</span>: &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;Alice&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">25</span>&#125;,</span><br><span class="line">    <span class="string">&quot;person2&quot;</span>: &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;Bob&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">30</span>&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="访问字典元素"><a href="#访问字典元素" class="headerlink" title="访问字典元素"></a>访问字典元素</h3><p><strong>通过键访问值</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">person = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;Alice&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">25</span>, <span class="string">&quot;city&quot;</span>: <span class="string">&quot;New York&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问键对应的值</span></span><br><span class="line"><span class="built_in">print</span>(person[<span class="string">&quot;name&quot;</span>])  <span class="comment"># 输出：Alice</span></span><br><span class="line"><span class="built_in">print</span>(person[<span class="string">&quot;age&quot;</span>])   <span class="comment"># 输出：25</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果键不存在，会抛出 KeyError</span></span><br><span class="line"><span class="comment"># print(person[&quot;gender&quot;])  # 报错：KeyError: &#x27;gender&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>使用 get() 方法访问值</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(person.get(<span class="string">&quot;name&quot;</span>))        <span class="comment"># 输出：Alice</span></span><br><span class="line"><span class="built_in">print</span>(person.get(<span class="string">&quot;gender&quot;</span>))      <span class="comment"># 输出：None</span></span><br><span class="line"><span class="built_in">print</span>(person.get(<span class="string">&quot;gender&quot;</span>, <span class="string">&quot;N/A&quot;</span>))  <span class="comment"># 输出：N/A（默认值）</span></span><br></pre></td></tr></table></figure><p>这玩意可以避免键不存在时的错误，键不在返回返回<code>None</code>或指定的<code>默认值</code></p><h3 id="修改字典"><a href="#修改字典" class="headerlink" title="修改字典"></a>修改字典</h3><p><strong>添加或修改键值对</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">person = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;Alice&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">25</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加新键值对</span></span><br><span class="line">person[<span class="string">&quot;city&quot;</span>] = <span class="string">&quot;New York&quot;</span></span><br><span class="line"><span class="built_in">print</span>(person)  <span class="comment"># 输出：&#123;&#x27;name&#x27;: &#x27;Alice&#x27;, &#x27;age&#x27;: 25, &#x27;city&#x27;: &#x27;New York&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改已有键的值</span></span><br><span class="line">person[<span class="string">&quot;age&quot;</span>] = <span class="number">26</span></span><br><span class="line"><span class="built_in">print</span>(person)  <span class="comment"># 输出：&#123;&#x27;name&#x27;: &#x27;Alice&#x27;, &#x27;age&#x27;: 26, &#x27;city&#x27;: &#x27;New York&#x27;&#125;</span></span><br></pre></td></tr></table></figure><p><strong>合并字典</strong><br>使用 update() 方法可以将一个字典的键值对合并到另一个字典中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">person = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;Alice&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">25</span>&#125;</span><br><span class="line">extra_info = &#123;<span class="string">&quot;city&quot;</span>: <span class="string">&quot;New York&quot;</span>, <span class="string">&quot;gender&quot;</span>: <span class="string">&quot;Female&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">person.update(extra_info)</span><br><span class="line"><span class="built_in">print</span>(person)  <span class="comment"># 输出：&#123;&#x27;name&#x27;: &#x27;Alice&#x27;, &#x27;age&#x27;: 25, &#x27;city&#x27;: &#x27;New York&#x27;, &#x27;gender&#x27;: &#x27;Female&#x27;&#125;</span></span><br></pre></td></tr></table></figure><h3 id="删除字典元素"><a href="#删除字典元素" class="headerlink" title="删除字典元素"></a>删除字典元素</h3><ul><li><strong>del 语句</strong>：删除指定键的键值对。</li><li><strong>pop() 方法</strong>：删除指定键的键值对，并返回对应的值。</li><li><strong>popitem()</strong> 方法：删除并返回最后一个键值对（Python 3.7 及以上版本）。</li><li><strong>clear()</strong> 方法：清空字典。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">person = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;Alice&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">25</span>, <span class="string">&quot;city&quot;</span>: <span class="string">&quot;New York&quot;</span>&#125;</span><br><span class="line"><span class="comment"># 删除指定键值对</span></span><br><span class="line"><span class="keyword">del</span> person[<span class="string">&quot;age&quot;</span>]</span><br><span class="line"><span class="built_in">print</span>(person)  <span class="comment"># 输出：&#123;&#x27;name&#x27;: &#x27;Alice&#x27;, &#x27;city&#x27;: &#x27;New York&#x27;&#125;</span></span><br><span class="line"><span class="comment"># 删除并返回指定键的值</span></span><br><span class="line">city = person.pop(<span class="string">&quot;city&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(city)    <span class="comment"># 输出：New York</span></span><br><span class="line"><span class="built_in">print</span>(person)  <span class="comment"># 输出：&#123;&#x27;name&#x27;: &#x27;Alice&#x27;&#125;</span></span><br><span class="line"><span class="comment"># 删除并返回最后一个键值对</span></span><br><span class="line">last_item = person.popitem()</span><br><span class="line"><span class="built_in">print</span>(last_item)  <span class="comment"># 输出：(&#x27;name&#x27;, &#x27;Alice&#x27;)</span></span><br><span class="line"><span class="built_in">print</span>(person)     <span class="comment"># 输出：&#123;&#125;</span></span><br><span class="line"><span class="comment"># 清空字典</span></span><br><span class="line">person.clear()</span><br><span class="line"><span class="built_in">print</span>(person)  <span class="comment"># 输出：&#123;&#125;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h3><p><strong>获取所有键、值或键值对</strong></p><ul><li>**keys()**：返回字典中所有的键。</li><li>**values()**：返回字典中所有的值。</li><li>**items()**：返回字典中所有的键值对<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">person = &#123;&quot;name&quot;: &quot;Alice&quot;, &quot;age&quot;: 25, &quot;city&quot;: &quot;New York&quot;&#125;</span><br><span class="line"># 获取所有键</span><br><span class="line">print(person.keys())   # 输出：dict_keys([&#x27;name&#x27;, &#x27;age&#x27;, &#x27;city&#x27;])</span><br><span class="line"># 获取所有值</span><br><span class="line">print(person.values()) # 输出：dict_values([&#x27;Alice&#x27;, 25, &#x27;New York&#x27;])</span><br><span class="line"># 获取所有键值对</span><br><span class="line">print(person.items())  # 输出：dict_items([(&#x27;name&#x27;, &#x27;Alice&#x27;), (&#x27;age&#x27;, 25), (&#x27;city&#x27;, &#x27;New York&#x27;)])</span><br></pre></td></tr></table></figure><strong>检查键是否存在</strong>，用<code>in</code>(重复了？)<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;name&quot;</span> <span class="keyword">in</span> person)  <span class="comment"># 输出：True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;gender&quot;</span> <span class="keyword">in</span> person)  <span class="comment"># 输出：False</span></span><br></pre></td></tr></table></figure>使用 len() 函数获取字典中键值对的数量，字典长度<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(person))  <span class="comment"># 输出：3</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="bytes-类型"><a href="#bytes-类型" class="headerlink" title="bytes 类型"></a>bytes 类型</h2><p>在 Python3 中，bytes 类型表示的是不可变的二进制序列（byte sequence）。<br>与字符串类型不同的是，bytes 类型中的元素是整数值（0 到 255 之间的整数），而不是 Unicode 字符。<br>bytes 类型通常用于处理二进制数据，比如图像文件、音频文件、视频文件等等。在网络编程中，也经常使用 bytes 类型来传输二进制数据。<br>创建 bytes 对象的方式有多种，最常见的方式是使用 b 前缀：<br>此外，也可以使用 bytes() 函数将其他类型的对象转换为 bytes 类型。bytes() 函数的第一个参数是要转换的对象，第二个参数是编码方式，如果省略第二个参数，则默认使用 UTF-8 编码：</p><blockquote><p>x &#x3D; bytes(“hello”, encoding&#x3D;”utf-8”)</p></blockquote><p>与字符串类型类似，bytes 类型也支持许多操作和方法，如切片、拼接、查找、替换等等。同时，由于 bytes 类型是不可变的，因此在进行修改操作时需要创建一个新的 bytes 对象。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x = b&quot;hello&quot;</span><br><span class="line">y = x[1:3]  # 切片操作，得到 b&quot;el&quot;</span><br><span class="line">z = x + b&quot;world&quot;  # 拼接操作，得到 b&quot;helloworld&quot;</span><br></pre></td></tr></table></figure><p>需要注意的是，bytes 类型中的元素是整数值，因此在进行比较操作时需要使用相应的整数值。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x = b&quot;hello&quot;</span><br><span class="line">if x[0] == ord(&quot;h&quot;):</span><br><span class="line">    print(&quot;The first element is &#x27;h&#x27;&quot;)</span><br></pre></td></tr></table></figure><p>其中 ord() 函数用于将字符转换为相应的整数值。</p>]]></content>
      
      
      <categories>
          
          <category> 结构速查 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python 学习速查笔记（1）</title>
      <link href="/2025/03/17/python%20%E5%AD%A6%E4%B9%A0%E9%80%9F%E6%9F%A5%E7%AC%94%E8%AE%B0(1)/"/>
      <url>/2025/03/17/python%20%E5%AD%A6%E4%B9%A0%E9%80%9F%E6%9F%A5%E7%AC%94%E8%AE%B0(1)/</url>
      
        <content type="html"><![CDATA[<h1 id="python-学习速查笔记"><a href="#python-学习速查笔记" class="headerlink" title="python 学习速查笔记"></a>python 学习速查笔记</h1><blockquote><p>很多遍了，这次我一定要干掉这篇文章QAQ，大致结构先给出来，方便查看</p></blockquote><p>[TOC]</p><h1 id="python基础语法部分"><a href="#python基础语法部分" class="headerlink" title="python基础语法部分"></a>python基础语法部分</h1><h2 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h2><p>Python 3 默认使用 <code>UTF-8</code> 编码，所有字符串均为<code> Unicode</code> 字符串。如果需要指定其他编码，可以在文件开头添加如下声明：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: cp-1252 -*-</span></span><br></pre></td></tr></table></figure><p>此声明允许使用 Windows-1252 字符集，适用于保加利亚语、白俄罗斯语、马其顿语、俄语、塞尔维亚语等<br>主要是东欧语系</p><h2 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h2><ul><li>标识符的<strong>第一个字符必须是字母或下划线</strong> _。</li><li>其他部分可以由字母、数字和下划线组成。</li><li><strong>标识符对大小写敏感</strong>。</li><li>Python 3 支持非 ASCII 标识符，例如中文变量名。<br>但是不建议使用中文变量名，不方便维护</li></ul><h2 id="保留字（关键字）"><a href="#保留字（关键字）" class="headerlink" title="保留字（关键字）"></a>保留字（关键字）</h2><p>Python 的保留字（关键字）不能用作标识符。可以通过<code> keyword</code> 模块查看所有关键字：<br>在编译器中使用运行以下即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> keyword</span><br><span class="line"><span class="built_in">print</span>(keyword.kwlist)</span><br></pre></td></tr></table></figure><p>输出为</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">&#x27;False&#x27;</span>, <span class="string">&#x27;None&#x27;</span>, <span class="string">&#x27;True&#x27;</span>, <span class="string">&#x27;and&#x27;</span>, <span class="string">&#x27;as&#x27;</span>, <span class="string">&#x27;assert&#x27;</span>, <span class="string">&#x27;break&#x27;</span>, <span class="string">&#x27;class&#x27;</span>, <span class="string">&#x27;continue&#x27;</span>, <span class="string">&#x27;def&#x27;</span>, <span class="string">&#x27;del&#x27;</span>, <span class="string">&#x27;elif&#x27;</span>, <span class="string">&#x27;else&#x27;</span>, <span class="string">&#x27;except&#x27;</span>, <span class="string">&#x27;finally&#x27;</span>, <span class="string">&#x27;for&#x27;</span>, <span class="string">&#x27;from&#x27;</span>, <span class="string">&#x27;global&#x27;</span>, <span class="string">&#x27;if&#x27;</span>, <span class="string">&#x27;import&#x27;</span>, <span class="string">&#x27;in&#x27;</span>, <span class="string">&#x27;is&#x27;</span>, <span class="string">&#x27;lambda&#x27;</span>, <span class="string">&#x27;nonlocal&#x27;</span>, <span class="string">&#x27;not&#x27;</span>, <span class="string">&#x27;or&#x27;</span>, <span class="string">&#x27;pass&#x27;</span>, <span class="string">&#x27;raise&#x27;</span>, <span class="string">&#x27;return&#x27;</span>, <span class="string">&#x27;try&#x27;</span>, <span class="string">&#x27;while&#x27;</span>, <span class="string">&#x27;with&#x27;</span>, <span class="string">&#x27;yield&#x27;</span>]</span><br></pre></td></tr></table></figure><p>基本不会命名这些吧，建议命名直接明确，并加上注释<br>##注释</p><ul><li>单行注释以 # 开头。</li><li>多行注释可以使用多个 #，或使用三引号 ‘’’ 和 “””<br>不嫌麻烦用#来多行也行，一般使用快捷键部署<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这是单行注释</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">这是多行注释</span></span><br><span class="line"><span class="string">可以写多行内容</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">这也是多行注释</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="行与缩进"><a href="#行与缩进" class="headerlink" title="行与缩进"></a>行与缩进</h2><p>Python 使用缩进来表示代码块，不需要使用大括号 {}。同一代码块的语句必须保持相同的缩进空格数。（要是爬眼睛看瞎建议还是加上括号)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;True&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;False&quot;</span>)</span><br></pre></td></tr></table></figure><p>缩进不一致会导致<code>IndentationError </code>错误。</p><h2 id="多行语句"><a href="#多行语句" class="headerlink" title="多行语句"></a>多行语句</h2><p>句子太长会影响到可读性，在python可以将一行玩意换行</p><ul><li>使用反斜杠<code>\</code>实现多行语句：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">total = item_one + \</span><br><span class="line">        item_two + \</span><br><span class="line">        item_three</span><br></pre></td></tr></table></figure></li><li>在 []、{} 或 () 中的多行语句不需要反斜杠:<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">total = [<span class="string">&#x27;item_one&#x27;</span>, <span class="string">&#x27;item_two&#x27;</span>, <span class="string">&#x27;item_three&#x27;</span>,</span><br><span class="line">         <span class="string">&#x27;item_four&#x27;</span>, <span class="string">&#x27;item_five&#x27;</span>]</span><br></pre></td></tr></table></figure></li></ul><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>Python 支持四种数字类型：</p><ul><li>int：整数，如 1。</li><li>bool：布尔值，如 True。</li><li>float：浮点数，如 1.23、3E-2。</li><li>complex：复数，如 1 + 2j。</li><li>string:字符串，如 hello<br>可以使用<code>sys.getsizeof()</code>函数查看对象的内存占用</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="comment"># 测试整数</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;整数 10 的内存占用:&quot;</span>, sys.getsizeof(<span class="number">10</span>))  <span class="comment"># 28 字节</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;大整数 10**100 的内存占用:&quot;</span>, sys.getsizeof(<span class="number">10</span>**<span class="number">100</span>))  <span class="comment"># 72 字节</span></span><br><span class="line"><span class="comment"># 测试布尔值</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;True 的内存占用:&quot;</span>, sys.getsizeof(<span class="literal">True</span>))  <span class="comment"># 28 字节</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;False 的内存占用:&quot;</span>, sys.getsizeof(<span class="literal">False</span>))  <span class="comment"># 28 字节</span></span><br><span class="line"><span class="comment"># 测试浮点数</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;3.14 的内存占用:&quot;</span>, sys.getsizeof(<span class="number">3.14</span>))  <span class="comment"># 24 字节</span></span><br><span class="line"><span class="comment"># 测试复数</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;1 + 2j 的内存占用:&quot;</span>, sys.getsizeof(<span class="number">1</span> + <span class="number">2j</span>))  <span class="comment"># 32 字节</span></span><br><span class="line"><span class="comment"># 测试字符串</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&#x27;hello&#x27; 的内存占用:&quot;</span>, sys.getsizeof(<span class="string">&quot;hello&quot;</span>))  <span class="comment"># 54 字节</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&#x27;你好&#x27; 的内存占用:&quot;</span>, sys.getsizeof(<span class="string">&quot;你好&quot;</span>))  <span class="comment"># 76 字节</span></span><br><span class="line">````</span><br><span class="line"></span><br><span class="line"><span class="comment">### 整形（int）</span></span><br><span class="line">整数是没有**小数部分**的数字，例如 `<span class="number">1</span>`、`<span class="number">100</span>`、`-<span class="number">50</span>`。</span><br><span class="line">- Python <span class="number">3</span> 中只有一种整数类型 `<span class="built_in">int</span>`，没有 Python <span class="number">2</span> 中的 `long` 类型。</span><br><span class="line">- 整数可以无限大（仅受内存限制）。</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line">a = <span class="number">10</span></span><br><span class="line">  b = -<span class="number">5</span></span><br><span class="line">  c = <span class="number">12345678901234567890</span>  <span class="comment"># 大整数</span></span><br></pre></td></tr></table></figure><p><strong>注意事项：</strong></p><ul><li>整数运算时，除法<code>/</code>会返回浮点数，整除 <code>//</code> 会返回整数。</li><li>可以使用 <code>int()</code>(格式转换形式) 函数将<strong>其他类型</strong>转换为<strong>整数</strong>。</li></ul><h3 id="布尔型-bool"><a href="#布尔型-bool" class="headerlink" title="布尔型(bool)"></a>布尔型(bool)</h3><p>布尔值只有两个取值：True 和 False</p><ul><li>布尔值是整数的子类，True 相当于 1，False 相当于 0。</li><li>常用于条件判断和逻辑运算。（这玩意只能逻辑运算吧）<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">is_valid = <span class="literal">True</span></span><br><span class="line">is_empty = <span class="literal">False</span></span><br></pre></td></tr></table></figure><strong>注意事项：</strong><br>在逻辑运算中，<code>and</code>、<code>or</code>、<code>not</code> 是布尔运算的<strong>关键字</strong>。<br><strong>非布尔值在条件判断中会被隐式转换为布尔值</strong>，例如 0、””、[] 会被视为 False，其他值被视为 True。**(注意输出的格式转换)**</li></ul><h3 id="浮点型（float）"><a href="#浮点型（float）" class="headerlink" title="浮点型（float）"></a>浮点型（float）</h3><p>浮点数是带有小数部分的数字，例如 1.23、-0.5、3E-2（科学计数法表示）。</p><ul><li>浮点数的精度有限，可能存在精度丢失问题。</li><li>支持科学计数法表示，例如 3E-2 表示 0.03。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">3.14</span></span><br><span class="line">b = -<span class="number">0.001</span></span><br><span class="line">c = <span class="number">2.5e3</span>  <span class="comment"># 2500.0</span></span><br></pre></td></tr></table></figure></li><li>浮点数运算时可能会出现<strong>精度问题</strong>，例如 0.1 + 0.2 的结果是 0.30000000000000004。</li><li>可以使用<code>round()</code>函数对浮点数进行<strong>四舍五入</strong>。</li></ul><h3 id="复数"><a href="#复数" class="headerlink" title="复数"></a>复数</h3><p>复数由实部和虚部组成，形式为<code> a + bj</code>，其中<code>a</code>是实部，<code>b </code>是虚部，<code>j</code> 表示虚数单位。<strong>这玩意不是函数，也不是公式</strong></p><ul><li>可以使用 <code>real</code> 和 <code>imag </code>属性分别获取实部和虚部。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">1</span> + <span class="number">2j</span></span><br><span class="line">b = <span class="number">3.5</span> - <span class="number">4.7j</span></span><br><span class="line"><span class="built_in">print</span>(a.real)  <span class="comment"># 输出实部：1.0</span></span><br><span class="line"><span class="built_in">print</span>(a.imag)  <span class="comment"># 输出虚部：2.0</span></span><br></pre></td></tr></table></figure><strong>注意事项：</strong></li><li>复数的运算规则与数学中的复数运算一致。</li><li><strong>复数不能直接比较大小</strong>。你告诉我咋比吗，你告诉我呀</li></ul><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>字符串是由字符组成的序列，用单引号<code> &#39;</code>、双引号<code>&quot;</code>或三引号<code> &#39;&#39;&#39;</code>、<code>&quot;&quot;&quot;</code> 表示。<br><em><strong>多行字符串可以换行</strong></em></p><ul><li>字符串是<code>不可变</code>的，<strong>修改字符串会生成一个新的字符串</strong>。</li><li>支持<strong>索引</strong>和<strong>切片</strong>操作。</li><li>支持多种字符串操作，如<strong>拼接、重复、格式化</strong>等。<br>可以吧字符串理解成一个数组<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">s1 = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line">s2 = <span class="string">&quot;world&quot;</span></span><br><span class="line">s3 = <span class="string">&#x27;&#x27;&#x27;多行</span></span><br><span class="line"><span class="string">字符串&#x27;&#x27;&#x27;</span></span><br><span class="line">s4 = <span class="string">&quot;Python&quot;</span></span><br><span class="line"><span class="built_in">print</span>(s1[<span class="number">0</span>])      <span class="comment"># 输出：h</span></span><br><span class="line"><span class="built_in">print</span>(s2[<span class="number">1</span>:<span class="number">4</span>])    <span class="comment"># 输出：orl</span></span><br><span class="line"><span class="built_in">print</span>(s1 + s2)    <span class="comment"># 输出：helloworld</span></span><br><span class="line"><span class="built_in">print</span>(s4 * <span class="number">2</span>)     <span class="comment"># 输出：PythonPython</span></span><br></pre></td></tr></table></figure><strong>注意事项：</strong></li><li>字符串的<strong>索引从 0 开始</strong>，支持负索引（从右向左）。</li><li>切片操作<code>str[start:end:step]</code>中，<code>start</code> 包含，<code>end</code> 不包含。</li><li>使用<code>r</code>前缀可以创建原始字符串，避免转义字符生效，例如<code>r&quot;\n&quot;</code>会直接输出<code> \n</code>。</li><li>字符串格式化推荐使用<code> f-string（Python 3.6+）</code>，例如 <code>f&quot;Hello, &#123;name&#125;&quot;</code>。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span> = <span class="string">&#x27;123456789&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>[<span class="number">0</span>:-<span class="number">1</span>])  <span class="comment"># 输出第一个到倒数第二个字符</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>[<span class="number">2</span>:<span class="number">5</span>])   <span class="comment"># 输出第三到第五个字符</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span> * <span class="number">2</span>)    <span class="comment"># 输出字符串两次</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="空行"><a href="#空行" class="headerlink" title="空行"></a>空行</h2><p>函数之间或类的方法之间用空行分隔，表示一段新的代码的开始。类和函数入口之间也用一行空行分隔，以突出函数入口的开始。<br>空行与代码缩进不同，空行并不是 Python 语法的一部分。书写时不插入空行，Python 解释器运行也不会出错。但是空行的作用在于分隔两段不同功能或含义的代码，便于日后代码的维护或重构。<br><strong>记住：空行也是程序代码的一部分。</strong></p><h2 id="用户输入"><a href="#用户输入" class="headerlink" title="用户输入"></a>用户输入</h2><p>使用<code>input()</code>函数等待用户输入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">input</span>(<span class="string">&quot;\n\n按下 enter 键后退出。&quot;</span>)</span><br></pre></td></tr></table></figure><p>以上代码中 ，\n\n 在结果输出前会输出两个新的空行。一旦用户按下 enter 键时，程序将退出。</p><h2 id="同一行多条语句"><a href="#同一行多条语句" class="headerlink" title="同一行多条语句"></a>同一行多条语句</h2><p>如果想要在同一行执行多个语句可以使用分号<code>;</code>分隔多条语句：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys; x = <span class="string">&#x27;runoob&#x27;</span>; sys.stdout.write(x + <span class="string">&#x27;\n&#x27;</span>)</span><br></pre></td></tr></table></figure><p>使用脚本执行以上代码，输出结果为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">runoob</span><br></pre></td></tr></table></figure><p>使用交互式命令行执行，输出结果为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; import sys; x = &#x27;runoob&#x27;; sys.stdout.write(x + &#x27;\n&#x27;)</span><br><span class="line">runoob</span><br><span class="line">7</span><br></pre></td></tr></table></figure><p>此处的 7 表示字符数，runoob 有 6 个字符，\n 表示一个字符，加起来 7 个字符。<br>##代码组<br>缩进相同的语句构成代码组，通常用于<code> if</code>、<code>while</code>、<code>def </code>和 <code>class</code> 等复合语句。首行以<strong>关键字</strong>开始，以**冒号( : )**结束，该行之后的一行或多行代码构成代码组。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> expression : </span><br><span class="line">   suite</span><br><span class="line"><span class="keyword">elif</span> expression : </span><br><span class="line">   suite </span><br><span class="line"><span class="keyword">else</span> : </span><br><span class="line">   suite</span><br></pre></td></tr></table></figure><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><p><code>print </code>默认输出是换行的，如果要实现不换行需要在变量末尾加上 <code>end=&quot;&quot;：</code>j接下来是例子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line">x=<span class="string">&quot;a&quot;</span></span><br><span class="line">y=<span class="string">&quot;b&quot;</span></span><br><span class="line"><span class="comment"># 换行输出</span></span><br><span class="line"><span class="built_in">print</span>( x )</span><br><span class="line"><span class="built_in">print</span>( y )</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;---------&#x27;</span>)</span><br><span class="line"><span class="comment"># 不换行输出</span></span><br><span class="line"><span class="built_in">print</span>( x, end=<span class="string">&quot; &quot;</span> )</span><br><span class="line"><span class="built_in">print</span>( y, end=<span class="string">&quot; &quot;</span> )</span><br><span class="line"><span class="built_in">print</span>()</span><br></pre></td></tr></table></figure><h2 id="import-与-from…import-模块导入-很重要"><a href="#import-与-from…import-模块导入-很重要" class="headerlink" title="import 与 from…import(模块导入)[很重要]"></a>import 与 from…import(模块导入)[很重要]</h2><ul><li>在** python **用 <code>import</code> 或者 <code>from...import</code> 来导入相应的模块。</li><li>将整个模块(somemodule)导入，格式为： <code>import somemodule</code></li><li>从某个模块中导入某个函数,格式为： <code>from somemodule import somefunction</code></li><li>从某个模块中导入多个函数,格式为： <code>from somemodule import firstfunc, secondfunc, thirdfunc</code></li><li>将某个模块中的全部函数导入，格式为： <code>from somemodule import *</code></li></ul><pre><code class="python">import sys#导入sys模块print(sys.path)&quot;&quot;&quot;print (&#39;命令行参数为:&#39;)for i in sys.argv:   print (i)&quot;&quot;&quot;from sys import argv, path#导入 sys 模块的 argv,path 成员print(path) # 因为已经导入path成员，所以此处引用时不需要加sys.path</code></pre><h2 id="命令行参数"><a href="#命令行参数" class="headerlink" title="命令行参数"></a>命令行参数</h2><p>使用 <code>python -h</code> 查看命令行参数帮助信息。在对应终端键入即可,例如</p><blockquote><p>$ python -h<br>usage: python [option] … [-c cmd | -m mod | file | -] [arg] …<br>Options and arguments (and corresponding environment variables):<br>-c cmd : program passed in as string (terminates option list)<br>-d     : debug output from parser (also PYTHONDEBUG&#x3D;x)<br>-E     : ignore environment variables (such as PYTHONPATH)<br>-h     : print this help message and exit</p></blockquote><p>[ etc. ]</p>]]></content>
      
      
      <categories>
          
          <category> 结构速查 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring框架说人话版</title>
      <link href="/2025/01/07/Spring%E6%A1%86%E6%9E%B6%E8%AF%B4%E4%BA%BA%E8%AF%9D%E7%89%88/"/>
      <url>/2025/01/07/Spring%E6%A1%86%E6%9E%B6%E8%AF%B4%E4%BA%BA%E8%AF%9D%E7%89%88/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring框架说人话版本"><a href="#Spring框架说人话版本" class="headerlink" title="Spring框架说人话版本"></a>Spring框架说人话版本</h1><blockquote><p>这东西简单但是不知道考什么，量又很大，我在此进行说人话版本更新，自行复习加深</p></blockquote><h1 id="Spring框架概述Spring框架概述"><a href="#Spring框架概述Spring框架概述" class="headerlink" title="Spring框架概述Spring框架概述"></a>Spring框架概述Spring框架概述</h1><p>Spring框架是一个广泛使用的Java企业级开发框架，其体系结构由多个模块组成，每个模块都有其特定的功能和作用。</p><p>简单来说就是这玩意是由各个模块搭建起来的，所以要先知道整体构成</p><p><strong>该框架由四个部分完成构建</strong></p><ul><li>核心容器（Core Container）</li><li>数据访问&#x2F;集成层（Data Access&#x2F;Integration）</li><li>Web层（Web）</li><li>其他模块（Other Modules）</li></ul><p>而其中包含的模块才是运作的核心</p><h2 id="核心容器部分-特殊区域为着重点"><a href="#核心容器部分-特殊区域为着重点" class="headerlink" title="核心容器部分(特殊区域为着重点)"></a>核心容器部分(特殊区域为着重点)</h2><blockquote><p>Beans模块：提供了BeanFactory，是工厂模式实现的经典，Spring将管理对象称为Bean。</p></blockquote><ul><li>Core核心模块：提供了Spring框架的基本组成部分，包括IoC和DI功能。</li><li>Context上下文模块：构建于核心模块之上，它是访问定义配置的任何对象的媒介，扩展了BeanFactory的功能，其中ApplicationContext是Context模块的核心接口。</li></ul><h2 id="数据访问-集成层部分"><a href="#数据访问-集成层部分" class="headerlink" title="数据访问&#x2F;集成层部分"></a>数据访问&#x2F;集成层部分</h2><blockquote><p>JDBC模块：提供了一个JDBC的抽象层，大幅度地减少了在开发中对数据库的操作的编码。</p></blockquote><ul><li>ORM模块：提供了与多个第三方持久层框架的良好整合。</li><li>OXM模块：提供了一个支持对象&#x2F;XML映射的抽象层实现，如JAXB、Castor、XMLBeans、JiBX和XStream。</li></ul><h2 id="web层部分"><a href="#web层部分" class="headerlink" title="web层部分"></a>web层部分</h2><ul><li>Web模块：提供了基础的针对Web开发的集成特性，例如多方文件上传，利用Servlet监听器进行IoC容器初始化以及Web应用上下文。</li><li>Servlet模块：也称做Spring-webmvc模块，包含Spring的模型-视图-控制器（MVC）和REST Web Services实现的Web应用程序。</li><li>WebSocket模块：Spring 4.0以后新增功能，提供了WebSocket和SockJS的实现，以及对STOMP的支持。</li><li>Portlet模块：类似Servlet模块的功能，提供了Portlet环境下的MVC实现。</li></ul><h2 id="其他模块部分"><a href="#其他模块部分" class="headerlink" title="其他模块部分"></a>其他模块部分</h2><blockquote><p>AOP模块：提供了面向方面编程的支持，允许定义方法拦截器和切入点，将代码按照功能进行分离，以降低耦合性。</p></blockquote><ul><li>Aspects模块：提供了与AspectJ的集成功能，Aspect是一个功能强大且成熟的面向方面编程的框架。</li><li>Instrumentation模块：提供了类工具的支持和类加载器的实现，可以在特定的应用服务器中使用。</li><li>Messaging模块：Spring 4.0以后新增的模块，提供了对消息传递体系结构和协议的支持。</li><li>Test模块：提供了对单元测试和集成测试的支持。</li></ul><h1 id="spring的核心机制-依赖注入-控制反转"><a href="#spring的核心机制-依赖注入-控制反转" class="headerlink" title="spring的核心机制:依赖注入&#x2F;控制反转"></a>spring的核心机制:依赖注入&#x2F;控制反转</h1><p><code>spring的核心机制:依赖注入/控制反转</code></p><p>这个作用机制，也就是该框架是通过什么机制运作的<br><strong>依赖注入是实现控制反转的方式</strong>这个关系搞清楚</p><h2 id="控制反转（IoC）"><a href="#控制反转（IoC）" class="headerlink" title="控制反转（IoC）"></a>控制反转（IoC）</h2><p>是一种<strong>设计原则</strong>，<code>它将对象的创建和管理的控制权从应用程序代码转移到框架或容器中</code>。这样，容器负责对象的<code>生命周期</code>管理，使得代码更加灵活和可测试。<br>控制反转主要通过以下两种方式实现：</p><blockquote><p><strong>1、依赖注入（Dependency Injection，DI）：</strong></p><ul><li>通过将对象的依赖关系在运行时注入到对象中，而不是在对象内部创建依赖。可以通过构造函数、属性或方法实现。</li></ul></blockquote><p><strong>2、服务定位器（Service Locator）：</strong></p><ul><li>提供一个集中式的注册表来查找和获取服务（对象）。虽然实现了控制反转，但通常不如依赖注入灵活，因为仍需显式请求服务。</li></ul><h2 id="什么是依赖注入？"><a href="#什么是依赖注入？" class="headerlink" title="什么是依赖注入？"></a>什么是依赖注入？</h2><p>依赖注入是一种<strong>设计模式</strong>，<code>允许在运行时将对象的依赖关系注入到对象中，而不是在对象内部创建这些依赖</code>。这种方式降低了对象之间的耦合，提高了代码的可测试性和可维护性。<br>好的，下面我们以<code>AdminInfo</code>类为例，讲解依赖注入的几种主要类型。</p><p><strong>依赖注入的类型</strong></p><blockquote><p>依赖注入主要有三种类型：<code>构造函数注入</code>、<code>属性注入</code>和<code>方法注入</code>。<br><del>完整代码见其他文章</del>，这部分可以说就是记单词,<strong>如果要引入注入另一个类的话，先引入包，然后调用方法即可</strong></p></blockquote><h3 id="构造函数注入-sss"><a href="#构造函数注入-sss" class="headerlink" title="构造函数注入(sss)"></a>构造函数注入(sss)</h3><p>构造函数注入是通过类的构造函数将依赖对象传递给目标对象。在创建对象时，<strong>依赖关系在构造时就被注入</strong>。</p><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ssm.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AdminInfo</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String pwd;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 默认构造函数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AdminInfo</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 带参数的构造函数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AdminInfo</span><span class="params">(String name, String pwd)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.pwd = pwd;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AdminService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> AdminInfo adminInfo;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过构造函数注入AdminInfo</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AdminService</span><span class="params">(AdminInfo adminInfo)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.adminInfo = adminInfo;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>其中这段是重点部分，以后的代码不提供完整块</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过构造函数注入AdminInfo</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AdminService</span><span class="params">(AdminInfo adminInfo)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.adminInfo = adminInfo;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>AdminInfo是示例类名，自由替换<code>AdminInfo</code></p><h3 id="属性注入-sss"><a href="#属性注入-sss" class="headerlink" title="属性注入(sss)"></a>属性注入(sss)</h3><p>属性注入是通过公共属性或setter方法将依赖对象注入到目标对象中。这种方式在对象创建后，<strong>可以随时修改依赖关系</strong>。</p><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Setter方法进行属性注入</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAdminInfo</span><span class="params">(AdminInfo adminInfo)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.adminInfo = adminInfo;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>AdminInfo是示例类名，自由替换<code>AdminInfo</code></p><h3 id="方法注入"><a href="#方法注入" class="headerlink" title="方法注入"></a>方法注入</h3><p>方法注入是通过方法参数将依赖对象传递给目标对象的方法。这种方式适用于需要在<strong>特定方法中使用依赖的情况</strong>。<br>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AdminService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">displayAdminInfo</span><span class="params">(AdminInfo adminInfo)</span> &#123;</span><br><span class="line">        adminInfo.print();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>AdminInfo是示例类名，自由替换<code>AdminInfo</code></p><h3 id="小总结"><a href="#小总结" class="headerlink" title="小总结"></a>小总结</h3><ul><li><strong>构造函数注入</strong>：在对象创建时通过构造函数传入依赖，适合于必须依赖的情况。</li><li><strong>属性注入</strong>：通过setter方法注入依赖，适合于可选依赖或需要在对象创建后修改依赖的情况。</li><li><strong>方法注入</strong>：通过方法参数传入依赖，适合于在特定方法中使用依赖的情况。<br>以上代码没有调用的部分，只有创建部分<br>需要记住的是<code>AdminService</code>和<code>setAdminInfo</code>和<code>displayAdminInfo</code></li></ul><h2 id="Spring-Bean的装配"><a href="#Spring-Bean的装配" class="headerlink" title="Spring Bean的装配"></a>Spring Bean的装配</h2><p>在Java Web应用中，<code>ContextLoaderListener</code>和<code>ContextLoaderServlet</code>是两种常用的载入方式，用于初始化Spring应用上下文。<br>这里提一点，<strong>先配置再使用</strong></p><h3 id="ContextLoaderListener"><a href="#ContextLoaderListener" class="headerlink" title="ContextLoaderListener"></a>ContextLoaderListener</h3><p><strong>配置示例</strong>：</p><blockquote><p>在<code>web.xml</code>中配置<code>ContextLoaderListener</code>：</p></blockquote><p>只有这部分要动</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>/WEB-INF/applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>完整的不是人记的，这是配置文件，不是代码！！</strong><br>扔个完整版</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee </span></span></span><br><span class="line"><span class="string"><span class="tag">                             http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;3.1&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>/WEB-INF/applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 其他配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>使用实例：</strong><br>在<code>applicationContext.xml</code>中定义<code>Bean</code>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.example.MyBean&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h3 id="ContextLoaderServlet"><a href="#ContextLoaderServlet" class="headerlink" title="ContextLoaderServlet"></a>ContextLoaderServlet</h3><p><strong>配置示例：</strong></p><blockquote><p>在<code>web.xml</code>中配置<code>ContextLoaderServlet</code>：</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springDispatcher<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>/WEB-INF/spring-servlet.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 其他配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>使用实例：</strong><br>在<code>applicationContext.xml</code>中定义<code>Bean</code>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myController&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.example.MyController&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h3 id="小总结-1"><a href="#小总结-1" class="headerlink" title="小总结"></a>小总结</h3><ul><li>ContextLoaderListener：用于加载根应用上下文，适合于整个应用共享的Bean。</li><li>ContextLoaderServlet：用于加载Web应用上下文，通常与Spring MVC结合使用，处理特定请求。</li></ul><h2 id="六大注解（s）"><a href="#六大注解（s）" class="headerlink" title="六大注解（s）"></a>六大注解（s）</h2><ul><li>①@component注解 </li><li>②@Repository注解 </li><li>③@ Service注解 </li><li>④@Controller注解   </li><li>⑤@ Autowired注解 </li><li>⑥@resourse注解</li></ul><h3 id="1-Component"><a href="#1-Component" class="headerlink" title="1. @Component"></a>1. <code>@Component</code></h3><ul><li><strong>作用</strong>：标识一个类为<code>Spring的组件</code>，Spring会自动扫描并注册为Bean。</li><li><strong>使用场景</strong>：用于任何Spring管理的组件，通常用于通用的类。</li></ul><h3 id="2-Repository"><a href="#2-Repository" class="headerlink" title="2. @Repository"></a>2. <code>@Repository</code></h3><ul><li><strong>作用</strong>：标识一个类为<code>数据访问层的组件</code>，通常用于持久化操作。</li><li><strong>使用场景</strong>：用于DAO（数据访问对象）类，Spring会为其提供异常转换等功能。</li></ul><h3 id="3-Service"><a href="#3-Service" class="headerlink" title="3. @Service"></a>3. <code>@Service</code></h3><ul><li><strong>作用</strong>：标识一个类为<code>服务层的组件</code>，通常用于业务逻辑处理。</li><li><strong>使用场景</strong>：用于Service类，表示该类包含业务逻辑。</li></ul><h3 id="4-Controller"><a href="#4-Controller" class="headerlink" title="4. @Controller"></a>4. <code>@Controller</code></h3><ul><li><strong>作用</strong>：标识一个类为<code>控制层的组件</code>，通常用于处理请求。</li><li><strong>使用场景</strong>：用于Spring MVC中的控制器类，负责接收和处理用户请求。</li></ul><h3 id="5-Autowired"><a href="#5-Autowired" class="headerlink" title="5. @Autowired"></a>5. <code>@Autowired</code></h3><ul><li><strong>作用</strong>：用于自动注入<code>Spring容器中的Bean</code>。</li><li><strong>使用场景</strong>：可以用于构造函数、属性或方法上，Spring会根据类型自动注入相应的Bean。</li></ul><h3 id="6-Resource"><a href="#6-Resource" class="headerlink" title="6. @Resource"></a>6. <code>@Resource</code></h3><ul><li><strong>作用</strong>：用于按名称<code>自动注入Bean</code>。</li><li><strong>使用场景</strong>：可以用于属性上，Spring会根据Bean的名称进行注入，通常用于与JNDI结合使用。</li></ul><h1 id="Spring-ADP"><a href="#Spring-ADP" class="headerlink" title="Spring ADP"></a>Spring ADP</h1><h2 id="什么是AOP-什么是OOP"><a href="#什么是AOP-什么是OOP" class="headerlink" title="什么是AOP?什么是OOP?"></a>什么是AOP?什么是OOP?</h2><p><strong>AOP</strong>（面向切面编程）是一种通过切面来分离横切关注点（如日志、事务等）的编程范式；<br><strong>OOP</strong>（面向对象编程）是一种通过对象和类来组织代码和数据的编程范式。</p><h2 id="Aop和OOP的区别"><a href="#Aop和OOP的区别" class="headerlink" title="Aop和OOP的区别"></a>Aop和OOP的区别</h2><p>OOP（面向对象编程）<strong>关注对象及其行为的组织</strong>，而 AOP（面向切面编程）<strong>关注在不改变业务逻辑的情况下处理横切关注点</strong>（如日志、事务等）。</p><h3 id="AOP的常用术语"><a href="#AOP的常用术语" class="headerlink" title="AOP的常用术语:"></a>AOP的常用术语:</h3><p>好的，以下是AOP的常用术语及其英文单词：</p><blockquote><ol><li><strong>切面（Aspect）</strong></li><li><strong>连接点（Join Point）</strong></li><li><strong>切入点（Pointcut）</strong></li><li><strong>通知（Advice</strong></li><li><strong>目标对象（Target Object）</strong></li></ol></blockquote><ol start="6"><li><strong>代理对象（Proxy Object）</strong></li><li><strong>织入（Weaving）</strong></li></ol><h3 id="Xml注解：通知-给一段代码问是什么通知"><a href="#Xml注解：通知-给一段代码问是什么通知" class="headerlink" title="Xml注解：通知-给一段代码问是什么通知?"></a>Xml注解：通知-给一段代码问是什么通知?</h3><ol><li><strong>返回通知</strong>：<code>myAfterReturnAdvice</code></li><li><strong>异常通知</strong>：<code>MyThrowingAdvice</code></li><li><strong>环绕通知</strong>：<code>myAroundAdvice</code></li><li><strong>前置通知</strong>：<code>browse</code></li><li><strong>后置通知</strong>：<code>After</code></li></ol><p>这些通知分别对应于AOP中的不同切面行为。</p><h2 id="Spring的数据库的编程"><a href="#Spring的数据库的编程" class="headerlink" title="Spring的数据库的编程"></a>Spring的数据库的编程</h2><p>XML配置Spring JDBC数据源的示例：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">&lt;!-- 配置数据源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span> <span class="comment">&lt;!-- 配置驱动 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/mydb&quot;</span>/&gt;</span> <span class="comment">&lt;!-- 配置地址 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span> <span class="comment">&lt;!-- 配置用户名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;password&quot;</span>/&gt;</span> <span class="comment">&lt;!-- 配置密码 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 其他Bean配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="Spring-MVC简介"><a href="#Spring-MVC简介" class="headerlink" title="Spring MVC简介"></a>Spring MVC简介</h1><h2 id="1-MVC这三个字母代表什么"><a href="#1-MVC这三个字母代表什么" class="headerlink" title="1. MVC这三个字母代表什么"></a>1. MVC这三个字母代表什么</h2><ul><li><strong>M</strong>：Model（模型） - 代表应用程序的数据和业务逻辑。</li><li><strong>V</strong>：View（视图） - 代表用户界面，负责展示数据。</li><li><strong>C</strong>：Controller（控制器） - 处理用户请求，协调模型和视图之间的交互。</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置处理器 Handle，映射为&quot;/hello&quot;请求 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">&quot;/hello&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.springmvc.controller.Hellocontroller&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置视图解析器，将控制器方法返回的逻辑视图解析为物理视图 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>核心部分为：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置处理器 Handle，映射为&quot;/hello&quot;请求 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">&quot;/hello&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.springmvc.controller.Hellocontroller&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置视图解析器，将控制器方法返回的逻辑视图解析为物理视图 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Spring-MVC的请求流程"><a href="#Spring-MVC的请求流程" class="headerlink" title="Spring MVC的请求流程"></a>Spring MVC的请求流程</h2><blockquote><p>一句话就是<code>请求到达</code>，<code>请求映射</code>，<code>调用处理器</code>，<code>返回模型</code>，<code>视图解析</code>，<code>渲染视图</code><br><code>@RequestMapping</code> 是 Spring MVC 中用于处理请求的注解，主要用于将 HTTP 请求映射到特定的处理方法或类上。</p></blockquote><h1 id="Spring-MVC注解-RequestMapping"><a href="#Spring-MVC注解-RequestMapping" class="headerlink" title="Spring MVC注解 @RequestMapping"></a>Spring MVC注解 @RequestMapping</h1><h2 id="1-基本用法"><a href="#1-基本用法" class="headerlink" title="1. 基本用法"></a>1. 基本用法</h2><ul><li><strong>类级别</strong>：可以在控制器类上使用，表示该类中的所有请求处理方法的公共路径前缀。</li><li><strong>方法级别</strong>：可以在具体的方法上使用，表示该方法处理的特定请求。</li></ul><ol start="2"><li>示例代码<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span> <span class="comment">// 类级别的请求映射</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/get&quot;, method = RequestMethod.GET)</span> <span class="comment">// 方法级别的请求映射</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUser</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;获取用户信息&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/create&quot;, method = RequestMethod.POST)</span> <span class="comment">// 方法级别的请求映射</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">createUser</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;创建用户成功&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><code>@RequestMapping</code> 是 Spring MVC 中非常重要的注解，用于定义请求的路由和处理逻辑。<br>Spring MVC 标签库主要用于在 JSP 页面中简化与 Spring MVC 的集成，提供了一些方便的标签来处理表单、URL、消息等。以下是一些常用的 Spring MVC 标签库及其功能：</li></ol><h1 id="Spring-MVC-标签库"><a href="#Spring-MVC-标签库" class="headerlink" title="Spring MVC 标签库"></a>Spring MVC 标签库</h1><h2 id="1-引入标签库"><a href="#1-引入标签库" class="headerlink" title="1. 引入标签库"></a>1. 引入标签库</h2><p>在 JSP 页面中使用 Spring MVC 标签库之前，需要引入相关的标签库：<br>（引库可以不用看）</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ taglib uri=<span class="string">&quot;http://www.springframework.org/tags&quot;</span> prefix=<span class="string">&quot;spring&quot;</span> %&gt;</span><br><span class="line">&lt;%@ taglib uri=<span class="string">&quot;http://www.springframework.org/tags/form&quot;</span> prefix=<span class="string">&quot;form&quot;</span> %&gt;</span><br></pre></td></tr></table></figure><h2 id="2-常用标签"><a href="#2-常用标签" class="headerlink" title="2. 常用标签"></a>2. 常用标签</h2><h3 id="1"><a href="#1" class="headerlink" title="1. &lt;form:form&gt;"></a>1. <code>&lt;form:form&gt;</code></h3><ul><li>用于创建表单，自动绑定表单数据到模型对象。</li><li>示例：<figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;form:form modelAttribute=<span class="string">&quot;user&quot;</span> action=<span class="string">&quot;create&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">    &lt;form:input path=<span class="string">&quot;username&quot;</span> /&gt;</span><br><span class="line">    &lt;form:input path=<span class="string">&quot;password&quot;</span> type=<span class="string">&quot;password&quot;</span> /&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;提交&quot;</span> /&gt;</span><br><span class="line">&lt;/form:form&gt;</span><br></pre></td></tr></table></figure></li></ul><h3 id="2"><a href="#2" class="headerlink" title="2. &lt;form:input&gt;"></a>2. <code>&lt;form:input&gt;</code></h3><ul><li>用于创建输入框，绑定到模型属性。</li><li>示例：<figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;form:input path=<span class="string">&quot;email&quot;</span> /&gt;</span><br></pre></td></tr></table></figure></li></ul><h3 id="3"><a href="#3" class="headerlink" title="3. &lt;form:select&gt;"></a>3. <code>&lt;form:select&gt;</code></h3><ul><li>用于创建下拉选择框，绑定到模型属性。</li><li>示例：<figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;form:select path=<span class="string">&quot;gender&quot;</span>&gt;</span><br><span class="line">    &lt;form:option value=<span class="string">&quot;male&quot;</span>&gt;男&lt;/form:option&gt;</span><br><span class="line">    &lt;form:option value=<span class="string">&quot;female&quot;</span>&gt;女&lt;/form:option&gt;</span><br><span class="line">&lt;/form:select&gt;</span><br></pre></td></tr></table></figure></li></ul><h3 id="4"><a href="#4" class="headerlink" title="4. &lt;form:checkbox&gt;"></a>4. <code>&lt;form:checkbox&gt;</code></h3><ul><li>用于创建复选框，绑定到模型属性。</li><li>示例：<figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;form:checkbox path=<span class="string">&quot;subscribe&quot;</span> /&gt; 订阅新闻</span><br></pre></td></tr></table></figure></li></ul><h3 id="5"><a href="#5" class="headerlink" title="5. &lt;form:errors&gt;"></a>5. <code>&lt;form:errors&gt;</code></h3><ul><li>用于显示表单验证错误信息。</li><li>示例：<figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;form:errors path=<span class="string">&quot;username&quot;</span> cssClass=<span class="string">&quot;error&quot;</span> /&gt;</span><br></pre></td></tr></table></figure></li></ul><h3 id="标签汇总如下"><a href="#标签汇总如下" class="headerlink" title="标签汇总如下"></a>标签汇总如下</h3><p><strong><a href="form:form">form:form</a>,<a href="form:input">form:input</a>,<a href="form:select">form:select</a>,<a href="form:checkbox">form:checkbox</a>,<a href="form:errors">form:errors</a></strong>-</p><h1 id="类型转换，数抗脆式化和数据校验"><a href="#类型转换，数抗脆式化和数据校验" class="headerlink" title="类型转换，数抗脆式化和数据校验"></a>类型转换，数抗脆式化和数据校验</h1><h2 id="1-类型转换"><a href="#1-类型转换" class="headerlink" title="1. 类型转换"></a>1. 类型转换</h2><p><strong>类型转换是将请求参数转换为控制器方法所需的Java类型的过程。Spring MVC提供了自动类型转换的功能。</strong></p><ul><li><p><strong>使用示例</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/submit&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">submit</span><span class="params">(<span class="meta">@RequestParam(&quot;age&quot;)</span> <span class="type">int</span> age)</span> &#123;</span><br><span class="line">    <span class="comment">// age参数会自动转换为int类型</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>自定义类型转换</strong>：可以通过实现<code>Converter</code>接口来自定义类型转换。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringToUserConverter</span> <span class="keyword">implements</span> <span class="title class_">Converter</span>&lt;String, User&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">convert</span><span class="params">(String source)</span> &#123;</span><br><span class="line">        <span class="comment">// 自定义转换逻辑</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>(source);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="2-数据格式化"><a href="#2-数据格式化" class="headerlink" title="2. 数据格式化"></a>2. 数据格式化</h2><p><code>数据格式化用于将对象属性格式化为字符串，或将字符串解析为对象属性。Spring提供了</code>@InitBinder<code>注解来注册自定义的格式化器。</code></p><ul><li><p><strong>使用示例</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@InitBinder</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initBinder</span><span class="params">(WebDataBinder binder)</span> &#123;</span><br><span class="line">    binder.registerCustomEditor(Date.class, <span class="keyword">new</span> <span class="title class_">CustomDateEditor</span>(<span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd&quot;</span>), <span class="literal">true</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>自定义格式化</strong>：可以实现<code>PropertyEditor</code>接口或使用<code>@InitBinder</code>来注册格式化器。</p></li></ul><h2 id="3-数据校验"><a href="#3-数据校验" class="headerlink" title="3. 数据校验"></a>3. 数据校验</h2><p><strong>数据校验用于验证用户输入的数据是否符合预期的格式或规则</strong>。Spring MVC支持JSR-303（Bean Validation）规范。</p><ul><li><strong>使用示例</strong>：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Min(18)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@PostMapping(&quot;/register&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">register</span><span class="params">(<span class="meta">@Valid</span> <span class="meta">@ModelAttribute</span> User user, BindingResult result)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (result.hasErrors()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;registerForm&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 处理注册逻辑</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="SpringMVC-的文件上传和下载"><a href="#SpringMVC-的文件上传和下载" class="headerlink" title="SpringMVC 的文件上传和下载"></a>SpringMVC 的文件上传和下载</h1><h2 id="1-Spring-MVC-文件上传的作用与配置"><a href="#1-Spring-MVC-文件上传的作用与配置" class="headerlink" title="1. Spring MVC 文件上传的作用与配置"></a>1. Spring MVC 文件上传的作用与配置</h2><h3 id="1-1-配置文件扫描"><a href="#1-1-配置文件扫描" class="headerlink" title="1.1 配置文件扫描"></a>1.1 配置文件扫描</h3><p>在Spring配置文件中，需要启用文件上传的支持，通常通过<code>MultipartResolver</code>来实现。可以使用<code>CommonsMultipartResolver</code>或<code>StandardServletMultipartResolver</code>。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;multipartResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxUploadSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10485760&quot;</span>/&gt;</span> <span class="comment">&lt;!-- 设置最大上传文件大小 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-2-文件解析类"><a href="#1-2-文件解析类" class="headerlink" title="1.2 文件解析类"></a>1.2 文件解析类</h3><p><code>CommonsMultipartResolver</code>是基于Apache Commons FileUpload库的实现，负责解析上传的文件。它会将上传的文件封装为<code>MultipartFile</code>对象，方便后续处理。</p><h2 id="2-上传文件的主要代码"><a href="#2-上传文件的主要代码" class="headerlink" title="2. 上传文件的主要代码"></a>2. 上传文件的主要代码</h2><p>在控制器中处理文件上传时，通常会使用<code>MultipartFile</code>对象。以下是一个简单的文件上传示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.MultipartFile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileUploadController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/upload&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">handleFileUpload</span><span class="params">(<span class="meta">@RequestParam(&quot;file&quot;)</span> MultipartFile file)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!file.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 指定文件保存路径</span></span><br><span class="line">                <span class="type">File</span> <span class="variable">destinationFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;/path/to/upload/directory/&quot;</span> + file.getOriginalFilename());</span><br><span class="line">                <span class="comment">// 将上传的文件保存到指定路径</span></span><br><span class="line">                file.transferTo(destinationFile);</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;文件上传成功：&quot;</span> + destinationFile.getAbsolutePath();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;文件上传失败：&quot;</span> + e.getMessage();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;上传的文件为空&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>核心代码部分（记这个）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/upload&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">handleFileUpload</span><span class="params">(<span class="meta">@RequestParam(&quot;file&quot;)</span> MultipartFile file)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!file.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 指定文件保存路径</span></span><br><span class="line">                <span class="type">File</span> <span class="variable">destinationFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;/path/to/upload/directory/&quot;</span> + file.getOriginalFilename());</span><br><span class="line">                <span class="comment">// 将上传的文件保存到指定路径</span></span><br><span class="line">                file.transferTo(destinationFile);</span><br></pre></td></tr></table></figure><p>代码说明：</p><ul><li>**<code>@RequestParam(&quot;file&quot;) MultipartFile file</code>**：接收上传的文件。</li><li>**<code>file.transferTo(destinationFile)</code>**：将上传的文件保存到指定的路径。</li></ul><h1 id="SpingMVC的国际化和拦截器"><a href="#SpingMVC的国际化和拦截器" class="headerlink" title="SpingMVC的国际化和拦截器"></a>SpingMVC的国际化和拦截器</h1><h2 id="1-配置国际化支持"><a href="#1-配置国际化支持" class="headerlink" title="1. 配置国际化支持"></a>1. 配置国际化支持</h2><p>在Spring配置文件中，需要配置<code>MessageSource</code>，通常使用<code>ResourceBundleMessageSource</code>来加载消息资源文件。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;messageSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.context.support.ResourceBundleMessageSource&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basename&quot;</span> <span class="attr">value</span>=<span class="string">&quot;messages&quot;</span>/&gt;</span> <span class="comment">&lt;!-- 指定资源文件的基础名称 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-Spring-MVC的拦截器"><a href="#2-Spring-MVC的拦截器" class="headerlink" title="2. Spring MVC的拦截器"></a>2. Spring MVC的拦截器</h2><p>拦截器用于在请求到达控制器之前或响应返回之前进行处理，常用于日志记录、权限检查等</p><h2 id="2-配置拦截器（拦截器配置代码要考）"><a href="#2-配置拦截器（拦截器配置代码要考）" class="headerlink" title="2. 配置拦截器（拦截器配置代码要考）"></a>2. 配置拦截器（拦截器配置代码要考）</h2><p>在Spring配置文件中配置拦截器。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.example.MyInterceptor&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="Mybatis"><a href="#Mybatis" class="headerlink" title="Mybatis"></a>Mybatis</h1><h2 id="1-SQL-语句"><a href="#1-SQL-语句" class="headerlink" title="1. SQL 语句"></a>1. SQL 语句</h2><h3 id="1-1-根据-ID-查询词数据"><a href="#1-1-根据-ID-查询词数据" class="headerlink" title="1.1 根据 ID 查询词数据"></a>1.1 根据 ID 查询词数据</h3><p>使用 <code>&lt;select&gt;</code> 标签来<code>查询数据</code>。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectWordById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Word&quot;</span>&gt;</span></span><br><span class="line">    SELECT * FROM words WHERE id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>id</strong>：查询的唯一标识符。</li><li><strong>parameterType</strong>：输入参数的类型。</li><li><strong>resultType</strong>：返回结果的类型。</li></ul><h3 id="1-2-新增一条数据"><a href="#1-2-新增一条数据" class="headerlink" title="1.2 新增一条数据"></a>1.2 新增一条数据</h3><p>使用 <code>&lt;insert&gt;</code> 标签来<code>插入数据</code>。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertWord&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Word&quot;</span>&gt;</span></span><br><span class="line">    INSERT INTO words (word, definition) VALUES (#&#123;word&#125;, #&#123;definition&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>parameterType</strong>：传入的对象类型，通常是一个 Java Bean。</li></ul><h3 id="1-3-修改数据"><a href="#1-3-修改数据" class="headerlink" title="1.3 修改数据"></a>1.3 修改数据</h3><p>使用 <code>&lt;update&gt;</code> 标签来<code>更新数据</code>。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateWord&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Word&quot;</span>&gt;</span></span><br><span class="line">    UPDATE words SET definition = #&#123;definition&#125; WHERE id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-4-删除数据"><a href="#1-4-删除数据" class="headerlink" title="1.4 删除数据"></a>1.4 删除数据</h3><p>使用 <code>&lt;delete&gt;</code> 标签来<code>删除数据</code>。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteWord&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span>&gt;</span></span><br><span class="line">    DELETE FROM words WHERE id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-映射"><a href="#2-映射" class="headerlink" title="2. 映射"></a>2. 映射</h2><p>p166配置映射</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta"><span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta"><span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.mybatis.mapper.UserInfoMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 根据用户编号获取用户信息 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findUserInfoById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;userInfoMap&quot;</span>&gt;</span></span><br><span class="line">        SELECT *</span><br><span class="line">        FROM user_info WHERE id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">&quot;UserInfo&quot;</span> <span class="attr">id</span>=<span class="string">&quot;userInfoMap&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;uid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;uname&quot;</span> <span class="attr">column</span>=<span class="string">&quot;userName&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;upass&quot;</span> <span class="attr">column</span>=<span class="string">&quot;password&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="关联映射"><a href="#关联映射" class="headerlink" title="关联映射"></a>关联映射</h1><h2 id="1-一对一映射"><a href="#1-一对一映射" class="headerlink" title="1. 一对一映射"></a>1. 一对一映射</h2><ul><li><strong>定义</strong>：一个对象对应一个对象。</li><li><strong>例子</strong>：一个用户有一个个人资料。</li></ul><h2 id="2-一对多映射"><a href="#2-一对多映射" class="headerlink" title="2. 一对多映射"></a>2. 一对多映射</h2><ul><li><strong>定义</strong>：一个对象对应多个对象。</li><li><strong>例子</strong>：一个用户可以有多个订单。</li></ul><h2 id="3-多对多映射"><a href="#3-多对多映射" class="headerlink" title="3. 多对多映射"></a>3. 多对多映射</h2><ul><li><strong>定义</strong>：多个对象可以对应多个对象。</li><li><strong>例子</strong>：一个用户可以有多个角色，而一个角色也可以被多个用户拥有。</li></ul><h2 id="小总结-2"><a href="#小总结-2" class="headerlink" title="小总结"></a>小总结</h2><ul><li><strong>一对一</strong>：一对一。</li><li><strong>一对多</strong>：一对多。</li><li><strong>多对多</strong>：多对多。<br>这样好记多了吧。</li></ul><h1 id="动态SQL"><a href="#动态SQL" class="headerlink" title="动态SQL"></a>动态SQL</h1><p>动态 SQL 是指在 SQL 查询中根据条件动态生成不同的 SQL 语句。在 MyBatis 中，可以使用 <code>&lt;if&gt;</code>、<code>&lt;where&gt;</code> 和 <code>&lt;set&gt;</code> 标签来实现动态 SQL。</p><h2 id="1-标签"><a href="#1-标签" class="headerlink" title="1. &lt;if&gt; 标签"></a>1. <code>&lt;if&gt;</code> 标签</h2><p><strong>功能</strong>：根据条件判断是否生成某个 SQL 片段。</p><p><strong>使用方法</strong>：</p><ul><li>在 <code>&lt;if&gt;</code> 标签中，可以使用 <code>test</code> 属性来指定条件表达式。</li><li>如果条件为 true，则生成 <code>&lt;if&gt;</code> 标签内的 SQL 片段。</li></ul><p><strong>示例</strong>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findUsers&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">    SELECT * FROM users</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;userName != null&quot;</span>&gt;</span></span><br><span class="line">            AND userName = #&#123;userName&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;age != null&quot;</span>&gt;</span></span><br><span class="line">            AND age = #&#123;age&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在这个示例中，如果 <code>userName</code> 或 <code>age</code> 不为 null，则相应的条件会被添加到 SQL 查询中。</p><h2 id="2-标签"><a href="#2-标签" class="headerlink" title="2. &lt;where&gt; 标签"></a>2. <code>&lt;where&gt;</code> 标签</h2><p><strong>功能</strong>：自动处理 SQL 查询中的 WHERE 子句，避免手动添加 AND 或 OR。</p><p><strong>使用方法</strong>：</p><ul><li><code>&lt;where&gt;</code> 标签会自动在生成的 SQL 语句前添加 “WHERE” 关键字，并在第一个条件前自动添加 “AND” 或 “OR”。</li></ul><p><strong>示例</strong>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findUsers&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">    SELECT * FROM users</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;userName != null&quot;</span>&gt;</span></span><br><span class="line">            userName = #&#123;userName&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;age != null&quot;</span>&gt;</span></span><br><span class="line">            AND age = #&#123;age&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在这个示例中，如果 <code>userName</code> 不为 null，<code>WHERE</code> 后面会直接跟上 <code>userName = #&#123;userName&#125;</code>，如果 <code>age</code> 不为 null，<code>AND age = #&#123;age&#125;</code> 会被添加。</p><h3 id="3-标签"><a href="#3-标签" class="headerlink" title="3. &lt;set&gt; 标签"></a>3. <code>&lt;set&gt;</code> 标签</h3><p><strong>功能</strong>：用于动态生成 UPDATE 语句中的 SET 子句。</p><p><strong>使用方法</strong>：</p><ul><li><code>&lt;set&gt;</code> 标签会自动处理 SET 子句中的逗号，避免手动添加。</li></ul><p><strong>示例</strong>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">    UPDATE users</span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;userName != null&quot;</span>&gt;</span></span><br><span class="line">            userName = #&#123;userName&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;age != null&quot;</span>&gt;</span></span><br><span class="line">            age = #&#123;age&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    WHERE id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在这个示例中，如果 <code>userName</code> 或 <code>age</code> 不为 null，相应的字段会被更新，并且逗号会自动处理。<br><strong>总结如下</strong></p><ul><li>**<code>&lt;if&gt;</code>**：根据条件生成 SQL 片段。</li><li>**<code>&lt;where&gt;</code>**：自动处理 WHERE 子句。</li><li>**<code>&lt;set&gt;</code>**：自动处理 UPDATE 语句中的 SET 子句。</li></ul><h2 id="Spring整合MyBaits"><a href="#Spring整合MyBaits" class="headerlink" title="Spring整合MyBaits"></a>Spring整合MyBaits</h2><p>这部分建议直接看书得了p222~223xml配置<br>p22应用</p>]]></content>
      
      
      <categories>
          
          <category> 杂项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring框架汇总</title>
      <link href="/2025/01/03/Spring%E6%A1%86%E6%9E%B6%E6%B1%87%E6%80%BB/"/>
      <url>/2025/01/03/Spring%E6%A1%86%E6%9E%B6%E6%B1%87%E6%80%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring框架汇总"><a href="#Spring框架汇总" class="headerlink" title="Spring框架汇总"></a>Spring框架汇总</h1><h2 id="Spring框架概述"><a href="#Spring框架概述" class="headerlink" title="Spring框架概述"></a>Spring框架概述</h2><blockquote><p>单独列出状态的是重点区域</p></blockquote><p>Spring框架是一个广泛使用的Java企业级开发框架，其体系结构由多个模块组成，每个模块都有其特定的功能和作用。</p><h3 id="1-核心容器（Core-Container）"><a href="#1-核心容器（Core-Container）" class="headerlink" title="1. 核心容器（Core Container）"></a>1. 核心容器（Core Container）</h3><p>核心容器提供了Spring的基本功能，是其他模块建立的基础，主要由Beans模块、Core模块、Context模块和Spring EL模块组成，介绍如下：</p><blockquote><ul><li><strong>Beans模块</strong>：提供了<code>BeanFactory</code>，是工厂模式实现的经典，Spring将管理对象称为Bean。</li></ul></blockquote><ul><li><strong>Core核心模块</strong>：提供了Spring框架的基本组成部分，包括IoC和DI功能。</li><li><strong>Context上下文模块</strong>：构建于核心模块之上，它是访问定义配置的任何对象的媒介，扩展了<code>BeanFactory</code>的功能，其中<code>ApplicationContext</code>是Context模块的核心接口。</li><li><strong>Spring EL模块</strong>：是Spring 3.0后新增的模块，提供了Spring表达式语言支持，是运行时查询和操作对象图的强大的表达式语言。</li></ul><h3 id="2-数据访问-集成层（Data-Access-Integration）"><a href="#2-数据访问-集成层（Data-Access-Integration）" class="headerlink" title="2. 数据访问&#x2F;集成层（Data Access&#x2F;Integration）"></a>2. 数据访问&#x2F;集成层（Data Access&#x2F;Integration）</h3><p>数据访问&#x2F;集成层包括JDBC、ORM、OXM、JMS和Transactions模块，介绍如下：</p><blockquote><ul><li><strong>JDBC模块</strong>：提供了一个JDBC的抽象层，大幅度地减少了在开发中对数据库的操作的编码。</li></ul></blockquote><ul><li><strong>ORM模块</strong>：提供了与多个第三方持久层框架的良好整合。</li><li><strong>OXM模块</strong>：提供了一个支持对象&#x2F;XML映射的抽象层实现，如JAXB、Castor、XMLBeans、JiBX和XStream。</li><li><strong>JMS模块</strong>：指Java消息传递服务，包含使用和产生消息的特性，自Spring 4.1版本以后，提供了与Spring-messaging模块的集成。</li><li><strong>Transactions模块</strong>：支持对实现特殊接口以及所有POJO类的编程和声明式的事务管理。</li></ul><h3 id="3-Web层（Web）"><a href="#3-Web层（Web）" class="headerlink" title="3. Web层（Web）"></a>3. Web层（Web）</h3><p>Web层包括WebSocket、Servlet、Web和Portlet模块，介绍如下：</p><ul><li><strong>Web模块</strong>：提供了基础的针对Web开发的集成特性，例如多方文件上传，利用Servlet监听器进行IoC容器初始化以及Web应用上下文。</li><li><strong>Servlet模块</strong>：也称做Spring-webmvc模块，包含Spring的模型-视图-控制器（MVC）和REST Web Services实现的Web应用程序。</li><li><strong>WebSocket模块</strong>：Spring 4.0以后新增功能，提供了WebSocket和SockJS的实现，以及对STOMP的支持。</li><li><strong>Portlet模块</strong>：类似Servlet模块的功能，提供了Portlet环境下的MVC实现。</li></ul><h3 id="4-其他模块（Other-Modules）"><a href="#4-其他模块（Other-Modules）" class="headerlink" title="4. 其他模块（Other Modules）"></a>4. 其他模块（Other Modules）</h3><p>Spring的其他模块还有AOP、Aspects、Instrumentation、Messaging以及Test模块，介绍如下：</p><blockquote><ul><li><strong>AOP模块</strong>：提供了面向方面编程的支持，允许定义方法拦截器和切入点，将代码按照功能进行分离，以降低耦合性。</li></ul></blockquote><ul><li><strong>Aspects模块</strong>：提供了与AspectJ的集成功能，Aspect是一个功能强大且成熟的面向方面编程的框架。</li><li><strong>Instrumentation模块</strong>：提供了类工具的支持和类加载器的实现，可以在特定的应用服务器中使用。</li><li><strong>Messaging模块</strong>：Spring 4.0以后新增的模块，提供了对消息传递体系结构和协议的支持。</li><li><strong>Test模块</strong>：提供了对单元测试和集成测试的支持。</li></ul><h2 id="spring的核心机制-依赖注入-控制反转"><a href="#spring的核心机制-依赖注入-控制反转" class="headerlink" title="spring的核心机制:依赖注入&#x2F;控制反转"></a>spring的核心机制:依赖注入&#x2F;控制反转</h2><h3 id="什么是IoC（控制反转）？"><a href="#什么是IoC（控制反转）？" class="headerlink" title="什么是IoC（控制反转）？"></a>什么是IoC（控制反转）？</h3><p>IoC（Inversion of Control，控制反转）是一种<code>设计原则</code>，<code>它将对象的创建和管理的控制权从应用程序代码转移到框架或容器中</code>。这样，容器负责对象的生命周期管理，使得代码更加灵活和可测试。</p><p><strong>如何实现控制反转？</strong></p><p>控制反转主要通过以下两种方式实现：</p><ol><li><p><strong>依赖注入（Dependency Injection，DI）</strong>：</p><ul><li>通过将对象的依赖关系在运行时注入到对象中，而不是在对象内部创建依赖。可以通过构造函数、属性或方法实现。</li></ul></li><li><p><strong>服务定位器（Service Locator）</strong>：</p><ul><li>提供一个集中式的注册表来查找和获取服务（对象）。虽然实现了控制反转，但通常不如依赖注入灵活，因为仍需显式请求服务。</li></ul></li></ol><h3 id="什么是依赖注入？"><a href="#什么是依赖注入？" class="headerlink" title="什么是依赖注入？"></a>什么是依赖注入？</h3><p>依赖注入是一种<code>设计模式</code>，<code>允许在运行时将对象的依赖关系注入到对象中，而不是在对象内部创建这些依赖</code>。这种方式降低了对象之间的耦合，提高了代码的可测试性和可维护性。<br>好的，下面我们以<code>AdminInfo</code>类为例，讲解依赖注入的几种主要类型。</p><h3 id="依赖注入的类型"><a href="#依赖注入的类型" class="headerlink" title="依赖注入的类型"></a>依赖注入的类型</h3><p>依赖注入主要有三种类型：<code>构造函数注入</code>、<code>属性注入</code>和<code>方法注入</code>。我们将分别通过<code>AdminInfo</code>类的例子来说明这三种类型。</p><h4 id="1-构造函数注入"><a href="#1-构造函数注入" class="headerlink" title="1. 构造函数注入"></a>1. 构造函数注入</h4><p>构造函数注入是通过类的构造函数将依赖对象传递给目标对象。在创建对象时，依赖关系在构造时就被注入。</p><p><strong>示例代码</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ssm.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AdminInfo</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String pwd;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 默认构造函数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AdminInfo</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 带参数的构造函数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AdminInfo</span><span class="params">(String name, String pwd)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.pwd = pwd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打印方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(id + <span class="string">&quot;--&quot;</span> + name + <span class="string">&quot; -- &quot;</span> + pwd);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.ssm.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ssm.entity.AdminInfo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AdminService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> AdminInfo adminInfo;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过构造函数注入AdminInfo</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AdminService</span><span class="params">(AdminInfo adminInfo)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.adminInfo = adminInfo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">displayAdminInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        adminInfo.print();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">AdminInfo</span> <span class="variable">admin</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AdminInfo</span>(<span class="string">&quot;admin&quot;</span>, <span class="string">&quot;password&quot;</span>);</span><br><span class="line">        <span class="type">AdminService</span> <span class="variable">service</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AdminService</span>(admin); <span class="comment">// 依赖注入</span></span><br><span class="line">        service.displayAdminInfo(); <span class="comment">// 输出: 0--admin -- password</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-属性注入"><a href="#2-属性注入" class="headerlink" title="2. 属性注入"></a>2. 属性注入</h4><p>属性注入是通过公共属性或setter方法将依赖对象注入到目标对象中。这种方式在对象创建后，可以随时修改依赖关系。</p><p><strong>示例代码</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ssm.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AdminInfo</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String pwd;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 默认构造函数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AdminInfo</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 带参数的构造函数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AdminInfo</span><span class="params">(String name, String pwd)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.pwd = pwd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打印方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(id + <span class="string">&quot;--&quot;</span> + name + <span class="string">&quot; -- &quot;</span> + pwd);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.ssm.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ssm.entity.AdminInfo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AdminService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> AdminInfo adminInfo;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Setter方法进行属性注入</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAdminInfo</span><span class="params">(AdminInfo adminInfo)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.adminInfo = adminInfo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">displayAdminInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        adminInfo.print();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">AdminInfo</span> <span class="variable">admin</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AdminInfo</span>(<span class="string">&quot;admin&quot;</span>, <span class="string">&quot;password&quot;</span>);</span><br><span class="line">        <span class="type">AdminService</span> <span class="variable">service</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AdminService</span>();</span><br><span class="line">        service.setAdminInfo(admin); <span class="comment">// 通过setter方法注入</span></span><br><span class="line">        service.displayAdminInfo(); <span class="comment">// 输出: 0--admin -- password</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-方法注入"><a href="#3-方法注入" class="headerlink" title="3. 方法注入"></a>3. 方法注入</h4><p>方法注入是通过方法参数将依赖对象传递给目标对象的方法。这种方式适用于需要在特定方法中使用依赖的情况。</p><p><strong>示例代码</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ssm.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AdminInfo</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String pwd;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 默认构造函数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AdminInfo</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 带参数的构造函数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AdminInfo</span><span class="params">(String name, String pwd)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.pwd = pwd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打印方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(id + <span class="string">&quot;--&quot;</span> + name + <span class="string">&quot; -- &quot;</span> + pwd);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.ssm.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ssm.entity.AdminInfo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AdminService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">displayAdminInfo</span><span class="params">(AdminInfo adminInfo)</span> &#123;</span><br><span class="line">        adminInfo.print();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">AdminInfo</span> <span class="variable">admin</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AdminInfo</span>(<span class="string">&quot;admin&quot;</span>, <span class="string">&quot;password&quot;</span>);</span><br><span class="line">        <span class="type">AdminService</span> <span class="variable">service</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AdminService</span>();</span><br><span class="line">        service.displayAdminInfo(admin); <span class="comment">// 输出: 0--admin -- password</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>构造函数注入</strong>：在对象创建时通过构造函数传入依赖，适合于必须依赖的情况。</li><li><strong>属性注入</strong>：通过setter方法注入依赖，适合于可选依赖或需要在对象创建后修改依赖的情况。</li><li><strong>方法注入</strong>：通过方法参数传入依赖，适合于在特定方法中使用依赖的情况。</li></ul><h2 id="Spring-Bean的装配"><a href="#Spring-Bean的装配" class="headerlink" title="Spring Bean的装配"></a>Spring Bean的装配</h2><p>在Java Web应用中，<code>ContextLoaderListener</code>和<code>ContextLoaderServlet</code>是两种常用的载入方式，用于初始化Spring应用上下文。</p><h3 id="1-ContextLoaderListener"><a href="#1-ContextLoaderListener" class="headerlink" title="1. ContextLoaderListener"></a>1. ContextLoaderListener</h3><p><code>ContextLoaderListener</code>是一个ServletContextListener，用于在Web应用启动时加载Spring的应用上下文。它通常用于加载根应用上下文，适合于整个应用共享的Bean。</p><p><strong>配置示例</strong>：</p><p>在<code>web.xml</code>中配置<code>ContextLoaderListener</code>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee </span></span></span><br><span class="line"><span class="string"><span class="tag">                             http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;3.1&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>/WEB-INF/applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 其他配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>使用示例</strong>：</p><p>在<code>applicationContext.xml</code>中定义Bean：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans </span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.example.MyBean&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 其他Bean定义 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-ContextLoaderServlet"><a href="#2-ContextLoaderServlet" class="headerlink" title="2. ContextLoaderServlet"></a>2. ContextLoaderServlet</h3><p><code>ContextLoaderServlet</code>是一个Servlet，用于加载Spring的Web应用上下文。它通常用于处理特定的请求，并可以与Spring MVC结合使用。</p><p><strong>配置示例</strong>：</p><p>在<code>web.xml</code>中配置<code>ContextLoaderServlet</code>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee </span></span></span><br><span class="line"><span class="string"><span class="tag">                             http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;3.1&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springDispatcher<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springDispatcher<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>/WEB-INF/spring-servlet.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 其他配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>使用示例</strong>：</p><p>在<code>spring-servlet.xml</code>中定义Bean：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans </span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myController&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.example.MyController&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 其他Bean定义 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>ContextLoaderListener</strong>：用于加载根应用上下文，适合于整个应用共享的Bean。</li><li><strong>ContextLoaderServlet</strong>：用于加载Web应用上下文，通常与Spring MVC结合使用，处理特定请求。</li></ul><p><strong>以下是基于注解的Bean装配中常用的六个注解的简单介绍：</strong></p><h3 id="1-Component"><a href="#1-Component" class="headerlink" title="1. @Component"></a>1. <code>@Component</code></h3><ul><li><strong>作用</strong>：标识一个类为<code>Spring的组件</code>，Spring会自动扫描并注册为Bean。</li><li><strong>使用场景</strong>：用于任何Spring管理的组件，通常用于通用的类。</li></ul><h3 id="2-Repository"><a href="#2-Repository" class="headerlink" title="2. @Repository"></a>2. <code>@Repository</code></h3><ul><li><strong>作用</strong>：标识一个类为<code>数据访问层的组件</code>，通常用于持久化操作。</li><li><strong>使用场景</strong>：用于DAO（数据访问对象）类，Spring会为其提供异常转换等功能。</li></ul><h3 id="3-Service"><a href="#3-Service" class="headerlink" title="3. @Service"></a>3. <code>@Service</code></h3><ul><li><strong>作用</strong>：标识一个类为<code>服务层的组件</code>，通常用于业务逻辑处理。</li><li><strong>使用场景</strong>：用于Service类，表示该类包含业务逻辑。</li></ul><h3 id="4-Controller"><a href="#4-Controller" class="headerlink" title="4. @Controller"></a>4. <code>@Controller</code></h3><ul><li><strong>作用</strong>：标识一个类为<code>控制层的组件</code>，通常用于处理请求。</li><li><strong>使用场景</strong>：用于Spring MVC中的控制器类，负责接收和处理用户请求。</li></ul><h3 id="5-Autowired"><a href="#5-Autowired" class="headerlink" title="5. @Autowired"></a>5. <code>@Autowired</code></h3><ul><li><strong>作用</strong>：用于自动注入<code>Spring容器中的Bean</code>。</li><li><strong>使用场景</strong>：可以用于构造函数、属性或方法上，Spring会根据类型自动注入相应的Bean。</li></ul><h3 id="6-Resource"><a href="#6-Resource" class="headerlink" title="6. @Resource"></a>6. <code>@Resource</code></h3><ul><li><strong>作用</strong>：用于按名称<code>自动注入Bean</code>。</li><li><strong>使用场景</strong>：可以用于属性上，Spring会根据Bean的名称进行注入，通常用于与JNDI结合使用。</li></ul><h2 id="Spring-ADP"><a href="#Spring-ADP" class="headerlink" title="Spring ADP"></a>Spring ADP</h2><h3 id="OOP（面向对象编程）"><a href="#OOP（面向对象编程）" class="headerlink" title="OOP（面向对象编程）"></a>OOP（面向对象编程）</h3><ul><li><strong>定义</strong>：一种编程范式，通过“对象”来组织代码，<code>强调数据</code>和<code>方法的封装</code>。</li><li><strong>特点</strong>：封装、继承和多态。</li><li><strong>应用</strong>：适用于构建复杂系统，通过对象之间的交互实现功能。</li></ul><h3 id="AOP（面向切面编程）"><a href="#AOP（面向切面编程）" class="headerlink" title="AOP（面向切面编程）"></a>AOP（面向切面编程）</h3><ul><li><strong>定义</strong>：一种编程范式，关注<code>横切关注点</code>（如日志、事务等），通过切面来增强模块功能。</li><li><strong>特点</strong>：切面、切入点、通知和织入。</li><li><strong>应用</strong>：用于处理跨多个模块的关注点，提高代码的可维护性。</li></ul><p><strong>AOP的常用术语:</strong><br>好的，以下是AOP的常用术语及其英文单词：</p><ol><li><strong>切面（Aspect）</strong></li><li><strong>连接点（Join Point）</strong></li><li><strong>切入点（Pointcut）</strong></li><li><strong>通知（Advice</strong></li><li><strong>目标对象（Target Object）</strong></li><li><strong>代理对象（Proxy Object）</strong></li><li><strong>织入（Weaving）</strong></li></ol><h3 id="Xml注解：通知-给一段代码问是什么通知"><a href="#Xml注解：通知-给一段代码问是什么通知" class="headerlink" title="Xml注解：通知-给一段代码问是什么通知?"></a>Xml注解：通知-给一段代码问是什么通知?</h3><ol><li><strong>返回通知</strong>：<code>myAfterReturnAdvice</code></li><li><strong>异常通知</strong>：<code>MyThrowingAdvice</code></li><li><strong>环绕通知</strong>：<code>myAroundAdvice</code></li><li><strong>前置通知</strong>：<code>browse</code></li><li><strong>后置通知</strong>：<code>After</code><br>这些通知分别对应于AOP中的不同切面行为。</li></ol><h2 id="Spring的数据库的编程"><a href="#Spring的数据库的编程" class="headerlink" title="Spring的数据库的编程"></a>Spring的数据库的编程</h2><p>当然可以，以下是一个使用XML配置Spring JDBC数据源的示例：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans </span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置数据源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span> <span class="comment">&lt;!-- 配置驱动 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/mydb&quot;</span>/&gt;</span> <span class="comment">&lt;!-- 配置地址 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span> <span class="comment">&lt;!-- 配置用户名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;password&quot;</span>/&gt;</span> <span class="comment">&lt;!-- 配置密码 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 其他Bean配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Spring-MVC简介"><a href="#Spring-MVC简介" class="headerlink" title="Spring MVC简介"></a>Spring MVC简介</h2><h3 id="配置说明："><a href="#配置说明：" class="headerlink" title="配置说明："></a>配置说明：</h3><ul><li><strong>driverClassName</strong>：配置数据库驱动类。</li><li><strong>url</strong>：配置数据库连接地址。</li><li><strong>username</strong>：配置数据库用户名。</li><li><strong>password</strong>：配置数据库密码。</li></ul><p>这个XML配置示例展示了如何在Spring中设置JDBC数据源。<br>好的，以下是关于Spring MVC的简介：</p><h3 id="1-MVC这三个字母代表什么"><a href="#1-MVC这三个字母代表什么" class="headerlink" title="1. MVC这三个字母代表什么"></a>1. MVC这三个字母代表什么</h3><ul><li><strong>M</strong>：Model（模型） - 代表应用程序的数据和业务逻辑。</li><li><strong>V</strong>：View（视图） - 代表用户界面，负责展示数据。</li><li><strong>C</strong>：Controller（控制器） - 处理用户请求，协调模型和视图之间的交互。</li></ul><h3 id="2-配置文件springmvc-xml"><a href="#2-配置文件springmvc-xml" class="headerlink" title="2. 配置文件springmvc.xml"></a>2. 配置文件springmvc.xml</h3><p><code>springmvc.xml</code>是Spring MVC的配置文件，通常包含以下内容：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans </span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/mvc </span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 启用Spring MVC注解 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置视图解析器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/views/&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 其他Bean配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-Spring-MVC的请求流程"><a href="#3-Spring-MVC的请求流程" class="headerlink" title="3. Spring MVC的请求流程"></a>3. Spring MVC的请求流程</h3><p>Spring MVC的请求流程通常包括以下几个步骤：</p><ol><li><strong>请求到达DispatcherServlet</strong>：用户发送请求，首先到达前端控制器<code>DispatcherServlet</code>。</li><li><strong>请求映射</strong>：<code>DispatcherServlet</code>根据请求URL查找对应的处理器（Controller）。</li><li><strong>调用处理器</strong>：找到对应的Controller后，调用其处理方法。</li><li><strong>返回模型和视图</strong>：Controller处理完请求后，返回模型数据和视图名称。</li><li><strong>视图解析（看上方代码要考）</strong>：<code>DispatcherServlet</code>使用视图解析器将视图名称解析为具体的视图。</li><li><strong>渲染视图</strong>：最终，视图被渲染并返回给用户。<blockquote><p>一句话就是<code>请求到达</code>，<code>请求映射</code>，<code>调用处理器</code>，<code>返回模型</code>，<code>视图解析</code>，<code>渲染视图</code><br><code>@RequestMapping</code> 是 Spring MVC 中用于处理请求的注解，主要用于将 HTTP 请求映射到特定的处理方法或类上。以下是关于 <code>@RequestMapping</code> 的一些关键点：</p></blockquote></li></ol><h2 id="Spring-MVC注解-RequestMapping"><a href="#Spring-MVC注解-RequestMapping" class="headerlink" title="Spring MVC注解  @RequestMapping"></a>Spring MVC注解  @RequestMapping</h2><h3 id="1-基本用法"><a href="#1-基本用法" class="headerlink" title="1. 基本用法"></a>1. 基本用法</h3><ul><li><strong>类级别</strong>：可以在控制器类上使用，表示该类中的所有请求处理方法的公共路径前缀。</li><li><strong>方法级别</strong>：可以在具体的方法上使用，表示该方法处理的特定请求。</li></ul><h3 id="2-示例代码"><a href="#2-示例代码" class="headerlink" title="2. 示例代码"></a>2. 示例代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span> <span class="comment">// 类级别的请求映射</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/get&quot;, method = RequestMethod.GET)</span> <span class="comment">// 方法级别的请求映射</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUser</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;获取用户信息&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/create&quot;, method = RequestMethod.POST)</span> <span class="comment">// 方法级别的请求映射</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">createUser</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;创建用户成功&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>@RequestMapping</code> 是 Spring MVC 中非常重要的注解，用于定义请求的路由和处理逻辑。<br>Spring MVC 标签库主要用于在 JSP 页面中简化与 Spring MVC 的集成，提供了一些方便的标签来处理表单、URL、消息等。以下是一些常用的 Spring MVC 标签库及其功能：</p><h2 id="Spring-MVC-标签库"><a href="#Spring-MVC-标签库" class="headerlink" title="Spring MVC 标签库"></a>Spring MVC 标签库</h2><h3 id="1-引入标签库"><a href="#1-引入标签库" class="headerlink" title="1. 引入标签库"></a>1. 引入标签库</h3><p>在 JSP 页面中使用 Spring MVC 标签库之前，需要引入相关的标签库：<br>（引库可以不用看）</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ taglib uri=<span class="string">&quot;http://www.springframework.org/tags&quot;</span> prefix=<span class="string">&quot;spring&quot;</span> %&gt;</span><br><span class="line">&lt;%@ taglib uri=<span class="string">&quot;http://www.springframework.org/tags/form&quot;</span> prefix=<span class="string">&quot;form&quot;</span> %&gt;</span><br></pre></td></tr></table></figure><h3 id="2-常用标签"><a href="#2-常用标签" class="headerlink" title="2. 常用标签"></a>2. 常用标签</h3><h4 id="1"><a href="#1" class="headerlink" title="1. &lt;form:form&gt;"></a>1. <code>&lt;form:form&gt;</code></h4><ul><li>用于创建表单，自动绑定表单数据到模型对象。</li><li>示例：<figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;form:form modelAttribute=<span class="string">&quot;user&quot;</span> action=<span class="string">&quot;create&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">    &lt;form:input path=<span class="string">&quot;username&quot;</span> /&gt;</span><br><span class="line">    &lt;form:input path=<span class="string">&quot;password&quot;</span> type=<span class="string">&quot;password&quot;</span> /&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;提交&quot;</span> /&gt;</span><br><span class="line">&lt;/form:form&gt;</span><br></pre></td></tr></table></figure></li></ul><h4 id="2"><a href="#2" class="headerlink" title="2. &lt;form:input&gt;"></a>2. <code>&lt;form:input&gt;</code></h4><ul><li>用于创建输入框，绑定到模型属性。</li><li>示例：<figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;form:input path=<span class="string">&quot;email&quot;</span> /&gt;</span><br></pre></td></tr></table></figure></li></ul><h4 id="3"><a href="#3" class="headerlink" title="3. &lt;form:select&gt;"></a>3. <code>&lt;form:select&gt;</code></h4><ul><li>用于创建下拉选择框，绑定到模型属性。</li><li>示例：<figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;form:select path=<span class="string">&quot;gender&quot;</span>&gt;</span><br><span class="line">    &lt;form:option value=<span class="string">&quot;male&quot;</span>&gt;男&lt;/form:option&gt;</span><br><span class="line">    &lt;form:option value=<span class="string">&quot;female&quot;</span>&gt;女&lt;/form:option&gt;</span><br><span class="line">&lt;/form:select&gt;</span><br></pre></td></tr></table></figure></li></ul><h4 id="4"><a href="#4" class="headerlink" title="4. &lt;form:checkbox&gt;"></a>4. <code>&lt;form:checkbox&gt;</code></h4><ul><li>用于创建复选框，绑定到模型属性。</li><li>示例：<figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;form:checkbox path=<span class="string">&quot;subscribe&quot;</span> /&gt; 订阅新闻</span><br></pre></td></tr></table></figure></li></ul><h4 id="5"><a href="#5" class="headerlink" title="5. &lt;form:errors&gt;"></a>5. <code>&lt;form:errors&gt;</code></h4><ul><li>用于显示表单验证错误信息。</li><li>示例：<figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;form:errors path=<span class="string">&quot;username&quot;</span> cssClass=<span class="string">&quot;error&quot;</span> /&gt;</span><br></pre></td></tr></table></figure></li></ul><h2 id="类型转换，数抗脆式化和数据校验"><a href="#类型转换，数抗脆式化和数据校验" class="headerlink" title="类型转换，数抗脆式化和数据校验"></a>类型转换，数抗脆式化和数据校验</h2><h3 id="1-类型转换"><a href="#1-类型转换" class="headerlink" title="1. 类型转换"></a>1. 类型转换</h3><p><strong>类型转换是将请求参数转换为控制器方法所需的Java类型的过程。Spring MVC提供了自动类型转换的功能。</strong></p><ul><li><p><strong>使用示例</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/submit&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">submit</span><span class="params">(<span class="meta">@RequestParam(&quot;age&quot;)</span> <span class="type">int</span> age)</span> &#123;</span><br><span class="line">    <span class="comment">// age参数会自动转换为int类型</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>自定义类型转换</strong>：可以通过实现<code>Converter</code>接口来自定义类型转换。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringToUserConverter</span> <span class="keyword">implements</span> <span class="title class_">Converter</span>&lt;String, User&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">convert</span><span class="params">(String source)</span> &#123;</span><br><span class="line">        <span class="comment">// 自定义转换逻辑</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>(source);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-数据格式化"><a href="#2-数据格式化" class="headerlink" title="2. 数据格式化"></a>2. 数据格式化</h3><p><code>数据格式化用于将对象属性格式化为字符串，或将字符串解析为对象属性。Spring提供了</code>@InitBinder<code>注解来注册自定义的格式化器。</code></p><ul><li><p><strong>使用示例</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@InitBinder</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initBinder</span><span class="params">(WebDataBinder binder)</span> &#123;</span><br><span class="line">    binder.registerCustomEditor(Date.class, <span class="keyword">new</span> <span class="title class_">CustomDateEditor</span>(<span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd&quot;</span>), <span class="literal">true</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>自定义格式化</strong>：可以实现<code>PropertyEditor</code>接口或使用<code>@InitBinder</code>来注册格式化器。</p></li></ul><h3 id="3-数据校验"><a href="#3-数据校验" class="headerlink" title="3. 数据校验"></a>3. 数据校验</h3><p><strong>数据校验用于验证用户输入的数据是否符合预期的格式或规则</strong>。Spring MVC支持JSR-303（Bean Validation）规范。</p><ul><li><strong>使用示例</strong>：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Min(18)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@PostMapping(&quot;/register&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">register</span><span class="params">(<span class="meta">@Valid</span> <span class="meta">@ModelAttribute</span> User user, BindingResult result)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (result.hasErrors()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;registerForm&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 处理注册逻辑</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="SpringMVC-的文件上传和下载"><a href="#SpringMVC-的文件上传和下载" class="headerlink" title="SpringMVC 的文件上传和下载"></a>SpringMVC 的文件上传和下载</h2><h3 id="1-Spring-MVC-文件上传的作用与配置"><a href="#1-Spring-MVC-文件上传的作用与配置" class="headerlink" title="1. Spring MVC 文件上传的作用与配置"></a>1. Spring MVC 文件上传的作用与配置</h3><h4 id="1-1-配置文件扫描"><a href="#1-1-配置文件扫描" class="headerlink" title="1.1 配置文件扫描"></a>1.1 配置文件扫描</h4><p>在Spring配置文件中，需要启用文件上传的支持，通常通过<code>MultipartResolver</code>来实现。可以使用<code>CommonsMultipartResolver</code>或<code>StandardServletMultipartResolver</code>。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;multipartResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxUploadSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10485760&quot;</span>/&gt;</span> <span class="comment">&lt;!-- 设置最大上传文件大小 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="1-2-文件解析类"><a href="#1-2-文件解析类" class="headerlink" title="1.2 文件解析类"></a>1.2 文件解析类</h4><p><code>CommonsMultipartResolver</code>是基于Apache Commons FileUpload库的实现，负责解析上传的文件。它会将上传的文件封装为<code>MultipartFile</code>对象，方便后续处理。</p><h3 id="2-上传文件的主要代码"><a href="#2-上传文件的主要代码" class="headerlink" title="2. 上传文件的主要代码"></a>2. 上传文件的主要代码</h3><p>在控制器中处理文件上传时，通常会使用<code>MultipartFile</code>对象。以下是一个简单的文件上传示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.MultipartFile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileUploadController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/upload&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">handleFileUpload</span><span class="params">(<span class="meta">@RequestParam(&quot;file&quot;)</span> MultipartFile file)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!file.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 指定文件保存路径</span></span><br><span class="line">                <span class="type">File</span> <span class="variable">destinationFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;/path/to/upload/directory/&quot;</span> + file.getOriginalFilename());</span><br><span class="line">                <span class="comment">// 将上传的文件保存到指定路径</span></span><br><span class="line">                file.transferTo(destinationFile);</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;文件上传成功：&quot;</span> + destinationFile.getAbsolutePath();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;文件上传失败：&quot;</span> + e.getMessage();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;上传的文件为空&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码说明：</p><ul><li>**<code>@RequestParam(&quot;file&quot;) MultipartFile file</code>**：接收上传的文件。</li><li>**<code>file.transferTo(destinationFile)</code>**：将上传的文件保存到指定的路径。<br>在Spring MVC中，国际化和拦截器是两个重要的功能模块，分别用于处理多语言支持和请求的拦截与处理。以下是对这两个功能的详细介绍：</li></ul><h2 id="SpingMVC的国际化和拦截器"><a href="#SpingMVC的国际化和拦截器" class="headerlink" title="SpingMVC的国际化和拦截器"></a>SpingMVC的国际化和拦截器</h2><h3 id="1-Spring-MVC的国际化"><a href="#1-Spring-MVC的国际化" class="headerlink" title="1. Spring MVC的国际化"></a>1. Spring MVC的国际化</h3><p>国际化（i18n）是指支持多种语言和地区的功能。Spring MVC通过<code>MessageSource</code>接口和相关配置来实现国际化。</p><h4 id="1-1-配置国际化支持"><a href="#1-1-配置国际化支持" class="headerlink" title="1.1 配置国际化支持"></a>1.1 配置国际化支持</h4><p>在Spring配置文件中，需要配置<code>MessageSource</code>，通常使用<code>ResourceBundleMessageSource</code>来加载消息资源文件。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;messageSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.context.support.ResourceBundleMessageSource&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basename&quot;</span> <span class="attr">value</span>=<span class="string">&quot;messages&quot;</span>/&gt;</span> <span class="comment">&lt;!-- 指定资源文件的基础名称 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="1-2-创建消息资源文件"><a href="#1-2-创建消息资源文件" class="headerlink" title="1.2 创建消息资源文件"></a>1.2 创建消息资源文件</h4><p>在项目的<code>src/main/resources</code>目录下创建<code>messages.properties</code>、<code>messages_zh.properties</code>、<code>messages_en.properties</code>等文件，分别用于不同语言的消息。</p><p><strong>messages.properties</strong>（默认语言）</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">greeting</span>=<span class="string">Hello</span></span><br></pre></td></tr></table></figure><p><strong>messages_zh.properties</strong>（中文）</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">greeting</span>=<span class="string">你好</span></span><br></pre></td></tr></table></figure><h4 id="1-3-使用国际化消息"><a href="#1-3-使用国际化消息" class="headerlink" title="1.3 使用国际化消息"></a>1.3 使用国际化消息</h4><p>在控制器或视图中使用<code>MessageSource</code>来获取国际化消息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.MessageSource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestHeader;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GreetingController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MessageSource messageSource;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/greeting&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">greeting</span><span class="params">(<span class="meta">@RequestHeader(name = &quot;Accept-Language&quot;, required = false)</span> String locale)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> messageSource.getMessage(<span class="string">&quot;greeting&quot;</span>, <span class="literal">null</span>, locale);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-Spring-MVC的拦截器"><a href="#2-Spring-MVC的拦截器" class="headerlink" title="2. Spring MVC的拦截器"></a>2. Spring MVC的拦截器</h3><p>拦截器用于在请求到达控制器之前或响应返回之前进行处理，常用于日志记录、权限检查等。</p><h4 id="2-1-创建拦截器"><a href="#2-1-创建拦截器" class="headerlink" title="2.1 创建拦截器"></a>2.1 创建拦截器</h4><p>实现<code>HandlerInterceptor</code>接口，重写相应的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 在请求处理之前执行</span></span><br><span class="line">        System.out.println(<span class="string">&quot;请求路径: &quot;</span> + request.getRequestURI());</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">// 返回true表示继续处理请求，返回false则终止请求</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 在请求处理之后执行</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 在整个请求完成之后执行</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-配置拦截器（拦截器配置代码要考）"><a href="#2-2-配置拦截器（拦截器配置代码要考）" class="headerlink" title="2.2 配置拦截器（拦截器配置代码要考）"></a>2.2 配置拦截器（拦截器配置代码要考）</h4><p>在Spring配置文件中配置拦截器。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.example.MyInterceptor&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure><p>或者在Java配置中使用<code>WebMvcConfigurer</code>接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> <span class="title class_">MyInterceptor</span>()).addPathPatterns(<span class="string">&quot;/**&quot;</span>); <span class="comment">// 拦截所有请求</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MyBatis 是一个持久层框架，主要用于简化数据库操作。以下是关于 MyBatis 中 SQL 语句的基本用法，包括插入、查询、更新和删除操作，以及映射的相关内容。</p><h2 id="Mybatis"><a href="#Mybatis" class="headerlink" title="Mybatis"></a>Mybatis</h2><h3 id="1-SQL-语句"><a href="#1-SQL-语句" class="headerlink" title="1. SQL 语句"></a>1. SQL 语句</h3><h4 id="1-1-根据-ID-查询词数据"><a href="#1-1-根据-ID-查询词数据" class="headerlink" title="1.1 根据 ID 查询词数据"></a>1.1 根据 ID 查询词数据</h4><p>使用 <code>&lt;select&gt;</code> 标签来<code>查询数据</code>。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectWordById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Word&quot;</span>&gt;</span></span><br><span class="line">    SELECT * FROM words WHERE id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>id</strong>：查询的唯一标识符。</li><li><strong>parameterType</strong>：输入参数的类型。</li><li><strong>resultType</strong>：返回结果的类型。</li></ul><h4 id="1-2-新增一条数据"><a href="#1-2-新增一条数据" class="headerlink" title="1.2 新增一条数据"></a>1.2 新增一条数据</h4><p>使用 <code>&lt;insert&gt;</code> 标签来<code>插入数据</code>。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertWord&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Word&quot;</span>&gt;</span></span><br><span class="line">    INSERT INTO words (word, definition) VALUES (#&#123;word&#125;, #&#123;definition&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>parameterType</strong>：传入的对象类型，通常是一个 Java Bean。</li></ul><h4 id="1-3-修改数据"><a href="#1-3-修改数据" class="headerlink" title="1.3 修改数据"></a>1.3 修改数据</h4><p>使用 <code>&lt;update&gt;</code> 标签来<code>更新数据</code>。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateWord&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Word&quot;</span>&gt;</span></span><br><span class="line">    UPDATE words SET definition = #&#123;definition&#125; WHERE id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="1-4-删除数据"><a href="#1-4-删除数据" class="headerlink" title="1.4 删除数据"></a>1.4 删除数据</h4><p>使用 <code>&lt;delete&gt;</code> 标签来<code>删除数据</code>。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteWord&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span>&gt;</span></span><br><span class="line">    DELETE FROM words WHERE id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-映射"><a href="#2-映射" class="headerlink" title="2. 映射"></a>2. 映射</h3><p>p166配置映射</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta"><span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta"><span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.mybatis.mapper.UserInfoMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 根据用户编号获取用户信息 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findUserInfoById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;userInfoMap&quot;</span>&gt;</span></span><br><span class="line">        SELECT *</span><br><span class="line">        FROM user_info WHERE id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">&quot;UserInfo&quot;</span> <span class="attr">id</span>=<span class="string">&quot;userInfoMap&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;uid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;uname&quot;</span> <span class="attr">column</span>=<span class="string">&quot;userName&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;upass&quot;</span> <span class="attr">column</span>=<span class="string">&quot;password&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="关联映射"><a href="#关联映射" class="headerlink" title="关联映射"></a>关联映射</h2><h3 id="1-一对一映射"><a href="#1-一对一映射" class="headerlink" title="1. 一对一映射"></a>1. 一对一映射</h3><ul><li><strong>定义</strong>：一个对象对应一个对象。</li><li><strong>例子</strong>：一个用户有一个个人资料。</li></ul><h3 id="2-一对多映射"><a href="#2-一对多映射" class="headerlink" title="2. 一对多映射"></a>2. 一对多映射</h3><ul><li><strong>定义</strong>：一个对象对应多个对象。</li><li><strong>例子</strong>：一个用户可以有多个订单。</li></ul><h3 id="3-多对多映射"><a href="#3-多对多映射" class="headerlink" title="3. 多对多映射"></a>3. 多对多映射</h3><ul><li><strong>定义</strong>：多个对象可以对应多个对象。</li><li><strong>例子</strong>：一个用户可以有多个角色，而一个角色也可以被多个用户拥有。</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li><strong>一对一</strong>：一对一。</li><li><strong>一对多</strong>：一对多。</li><li><strong>多对多</strong>：多对多。<br>这样好记多了吧。</li></ul><h2 id="动态SQL"><a href="#动态SQL" class="headerlink" title="动态SQL"></a>动态SQL</h2><p>动态 SQL 是指在 SQL 查询中根据条件动态生成不同的 SQL 语句。在 MyBatis 中，可以使用 <code>&lt;if&gt;</code>、<code>&lt;where&gt;</code> 和 <code>&lt;set&gt;</code> 标签来实现动态 SQL。</p><h3 id="1-标签"><a href="#1-标签" class="headerlink" title="1. &lt;if&gt; 标签"></a>1. <code>&lt;if&gt;</code> 标签</h3><p><strong>功能</strong>：根据条件判断是否生成某个 SQL 片段。</p><p><strong>使用方法</strong>：</p><ul><li>在 <code>&lt;if&gt;</code> 标签中，可以使用 <code>test</code> 属性来指定条件表达式。</li><li>如果条件为 true，则生成 <code>&lt;if&gt;</code> 标签内的 SQL 片段。</li></ul><p><strong>示例</strong>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findUsers&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">    SELECT * FROM users</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;userName != null&quot;</span>&gt;</span></span><br><span class="line">            AND userName = #&#123;userName&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;age != null&quot;</span>&gt;</span></span><br><span class="line">            AND age = #&#123;age&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在这个示例中，如果 <code>userName</code> 或 <code>age</code> 不为 null，则相应的条件会被添加到 SQL 查询中。</p><h3 id="2-标签"><a href="#2-标签" class="headerlink" title="2. &lt;where&gt; 标签"></a>2. <code>&lt;where&gt;</code> 标签</h3><p><strong>功能</strong>：自动处理 SQL 查询中的 WHERE 子句，避免手动添加 AND 或 OR。</p><p><strong>使用方法</strong>：</p><ul><li><code>&lt;where&gt;</code> 标签会自动在生成的 SQL 语句前添加 “WHERE” 关键字，并在第一个条件前自动添加 “AND” 或 “OR”。</li></ul><p><strong>示例</strong>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findUsers&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">    SELECT * FROM users</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;userName != null&quot;</span>&gt;</span></span><br><span class="line">            userName = #&#123;userName&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;age != null&quot;</span>&gt;</span></span><br><span class="line">            AND age = #&#123;age&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在这个示例中，如果 <code>userName</code> 不为 null，<code>WHERE</code> 后面会直接跟上 <code>userName = #&#123;userName&#125;</code>，如果 <code>age</code> 不为 null，<code>AND age = #&#123;age&#125;</code> 会被添加。</p><h3 id="3-标签"><a href="#3-标签" class="headerlink" title="3. &lt;set&gt; 标签"></a>3. <code>&lt;set&gt;</code> 标签</h3><p><strong>功能</strong>：用于动态生成 UPDATE 语句中的 SET 子句。</p><p><strong>使用方法</strong>：</p><ul><li><code>&lt;set&gt;</code> 标签会自动处理 SET 子句中的逗号，避免手动添加。</li></ul><p><strong>示例</strong>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">    UPDATE users</span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;userName != null&quot;</span>&gt;</span></span><br><span class="line">            userName = #&#123;userName&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;age != null&quot;</span>&gt;</span></span><br><span class="line">            age = #&#123;age&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    WHERE id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在这个示例中，如果 <code>userName</code> 或 <code>age</code> 不为 null，相应的字段会被更新，并且逗号会自动处理。<br><strong>总结如下</strong></p><ul><li>**<code>&lt;if&gt;</code>**：根据条件生成 SQL 片段。</li><li>**<code>&lt;where&gt;</code>**：自动处理 WHERE 子句。</li><li>**<code>&lt;set&gt;</code>**：自动处理 UPDATE 语句中的 SET 子句。</li></ul><h2 id="Spring整合MyBaits"><a href="#Spring整合MyBaits" class="headerlink" title="Spring整合MyBaits"></a>Spring整合MyBaits</h2><p>这部分建议直接看书得了p222~223xml配置<br>p22应用</p>]]></content>
      
      
      <categories>
          
          <category> 杂项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安卓开发考试题库</title>
      <link href="/2025/01/02/%E5%AE%89%E5%8D%93%E5%BC%80%E5%8F%91%E8%80%83%E8%AF%95%E9%A2%98%E5%BA%93/"/>
      <url>/2025/01/02/%E5%AE%89%E5%8D%93%E5%BC%80%E5%8F%91%E8%80%83%E8%AF%95%E9%A2%98%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h1 id="安卓开发考试题库"><a href="#安卓开发考试题库" class="headerlink" title="安卓开发考试题库"></a>安卓开发考试题库</h1><blockquote><p>直接背好吧，我自己也不会去看解析，答案直接给<br>时间也不多了，在这提前祝大家新年快乐，加油把这最后一科秒了吧</p></blockquote><p>我也求求了，不要让我反复更新了QAQ</p><blockquote><p>大题的话，这个还真不好背，正常人都是Ctrl大法完成的，尽量背吧</p></blockquote><h1 id="单选题"><a href="#单选题" class="headerlink" title="单选题"></a>单选题</h1><ol><li><p>Android查看应用程序日志的工具是(   <strong><code>A</code></strong>   )</p><ul><li><strong>A、 logcat</strong>     </li><li>B、 console</li><li>C、 ddms       </li><li>D、 tomcat</li></ul></li><li><p>在程序中输出一条日志，下面代码正确的是(  <strong><code>B</code></strong>   )</p><ul><li>A、Log.i(context,”msg”);   </li><li><strong>B、Log.i(“tag”,”msg”);</strong></li><li>C、Log.i(“msg”);</li><li>D、Log.i();</li></ul></li><li><p>Android项目中放置常量的string.xml位于哪个目录下(  <strong><code>C</code></strong>   )</p><ul><li>A、 res&#x2F;layout    </li><li>B、 layout   </li><li><strong>C、res&#x2F;values</strong>   </li><li>D、assets</li></ul></li><li><p>ConstraintLayout中当你想要让多个视图以等宽或等高的方式排列时，你应该使用什么？(   <strong><code>C</code></strong>   )</p><ul><li>A. app:layout_constraintWidth_default&#x3D;”match_parent”</li><li>B. app:layout_constraintHeight_default&#x3D;”wrap_content”</li><li><strong>C. app:layout_constraintDimensionRatio&#x3D;”1:1”</strong></li><li>D. app:layout_constraintWidth_percent 和app:layout_constraintHeight_percent</li></ul></li><li><p>如果在帧布局FrameLayout中放入三个所有属性值相同按钮，能够在屏幕上显示的是(  <strong><code>A</code></strong>  ) </p><ul><li><strong>A、最后一个被添加的按钮</strong>      </li><li>B、第一个被添加的按钮     </li><li>C、第二个被动添加的按钮      </li><li>D、三个按钮都能显示</li></ul></li><li><p>为了给一个线性布局设置自身相对于父控件的位置，应该怎么设置(   <strong><code>A</code></strong>   )</p><ul><li><strong>A、 android:layout_gravity&#x3D;”right”</strong></li><li>B、 android:gravity&#x3D;”right”</li><li>C、 android:orientation&#x3D;”vertical”</li><li>D、 android:layout_height&#x3D;”match_parent”</li></ul><p></p></li><li><p>在程序中得到一个按钮对象b后，向此按钮添加点击事件，下面代码正确的是（   <strong><code>A</code></strong>   ）</p><ul><li><strong>A、 b.setOnClickListener( )</strong></li><li>B、 b.setOnclickListener( )</li><li>C、 b.setOnclick( )</li><li>D、 b.setOnLongClickListener( )</li></ul></li><li><p>下列不属于android布局的是 (   <strong><code>C</code></strong>   )</p><ul><li>A、FrameLayout </li><li>B、LinearLayout </li><li><strong>C、TableRow</strong></li><li>D、ConstraintLayout</li></ul></li><li><p>关于Handler的说法不正确的是(   <strong><code>A</code></strong>   )[本人认为是D]</p><ul><li><strong>A、它实现不同进程间通信的一种机制</strong></li><li>B、 它避免了在新线程中刷新UI的操作</li><li>C、 它采用队列的方式来存储Message</li><li>D、 它实现不同线程间通信的一种机制</li></ul></li><li><p>Activity生命周期中最后一个需要执行的方法是什么（   <strong><code>D</code></strong>   ）</p><ul><li>A、onStart                    </li><li>B、onCreate </li><li>C、onStop                     </li><li><strong>D、onDestroy</strong></li></ul></li><li><p>Android是如何组织Activity的（   <strong><code>B</code></strong>   ）</p><ul><li>A、 以堆的方式组织Activity          </li><li><strong>B、 以栈的方式组织Activity</strong></li><li>C、 以树形方式组织Activity          </li><li>D、 以链式方式组织Activity</li></ul></li><li><p>一个应用程序如果要访问另一个应用程序的数据库，需要通过（   <strong><code>C</code></strong>   ）来实现</p><ul><li>A、BroadcastReceiver          </li><li>B、Activity</li><li><strong>C、ContentProvider</strong>            </li><li>D、Service</li></ul></li><li><p>RecyclerView.Adapter的哪个方法用于创建新的ViewHolder实例(  <strong><code>A</code></strong>  )</p><ul><li><strong>A. onCreateViewHolder()</strong>    </li><li>B. onBindViewHolder()</li><li>C. getItemCount()          </li><li>D. onAttachedToRecyclerView()</li></ul></li><li><p>下列关于内存回收的说明，哪个是正确的（   <strong><code>B</code></strong>   ）                                    </p><ul><li>A.程序员必须创建一个线程来释放内存</li><li><strong>B.内存回收程序负责释放无用内存</strong></li><li>C.内存回收程序允许程序员直接释放内存</li><li>D.内存回收程序可以在指定的时间释放内存对象</li></ul></li><li><p>在Android Oreo (API level 26)及以上版本中，创建通知时必须指定什么(   <strong><code>B</code></strong>   )</p><ul><li>A. Notification ID        </li><li><strong>B. Notification Channel</strong></li><li>C. Notification Title     </li><li>D. Notification Icon</li></ul></li><li><p>Activity生命周期中第一个需要执行的方法是什么（   <strong><code>B</code></strong>   ）</p><ul><li>A、onStart    </li><li>B、<strong>onCreate</strong> </li><li>C、onReStart   </li><li>D、onResume</li></ul></li><li><p>关于线程说法不正确的是（   <strong><code>B</code></strong>   ）[本人认为是A]                                                  </p><ul><li>A、 在 android 中，我们可以在主线程中，创建一个新的线程</li><li><strong>B、 在创建的新线程中，它可以操作 UI 组件</strong></li><li>C、 新线程可以和 Handler 共同使用</li><li>D、 创建的 Handler 对象，它隶属于创建它的线程</li></ul></li><li><p>一个Intent对象调用getExtras( )方法返回的是一个什么类型（  <strong><code>D</code></strong>   ）</p><ul><li>A、int                         </li><li>B、string     </li><li>C、Serializable                </li><li><strong>D、Bundle</strong></li></ul></li><li><p>关于service生命周期的onCreate()和onStartCommand()说法正确的是（   <strong><code>D</code></strong>   ）</p><ul><li>A、当第一次启动的时候先后调用onStartCommand()和onCreate()方法</li><li>B、当第一次启动的时候只会调用onCreate()方法</li><li>C、如果service已经启动，将先后调用onCreate()和onStartCommand()方法</li><li><strong>D、如果service已经启动，只会执行onStartCommand()方法，不再执行onCreate()方法</strong></li></ul></li><li><p>关于 BroadcastReceiver 的说法不正确的是（  <strong><code>B</code></strong>  ）</p><ul><li>A、是用来接收广播 Intent 的</li><li><strong>B、一个广播 Intent 只能被一个订阅了此广播的 BroadcastReceiver 所接收</strong></li><li>C、对有序广播，系统会根据接收者声明的优先级别按顺序逐个执行接收者</li><li>D、接收者声明的优先级别在的 android:priority 属性中声明，数值越大优先级别越高</li></ul></li><li><p>使用HttpUrlConnection实现移动互联时,设置读取超时属性的方法是（  <strong><code>B</code></strong>  ）</p><ul><li>A、setTimeout()                   </li><li><strong>B、setReadTimeout()</strong> </li><li>C、setConnectTimeout()             </li><li>D、setRequestMethod()</li></ul></li><li><p>在ConstraintLayout中，如何设置一个视图与父布局顶部对齐？(  <strong><code>A</code></strong>  )</p><ul><li><strong>A. app:layout_constraintTop_toTopOf&#x3D;”parent”</strong></li><li>B. android:layout_alignParentTop&#x3D;”true”</li><li>C. app:layout_constraintStart_toStartOf&#x3D;”parent”</li><li>D. android:gravity&#x3D;”top”</li></ul></li><li><p>以下属于调用摄像头硬件的权限的是：（  <strong><code>A</code></strong>  ）</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">A.&lt;uses-permission android:name=&quot;android.permission.CAMERA&quot;/&gt;</span><br><span class="line">B.&lt;uses-permission android:name=&quot;android.permission.MOUNT_UNMOUNT_FILESYSTEMS&quot; /&gt;</span><br><span class="line">C.&lt;uses-permission android:name=&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot;/&gt;</span><br><span class="line">D.&lt;uses-permission android:name=&quot;android.permission.INTERNET&quot;/&gt;</span><br></pre></td></tr></table></figure><ol start="24"><li><p>什么是Intent的主要用途？(  <strong><code>D</code></strong>  )</p><ul><li>A. 启动服务  </li><li>B. 发送广播  </li><li>C. 进行组件间通信  </li><li><strong>D. 所有上述选项</strong></li></ul></li><li><p>使用HttpURLConnection的Get方式请求数据时,下列哪个属性是必须设置的（  <strong><code>B</code></strong>  ）</p><ul><li>A、connection.setDoOutput(true)</li><li><strong>B、connection.connect()</strong></li><li>C、connection.setRequestMethod(“POST”)</li><li>D、connection.setDoInput(true)</li></ul></li><li><p>对于AlertDialog的描述不正确的是(  <strong><code>A</code></strong>  )</p><ul><li><strong>A、使用new关键字创建AlertDialog的实例</strong></li><li>B、对话框的显示需要调用show方法</li><li>C、setPositiveButton方法是用来加确定按钮的</li><li>D、setNegativeButton方法是用来加取消按钮的</li></ul></li><li><p>Android解析xml的方法中，将整个文件加载到内存中进行解析的是?(  <strong><code>C</code></strong>  )</p><ul><li>A、SAX    </li><li>B、PULL     </li><li><strong>C、DOM</strong>   </li><li>D 、JSON</li></ul></li><li><p>下列对SharePreferences存、取文件的说法中不正确的是：（  <strong><code>C</code></strong>  ）</p><ul><li>A、属于移动存储解决方案   </li><li>B、sharePreferences处理的就是key-value对  </li><li><strong>C、读取xml文件的路径是&#x2F;sdcard&#x2F;shared_prefx</strong>  </li><li>D、信息的保存格式是xml</li></ul></li><li><p>下列说法哪一个不正确（  <strong><code>B</code></strong>  ）</p><ul><li>A、Java程序经编译后会产生字节码    </li><li><strong>B、java虚拟机加载.java文件</strong></li><li>C、javac是编译的命令           </li><li>D、javadoc是文档化的命令</li></ul></li><li><p>关于Socket通讯正确的是（  <strong><code>A</code></strong>  ）</p><ul><li><strong>A、服务器端需要ServerSocket需要绑定端口号</strong></li><li>B、服务器端需要ServerSocket需要绑定端口号和IP地址 </li><li>C、客户端需要Socket，需要绑定端口号</li><li>D、客户端需要ServerSocket，需要绑定端口号</li></ul></li><li><p>在Android中，哪种类型的存储适用于保存小量的数据？(  <strong><code>B</code></strong>  )</p><ul><li>A. SQLite数据库      </li><li><strong>B. SharedPreferences</strong></li><li>C. 文件系统           </li><li>D. 网络存储</li></ul></li><li><p>ScrollView可以有几个子view （  <strong><code>A</code></strong>  ）</p><ul><li><strong>A. 1个</strong>           </li><li>B. 2个        </li><li>C. 3个        </li><li>D. 无限制</li></ul></li><li><p>Activity从可见状态变为半透明遮盖状态时，生命周期中哪个方法被调用（  <strong><code>B</code></strong>  ）</p><ul><li>A.onStop()                    </li><li><strong>B. onPause()</strong>                           </li><li>C. onRestart()                 </li><li>D.onStart()</li></ul></li><li><p>一个应用程序如果要访问另一个应用程序的数据库，需要通过（   <strong><code>C</code></strong>   ）来实现</p><ul><li>A.BroadcastReceiver            </li><li>B.Activity</li><li><strong>C.ContentProvider</strong>              </li><li>D.Service</li></ul></li></ol><h1 id="多选题"><a href="#多选题" class="headerlink" title="多选题"></a>多选题</h1><ol><li><p>下面关于Android触摸事件监听器的说法正确的是（   <strong><code>ACD</code></strong>   ）</p><ul><li>A. 处理短时间单击按钮事件需要实现OnClickListener接口  </li><li>B. 处理长时间单击按钮事件需要实现OnTouchListener接口  </li><li>C. 处理屏幕触摸事件需要实现OnTouchListener接口  </li><li>D. 响应屏幕触摸事件的方法为onTouch（）</li></ul></li><li><p>关于线程说法正确的是（    <strong><code>ACD</code></strong>    ）</p><ul><li>A. 在 android 中，我们可以在主线程中，创建一个新的线程</li><li>B. 在创建的新线程中，它可以操作 UI 组件</li><li>C. 新线程可以和 Handler 共同使用</li><li>D. 创建的 Handler 对象，它隶属于创建它的线程</li></ul></li><li><p>下列哪些可以用来实现Activity之间的数据传递？（  <strong><code>ABD</code></strong> ）[本人认为是ACD] </p><ul><li>A. Intent                  </li><li>B. Bundle</li><li>C. SharedPreferences       </li><li>D. Static Variables</li></ul></li><li><p>哪些是Android支持的网络请求方式？（   <strong><code>ABCD</code></strong>    ）</p><ul><li>A. GET      </li><li>B. POST      </li><li>C. PUT      </li><li>D. DELETE</li></ul></li><li><p>下列哪些布局不能实现内部控件的相互重叠 （  <strong><code>AC</code></strong>   ）</p><ul><li>A. LineaLayout          </li><li>B. ConstraintLayout</li><li>C. TableLayout           </li><li>D. FrameLayout</li></ul></li><li><p>下面说法错误的是（   <strong><code>ABCD</code></strong>    ）</p><ul><li>A．Android采用单线程模型 </li><li>B．Android会默认会为线程创建一个关联的消息队列 </li><li>C．Handler会与多个线程以及该线程的消息队列对应 </li><li>D．程序组件首先通过Handler把消息传送给Looper，Looper把消息放入队列</li></ul></li><li><p>对于AlertDialog的描述正确的是（    <strong><code>BCD</code></strong>    ）</p><ul><li>A.使用new关键字创建AlertDialog的实例</li><li>B.对话框的显示需要调用show方法</li><li>C.setPositiveButton方法是用来加确定按钮的</li><li>D.setNegativeButton方法是用来加取消按钮的</li></ul></li><li><p>在android中使用Menu时可能需要重写的方法有 (   <strong><code>AC</code></strong>    )</p><ul><li>A.onCreateOptionsMenu()  </li><li>B.onCreateMenu()</li><li>C.onOptionsItemSelected()</li><li>D.onItemSelected()</li></ul></li><li><p>下列代码可以为TextView设置所显示文字的语句是（   <strong><code>AB</code></strong>    ）</p><ul><li>A,在配置文件中用属性 android:text&#x3D;”abc”</li><li>B,在程序中用TextView对象的setText(“abc”)方法</li><li>C,在程序中用TextView的静态方法setText(“abc”)</li><li>D,在配置文件中用属性 android:value&#x3D;”abc”</li></ul></li><li><p>下面关于Intent对象与Intent过滤器的说法正确的是（   <strong><code>ACD</code></strong>   ）</p><ul><li>A. 为了通过匹配，Intent中的每个种类必须与过滤器中的种类匹配</li><li>B. 为了通过匹配，过滤器中的种类必须是Intent对象中种类的子集</li><li>C. 为了通过匹配，Intent对象中的种类必须是过滤器中种类的子集</li><li>D. 过滤器中必须包含至少一个<action>标签</li></ul></li><li><p>下列哪些是RecyclerView中常用的布局管理器？(   <strong><code>ABC</code></strong>    )</p><ul><li>A. LinearLayoutManager</li><li>B. GridLayoutManager</li><li>C. StaggeredGridLayoutManager </li><li>D. FrameLayout</li></ul></li><li><p>为了提高RecyclerView的性能，可以采取哪些措施？（   <strong><code>ABCD</code></strong>   ）</p><ul><li>A. 使用ViewHolder模式      </li><li>B. 减少视图层次</li><li>C. 实现缓存策略             </li><li>D. 避免在主线程中执行耗时操作</li></ul></li><li><p>下列关于Toast的说法不正确的是（  <strong><code>ABD</code></strong>    ）[本人认为是ACD]</p><ul><li>A. 只能通过Toast.makeText(）来创建  </li><li>B. 可以显示图片  </li><li>C. 可以设置显示时间长短 </li><li>D. 只能显示文本内容</li></ul><p> </p></li><li><p>下面关于Intent 的作用的叙述不正确的是 (   <strong><code>BCD</code></strong>    ) </p><ul><li>A.intent是连接四大组件的纽带,可以实现界面间切换，可以包含动作和动作数据</li><li>B.是一段长生命周期的没有用户界面的程序， 可以保持应用在后台运行而不会因为切换页面而消失 </li><li>C.实现应用程序间的数据共享 </li><li>D.处理一个应用程序整体性的工作</li></ul></li><li><p>在android中使用Menu时可能需要重写的方法有 (   <strong><code>AC</code></strong>    )</p><ul><li>A.onCreateOptionsMenu()</li><li>B.onCreateMenu()</li><li>C.onOptionsItemSelected()</li><li>D.onItemSelected()</li></ul></li><li><p>在web开发领域主要的数据交互格式有（  <strong><code>AC</code></strong>  ）</p><ul><li>A，XML        </li><li>B,HTML  </li><li>C,JSON        </li><li>D,AJAX</li></ul></li><li><p>安卓为新建线程与UI线程之间的交互设计了下列哪些类（   <strong><code>ABC</code></strong>    ）</p><ul><li>A. Handler      </li><li>B. Looper</li><li>C. Message      </li><li>D. Tools</li></ul></li></ol><h1 id="简答题"><a href="#简答题" class="headerlink" title="简答题"></a>简答题</h1><p>1.写出代码实现存储字符串“helloworld”到文件名为data的文件中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">FileOutputStream outputStream=openFileOutput(<span class="string">&quot;data&quot;</span>, Context.MODE_PRIVATE);</span><br><span class="line">BufferedWriter bufferedWriter=<span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(outputStream));</span><br><span class="line">bufferedWriter.write(“helloworld”);</span><br><span class="line">bufferedWriter.close();</span><br></pre></td></tr></table></figure><p>2.Android应用程序的4大组件是什么？<br>**Service  Activity     BroadcastReceiver    ContentProvider **</p><p>3、简单介绍怎样实现监听每分钟的时间变化，可用代码表示<br>编写广播接收器类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TimeChangeReceiver</span> <span class="keyword">extends</span> <span class="title class_">BroadcastReceiver</span>&#123;</span><br><span class="line">    <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onReceive</span><span class="params">(Context context, Intent intent)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(i==<span class="number">59</span>) &#123;</span><br><span class="line">            Toast.makeText(SecondActivity.<span class="built_in">this</span>, <span class="string">&quot;Time has changed&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">            i=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> i++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>动态注册广播接收器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">IntentFilter intentFilter=<span class="keyword">new</span> <span class="title class_">IntentFilter</span>();</span><br><span class="line">intentFilter.addAction(<span class="string">&quot;android.intent.action.TIME_TICK&quot;</span>);</span><br><span class="line">TimeChangeReceiver timeChangeReceiver=<span class="keyword">new</span> <span class="title class_">TimeChangeReceiver</span>();</span><br><span class="line">registerReceiver(timeChangeReceiver,intentFilter);</span><br></pre></td></tr></table></figure><p>4、写出Activity的四种启动模式（4分）<br><strong>standard   singletop   singletask   singleInstance</strong></p><p>5、使用SharedPreferences存储两个参数，username&#x3D;“lucy”，password&#x3D;“123456”，写出代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SharedPreferences sharedPreferences= getApplicationContext().getSharedPreferences(<span class="string">&quot;userInfo&quot;</span>,<span class="number">0</span>);</span><br><span class="line">SharedPreferences.Editor editor=sharedPreferences.edit();</span><br><span class="line">editor.putString(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;lucy&quot;</span>);</span><br><span class="line">editor.putString(<span class="string">&quot;password&quot;</span>,<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">editor.commit();</span><br></pre></td></tr></table></figure><p>6、写出Android应用程序开发中的常用布局方式，四种以上。<br><strong>LinearLayout   ConstraintLayout    FrameLayout   TableLayout</strong></p><p>7、已知一个自定义广播接收器的过滤器的action属性为“com.example.broadcasttest”,写出代码发送一条广播，让这个接收器接收到</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Intent intent=<span class="keyword">new</span> <span class="title class_">Intent</span>(<span class="string">&quot;com.example.broadcasttest&quot;</span>);</span><br><span class="line">sendBroadcast(intent);</span><br></pre></td></tr></table></figure><p>8、已知一个字符串String hello&#x3D;“hello world”，简述怎样实现将它分享至朋友圈。可用代码代替。(5分)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Intent intent=<span class="keyword">new</span>  <span class="title class_">Intent</span>(Intent.ACTION_SEND);</span><br><span class="line">intent.setType(<span class="string">&quot;text/plain&quot;</span>);</span><br><span class="line">intent.putExtra(Intent.EXTRA_TEXT,<span class="string">&quot;文本内容&quot;</span>);</span><br><span class="line">startActivity(intent);</span><br></pre></td></tr></table></figure><p>9、创建任意一个新项目，在Manifest文件中为FirstActivity设置启动方式为singleTop，为SecondActivity设置启动方式为singleTask，ThirdActivity不作设置。在FirstActivity中点击按钮启动SecondActivity，在SecondActivity中启动ThirdActivity，在ThirdActivity中点击按钮启动SecondActivity。简单画出Activity返回栈的图表示以上几个步骤变化。</p><h1 id="编程题："><a href="#编程题：" class="headerlink" title="编程题："></a>编程题：</h1><p>1、利用广播接收器监听广播，实现每隔2分钟弹出一个Toast显示“helloworld”。<br>广播接收器类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TimeChangeReceiver</span> <span class="keyword">extends</span> <span class="title class_">BroadcastReceiver</span>&#123;</span><br><span class="line">    <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onReceive</span><span class="params">(Context context, Intent intent)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(i==<span class="number">1</span>) &#123;</span><br><span class="line">            Toast.makeText(SecondActivity.<span class="built_in">this</span>, <span class="string">&quot;Time has changed&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">            i=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> i=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>动态注册广播接收器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">IntentFilter intentFilter=<span class="keyword">new</span> <span class="title class_">IntentFilter</span>();</span><br><span class="line">intentFilter.addAction(<span class="string">&quot;android.intent.action.TIME_TICK&quot;</span>);</span><br><span class="line">TimeChangeReceiver timeChangeReceiver=<span class="keyword">new</span> <span class="title class_">TimeChangeReceiver</span>();</span><br><span class="line">registerReceiver(timeChangeReceiver,intentFilter);</span><br></pre></td></tr></table></figure><p>2、编写一个MainActivity和MyService，在MainActivity中的onCreate()函数中为两个按钮分别设置点击事件监听器，点击第一个按钮启动服务弹出一个Toast显示“您点击了第一个按钮”，点击第二个按钮启动服务弹出一个Toast显示“您点击了第二个按钮”在MainAtivity的onCreate()中写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">bt1=(Button) findViewById(R.id.button1);</span><br><span class="line">        bt.setOnClickListener(<span class="keyword">new</span> <span class="title class_">OnClickListener</span>()&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line">Intent intent=<span class="keyword">new</span> <span class="title class_">Intent</span>(MainActivity.<span class="built_in">this</span>,MyService.class);</span><br><span class="line">intent.setAction(<span class="string">&quot;button1&quot;</span>);                </span><br><span class="line">MainActivity.<span class="built_in">this</span>.startService(intent);</span><br><span class="line">&#125;&#125;);</span><br><span class="line">        bt2=(Button) findViewById(R.id.button2);        </span><br><span class="line">        bt2.setOnClickListener(<span class="keyword">new</span> <span class="title class_">OnClickListener</span>()&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line">Intent intent2=<span class="keyword">new</span> <span class="title class_">Intent</span>(MainActivity.<span class="built_in">this</span>,MyService.class);</span><br><span class="line">intent2.setAction(<span class="string">&quot;button2&quot;</span>);</span><br><span class="line">MainActivity.<span class="built_in">this</span>.startService(intent2);</span><br><span class="line">&#125;&#125;);</span><br></pre></td></tr></table></figure><p>在MyService的onStartCommand()中写 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">String action=intent.getAction();             </span><br><span class="line"><span class="keyword">if</span>(action.equals(<span class="string">&quot;button1&quot;</span>))</span><br><span class="line">&#123;</span><br><span class="line">Toast.makeText(<span class="built_in">this</span>, <span class="string">&quot;您点击了第一个按钮&quot;</span>,  Toast.LENGTH_SHORT).show();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(action.equals(<span class="string">&quot;button2&quot;</span>))</span><br><span class="line">&#123;</span><br><span class="line">Toast.makeText(<span class="built_in">this</span>, <span class="string">&quot;您点击了第二个按钮&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、写出一个类ActivityCollector实现活动管理，有3个方法分别可以实现添加活动到List、从List移除活动、结束List中的所有活动。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ActivityCollector</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;Activity&gt; activities=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">addActivity</span><span class="params">(Activity activity)</span>&#123;</span><br><span class="line">        activities.add(activity);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">removeActivity</span><span class="params">(Activity activity)</span>&#123;</span><br><span class="line">        activities.remove(activity);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">finishAll</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(Activity activity:activities)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!activity.isFinishing())&#123;</span><br><span class="line">                activity.finish();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        activities.clear();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、在上题的基础上结合文字叙述怎样实现随时随地退出程序。<br>（1）编写一个Activity的基类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BaseActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(<span class="meta">@Nullable</span> Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        ActivityCollector.addActivity(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onDestroy</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>.onDestroy();</span><br><span class="line">        ActivityCollector.removeActivity(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（2）使所有的Activity都继承BaseActivity<br>（3）不管在什么地方想要退出程序，只需要调用<br>ActivityCollector.finishAll()即可</p><p>祝各位武运昌隆！</p>]]></content>
      
      
      <categories>
          
          <category> 杂项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>习概复习总览</title>
      <link href="/2025/01/01/%E4%B9%A0%E6%A6%82%E5%A4%8D%E4%B9%A0%E6%80%BB%E8%A7%88/"/>
      <url>/2025/01/01/%E4%B9%A0%E6%A6%82%E5%A4%8D%E4%B9%A0%E6%80%BB%E8%A7%88/</url>
      
        <content type="html"><![CDATA[<h1 id="习概复习总览"><a href="#习概复习总览" class="headerlink" title="习概复习总览"></a>习概复习总览</h1><blockquote><p>二次复习部分为名词解释题部分：六个必须坚持，国家治理体系和治理能力，新发展理念，两个毫不动摇”，国家安全<br>简答题部分：为什么说中国特色社会主义是社会主义而不是其他什么主义？，全面阐述四个自信，党的十八大后，党面临的主要任务是什么？，全面建成社会主义现代化强国的战略安排，中国式现代化的本质要求，中国式现代化如何创造人类文明新形态？，构建高水平社会主义市场经济体制关键，全过程人民民主四个特征，统一战线</p></blockquote><h1 id="一、名词解释"><a href="#一、名词解释" class="headerlink" title="一、名词解释"></a>一、名词解释</h1><ol><li><p><strong>六个必须坚持</strong></p><ul><li>必须坚持<code>人民至上</code>。</li><li>必须坚持<code>自信自立</code>。</li><li>必须坚持<code>守正创新</code>。</li><li>必须坚持<code>问题导向</code>。</li><li>必须坚持<code>系统观念</code>。</li><li>必须坚持<code>胸怀天下</code>。</li></ul></li><li><p><strong>两个确立</strong></p><ul><li><code>党的十八届六中全会</code>明确了习近平同志党中央的核心、全党的核心地位。</li><li><code>党的十九大</code>把<strong>习近平新时代中国特色社会主义思想</strong>确立为党必须<code>长期坚持</code>的<code>指导思想</code>。</li></ul></li><li><p><strong>四个自信</strong></p><ul><li><strong>坚持道路自信、理论自信、制度自信、文化自信。</strong></li></ul></li><li><p><strong>“四个全面”战略布局</strong></p><ul><li>全面<code>建设社会主义现代化国家</code>。</li><li>全面<code>深化改革</code>。</li><li>全面<code>依法治国</code>。</li><li>全面<code>从严治党</code>。</li></ul></li><li><p><strong>“三个进一步解放”</strong></p><ul><li>进一步<code>解放思想</code>。</li><li>进一步<code>解放和发展社会生产力</code>。</li><li>进一步<code>解放和增强社会活力</code>。</li><li>习近平指出：“<strong>这‘三个进一步解放’既是改革的目的，又是改革的条件。</strong>”</li></ul></li><li><p><strong>国家治理体系和治理能力</strong></p><ul><li><code>国家治理体系和治理能力</code>是一个国家<code>制度</code>和<code>执行能力</code>的集中体现。</li><li>推进国家治理体系和治理能力现代化，必须坚定<strong>中国特色社会主义制度自信</strong>。</li><li>推进国家治理体系和治理能力现代化，必须更好发挥<strong>中国特色社会主义制度优势</strong>。</li><li>推进国家治理体系和治理能力现代化，必须把<strong>中国特色社会主义制度转化为国家治理效能</strong>。</li></ul></li><li><p><strong>新发展理念</strong></p><ul><li>习近平指出，新时代抓发展，必须更加突出发展理念，<strong>坚定不移贯彻<code>创新</code>、<code>协调</code>、<code>绿色</code>、<code>开放</code>、<code>共享</code>的新发展理念</strong>。</li></ul></li><li><p><strong>社会主义基本经济制度</strong></p><ul><li><strong>社会主义基本经济制度包括<code>公有制</code>为主体、<code>多种所有制经济</code>共同发展，<code>按劳分配</code>为主体、<code>多种分配方式</code>并存，社会主义市场经济体制。</strong></li></ul></li><li><p><strong>“两个毫不动摇”</strong></p><ul><li><code>公有制经济</code>和<code>非公有制经济</code>都是<strong>社会主义市场经济</strong>的重要组成部分，都是我国经济社会发展的<code>重要基础</code>。<strong>要毫不动摇巩固和发展公有制经济，毫不动摇鼓励、支持、引导非公有制经济发展。</strong></li></ul></li><li><p><strong>创新驱动发展战略</strong></p><ul><li>创新驱动发展战略，就是要坚持<code>创新是第一动力</code>，<strong>把创新驱动落实到现代化建设整个进程和各个方面，以创新推动经济转型发展，全面提升创新能力和效率</strong>，把创新发展主动权牢牢掌握在自己手中。</li></ul></li><li><p><strong>基本政治制度</strong></p><ul><li>**<code>中国共产党领导的多党合作和政治协商制度</code>、<code>民族区域自治制度</code>、<code>基层群众自治制度</code>构成了我国的<code>基本政治制度</code>，反映了我国社会主义民主政治的<code>独特优势</code>，是保障各政党、各阶层、各民族和基层人民群众当家作主的<code>重要基础</code>**。</li></ul></li><li><p><strong>国家安全</strong></p><ul><li>国家安全是指<code>国家政权</code>、<code>主权</code>、<code>统一和领土完整</code>、<code>人民福祉</code>、<code>经济社会可持续发展</code>和<code>国家其他重大利益</code>相对处于<strong>没有危险和不受内外威胁的状态</strong>，以及保障持续安全状态的能力。</li></ul></li></ol><h1 id="二、简答题等"><a href="#二、简答题等" class="headerlink" title="二、简答题等"></a>二、简答题等</h1><ol><li><p><strong>为什么说中国特色社会主义是社会主义而不是其他什么主义？</strong></p><ul><li><code>中国特色社会主义坚持了科学社会主义基本原则。</code>中国特色社会主义之所以是社会主义，而不是其他什么主义，就是因为我们始终坚持科学社会主义原则，并根据新的时代条件赋予其鲜明的中国特色。中国特色社会主义写出了科学社会主义的“新版本”。当代中国的伟大社会变革，<strong>不是简单延续</strong><code>我国历史文化的母版</code>，<strong>不是简单套用</strong><code>马克思主义经典作家设想的模板</code>，<strong>不是其他</strong><code>国家社会主义实践的再版</code>，<strong>也不是</strong><code>国外现代化发展的翻版</code>。</li></ul></li><li><p><strong>全面阐述四个自信</strong></p><ul><li>道路是实现途径，理论体系是行动指南，制度是根本保障，文化是精神力量，四者统一于中国特色社会主义伟大实践。<strong>新时代坚持和发展中国特色社会主义，必须坚持<code>道路</code>自信、<code>理论</code>自信、<code>制度</code>自信、<code>文化</code>自信</strong>。<strong>坚定道路自信</strong>，就是坚信中国特色社会主义道路是我国实现社会主义现代化、创造人民美好生活的必由之路，是<code>实现中华民族伟大复兴的必由之路</code>。<strong>坚定理论自信</strong>，就是坚信中国特色社会主义理论体系是指导党和人民实现中华民族伟大复兴的<code>正确理论</code>，是立足时代前沿、与时俱进的<code>科学理论</code>。<strong>坚定制度自信</strong>，就是坚信中国特色社会主义制度是当代中国发展进步的<code>根本制度保障</code>，是具有明显制度优势、强大自我完善能力的<code>先进制度</code>。<strong>坚定文化自信</strong>，就是坚信中国特色社会主义文化积淀着中华民族最深层的<code>精神追求</code>，代表者中华民族独特的精神标识，是激励全党全国各族人民奋勇前进的强大精神力量。这一文化，源自于中华民族5000多年文明历史所孕育的中华优秀传统文化，熔铸于党领导人民在革命、建设、改革中创造的革命文化和社会主义先进文化，植根于<strong>中国特色社会主义伟大实践</strong>。</li></ul></li><li><p><strong>党的十八大后，党面临的主要任务是什么？</strong></p><ul><li><strong>党的十八大后，党面临的主要任务是，实现第一个百年奋斗目标，开启实现第二个百年奋斗目标新征程，朝着实现中华民族伟大复兴的宏伟目标继续前进</strong>。</li></ul></li><li><p><strong>为什么社会主要矛盾变化是关系全局的历史性变化？</strong></p><ul><li>① <strong>党的十八大以来，经过科学分析，我们党及时作出我国社会主要矛盾已经转化为<code>人民日益增长的美好生活需要和不平衡不充分的发展之间的矛盾</code>的重大战略判断</strong>。</li><li>② 经过长期的发展，人民对美好生活的向往更加强烈、需求日益广泛，不仅对物质文化生活提出了更高要求，而且在民主、法治、公平、正义、安全、环境等方面的要求日益增长，人民对美好生活的向往总体上已经从“有没有”转向“好不好”，<strong>人民群众的需求呈现多样化、多层次、多方面的特点，再只讲“物质文化需要”已不能全面真实反映人民群众的愿望和要求</strong>。</li><li>③ <strong>新时代我国社会主要矛盾的变化，是关系全局的历史性变化，对党和国家工作提出了许多新要求</strong>。要在继续推动发展的基础上，着力解决好发展不平衡不充分问题，大力提升发展质量和效益，更好满足人民在经济、政治、文化、社会、生态等方面日益增长的需要，更好推动人的全面发展、社会全面进步。</li><li>④ <strong>新时代我国社会主要矛盾的变化，是在社会主义初级阶段中发生的变化，没有改变对我国社会主义所处历史阶段的判断</strong>。</li></ul></li><li><p><strong>全面建成社会主义现代化强国的战略安排</strong></p><ul><li>从<strong>2020年到2035年</strong><code>基本实现社会主义现代化</code>。</li><li>从<strong>2035年到本世纪中叶</strong><code>把我国建成富强民主文明和谐美丽的社会主义现代化强国</code>。</li></ul></li><li><p><strong>中国式现代化的五个特色</strong></p><ul><li>中国式现代化是<code>人口规模巨大的现代化</code>。</li><li>中国式现代化是<code>全体人民共同富裕的现代化</code>。</li><li>中国式现代化是<code>物质文明和精神文明向协调的现代化</code>。</li><li>中国式现代化是<code>人与自然和谐共生的现代化</code>。</li><li>中国式现代化是<code>走和平发展道路的现代化</code>。</li></ul></li><li><p><strong>中国式现代化的本质要求</strong></p><ul><li><strong>坚持中国共产党领导，坚持中国特色社会主义，实现高质量发展，发展全过程人民民主，丰富人民精神世界，实现全体人民共同富裕，促进人与自然和谐共生，推动构建人民命运共同体，创造人类文明新形态</strong>。</li></ul></li><li><p><strong>中国式现代化如何创造人类文明新形态？</strong></p><ul><li>① <strong>中国式现代化，深深植根于中华优秀传统文化</strong>，体现科学社会主义的先进本质，借鉴吸收一切人类优秀文明成果，代表人类文明进步的发展方向，是一种全新的人类文明形态。</li><li>② <strong>中国式现代化提供了一种全新的现代化模式</strong>。打破了“现代化&#x3D;西方化”的迷思，展现了不同于西方现代化的新图景。</li><li>③ <strong>中国式现代化是对西方式现代化理论和实践的重大超越</strong>。坚持社会主义目标和方向，摒弃了以资本为中心的、两极分化的、物质主义膨账的、对外扩张掠夺的西方现代化老路，打破了只有走资本主义道路才能实现现代化的神话，有效避免了西方现代化的矛盾弊端。中国式现代化蕴含的独特世界观、价值观、历史观、文明观、民主观、生态观等及其伟大实践，是对世界现代化理论和实践的重大创新。</li><li>④ <strong>中国式现代化为广大发展中国家提供了全新选择</strong>。中国式现代化坚持从本国实际出发，独立自主制定实现现代化的路线方针政策和战略，坚持依靠本国力量、依靠广大人民群众的辛勤劳动来实现现代化，同时积极学习借鉴一切人类优秀文明成果，尽可能利用一切外部有利条件，始终把国家和民族发展进步的命运牢牢掌握在自己手中。</li></ul></li><li><p><strong>全面深化改革的总目标</strong></p><ul><li>① 新时代全面深化改革开放具有<code>全面性</code>、<code>系统性</code>、<code>整体性</code>的鲜明特点，必须将其作为一个<code>系统工程</code>来把握。</li><li>② 全面深化改革的总目标是：<strong>完善和发展中国特色社会主义制度、推进国家治理体系和治理能力现代化</strong>。</li><li>③ 全面深化改革必须牢牢把握总目标，实施好“六个紧紧围绕”的路线图。</li></ul></li><li><p><strong>构建高水平社会主义市场经济体制关键</strong></p><ul><li><strong>构建高水平社会主义市场经济体制，关键是要处理好政府和市场的关系</strong>。以习近平同志为核心的党中央提出使市场在资源配置中起决定性作用，更好发挥政府作用，这是我们党在理论和实践上的重大推进，是对中国特色社会主义建设规律认识的一个新突破。市场在资源配置中起决定性作用，就是把市场机制能有效调节的经济活动交给市场，推动资源配置实现效益最大化和效率最优化。更好发挥政府作用，就是要在保证市场发挥决定性作用的前提下，管好那些市场管不了或管不好的事情。</li></ul></li><li><p><strong>全过程人民民主四个特征</strong></p><ul><li>全过程人民民主是<code>过程民主</code>和<code>成果民主</code>的统一。</li><li>全过程人民民主是<code>程序民主</code>和<code>实质民主</code>的统一。</li><li>全过程人民民主是<code>直接民主</code>和<code>间接民主</code>的统一。</li><li>全过程人民民主是<code>人民民主</code>和<code>国家意志</code>的统一。</li></ul></li><li><p><strong>统一战线</strong></p><ul><li><strong>中国共产党领导的、以工农联盟为基础的，包括全体社会主义劳动者、社会主义事业的建设者、拥护社会主义的爱国者、拥护祖国统一和致力于中华民族伟大复兴的爱国者的广泛的爱国统一战线。</strong></li></ul></li><li><p><strong>中国特色社会主义法治道路的核心要义</strong></p><ul><li>中国特色社会主义法治道路的核心要义，<strong>就是要坚持党的领导，坚持中国特色社会主义制度，贯彻中国社会主义法治理论</strong>。党的领导是中国特色社会主义<code>最本质的特征</code>，是社会主义法治<code>最根本的保证</code>。中国特色社会主义制度是中国特色社会主义法治体系的<code>根本制度基础</code>，是全面推进依法治国的<code>根本制度保障</code>。中国特色社会主义法治理论是<code>中国特色社会主义法治体系</code>的<code>理论指导和学理支撑</code>，是全面推进依法治国的<code>行动指南</code>。这三个方面规定和确保了中国特色社会主义法治体系的制度属性和前进方向。</li></ul></li><li><p><strong>如何坚持和发展新时代“枫桥经验”“浦江经验”？</strong></p><ul><li>坚持和发展新时代“枫桥经验”“浦江经验”，<strong>完善正确处理新形势下人民内部矛盾机制</strong>。随着经济社会结构加速转型，大量流动人口出现，城乡社区成员构成越来越多样化，社会矛盾也越来越多样化，对基层社会治理和公共服务都提出了更高要求。要积极践行新时代“枫桥经验”“浦江经验”，把干部主动下沉服务和激发群众自治活力结合起来，探索社会矛盾纠纷多元预防调处化解综合机制，畅通和规范群众诉求表达、利益协调、权益保障通道，及时把矛盾纠纷化解在基层、化解在萌芽状态。</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 杂项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作系统考试方案大纲</title>
      <link href="/2024/12/30/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
      <url>/2024/12/30/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h2 id="操作系统考试方案大纲"><a href="#操作系统考试方案大纲" class="headerlink" title="操作系统考试方案大纲"></a>操作系统考试方案大纲</h2><h2 id="操作系统绪论和处理器管理"><a href="#操作系统绪论和处理器管理" class="headerlink" title="操作系统绪论和处理器管理"></a>操作系统绪论和处理器管理</h2><blockquote><p>部分内容已在期中中出现过，期末内容包含期中部分</p></blockquote><p><strong>请通过右边的大纲栏快速复习查找</strong></p><blockquote><p>所以按照以下格式标注知识点重合性:</p><ul><li>期中+期末：（<strong>A</strong>）</li><li>期中 ：(<strong>B</strong>)</li><li>期末：（<strong>C</strong>）</li><li>必考部分{大题}（<strong>S</strong>）</li></ul></blockquote><p><em>请着重关注A,C部分，B部分稍作关注</em></p><h3 id="设计和构建操作系统的基本目标（A）"><a href="#设计和构建操作系统的基本目标（A）" class="headerlink" title="设计和构建操作系统的基本目标（A）"></a>设计和构建操作系统的基本目标（A）</h3><ol><li><strong>方便性</strong>：操作系统应提供用户友好的界面，简化用户操作。</li><li><strong>有效性</strong>：系统资源的管理和调度应高效，以提高整体性能。</li><li><strong>可扩充性</strong>：系统应支持模块化设计，便于未来功能的扩展和升级。</li><li><strong>开放性</strong>：操作系统应支持开放标准，促进软件和硬件的兼容性。</li></ol><h3 id="操作系统管理功能（C）"><a href="#操作系统管理功能（C）" class="headerlink" title="操作系统管理功能（C）"></a>操作系统管理功能（C）</h3><ol><li><strong>处理器管理</strong>：负责调度和分配CPU资源，以确保各个进程的高效执行。</li><li><strong>存储管理</strong>：管理内存的分配与回收，确保数据的有效存储和访问。</li><li><strong>I&#x2F;O设备管理</strong>：协调和控制输入输出设备的操作，提供统一的接口。</li><li><strong>文件管理</strong>：负责文件的创建、删除、读写及权限管理，确保数据的安全性和完整性。</li><li><strong>网络管理</strong>：处理网络连接和数据传输，确保系统与其他设备的有效通信。</li><li><strong>用户接口</strong>：提供用户与操作系统交互的方式，包括命令行和图形界面。</li></ol><h3 id="操作系统特性-A"><a href="#操作系统特性-A" class="headerlink" title="操作系统特性(A)"></a>操作系统特性(A)</h3><ol><li><p><strong>并发性</strong><br>&lt;1&gt; <strong>宏观上</strong>，多个程序在计算机内同时发生。<br>&lt;2&gt;** 微观上**，任何时候只有一个程序在CPU上运行，操作系统通过时间片轮转实现并发执行。</p></li><li><p><strong>共享性</strong>：多个用户或进程可以共享系统资源，提高资源利用率。</p></li><li><p><strong>不确定性</strong>：系统的行为在不同条件下可能会有所不同，增加了程序执行的复杂性。</p></li><li><p><strong>虚拟性</strong>：操作系统通过抽象和虚拟化技术，在逻辑上提供资源，而不直接依赖于物理资源的限制。</p></li></ol><h3 id="操作系统引入多道系统的好处-C"><a href="#操作系统引入多道系统的好处-C" class="headerlink" title="操作系统引入多道系统的好处(C)"></a>操作系统引入多道系统的好处(C)</h3><ul><li><strong>提高资源（CPU）利用率</strong>：通过同时运行多个程序，提高CPU利用率</li><li><strong>内存和I&#x2F;O设备的利用率。</strong></li><li><strong>提高系统吞吐率</strong>：多道程序设计能够在单位时间内处理更多任务，提升系统的整体吞吐能力。</li><li><strong>有中断技术作为支撑</strong>：中断技术使得操作系统能够有效地管理和调度多个程序的执行。</li></ul><h3 id="操作系统的人机接口-C"><a href="#操作系统的人机接口-C" class="headerlink" title="操作系统的人机接口(C)"></a>操作系统的人机接口(C)</h3><ol><li><p><strong>操作界面</strong><br>&lt;1&gt; <strong>命令行界面</strong>：用户通过输入命令与系统进行交互，适合高级用户。<br>&lt;2&gt; <strong>图形化界面</strong>：通过图形元素和鼠标操作，提供直观的用户体验，适合普通用户。</p></li><li><p><strong>系统调用和编程接口</strong>：提供程序与操作系统之间的交互方式，使得应用程序能够请求系统资源和服务。</p></li></ol><h3 id="进程的状态和转换-A"><a href="#进程的状态和转换-A" class="headerlink" title="进程的状态和转换(A)"></a>进程的状态和转换(A)</h3><ol><li><p><strong>进程状态</strong><br>&lt;1&gt; <strong>运行态</strong>：进程正在CPU上执行。<br>&lt;2&gt; <strong>就绪态</strong>：进程已准备好运行，但等待CPU分配。<br>&lt;3&gt; <strong>等待态</strong>：进程因等待某些事件（如I&#x2F;O操作）而暂停执行。</p></li><li><p><strong>进程状态的转换</strong><br>进程状态之间的转换可以通过以下方式表示：</p><pre><code class="plaintext">+-----------+        +-----------+|           |        |           ||  就绪态   | &lt;---- |  运行态   ||           |        |           |+-----------+        +-----------+      ^                    |      |                    |      |                    v+-----------+        +-----------+|           |        |           ||  等待态   | &lt;---- |  中断     ||           |        |           |+-----------+        +-----------+</code></pre></li></ol><h3 id="进程控制块（A）"><a href="#进程控制块（A）" class="headerlink" title="进程控制块（A）"></a>进程控制块（A）</h3><ol><li><strong>进程描述信息</strong>：包含进程的基本信息，如进程ID、进程状态、优先级等。</li><li><strong>进程控制信息</strong>：用于管理进程的调度和执行，包括程序计数器、调度信息等。</li><li><strong>进程拥有资源情况</strong>：记录进程所占用的资源，如内存、I&#x2F;O设备等。</li><li><strong>进程的CPU现场信息</strong>：保存进程在被中断时的CPU寄存器状态，以便后续恢复执行。</li></ol><h4 id="进程控制块与进程的关系"><a href="#进程控制块与进程的关系" class="headerlink" title="进程控制块与进程的关系"></a>进程控制块与进程的关系</h4><p><code>进程控制块与进程一一对应，一个进程必须有一个控制块，且一个控制块必须且只能对着一个进程</code></p><h3 id="进程控制原语（A）"><a href="#进程控制原语（A）" class="headerlink" title="进程控制原语（A）"></a>进程控制原语（A）</h3><p>进程的控制类型包括：<br><code>创建进程</code>，<code>阻塞进程</code>，<code>唤醒进程</code>，<code>挂起进程</code>，<code>激活进程</code>，<code>撤销进程</code></p><p>所谓的原语，是指在<code>管态</code>下执行的，具有<code>原子性</code>的，能实现塔顶系统功能的<code>程序段</code></p><p>原子性是指执行过程中<code>不允许被中断</code></p><h3 id="多道环境下调度例题（S）"><a href="#多道环境下调度例题（S）" class="headerlink" title="多道环境下调度例题&lt;小题大题&gt;（S）"></a>多道环境下调度例题&lt;小题大题&gt;（S）</h3><h3 id="进程同步和进程互斥（B）"><a href="#进程同步和进程互斥（B）" class="headerlink" title="进程同步和进程互斥（B）"></a>进程同步和进程互斥（B）</h3><ol><li><p><strong>进程同步</strong><br>进程同步是指多个进程协调执行顺序，以确保共享数据的一致性。</p></li><li><p><strong>进程互斥</strong><br>进程互斥是指在同一时刻只有一个进程可以访问共享资源，以防止数据冲突。</p></li></ol><h3 id="临界区和使用规则（B）"><a href="#临界区和使用规则（B）" class="headerlink" title="临界区和使用规则（B）"></a>临界区和使用规则（B）</h3><h4 id="临界区"><a href="#临界区" class="headerlink" title="临界区"></a>临界区</h4><p>临界区是指访问共享资源的<code>程序代码片段</code>，确保在同一时刻只有一个进程可以执行该代码。</p><h4 id="使用规则"><a href="#使用规则" class="headerlink" title="使用规则"></a>使用规则</h4><ol><li><strong>有空让进</strong>：如果临界区为空，允许进程进入。</li><li><strong>无空等待</strong>：如果临界区已被占用，进程应等待。</li><li><strong>多中择一</strong>：如果多个进程请求进入临界区，选择其中一个进入。</li><li><strong>有限等待</strong>：每个进程在等待进入临界区时，应该在有限时间内被允许进入。</li></ol><h3 id="进程通信（A）"><a href="#进程通信（A）" class="headerlink" title="进程通信（A）"></a>进程通信（A）</h3><ol><li><p><strong>低级通信</strong><br>低级通信通常指通过操作系统提供的基本机制进行进程间的直接通信。</p></li><li><p><strong>高级通信</strong>  </p><ul><li><strong>共享存储区</strong>：多个进程可以访问同一块内存区域，<code>效率最高</code>。</li><li><strong>消息通信</strong>：进程通过发送和接收消息进行通信，适合松耦合的进程。</li><li><strong>管道通信</strong>：通过管道传输数据，使用<code>生产者-消费者</code>方式进行通信的共享文件<code>效率最低</code>，适用于简单的进程间通信。</li></ul></li></ol><h3 id="进程死锁的预防机制（A）"><a href="#进程死锁的预防机制（A）" class="headerlink" title="进程死锁的预防机制（A）"></a>进程死锁的预防机制（A）</h3><h4 id="四大死锁预防条件"><a href="#四大死锁预防条件" class="headerlink" title="四大死锁预防条件"></a>四大死锁预防条件</h4><ol><li><strong>破坏不可抢占条件</strong>：允许抢占资源，强制释放某些进程持有的资源。</li><li><strong>破坏请求和保持条件</strong>：进程在请求资源时，不持有其他资源。</li><li><strong>破坏循环等待条件</strong>：对资源进行排序，确保资源请求遵循一定的顺序。</li><li><strong>互斥使用</strong>：确保资源在某一时刻只能被一个进程使用。</li></ol><h3 id="进程死锁的避免机制（A）"><a href="#进程死锁的避免机制（A）" class="headerlink" title="进程死锁的避免机制（A）"></a>进程死锁的避免机制（A）</h3><p>死锁避免机制通过动态分析资源分配情况，确保系统始终处于安全状态，从而避免死锁的发生。</p><h4 id="死锁避免的典型算法"><a href="#死锁避免的典型算法" class="headerlink" title="死锁避免的典型算法"></a>死锁避免的典型算法</h4><ul><li><strong>银行家算法</strong>：核心思想是根据当前资源分配情况和进程的最大需求，判断是否安全地分配资源，确保系统不会进入不安全状态。<code>例题见大题</code></li></ul><h3 id="进程死锁的检测和解决（A）"><a href="#进程死锁的检测和解决（A）" class="headerlink" title="进程死锁的检测和解决（A）"></a>进程死锁的检测和解决（A）</h3><ol><li><p><strong>检测时机</strong><br>死锁检测通常在系统资源分配的特定时刻进行，例如在资源请求时或定期检查系统状态。</p></li><li><p><strong>检测手段</strong>  </p><ul><li><strong>资源分配图</strong>：通过构建进程-资源分配图来检测死锁。图详情见<code>p68 2.21</code></li></ul></li><li><p><strong>死锁解除</strong></p></li></ol><p>死锁解除可以通过以下方式实现：</p><ul><li><code>资源剥夺</code>：强制从某些进程中剥夺资源，释放被占用的资源。</li><li><code>进程终止</code>：终止某些进程以打破死锁。</li><li><code>回滚</code>：将某些进程回滚到安全状态，释放资源。</li></ul><h3 id="银行家算法，信号量和p-v操作，作业调度（SS）"><a href="#银行家算法，信号量和p-v操作，作业调度（SS）" class="headerlink" title="银行家算法，信号量和p&#x2F;v操作，作业调度&lt;大题小题&gt;（SS）"></a>银行家算法，信号量和p&#x2F;v操作，作业调度&lt;大题小题&gt;（SS）</h3><h2 id="存储管理"><a href="#存储管理" class="headerlink" title="存储管理"></a>存储管理</h2><h3 id="分页和分段存储比较（C）"><a href="#分页和分段存储比较（C）" class="headerlink" title="分页和分段存储比较（C）"></a>分页和分段存储比较（C）</h3><table><thead><tr><th>特性</th><th>分页存储</th><th>分段存储</th></tr></thead><tbody><tr><td>存储单位</td><td>页面（固定大小）</td><td>段（可变大小）</td></tr><tr><td>地址空间</td><td>逻辑地址空间被划分为固定大小的页面</td><td>逻辑地址空间被划分为逻辑段</td></tr><tr><td>内存管理</td><td>页表管理</td><td>段表管理</td></tr><tr><td>访问效率</td><td>由于固定大小，页的管理较简单</td><td>段的大小不一，管理复杂</td></tr><tr><td>内存碎片</td><td>内部碎片（页未完全使用）</td><td>外部碎片（段大小不一）</td></tr><tr><td>适用场景</td><td>适合大多数程序</td><td>适合需要逻辑结构的程序</td></tr></tbody></table><p><strong>分页存储管理机制的主要优点是解决了内存碎片的问题</strong></p><h3 id="页面置换算法（C）"><a href="#页面置换算法（C）" class="headerlink" title="页面置换算法（C）"></a>页面置换算法（C）</h3><h4 id="1-先进先出页面置换算法（FIFO）"><a href="#1-先进先出页面置换算法（FIFO）" class="headerlink" title="1. 先进先出页面置换算法（FIFO）"></a>1. 先进先出页面置换算法（FIFO）</h4><h5 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h5><ul><li>FIFO算法维护一个页面队列，记录页面的加载顺序。</li><li>当发生页面缺失时，检查当前内存中的页面。</li><li>如果内存已满，按照FIFO原则，替换队列中最早进入的页面。</li></ul><h5 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h5><p>假设内存容量为3页，页面访问序列为：1, 2, 3, 4, 1, 2, 5, 1, 2, 3, 4, 5。</p><ul><li>初始状态：空内存</li><li>加载1：内存[1]</li><li>加载2：内存[1, 2]</li><li>加载3：内存[1, 2, 3]</li><li>加载4：内存[2, 3, 4]（替换1）</li><li>加载1：内存[3, 4, 1]（替换2）</li><li>加载2：内存[4, 1, 2]（替换3）</li><li>加载5：内存[1, 2, 5]（替换4）</li></ul><hr><h4 id="2-时钟页面置换算法"><a href="#2-时钟页面置换算法" class="headerlink" title="2. 时钟页面置换算法"></a>2. 时钟页面置换算法</h4><h5 id="工作原理-1"><a href="#工作原理-1" class="headerlink" title="工作原理"></a>工作原理</h5><ul><li>时钟算法使用一个循环队列（类似时钟）来管理页面的使用情况。</li><li>每个页面都有一个使用位（referenced bit），表示该页面是否被访问过。</li><li>当发生页面缺失时，检查当前指针指向的页面：<ul><li>如果使用位为1，将其置为0，并移动指针到下一个页面。</li><li>如果使用位为0，替换该页面，并加载新页面。</li></ul></li></ul><h5 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h5><p>假设内存容量为3页，页面访问序列为：1, 2, 3, 4, 1, 2, 5, 1, 2, 3, 4, 5。</p><ul><li>初始状态：空内存，指针指向第一个页面。</li><li>加载1：内存[1]，指针指向1。</li><li>加载2：内存[1, 2]，指针指向2。</li><li>加载3：内存[1, 2, 3]，指针指向3。</li><li>加载4：内存[2, 3, 4]（替换1），指针指向3。</li><li>加载1：内存[3, 4, 1]（替换2），指针指向4。</li><li>加载2：内存[4, 1, 2]（替换3），指针指向1。</li><li>加载5：内存[1, 2, 5]（替换4），指针指向2。</li></ul><h3 id="存储管理（S）"><a href="#存储管理（S）" class="headerlink" title="存储管理&lt;大题小题&gt;（S）"></a>存储管理&lt;大题小题&gt;（S）</h3><h2 id="I-O设备管理"><a href="#I-O设备管理" class="headerlink" title="I&#x2F;O设备管理"></a>I&#x2F;O设备管理</h2><h3 id="设备管理模块的设计目标（C）"><a href="#设备管理模块的设计目标（C）" class="headerlink" title="设备管理模块的设计目标&lt;简答&gt;（C）"></a>设备管理模块的设计目标&lt;简答&gt;（C）</h3><blockquote><ol><li>提高系统的利用率，实现设备的并行运行。</li><li>采用虚拟技术，实现设备的动态分配。</li><li>采用缓冲技术，减少主机和外设的速度差异。</li><li>方便用户使用，屏蔽设备的物理特性。</li><li>实现与文件系统等其他模块的有机协同工作。</li></ol></blockquote><h3 id="设备控制方式及对比（C）"><a href="#设备控制方式及对比（C）" class="headerlink" title="设备控制方式及对比&lt;简答&gt;（C）"></a>设备控制方式及对比&lt;简答&gt;（C）</h3><ul><li><strong>典型控制方式</strong>：CPU参与度高，效率低。</li><li><strong>基于询问的设备控制</strong>：CPU参与度<code>最高</code>，效率<code>最低</code>。</li><li><strong>基于中断的设备控制</strong>：CPU参与度中等，效率较高。</li><li><strong>基于DMA的设备控制</strong>：CPU参与度低，效率高。</li><li><strong>基于通道的设备控制</strong>：CPU参与度<code>最低</code>，效率<code>最高</code>。</li></ul><h3 id="缓冲技术的基本思想（C）"><a href="#缓冲技术的基本思想（C）" class="headerlink" title="缓冲技术的基本思想（C）"></a>缓冲技术的基本思想（C）</h3><ol><li><p><strong>写操作的缓冲</strong><br>进程执行<code>写</code>操作<code>输出数据</code>时，申请缓冲区，不断地把数据写到缓冲区，直到被装满。进程继续运行，系统将缓冲区内容传到I&#x2F;O设备。</p></li><li><p><strong>读操作的缓冲</strong><br>进程执行<code>读</code>操作<code>输入数据</code>时，申请缓冲区，系统将内容读到缓冲区，根据进程要求，把需要的内容从缓冲区传送给进程。</p></li></ol><h3 id="引入缓冲技术的目标（C）"><a href="#引入缓冲技术的目标（C）" class="headerlink" title="引入缓冲技术的目标（C）"></a>引入缓冲技术的目标（C）</h3><ol><li><p><strong>改善主机和I&#x2F;O设备之间速度不匹配的问题</strong><br>通过缓冲技术，可以有效地解决主机与I&#x2F;O设备之间的速度差异，确保数据传输的顺畅。</p></li><li><p><strong>提高CPU和I&#x2F;O设备的并行性，提高资源利用率</strong><br>缓冲技术允许CPU在等待I&#x2F;O操作完成时继续执行其他任务，从而提高系统的整体效率和资源利用率。</p></li><li><p><strong>减少I&#x2F;O中断次数，放宽对CPU中断响应的要求</strong><br>通过使用缓冲区，可以减少频繁的I&#x2F;O中断，从而降低对CPU中断响应的要求，提高系统的稳定性。</p></li></ol><h3 id="硬盘的存储空间管理（C）"><a href="#硬盘的存储空间管理（C）" class="headerlink" title="硬盘的存储空间管理（C）"></a>硬盘的存储空间管理（C）</h3><p>访问硬盘上的数据依赖以下三个参数：</p><ol><li><p><strong>柱面号&#x2F;磁道号</strong><br>柱面号或磁道号指的是数据位于硬盘上某个特定半径的磁道上。</p></li><li><p><strong>扇区号&#x2F;块号</strong><br>是指数据位于某磁道的哪一个扇区上</p></li><li><p><strong>磁头号&#x2F;盘片号</strong><br>数据位于哪一个盘面上</p></li></ol><h3 id="I-O设备管理大题小题（SS）"><a href="#I-O设备管理大题小题（SS）" class="headerlink" title="I&#x2F;O设备管理大题小题（SS）"></a>I&#x2F;O设备管理大题小题（SS）</h3><h2 id="文件管理"><a href="#文件管理" class="headerlink" title="文件管理"></a>文件管理</h2><h3 id="文件目录的基本要求（C）"><a href="#文件目录的基本要求（C）" class="headerlink" title="文件目录的基本要求（C）"></a>文件目录的基本要求（C）</h3><p>文件目录要能满足以下的功能性和性能要求：</p><ol><li><p><strong>实现按名存储</strong><br>文件目录应能够根据文件名进行存储和管理，方便用户通过文件名快速找到所需文件。</p></li><li><p><strong>提高检索速度</strong><br>文件目录应具备高效的检索机制，以提高文件的查找速度，减少用户等待时间。</p></li><li><p><strong>实现文件共享</strong><br>文件目录应支持文件共享功能，允许多个用户或进程同时访问同一文件，提高资源利用率。</p></li><li><p><strong>允许文件重名</strong><br>文件目录应允许同一目录下存在同名文件，通过不同的路径或其他标识来区分，从而提高灵活性。</p></li></ol><p><code>文件控制块的有序集合就构成了文件目录</code></p><h3 id="允许文件重名的条件"><a href="#允许文件重名的条件" class="headerlink" title="允许文件重名的条件"></a>允许文件重名的条件</h3><p>允许文件重名的条件通常包括以下几点：</p><ol><li><p><strong>不同的目录路径</strong><br>同一文件名可以在不同的目录中存在。例如，<code>/folder1/file.txt</code> 和 <code>/folder2/file.txt</code> 可以同时存在。</p></li><li><p><strong>文件扩展名的区分</strong><br>在某些系统中，文件名的扩展名可以作为区分的依据。例如，<code>file.txt</code> 和 <code>file.doc</code> 可以同时存在。</p></li><li><p><strong>使用唯一标识符</strong><br>系统可以为每个文件分配一个唯一的标识符（如文件ID），即使文件名相同，系统仍能通过标识符来区分不同的文件。</p></li><li><p><strong>版本控制</strong><br>在版本控制系统中，同一文件的不同版本可以使用相同的文件名，通过版本号或时间戳来区分。</p></li><li><p><strong>命名空间</strong><br>在某些系统中，文件名可能会被放置在不同的命名空间中，从而允许相同的文件名存在于不同的命名空间中。</p></li></ol><h3 id="不同文件物理结构的性能对比（C）"><a href="#不同文件物理结构的性能对比（C）" class="headerlink" title="不同文件物理结构的性能对比（C）"></a>不同文件物理结构的性能对比（C）</h3><table><thead><tr><th>性能指标</th><th>顺序文件结构</th><th>链接文件结构</th><th>索引文件结构</th></tr></thead><tbody><tr><td>读取性能</td><td>顺序读取，随机读取都高</td><td>顺序读取一般，随机读取速度差</td><td>顺序读取一般，随机读取速度高</td></tr><tr><td>插入删除性能</td><td>开销大</td><td>开销小</td><td>开销小</td></tr><tr><td>文件拓展性</td><td>受限</td><td>好</td><td>好</td></tr><tr><td>系统资源使用率</td><td>差</td><td>好</td><td>好</td></tr><tr><td>可靠性</td><td>强</td><td>会受影响</td><td>强</td></tr></tbody></table><h3 id="文件安全的基本要求（C）"><a href="#文件安全的基本要求（C）" class="headerlink" title="文件安全的基本要求（C）"></a>文件安全的基本要求（C）</h3><p>文件安全应满足以下基本要求：</p><ol><li><p><strong>保障有权限的合法用户对文件的各种合法操作</strong>  </p></li><li><p><strong>防止没权限的用户对文件的非法操作</strong>  </p></li><li><p><strong>防止非法用户冒充合法用户对文件进行操作</strong>  </p></li><li><p><strong>防止有权限的合法用户对文件的非法操作</strong></p></li></ol><h3 id="文件管理题目（S）"><a href="#文件管理题目（S）" class="headerlink" title="文件管理题目（S）"></a>文件管理题目（S）</h3>]]></content>
      
      
      <categories>
          
          <category> 杂项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一个简单的p站作者查询脚本</title>
      <link href="/2024/12/03/%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84p%E7%AB%99%E4%BD%9C%E8%80%85%E6%9F%A5%E8%AF%A2%E8%84%9A%E6%9C%AC/"/>
      <url>/2024/12/03/%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84p%E7%AB%99%E4%BD%9C%E8%80%85%E6%9F%A5%E8%AF%A2%E8%84%9A%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<h1 id="一个简单的p站作者查询脚本"><a href="#一个简单的p站作者查询脚本" class="headerlink" title="一个简单的p站作者查询脚本"></a>一个简单的p站作者查询脚本</h1><blockquote><p>使用这部分请保证网络条件允许访问相关网站</p></blockquote><blockquote><p>本脚本仅供学习使用，也为本人学习练习使用，如违规使用导致涉及ip封禁，或者触犯法律和本人无关 </p></blockquote><p><strong>找到该脚本的源码可以-&gt;<a href="https://github.com/XH-Ayane/pixiv_downloader">点这里</a></strong></p><h2 id="一、脚本功能"><a href="#一、脚本功能" class="headerlink" title="一、脚本功能"></a>一、脚本功能</h2><ul><li>支持通过一个完整的pid来进行快速访问</li><li>支持通过一个完整的pid来进行对该pid对应作者的作品悉数爬取</li><li>爬取的作品会创建一个文件夹进行保存</li></ul><h2 id="二、编写过程"><a href="#二、编写过程" class="headerlink" title="二、编写过程"></a>二、编写过程</h2><h3 id="1、环境配置"><a href="#1、环境配置" class="headerlink" title="1、环境配置"></a>1、环境配置</h3><blockquote><p>本脚本已经内置环境下载部分，但是请准备python环境</p></blockquote><blockquote><p>手动部署环境如下</p></blockquote><p>在脚本文件内打开终端完成，键入以下来完成环境配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install selenium</span><br><span class="line">pip install requests</span><br></pre></td></tr></table></figure><h3 id="2、导入必要的库"><a href="#2、导入必要的库" class="headerlink" title="2、导入必要的库"></a>2、导入必要的库</h3><p>在脚本的开头，导入所需的库：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> font</span><br></pre></td></tr></table></figure><h3 id="3、检查并安装库"><a href="#3、检查并安装库" class="headerlink" title="3、检查并安装库"></a>3、检查并安装库</h3><p><strong>编写一个函数来检查并安装缺失的库：</strong></p><p><strong>1. 安装库的函数</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">install</span>(<span class="params">package</span>):</span><br><span class="line">    subprocess.check_call([sys.executable, <span class="string">&quot;-m&quot;</span>, <span class="string">&quot;pip&quot;</span>, <span class="string">&quot;install&quot;</span>, package])</span><br></pre></td></tr></table></figure><p>定义一个名为 <code>install</code> 的函数，用于安装指定的 Python 包。</p><p><code>subprocess.check_call(...)：</code>这个函数用于在 Python 中调用外部命令。在这里，它调用 pip 来安装指定的包。</p><p><code>sys.executable：</code>返回当前 Python 解释器的路径，确保在正确的 Python 环境中执行安装命令。</p><p><code>&quot;-m&quot;, &quot;pip&quot;, &quot;install&quot;, package：</code>这是传递给 Python 的参数，表示使用 <code>pip</code> 模块来安装指定的包</p><p><strong>2. 尝试导入 requests 库</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">except</span> ImportError:</span><br><span class="line">    install(<span class="string">&#x27;requests&#x27;</span>)</span><br></pre></td></tr></table></figure><p>尝试导入 <code>requests</code> 库，这是一个用于发送 HTTP 请求的流行库。</p><p><code>try </code>块：尝试执行 <code>import requests</code>。</p><p><code>except ImportError</code>：如果 <code>requests</code> 库未安装，Python 会抛出 <code>ImportError</code> 异常，进入 <code>except</code> 块。</p><p><code>install(&#39;requests&#39;)</code>：调用之前定义的 <code>install</code> 函数，安装 <code>requests</code> 库。</p><p><strong>3. 尝试导入 selenium 库及其组件</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line">    <span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line">    <span class="keyword">from</span> selenium.webdriver.chrome.service <span class="keyword">import</span> Service</span><br><span class="line">    <span class="keyword">from</span> webdriver_manager.microsoft <span class="keyword">import</span> EdgeChromiumDriverManager</span><br><span class="line"><span class="keyword">except</span> ImportError:</span><br><span class="line">    install(<span class="string">&#x27;selenium&#x27;</span>)</span><br></pre></td></tr></table></figure><p>尝试导入 <code>selenium</code> 库及其相关组件，这些组件用于自动化浏览器操作。</p><p><code>try</code> 块：尝试导入 <code>selenium</code> 的多个模块：<br>from selenium import webdriver：导入 webdriver，用于控制浏览器。</p><p>from selenium.webdriver.common.by import By：导入 By 类，用于定位网页元素。</p><p>from selenium.webdriver.chrome.service import Service：导入 Service 类，用于管理 ChromeDriver 的服务。</p><p>from webdriver_manager.microsoft import EdgeChromiumDriverManager：导入 EdgeChromiumDriverManager，用于自动下载和管理 <code>Microsoft Edge</code> 的 <code>WebDriver</code>。</p><p>except ImportError：如果 selenium 库未安装，Python 会抛出 ImportError 异常，进入 <code>except</code> 块。</p><p>install(‘selenium’)：调用之前定义的 <code>install</code> 函数，安装 <code>selenium</code> 库。</p><h3 id="4、函数jump-to-author"><a href="#4、函数jump-to-author" class="headerlink" title="4、函数jump_to_author"></a>4、函数<code>jump_to_author</code></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">jump_to_author</span>():</span><br><span class="line">    uid = uid_entry.get()</span><br><span class="line">    driver = webdriver.Edge(service=Service(EdgeChromiumDriverManager().install()))</span><br><span class="line">    author_url = <span class="string">&quot;https://www.pixiv.net/users/&quot;</span> + uid</span><br><span class="line">    driver.get(author_url)</span><br></pre></td></tr></table></figure><ol><li><p><strong>获取用户输入的 UID</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uid = uid_entry.get()</span><br></pre></td></tr></table></figure><ul><li>从 Tkinter 界面的输入框中获取用户输入的 UID（用户 ID），并将其存储在变量 <code>uid</code> 中。</li></ul></li><li><p><strong>初始化 WebDriver</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">driver = webdriver.Edge(service=Service(EdgeChromiumDriverManager().install()))</span><br></pre></td></tr></table></figure><ul><li>使用 <code>webdriver_manager</code> 自动下载和管理 Microsoft Edge 的 WebDriver。</li><li>创建一个 <code>webdriver.Edge</code> 实例，允许脚本控制 Edge 浏览器。</li></ul></li><li><p><strong>构建用户页面 URL</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">author_url = <span class="string">&quot;https://www.pixiv.net/users/&quot;</span> + uid</span><br></pre></td></tr></table></figure><ul><li>根据用户输入的 UID 构建 Pixiv 用户页面的 URL。</li></ul></li><li><p><strong>打开用户页面</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">driver.get(author_url)</span><br></pre></td></tr></table></figure><ul><li>使用 WebDriver 打开构建的用户页面 URL。</li></ul></li></ol><h3 id="5、函数-download-all-works"><a href="#5、函数-download-all-works" class="headerlink" title="5、函数 download_all_works"></a>5、函数 <code>download_all_works</code></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">download_all_works</span>():</span><br><span class="line">    uid = uid_entry.get()</span><br><span class="line">    author_url = <span class="string">&quot;https://www.pixiv.net/users/&quot;</span> + uid</span><br><span class="line">    </span><br><span class="line">    driver = webdriver.Edge(service=Service(EdgeChromiumDriverManager().install()))</span><br><span class="line">    driver.get(author_url)</span><br><span class="line"></span><br><span class="line">    driver.implicitly_wait(<span class="number">10</span>)</span><br><span class="line">    works = driver.find_elements(By.CSS_SELECTOR, <span class="string">&quot;a[href*=&#x27;/artworks/&#x27;]&quot;</span>)</span><br><span class="line">    work_links = [work.get_attribute(<span class="string">&#x27;href&#x27;</span>) <span class="keyword">for</span> work <span class="keyword">in</span> works]</span><br><span class="line"></span><br><span class="line">    os.makedirs(uid, exist_ok=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    max_requests = <span class="number">100</span></span><br><span class="line">    request_count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> link <span class="keyword">in</span> work_links:</span><br><span class="line">        <span class="keyword">if</span> request_count &gt;= max_requests:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;达到最大请求次数，暂停一段时间...&quot;</span>)</span><br><span class="line">            time.sleep(<span class="number">3600</span>)</span><br><span class="line">            request_count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            driver.get(link)</span><br><span class="line">            time.sleep(random.uniform(<span class="number">2</span>, <span class="number">5</span>))</span><br><span class="line"></span><br><span class="line">            img_element = driver.find_element(By.CSS_SELECTOR, <span class="string">&quot;img[src*=&#x27;img-master&#x27;]&quot;</span>)</span><br><span class="line">            img_url = img_element.get_attribute(<span class="string">&#x27;src&#x27;</span>)</span><br><span class="line"></span><br><span class="line">            img_data = requests.get(img_url).content</span><br><span class="line">            img_name = os.path.join(uid, img_url.split(<span class="string">&#x27;/&#x27;</span>)[-<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(img_name, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> handler:</span><br><span class="line">                handler.write(img_data)</span><br><span class="line"></span><br><span class="line">            request_count += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;请求失败: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">            time.sleep(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    driver.quit()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;所有作品已下载。&quot;</span>)</span><br></pre></td></tr></table></figure><ol><li><p><strong>获取用户输入的 UID</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uid = uid_entry.get()</span><br></pre></td></tr></table></figure><ul><li>从 Tkinter 界面的输入框中获取用户输入的 UID。</li></ul></li><li><p><strong>构建用户页面 URL</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">author_url = <span class="string">&quot;https://www.pixiv.net/users/&quot;</span> + uid</span><br></pre></td></tr></table></figure><ul><li>根据用户输入的 UID 构建 Pixiv 用户页面的 URL。</li></ul></li><li><p><strong>初始化 WebDriver</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">driver = webdriver.Edge(service=Service(EdgeChromiumDriverManager().install()))</span><br><span class="line">driver.get(author_url)</span><br></pre></td></tr></table></figure><ul><li>创建一个 <code>webdriver.Edge</code> 实例，并打开用户页面。</li></ul></li><li><p><strong>隐式等待</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">driver.implicitly_wait(<span class="number">10</span>)</span><br></pre></td></tr></table></figure><ul><li>设置隐式等待时间为 10 秒，确保在查找元素时，如果元素未立即出现，WebDriver 会等待最多 10 秒。</li></ul></li><li><p><strong>查找作品链接</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">works = driver.find_elements(By.CSS_SELECTOR, <span class="string">&quot;a[href*=&#x27;/artworks/&#x27;]&quot;</span>)</span><br><span class="line">work_links = [work.get_attribute(<span class="string">&#x27;href&#x27;</span>) <span class="keyword">for</span> work <span class="keyword">in</span> works]</span><br></pre></td></tr></table></figure><ul><li>使用 CSS 选择器查找所有包含 <code>/artworks/</code> 的链接，表示该用户的作品。</li><li>将找到的链接存储在 <code>work_links</code> 列表中。</li></ul></li><li><p><strong>创建用户目录</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">os.makedirs(uid, exist_ok=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><ul><li>创建一个以 UID 命名的目录，用于存储下载的作品。如果目录已存在，则不会引发错误。</li></ul></li><li><p><strong>设置请求限制</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">max_requests = <span class="number">100</span></span><br><span class="line">request_count = <span class="number">0</span></span><br></pre></td></tr></table></figure><ul><li>设置最大请求次数为 100 次，防止过于频繁的请求导致被封禁。</li></ul></li><li><p><strong>循环下载作品</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> link <span class="keyword">in</span> work_links:</span><br></pre></td></tr></table></figure><ul><li>遍历每个作品链接，进行下载。</li></ul></li><li><p><strong>请求次数检查</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> request_count &gt;= max_requests:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;达到最大请求次数，暂停一段时间...&quot;</span>)</span><br><span class="line">    time.sleep(<span class="number">3600</span>)</span><br><span class="line">    request_count = <span class="number">0</span></span><br></pre></td></tr></table></figure><ul><li>如果请求次数达到最大值，暂停 1 小时，然后重置请求计数。</li></ul></li><li><p><strong>下载作品</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    driver.get(link)</span><br><span class="line">    time.sleep(random.uniform(<span class="number">2</span>, <span class="number">5</span>))</span><br><span class="line"></span><br><span class="line">    img_element = driver.find_element(By.CSS_SELECTOR, <span class="string">&quot;img[src*=&#x27;img-master&#x27;]&quot;</span>)</span><br><span class="line">    img_url = img_element.get_attribute(<span class="string">&#x27;src&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    img_data = requests.get(img_url).content</span><br><span class="line">    img_name = os.path.join(uid, img_url.split(<span class="string">&#x27;/&#x27;</span>)[-<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(img_name, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> handler:</span><br><span class="line">        handler.write(img_data)</span><br><span class="line"></span><br><span class="line">    request_count += <span class="number">1</span></span><br></pre></td></tr></table></figure><ul><li>使用 <code>try</code> 块来处理可能出现的异常。</li><li>打开作品链接，随机等待 2 到 5 秒，以模拟人类行为，避免被检测为机器人。</li><li>查找作品的图片元素，获取其 URL。</li><li>使用 <code>requests</code> 库下载图片数据。</li><li>将图片保存到之前创建的目录中，文件名为图片 URL 的最后一部分。</li><li>增加请求计数。</li></ul></li><li><p><strong>异常处理</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;请求失败: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">    time.sleep(<span class="number">10</span>)</span><br></pre></td></tr></table></figure><ul><li>如果在下载过程中发生任何异常，打印错误信息并等待 10 秒后继续。</li></ul></li><li><p><strong>关闭 WebDriver</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">driver.quit()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;所有作品已下载。&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li>下载完成后，关闭 WebDriver，释放资源。</li><li>打印下载完成的消息。</li></ul></li></ol><p><strong>这两个函数的主要功能是：</strong></p><ul><li><code>jump_to_author</code>：根据用户输入的 UID 跳转到该用户的 Pixiv 页面。</li><li><code>download_all_works</code>：下载该用户的所有作品，并将其保存到本地目录中。</li></ul><p>通过使用 Selenium 自动化浏览器操作和 Requests 下载图片，这个脚本实现了对 Pixiv 用户作品的快速访问和下载。</p><h3 id="6、Tkinter-界面代码"><a href="#6、Tkinter-界面代码" class="headerlink" title="6、Tkinter 界面代码"></a>6、Tkinter 界面代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">window = Tk()</span><br><span class="line">window.title(<span class="string">&quot;Pixiv作者查询&quot;</span>)</span><br><span class="line">window.geometry(<span class="string">&quot;400x400&quot;</span>)</span><br><span class="line">window.configure(bg=<span class="string">&quot;#f0f0f0&quot;</span>)</span><br></pre></td></tr></table></figure><ol><li><strong>创建主窗口</strong>：<ul><li><code>window = Tk()</code>：初始化 Tkinter 主窗口。</li><li><code>window.title(&quot;Pixiv作者查询&quot;)</code>：设置窗口标题为 “Pixiv作者查询”。</li><li><code>window.geometry(&quot;400x400&quot;)</code>：设置窗口大小为 400x400 像素。</li><li><code>window.configure(bg=&quot;#f0f0f0&quot;)</code>：设置窗口背景颜色为浅灰色。</li></ul></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置字体</span></span><br><span class="line">title_font = font.Font(family=<span class="string">&quot;Helvetica&quot;</span>, size=<span class="number">16</span>, weight=<span class="string">&quot;bold&quot;</span>)</span><br><span class="line">label_font = font.Font(family=<span class="string">&quot;Helvetica&quot;</span>, size=<span class="number">12</span>)</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>设置字体</strong>：<ul><li>使用 <code>font.Font</code> 创建字体对象，定义标题和标签的字体样式。</li></ul></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建一个Frame用于组织控件</span></span><br><span class="line">frame = Frame(window, bg=<span class="string">&quot;#f0f0f0&quot;</span>)</span><br><span class="line">frame.pack(pady=<span class="number">20</span>)</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>创建 Frame</strong>：<ul><li><code>frame = Frame(window, bg=&quot;#f0f0f0&quot;)</code>：创建一个 Frame 组件，用于组织其他控件。</li><li><code>frame.pack(pady=20)</code>：将 Frame 添加到主窗口，并设置上下边距为 20 像素。</li></ul></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建标签和输入框</span></span><br><span class="line">uid_label = Label(frame, text=<span class="string">&quot;请输入UID：&quot;</span>, bg=<span class="string">&quot;#f0f0f0&quot;</span>, font=label_font)</span><br><span class="line">uid_label.pack(pady=<span class="number">5</span>)</span><br><span class="line">uid_entry = Entry(frame, width=<span class="number">30</span>, font=label_font)</span><br><span class="line">uid_entry.pack(pady=<span class="number">5</span>)</span><br></pre></td></tr></table></figure><ol start="4"><li><strong>创建标签和输入框</strong>：<ul><li><code>uid_label</code>：创建一个标签，提示用户输入 UID。</li><li><code>uid_entry</code>：创建一个输入框，用户可以在其中输入 UID。</li><li>使用 <code>pack()</code> 方法将标签和输入框添加到 Frame 中，并设置上下边距。</li></ul></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建按钮</span></span><br><span class="line">jump_button = Button(frame, text=<span class="string">&quot;跳转到作者界面&quot;</span>, command=jump_to_author, bg=<span class="string">&quot;#4CAF50&quot;</span>, fg=<span class="string">&quot;white&quot;</span>, font=label_font)</span><br><span class="line">jump_button.pack(pady=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">download_button = Button(frame, text=<span class="string">&quot;下载作者所有作品&quot;</span>, command=download_all_works, bg=<span class="string">&quot;#2196F3&quot;</span>, fg=<span class="string">&quot;white&quot;</span>, font=label_font)</span><br><span class="line">download_button.pack(pady=<span class="number">10</span>)</span><br></pre></td></tr></table></figure><ol start="5"><li><strong>创建按钮</strong>：<ul><li><code>jump_button</code>：创建一个按钮，点击后调用 <code>jump_to_author</code> 函数，背景色为绿色。</li><li><code>download_button</code>：创建一个按钮，点击后调用 <code>download_all_works</code> 函数，背景色为蓝色。</li><li>使用 <code>pack()</code> 方法将按钮添加到 Frame 中，并设置上下边距。</li></ul></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加提示语到窗口底部</span></span><br><span class="line">info_frame = Frame(window, bg=<span class="string">&quot;#f0f0f0&quot;</span>)</span><br><span class="line">info_frame.pack(side=BOTTOM, pady=<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">info_label = Label(info_frame, text=<span class="string">&quot;在运行后请等待片刻，请勿关闭脚本&quot;</span>, bg=<span class="string">&quot;#f0f0f0&quot;</span>, font=label_font)</span><br><span class="line">info_label.pack(pady=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">info_label2 = Label(info_frame, text=<span class="string">&quot;请保证您的网络可以正常访问pixiv&quot;</span>, bg=<span class="string">&quot;#f0f0f0&quot;</span>, font=label_font)</span><br><span class="line">info_label2.pack(pady=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">info_label3 = Label(info_frame, text=<span class="string">&quot;仅供学习交流使用，禁止用于违法用途&quot;</span>, bg=<span class="string">&quot;#f0f0f0&quot;</span>, font=label_font)</span><br><span class="line">info_label3.pack(pady=<span class="number">2</span>)</span><br></pre></td></tr></table></figure><ol start="6"><li><strong>添加提示信息</strong>：<ul><li>创建一个新的 Frame <code>info_frame</code>，用于放置提示信息。</li><li>创建多个标签 <code>info_label</code>、<code>info_label2</code> 和 <code>info_label3</code>，分别提供运行提示、网络要求和使用声明。</li><li>使用 <code>pack()</code> 方法将这些标签添加到 <code>info_frame</code> 中，并设置上下边距。</li></ul></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 运行Tkinter窗口的主循环</span></span><br><span class="line">window.mainloop()</span><br></pre></td></tr></table></figure><ol start="7"><li><strong>启动主循环</strong>：<ul><li><code>window.mainloop()</code>：启动 Tkinter 的事件循环，等待用户操作。</li></ul></li></ol><p>该代码创建了一个简单的 Tkinter 界面，允许用户输入 Pixiv UID，并提供两个按钮以跳转到作者界面或下载作者的所有作品。</p><h2 id="三、测试和调试"><a href="#三、测试和调试" class="headerlink" title="三、测试和调试"></a>三、测试和调试</h2><p>调试完打包运行即可</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 脚本项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>毛泽东思想概论的考试重点</title>
      <link href="/2024/11/19/%E6%AF%9B%E6%B3%BD%E4%B8%9C%E6%80%9D%E6%83%B3%E6%A6%82%E8%AE%BA%E8%80%83%E8%AF%95%E9%87%8D%E7%82%B9%E5%8C%BA%E5%9F%9F/"/>
      <url>/2024/11/19/%E6%AF%9B%E6%B3%BD%E4%B8%9C%E6%80%9D%E6%83%B3%E6%A6%82%E8%AE%BA%E8%80%83%E8%AF%95%E9%87%8D%E7%82%B9%E5%8C%BA%E5%9F%9F/</url>
      
        <content type="html"><![CDATA[<h2 id="毛泽东思想概论的考试重点"><a href="#毛泽东思想概论的考试重点" class="headerlink" title="毛泽东思想概论的考试重点"></a>毛泽东思想概论的考试重点</h2><blockquote><p><strong>这是毛泽东思想概论的考试重点部分，属于个人复习用文章</strong></p></blockquote><blockquote><p>本文章分为三个部分来复习</p><ul><li>名词解释</li><li>简答题</li><li>论述题</li></ul></blockquote><h1 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h1><p><strong>1.群众路线内容及本质<code>P29</code></strong></p><ul><li>群众路线，就是一切为了群众，一切依靠群众，从群众中来，到群众中去，把党的正确主张变为群众的自觉行动。 </li><li>群众路线本质上体现的是马克思主义关于人民群众是历史的创造者这一基本原理。</li></ul><p><strong>2.独立自主<code>P30</code></strong></p><p>独立自主，就是坚持独立思考，走自己的路，就是坚定不移地维护民族独立、捍卫国家主权，把立足点放在依靠自己力量的基础上，同时积极争取外援，开展国际经济文化交流，学习外国一切对我们有益的先进事物。</p><p><strong>3.毛泽东思想<code>P37</code></strong></p><p>毛泽东思想是马克思主义中国化时代化的第一个重大理论成果，是 马克思列宁主义在中国的运用和发展，是被实践证明了的关于中国革命和建设的正确的理论原则和经验总结，是中国共产党集体智慧的结晶，是党必须长期坚持的指导思想。</p><p><strong>4.社会主义本质<code>P152</code></strong></p><p>社会主义的本质，是解放生产力，发展生产力，消灭剥削，消除两极分化，最终达到共同富裕。</p><p><strong>5.解放思想<code>P155</code></strong></p><p>我们讲解放思想，是指在马克思主义指导下打破习惯势力和主观偏见的束缚，研究新情况，解决新问题。</p><p><strong>6.四项基本原则<code>P160</code></strong></p><p>坚持社会主义道路，坚持无产阶级专政，坚持共产党的领导，坚持马列主义毛泽东思想</p><p><strong>7.一国两制<code>P176</code></strong></p><ul><li><p>“一国两制”是邓小平在坚持四项基本原则的基础上，从中国的实际出发提出的实现祖国和平统一的伟大构想。</p></li><li><p>“一国两制”的构想是邓小平运用辩证唯物主义和历史唯物主义，坚持实事求是，把和平共处原则用于解决一个国家的统一问题，既体现了坚持祖国统一、维护国家主权的原则性，又体现了照顾历史实际和现实可能的灵活性，是对马克思主义国家学说的创造性发展。</p></li></ul><p><strong>8.公有制经济范围<code>P207</code></strong></p><p>建立社会主义市场经济体制，必须坚持和完善公有制为主体、多种所有制经济共同发展的社会主义基本经济制度。一方面，必须毫不动摇地巩固和发展公有制经济。公有制经济不仅包括国有经济和集体经济，还包括混合所有制经济中的国有成分和集体成分。</p><p><strong>9.依法治国<code>P212</code></strong></p><ul><li>依法治国，就是广大人民群众在党的领导下，依照宪法和法律规定，通过各种途径和形式管理国家事务，管理经济文化事业，管理社会事务，保证国家各项工作都依法进行，逐步实现社会主义民主的制度化、法律化，使这种制度和法律不因领导人的改变而改变，不因领导人看法和注意力的改变而改变。</li><li>依法治国，是党领导人民治理国家的基本方略，是发展社会主义市场经济的客观需要，是社会文明进步的重要标志，是国家长治久安的重要保障。</li></ul><p><strong>10.五个统筹<code>P238</code></strong></p><ul><li>统筹城乡发展</li><li>统筹区域发展</li><li>统筹经济社会发展</li><li>统筹人与自然和谐发展</li><li>统筹国内发展和对外开放</li></ul><h1 id="简答题"><a href="#简答题" class="headerlink" title="简答题"></a>简答题</h1><p><strong>1.马克思主义中国化时代化的内涵<code>P4</code></strong></p><p>马克思主义中国化时代化，就是立足中国国情和时代特点，坚持把马克思主义基本原理同中国具体实际相结合、同中华优秀传统文化相结合，深入研究和解决中国革命、建设、改革不同历史时期的实际问题，真正搞懂面临的时代课题，不断吸收新的时代内容，科学回答时代提出的重 大理论和实践课题，创造新的理论成果。</p><p><strong>2.毛泽东思想的主要内容<code>P20-25</code></strong></p><p>新民主主义革命理论, 社会主义革命和社会主义建设理论, 革命军队建设和军事战略的理论, 政策和策略的理论，思想政治工作和文化工作的理论, 党的建设理论。</p><p><strong>3.第二次历史决议是在哪次会议上提出，报告全称，灵魂概要<code>P26</code></strong></p><p>1981年党的十一届六中全会通过的《中国共产党中央委员会关于建国以来党的若干历史问题的决议》指出：“毛泽东思想的活的灵魂，是贯串于上述各个组成部分的立场、观点和方法，它们有三个基本方面，即实事求是，群众路线，独立自主。“</p><p><strong>4.新民主主义革命的动力<code>P47</code></strong></p><ul><li>新民主主义革命的动力包括无产阶级、农民阶级、城市小资产阶级和民族资产阶级。</li><li>无产阶级是中国革命最基本的动力。</li><li>农民是中国革命的主力军。</li><li>城市小资产阶级是无产阶级的可靠同盟者。</li><li>民族资产阶级也是中国革命的动力之一。</li></ul><p><strong>5.科学发展观的科学内涵<code>P228-237</code></strong></p><ul><li>推动经济社会发展是科学发展观的第一要义</li><li>以人为本是科学发展观的核心立场</li><li>全面协调可持续是科学发展观的基本要求</li><li>统筹兼顾是科学发展观的根本方法</li></ul><h1 id="材料分析"><a href="#材料分析" class="headerlink" title="材料分析"></a>材料分析</h1><p><strong>1.毛泽东关于社会主义社会两类不同性质的矛盾表述<code>P99</code></strong></p><ul><li>关于社会主义社会两类不同性质的矛盾。毛泽东强调：在我们面前有两类社会矛盾，这就是敌我矛盾和人民内部矛盾，这是两类性质完全不同的矛盾。</li><li>关于正确处理两类不同性质社会矛盾的基本方法。毛泽东指出：敌我之间和人民内部这两类矛盾的性质不同，解决的方法也不同。简单地说起来，前者是分清敌我的问题，后者是分清是非的问题。</li></ul><p><strong>2.中国共产党百年奋斗的历史经验<code>P128</code></strong></p><p>坚持党的领导，坚持人民至上，坚持理论创新，坚持独立自主，坚持中国道路，坚持胸怀天下，坚持开拓创新，坚持敢于斗争，坚持统一战线，坚持自我革命</p><p><strong>3.建设中国特色社会主义的十条基本经验<code>P142</code></strong></p><ul><li>坚持以邓小平理论为指导，不断推进理论创新 </li><li>坚持以经济建设为中心，用发展的办法解决前进中的问题</li><li>坚持改革开放，不断完善社会主义市场经济体制 </li><li>坚持四项基本原则，发展社会主义民主政治 </li><li>坚持物质文明和精神文明两手抓，实行依法治国和以德治国相结合 </li><li>坚持稳定压倒一切的方针，正确处理改革发展稳定的关系 </li><li>坚持党对军队的绝对领导，走中国特色的精兵之路 </li><li>坚持团结一切可以团结的力遂，不断增强中华民族的凝聚力 </li><li>坚持独立自主的和平外交政策，维护世界和平与促进共同发展 </li><li>坚持加强和改善党的领导，全面推进党的建设新的伟大工程</li></ul><p><strong>4.谈谈党的思想路线重新确立<code>P154-155</code></strong></p><ul><li>坚持解放思想、实事求是，有力推动和保证了拨乱反正的进行。</li><li>坚持解放思想、实事求是，破除了僵化的社会主义模式观念，坚持走自己的路。</li><li>坚持解放思想、实事求是，一切从社会主义初级阶段的实际出发。</li><li>坚持解放思想、实事求是，坚持以“三个有利于”作为检验一切工作是非得失的根本标准，破除了在改革开放进程中离开发展生产力抽象谈论姓“社”姓“资”的思维定势，把我国的改革开放和现代化建设推进到一个新的阶段。</li></ul><p><strong>5.为什么改革是第二次革命<code>P167</code></strong></p><p>改革是一场深刻的社会变革，是中国的第二次革命，是实现中国现代化的必由之路，是社会主义制度的自我完善和发展。邓小平指出：“改革的性质同过去的革命一样，也是为了 扫除发展社会生产力的障碍，使中国摆脱贫穷落后的状态。从这个意义上说，改革也可以叫革命性的变革。”改革不是原有经济体制的细枝末节的修补，它的实质和目标是要从根本上改变束缚我国生产力发展的经济体制，建立充满生机和活力的社会主义新经济体制，同时相应地改革政治体 制和其他方面的体制，以实现中国的社会主义现代化。</p><p><strong>6. 邓小平的社会主义市场经济理论具有丰富的内涵<code>P171</code></strong></p><ul><li>一是计划经济和市场经济不是划分社会制度的标志，计划经济不等于社会主义，市场经济也不等于资本主义；</li><li>二是计划和市场都是经济手段，对经济活动的调节各有优劣，社会主义实行市场经济是要把两者优势结合起来；三是市场经济作 为资源配置手段本身不具有制度属性，可以和不同的社会制度结合，从而表现出不同的性质。坚持社会主义制度与市场经济的结合，是社会主义市场经济的特色所在、优势所在。</li></ul><p><strong>7.怎样贯彻三个代表重要思想<code>P201</code></strong></p><p>贯彻“三个代表”重要思想，关键在坚持与时俱进，核心在坚持党的先进性，本质在坚持执政为民。全党同志要牢牢把握这个根本要求，不断增强贯彻”三个代表”重要思想的自觉性和坚定性。</p><h1 id="论述题"><a href="#论述题" class="headerlink" title="论述题"></a>论述题</h1><p><strong>1.以人为本是科学发展观的核心立场的理论要点<code>P232</code></strong></p><ul><li>以人为本，坚持了历史唯物主义的基本立场和基本观点，坚持把人民的利益放在首位，体现了人民当家作主的历史地位，体现了我们党立党为公、执政为民的执政理念。<blockquote><p>人民群众是历史的创造者，是推动社会发展的决定性力量；人民群众是生产力中最活跃、最革命的因素，创造了社会的物质财富和精神财富。 胡锦涛指出：相信谁、依靠谁、为了谁，是否始终站在最广大人民的立场上，是区分唯物史观和唯心史观的分水岭，也是判断马克思主义政党的试金石。</p></blockquote></li><li>坚持以人为本，就要充分发挥人民群众的主人翁作 用，营造充分发挥人民群众聪明才智的社会环境，不断增强全社会的创造 活力，形成全体人民团结奋斗的强大力量。</li><li>坚持以人为本，就要坚持立党为公、执政为民，始终把最广大人民的根本利益作为我们一切工作的出发点和落脚点，真正做到权为民所用、情为民所系、利为民所谋。</li><li>坚持以人为本，就要坚持发展为了人民，始终把最广大人民的根本利益放在第一位。</li><li>坚持以人为本，就要坚持发展依靠人民，从人民群众的伟大创造中汲取智慧和力量。</li><li>坚持以人为本，就要坚持发展成果由人民共享，着力提高人民物质文化生活水平。</li><li>坚持以人为本，最终是为了实现人的全面发展。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 杂项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/11/07/hello-world/"/>
      <url>/2024/11/07/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>使用hexo+github完成个博客搭建部署（一）</title>
      <link href="/2024/09/26/%E4%BD%BF%E7%94%A8hexo-github%E5%AE%8C%E6%88%90%E4%B8%AA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E9%83%A8%E7%BD%B2%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2024/09/26/%E4%BD%BF%E7%94%A8hexo-github%E5%AE%8C%E6%88%90%E4%B8%AA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E9%83%A8%E7%BD%B2%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="使用hexo-github完成个人博客部署搭建（一）"><a href="#使用hexo-github完成个人博客部署搭建（一）" class="headerlink" title="使用hexo+github完成个人博客部署搭建（一）"></a>使用hexo+github完成个人博客部署搭建（一）</h1><blockquote><p>本篇文章文章参考了Fomalhaut大佬的<a href="https://www.fomal.cc/posts/e593433d.html">Hexo博客搭建基础教程(一)</a></p></blockquote><p>本人只是个小白，这篇文章是个简单的过程描述文章，也是个测试文章</p><h2 id="1-环境与工具准备"><a href="#1-环境与工具准备" class="headerlink" title="1 环境与工具准备"></a>1 环境与工具准备</h2><ul><li>操作系统：Windows10</li><li>Node</li><li>Git</li><li>Hexo</li><li>文本编辑器(强烈推荐VSCODE)</li><li>GitHub 帐号</li><li>一个域名（我都还没有搞域名）</li><li>云服务器（一定选稳定的，可以备份的）</li></ul><p><em>我们需要一些辅助的工具来完成部署，但是你使用终端也可以完成部署的啦</em></p><h2 id="2-Node的安装"><a href="#2-Node的安装" class="headerlink" title="2.Node的安装"></a>2.Node的安装</h2><p>1.打开Node官网，下载和自己系统相配的Node的安装程序就可以啦，注意版本如果你不怕折腾可以高一点，建议还是不要选太高的版本下载地址：<a href="https://nodejs.org/en/download/">https://nodejs.org/en/download/</a></p><p>2.下载后安装<br>安装的位置可以保持到c盘，你也可以部署到其他位置，但是可能有些奇怪的问题具体教程百度(不过坑比较多就是了)!</p><p>3.安装完成后，检查是否安装成功。在键盘按下<strong>win + R</strong>键，输入<strong>CMD</strong>，然后回车，打开CMD窗口，执行<strong>node -v</strong>命令，看到版本信息，则说明安装成功。</p><p>4.修改npm源。（如果你拥有VPN或者网络超级好你可以试试直接运行命令）</p><p>npm下载各种模块，默认是从国处服务器下载，速度较慢，建议配置成淘宝镜像。打开CMD窗口，运行如下命令:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config set registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><h2 id="3-安装hexo"><a href="#3-安装hexo" class="headerlink" title="3.安装hexo"></a>3.安装hexo</h2><p>1.在<strong>Git BASH</strong>输入如下命令安装,使用终端也行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>2.安装完后输入hexo -v验证是否安装成功。（就在当前指令窗口运行）</p><h2 id="4-GitHub注册和创建仓库"><a href="#4-GitHub注册和创建仓库" class="headerlink" title="4.GitHub注册和创建仓库"></a>4.GitHub注册和创建仓库</h2><p>会想到用GitHub部署的人，注册之类的活感觉不用再说了，网上的视频教程一大堆，一般卡住人的是网络问题，整个vpn或者加速器就行</p><p><em>这里我直接讲仓库创建</em></p><p>1.注册完成后，点击右上角的+按钮，选择<code>New repository</code>，创建一个<code>&lt;用户名&gt;.github.io</code>的仓库。</p><ul><li><strong>一定要用自己用户名，要不以后404进不去页</strong></li><li>Description：为描述仓库（选填）</li><li>勾选 Initialize this repository with a README 初始化一个 README.md 文件</li><li>点击 Creat repository 进行创建</li></ul><h2 id="5-连接到GitHub"><a href="#5-连接到GitHub" class="headerlink" title="5.连接到GitHub"></a>5.连接到GitHub</h2><p>1.执行以下命令生成ssh公钥，此公钥用于你的计算机连接Github</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;你的邮箱&quot;</span><br></pre></td></tr></table></figure><p>之后打开C盘下用户文件夹下的.ssh的文件夹，会看到 id_rsa.pub</p><p>使用文本编辑器打开（记事本，vscode,等等）<br>把里面的玩意全部都复制下来（别剪切！！）</p><p>2.将 SSH KEY 配置到 GitHub</p><p>进入github，点击右上角头像 选择settings，进入设置页后选择 SSH and GPG keys，名字随便起一个，公钥填到Key那一栏。</p><p>3.测试连接，回到本地打开终端，输入以下指令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>出现连接到账户的信息，说明已经完成大半，至此起码完成了环境准备工作。</p><h2 id="6-初始化-Hexo-项目"><a href="#6-初始化-Hexo-项目" class="headerlink" title="6.初始化 Hexo 项目"></a>6.初始化 Hexo 项目</h2><p>1.在目标路径（我这里选的路径为【C:&#x2F;Hexo-bok】）打开cmd命令窗口，执行<code>hexo init</code>初始化项目。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init hexo-bok(项目名)</span><br></pre></td></tr></table></figure><p>也可以自行创建一个文件夹后打开控制台输入<code>hexo init</code></p><p>2.进入项目文件夹，输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i</span><br></pre></td></tr></table></figure><p>完成依赖安装</p><p><strong>注意保持全程网络环境稳定</strong></p><p>初始化项目后，hexo-bok有如下结构：</p><ul><li>【node_modules】：依赖包</li><li>【scaffolds】：生成文章的一些模板</li><li>【source】：用来存放你的文章</li><li>【themes】：主题</li><li>【.npmignore】：发布时忽略的文件（可忽略）</li><li>【_config.landscape.yml】：主题的配置文件</li><li>【config.yml】：博客的配置文件</li><li>【package.json】：项目名称、描述、版本、运行和开发等信息</li></ul><p>3.输入<code>hexo server</code>或者<code>hexo s </code>启动项目</p><p>4.打开浏览器，输入地址：<a href="http://localhost:4000/">http://localhost:4000/</a> ，看到一个网页跳出，说明你的博客已经构建成功了。</p><h2 id="7-将静态博客挂载到-GitHub-Pages"><a href="#7-将静态博客挂载到-GitHub-Pages" class="headerlink" title="7.将静态博客挂载到 GitHub Pages"></a>7.将静态博客挂载到 GitHub Pages</h2><ol><li>安装 hexo-deployer-git</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><ol start="2"><li>修改 _config.yml 文件</li></ol><p>在blog-demo目录下的_config.yml，就是整个Hexo框架的配置文件了。可以在里面修改大部分的配置。详细可参考官方的<a href="https://hexo.io/zh-cn/docs/configuration">配置描述</a>。</p><p>主要修改最后一行的配置，将repository修改为你自己的github项目地址即可，还有分支要改为main代表主分支（注意缩进）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: git@github.com:Fomalhaut-Blog/Fomalhaut-Blog.github.io.git</span><br><span class="line">  branch: main</span><br></pre></td></tr></table></figure><ol start="3"><li>修改好配置后，运行如下命令，将代码部署到 GitHub<br>输入三次<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean; hexo generate; hexo deploy  // VSCODE终端</span><br></pre></td></tr></table></figure>可以简化输入为<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo c; hexo g; hexo d</span><br></pre></td></tr></table></figure></li></ol><ul><li>hexo clean：删除之前生成的文件，若未生成过静态文件，可忽略此命令。</li><li>hexo generate：生成静态文章，可以用hexo g缩写</li><li>hexo deploy：部署文章，可以用hexo d缩写<blockquote><p>注意：deploy时可能要你输入 username 和 password。正常键入github信息即可</p></blockquote></li></ul><p>如果出现<code>Deploy done</code>，则说明部署成功了。</p><p>稍等两分钟，打开浏览器访问：<strong>https:&#x2F;&#x2F;&lt;你的github用户名&gt;.github.io</strong> ，这时候我们就可以看到博客内容了。</p>]]></content>
      
      
      <categories>
          
          <category> 杂项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实验小记 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
